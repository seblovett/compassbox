
compassbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006de4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08006f78  08006f78  00016f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080072c8  080072c8  000172c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000570  20000000  080072d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  20000570  08007840  00020570  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000074c  08007840  0002074c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY
 10 .debug_line   00006841  00000000  00000000  000205a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00011bd2  00000000  00000000  00026de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000027d7  00000000  00000000  000389b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b90  00000000  00000000  0003b190  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f10  00000000  00000000  0003bd20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000a1ef  00000000  00000000  0003cc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003ee9  00000000  00000000  00046e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0004ad08  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003170  00000000  00000000  0004ad88  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  0004def8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001c7  00000000  00000000  0004df7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000570 	.word	0x20000570
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f5c 	.word	0x08006f5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000574 	.word	0x20000574
 80001cc:	08006f5c 	.word	0x08006f5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b97e 	b.w	8000ef4 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460e      	mov	r6, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9d08      	ldr	r5, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d150      	bne.n	8000cc2 <__udivmoddi4+0xb2>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96c      	bls.n	8000d00 <__udivmoddi4+0xf0>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0420 	rsb	r4, lr, #32
 8000c34:	fa20 f404 	lsr.w	r4, r0, r4
 8000c38:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c3c:	ea44 0c06 	orr.w	ip, r4, r6
 8000c40:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c4c:	0c22      	lsrs	r2, r4, #16
 8000c4e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c52:	fa1f f887 	uxth.w	r8, r7
 8000c56:	fb09 c610 	mls	r6, r9, r0, ip
 8000c5a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c5e:	fb00 f308 	mul.w	r3, r0, r8
 8000c62:	42b3      	cmp	r3, r6
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x6a>
 8000c66:	19f6      	adds	r6, r6, r7
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	f080 8122 	bcs.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c70:	42b3      	cmp	r3, r6
 8000c72:	f240 811f 	bls.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443e      	add	r6, r7
 8000c7a:	1af6      	subs	r6, r6, r3
 8000c7c:	b2a2      	uxth	r2, r4
 8000c7e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c82:	fb09 6613 	mls	r6, r9, r3, r6
 8000c86:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c8a:	fb03 f808 	mul.w	r8, r3, r8
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x96>
 8000c92:	19e4      	adds	r4, r4, r7
 8000c94:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c98:	f080 810a 	bcs.w	8000eb0 <__udivmoddi4+0x2a0>
 8000c9c:	45a0      	cmp	r8, r4
 8000c9e:	f240 8107 	bls.w	8000eb0 <__udivmoddi4+0x2a0>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ebc8 0404 	rsb	r4, r8, r4
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d062      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb4:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb8:	2300      	movs	r3, #0
 8000cba:	602c      	str	r4, [r5, #0]
 8000cbc:	606b      	str	r3, [r5, #4]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0xc6>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d055      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e885 0041 	stmia.w	r5, {r0, r6}
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x1f0>
 8000ce0:	42b3      	cmp	r3, r6
 8000ce2:	d302      	bcc.n	8000cea <__udivmoddi4+0xda>
 8000ce4:	4282      	cmp	r2, r0
 8000ce6:	f200 80f8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000cea:	1a84      	subs	r4, r0, r2
 8000cec:	eb66 0603 	sbc.w	r6, r6, r3
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d040      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cf8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d00:	b912      	cbnz	r2, 8000d08 <__udivmoddi4+0xf8>
 8000d02:	2701      	movs	r7, #1
 8000d04:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d08:	fab7 fe87 	clz	lr, r7
 8000d0c:	f1be 0f00 	cmp.w	lr, #0
 8000d10:	d135      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d12:	1bf3      	subs	r3, r6, r7
 8000d14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb08 3610 	mls	r6, r8, r0, r3
 8000d28:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d2c:	fb0c f300 	mul.w	r3, ip, r0
 8000d30:	42b3      	cmp	r3, r6
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19f6      	adds	r6, r6, r7
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42b3      	cmp	r3, r6
 8000d3e:	f200 80ce 	bhi.w	8000ede <__udivmoddi4+0x2ce>
 8000d42:	4610      	mov	r0, r2
 8000d44:	1af6      	subs	r6, r6, r3
 8000d46:	b2a2      	uxth	r2, r4
 8000d48:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d4c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d50:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d54:	fb0c fc03 	mul.w	ip, ip, r3
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b5 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	ebcc 0404 	rsb	r4, ip, r4
 8000d70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d74:	e79c      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000d76:	4629      	mov	r1, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0120 	rsb	r1, lr, #32
 8000d82:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d92:	40ce      	lsrs	r6, r1
 8000d94:	ea49 0903 	orr.w	r9, r9, r3
 8000d98:	fbb6 faf8 	udiv	sl, r6, r8
 8000d9c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000da0:	fb08 661a 	mls	r6, r8, sl, r6
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000dac:	fb0a f20c 	mul.w	r2, sl, ip
 8000db0:	429a      	cmp	r2, r3
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1be>
 8000db8:	19db      	adds	r3, r3, r7
 8000dba:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000dbe:	f080 8087 	bcs.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	f240 8084 	bls.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	fa1f f989 	uxth.w	r9, r9
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000de0:	fb01 f60c 	mul.w	r6, r1, ip
 8000de4:	429e      	cmp	r6, r3
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0x1e8>
 8000de8:	19db      	adds	r3, r3, r7
 8000dea:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dee:	d26b      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df0:	429e      	cmp	r6, r3
 8000df2:	d969      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df4:	3902      	subs	r1, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dfe:	e78e      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000e00:	f1c1 0e20 	rsb	lr, r1, #32
 8000e04:	fa22 f40e 	lsr.w	r4, r2, lr
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	4323      	orrs	r3, r4
 8000e0c:	fa20 f70e 	lsr.w	r7, r0, lr
 8000e10:	fa06 f401 	lsl.w	r4, r6, r1
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	fa26 f60e 	lsr.w	r6, r6, lr
 8000e1c:	433c      	orrs	r4, r7
 8000e1e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000e22:	0c27      	lsrs	r7, r4, #16
 8000e24:	fb0c 6619 	mls	r6, ip, r9, r6
 8000e28:	fa1f f883 	uxth.w	r8, r3
 8000e2c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e30:	fb09 f708 	mul.w	r7, r9, r8
 8000e34:	42b7      	cmp	r7, r6
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x242>
 8000e40:	18f6      	adds	r6, r6, r3
 8000e42:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e46:	d241      	bcs.n	8000ecc <__udivmoddi4+0x2bc>
 8000e48:	42b7      	cmp	r7, r6
 8000e4a:	d93f      	bls.n	8000ecc <__udivmoddi4+0x2bc>
 8000e4c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e50:	441e      	add	r6, r3
 8000e52:	1bf6      	subs	r6, r6, r7
 8000e54:	b2a0      	uxth	r0, r4
 8000e56:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e5a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e5e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e62:	fb04 f808 	mul.w	r8, r4, r8
 8000e66:	45b8      	cmp	r8, r7
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x26a>
 8000e6a:	18ff      	adds	r7, r7, r3
 8000e6c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e70:	d228      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d926      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e76:	3c02      	subs	r4, #2
 8000e78:	441f      	add	r7, r3
 8000e7a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e7e:	ebc8 0707 	rsb	r7, r8, r7
 8000e82:	fba0 8902 	umull	r8, r9, r0, r2
 8000e86:	454f      	cmp	r7, r9
 8000e88:	4644      	mov	r4, r8
 8000e8a:	464e      	mov	r6, r9
 8000e8c:	d314      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	d029      	beq.n	8000ee4 <__udivmoddi4+0x2d4>
 8000e90:	b365      	cbz	r5, 8000eec <__udivmoddi4+0x2dc>
 8000e92:	ebba 0304 	subs.w	r3, sl, r4
 8000e96:	eb67 0706 	sbc.w	r7, r7, r6
 8000e9a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	40cf      	lsrs	r7, r1
 8000ea2:	ea4e 0303 	orr.w	r3, lr, r3
 8000ea6:	e885 0088 	stmia.w	r5, {r3, r7}
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	e6f8      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e6e0      	b.n	8000c7a <__udivmoddi4+0x6a>
 8000eb8:	ebb8 0402 	subs.w	r4, r8, r2
 8000ebc:	eb69 0603 	sbc.w	r6, r9, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e5      	b.n	8000e90 <__udivmoddi4+0x280>
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	e7d8      	b.n	8000e7a <__udivmoddi4+0x26a>
 8000ec8:	4611      	mov	r1, r2
 8000eca:	e795      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ecc:	4681      	mov	r9, r0
 8000ece:	e7c0      	b.n	8000e52 <__udivmoddi4+0x242>
 8000ed0:	468a      	mov	sl, r1
 8000ed2:	e77c      	b.n	8000dce <__udivmoddi4+0x1be>
 8000ed4:	3b02      	subs	r3, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e748      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e70a      	b.n	8000cf4 <__udivmoddi4+0xe4>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	443e      	add	r6, r7
 8000ee2:	e72f      	b.n	8000d44 <__udivmoddi4+0x134>
 8000ee4:	45c2      	cmp	sl, r8
 8000ee6:	d3e7      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000ee8:	463e      	mov	r6, r7
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x280>
 8000eec:	4629      	mov	r1, r5
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000efc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000efe:	e003      	b.n	8000f08 <LoopCopyDataInit>

08000f00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f06:	3104      	adds	r1, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f10:	d3f6      	bcc.n	8000f00 <CopyDataInit>
	ldr	r2, =_sbss
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f14:	e002      	b.n	8000f1c <LoopFillZerobss>

08000f16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f18:	f842 3b04 	str.w	r3, [r2], #4

08000f1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <LoopForever+0x16>)
	cmp	r2, r3
 8000f1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f20:	d3f9      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f22:	f000 f813 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f002 f9a3 	bl	8003270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f2a:	f001 fe0b 	bl	8002b44 <main>

08000f2e <LoopForever>:

LoopForever:
    b LoopForever
 8000f2e:	e7fe      	b.n	8000f2e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f30:	20004000 	.word	0x20004000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000f34:	080072d0 	.word	0x080072d0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f3c:	20000570 	.word	0x20000570
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000f40:	20000570 	.word	0x20000570
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f44:	2000074c 	.word	0x2000074c

08000f48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC1_IRQHandler>
	...

08000f4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4915      	ldr	r1, [pc, #84]	; (8000fa4 <SystemInit+0x58>)
 8000f4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000f52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <SystemInit+0x5c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f042 0201 	orr.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000f64:	6858      	ldr	r0, [r3, #4]
 8000f66:	4a11      	ldr	r2, [pc, #68]	; (8000fac <SystemInit+0x60>)
 8000f68:	4002      	ands	r2, r0
 8000f6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000f72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f76:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f7e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000f86:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8a:	f022 020f 	bic.w	r2, r2, #15
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000f90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <SystemInit+0x64>)
 8000f94:	4002      	ands	r2, r0
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fa0:	608b      	str	r3, [r1, #8]
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	f87fc00c 	.word	0xf87fc00c
 8000fb0:	ff00fccc 	.word	0xff00fccc

08000fb4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_InitTick+0x24>)
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc4:	f000 f88a 	bl	80010dc <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4621      	mov	r1, r4
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f844 	bl	800105c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	bd10      	pop	{r4, pc}
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	6813      	ldr	r3, [r2, #0]
 8000fe2:	f043 0310 	orr.w	r3, r3, #16
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f825 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff ffe0 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff4:	f002 f844 	bl	8003080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	bd08      	pop	{r3, pc}
 8000ffc:	40022000 	.word	0x40022000

08001000 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001000:	4a02      	ldr	r2, [pc, #8]	; (800100c <HAL_IncTick+0xc>)
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200005d8 	.word	0x200005d8

08001010 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001010:	4b01      	ldr	r3, [pc, #4]	; (8001018 <HAL_GetTick+0x8>)
 8001012:	6818      	ldr	r0, [r3, #0]
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200005d8 	.word	0x200005d8

0800101c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800101c:	b513      	push	{r0, r1, r4, lr}
 800101e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff fff6 	bl	8001010 <HAL_GetTick>
 8001024:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001026:	f7ff fff3 	bl	8001010 <HAL_GetTick>
 800102a:	9b01      	ldr	r3, [sp, #4]
 800102c:	1b00      	subs	r0, r0, r4
 800102e:	4298      	cmp	r0, r3
 8001030:	d3f9      	bcc.n	8001026 <HAL_Delay+0xa>
  {
  }
}
 8001032:	b002      	add	sp, #8
 8001034:	bd10      	pop	{r4, pc}
	...

08001038 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800103a:	68d3      	ldr	r3, [r2, #12]
 800103c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001040:	041b      	lsls	r3, r3, #16
 8001042:	0c1b      	lsrs	r3, r3, #16
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001048:	0200      	lsls	r0, r0, #8
 800104a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001052:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001054:	60d3      	str	r3, [r2, #12]
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_NVIC_SetPriority+0x60>)
 800105e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001066:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	2c04      	cmp	r4, #4
 800106e:	bf28      	it	cs
 8001070:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	2d06      	cmp	r5, #6

  return (
 8001074:	f04f 0501 	mov.w	r5, #1
 8001078:	fa05 f404 	lsl.w	r4, r5, r4
 800107c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001080:	bf8c      	ite	hi
 8001082:	3b03      	subhi	r3, #3
 8001084:	2300      	movls	r3, #0

  return (
 8001086:	400c      	ands	r4, r1
 8001088:	409c      	lsls	r4, r3
 800108a:	fa05 f303 	lsl.w	r3, r5, r3
 800108e:	3b01      	subs	r3, #1
 8001090:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001092:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001094:	ea42 0204 	orr.w	r2, r2, r4
 8001098:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	bfaf      	iteee	ge
 800109e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	f000 000f 	andlt.w	r0, r0, #15
 80010a6:	4b06      	ldrlt	r3, [pc, #24]	; (80010c0 <HAL_NVIC_SetPriority+0x64>)
 80010a8:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	bfa5      	ittet	ge
 80010ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80010b0:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010b8:	bd30      	pop	{r4, r5, pc}
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	e000ed14 	.word	0xe000ed14

080010c4 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010c4:	0942      	lsrs	r2, r0, #5
 80010c6:	2301      	movs	r3, #1
 80010c8:	f000 001f 	and.w	r0, r0, #31
 80010cc:	fa03 f000 	lsl.w	r0, r3, r0
 80010d0:	4b01      	ldr	r3, [pc, #4]	; (80010d8 <HAL_NVIC_EnableIRQ+0x14>)
 80010d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100

080010dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	3801      	subs	r0, #1
 80010de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010e2:	d20a      	bcs.n	80010fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e8:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	21f0      	movs	r1, #240	; 0xf0
 80010ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800110a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800110c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800110e:	bf0c      	ite	eq
 8001110:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001114:	f022 0204 	bicne.w	r2, r2, #4
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	4770      	bx	lr
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001120:	4770      	bx	lr

08001122 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001122:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001124:	f7ff fffc 	bl	8001120 <HAL_SYSTICK_Callback>
 8001128:	bd08      	pop	{r3, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001130:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001132:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001134:	f8df c170 	ldr.w	ip, [pc, #368]	; 80012a8 <HAL_GPIO_Init+0x17c>
 8001138:	4c59      	ldr	r4, [pc, #356]	; (80012a0 <HAL_GPIO_Init+0x174>)
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800113a:	9301      	str	r3, [sp, #4]
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800113c:	f04f 080f 	mov.w	r8, #15
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8001140:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001142:	9a01      	ldr	r2, [sp, #4]
 8001144:	40da      	lsrs	r2, r3
 8001146:	f000 80a7 	beq.w	8001298 <HAL_GPIO_Init+0x16c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800114a:	2201      	movs	r2, #1
 800114c:	fa02 f903 	lsl.w	r9, r2, r3

    if(iocurrent)
 8001150:	9a01      	ldr	r2, [sp, #4]
 8001152:	ea12 0509 	ands.w	r5, r2, r9
 8001156:	f000 809d 	beq.w	8001294 <HAL_GPIO_Init+0x168>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115a:	684a      	ldr	r2, [r1, #4]
 800115c:	f022 0a10 	bic.w	sl, r2, #16
 8001160:	f1ba 0f02 	cmp.w	sl, #2
 8001164:	d113      	bne.n	800118e <HAL_GPIO_Init+0x62>
 8001166:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800116a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800116e:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001172:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001176:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800117a:	fa08 f60b 	lsl.w	r6, r8, fp
 800117e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001182:	690e      	ldr	r6, [r1, #16]
 8001184:	fa06 f60b 	lsl.w	r6, r6, fp
 8001188:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 800118a:	f8ce 6020 	str.w	r6, [lr, #32]
 800118e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001192:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001196:	fa06 f60e 	lsl.w	r6, r6, lr
 800119a:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800119c:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011a0:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011a2:	fa0b fb0e 	lsl.w	fp, fp, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a6:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011aa:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ae:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 80011b2:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b4:	d811      	bhi.n	80011da <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011b8:	ea06 0a07 	and.w	sl, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80011bc:	68cf      	ldr	r7, [r1, #12]
 80011be:	fa07 f70e 	lsl.w	r7, r7, lr
 80011c2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80011c6:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ca:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011ce:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80011d2:	409f      	lsls	r7, r3
 80011d4:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80011d8:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011da:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011dc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80011de:	688f      	ldr	r7, [r1, #8]
 80011e0:	fa07 f70e 	lsl.w	r7, r7, lr
 80011e4:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80011e6:	60c6      	str	r6, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e8:	00d6      	lsls	r6, r2, #3
 80011ea:	d553      	bpl.n	8001294 <HAL_GPIO_Init+0x168>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ec:	f8dc 6018 	ldr.w	r6, [ip, #24]
 80011f0:	f046 0601 	orr.w	r6, r6, #1
 80011f4:	f8cc 6018 	str.w	r6, [ip, #24]
 80011f8:	f8dc 6018 	ldr.w	r6, [ip, #24]
 80011fc:	f006 0601 	and.w	r6, r6, #1
 8001200:	9603      	str	r6, [sp, #12]
 8001202:	9e03      	ldr	r6, [sp, #12]
 8001204:	f023 0603 	bic.w	r6, r3, #3
 8001208:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800120c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001210:	f003 0903 	and.w	r9, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8001214:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001218:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800121c:	fa08 f709 	lsl.w	r7, r8, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001220:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001224:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x11a>
 800122a:	4f1e      	ldr	r7, [pc, #120]	; (80012a4 <HAL_GPIO_Init+0x178>)
 800122c:	42b8      	cmp	r0, r7
 800122e:	d00c      	beq.n	800124a <HAL_GPIO_Init+0x11e>
 8001230:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001234:	42b8      	cmp	r0, r7
 8001236:	d00a      	beq.n	800124e <HAL_GPIO_Init+0x122>
 8001238:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800123c:	42b8      	cmp	r0, r7
 800123e:	bf14      	ite	ne
 8001240:	2705      	movne	r7, #5
 8001242:	2703      	moveq	r7, #3
 8001244:	e004      	b.n	8001250 <HAL_GPIO_Init+0x124>
 8001246:	2700      	movs	r7, #0
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x124>
 800124a:	2701      	movs	r7, #1
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x124>
 800124e:	2702      	movs	r7, #2
 8001250:	fa07 f709 	lsl.w	r7, r7, r9
 8001254:	ea47 070e 	orr.w	r7, r7, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001258:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125a:	4e11      	ldr	r6, [pc, #68]	; (80012a0 <HAL_GPIO_Init+0x174>)
 800125c:	6836      	ldr	r6, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800125e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001260:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001264:	bf0c      	ite	eq
 8001266:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001268:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800126a:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800126c:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800126e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001272:	bf0c      	ite	eq
 8001274:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001276:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001278:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127a:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001280:	bf0c      	ite	eq
 8001282:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001284:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8001286:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001288:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128a:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800128c:	bf54      	ite	pl
 800128e:	403e      	andpl	r6, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001290:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8001292:	60e6      	str	r6, [r4, #12]
      }
    }
    
    position++;
 8001294:	3301      	adds	r3, #1
 8001296:	e754      	b.n	8001142 <HAL_GPIO_Init+0x16>
  }
}
 8001298:	b005      	add	sp, #20
 800129a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800129e:	bf00      	nop
 80012a0:	40010400 	.word	0x40010400
 80012a4:	48000400 	.word	0x48000400
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ac:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80012ae:	4219      	tst	r1, r3
}
 80012b0:	bf14      	ite	ne
 80012b2:	2001      	movne	r0, #1
 80012b4:	2000      	moveq	r0, #0
 80012b6:	4770      	bx	lr

080012b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b8:	b10a      	cbz	r2, 80012be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ba:	6181      	str	r1, [r0, #24]
 80012bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012be:	6281      	str	r1, [r0, #40]	; 0x28
 80012c0:	4770      	bx	lr

080012c2 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012c2:	6803      	ldr	r3, [r0, #0]
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	0791      	lsls	r1, r2, #30
  {
     hi2c->Instance->TXDR = 0x00U;
 80012c8:	bf44      	itt	mi
 80012ca:	2200      	movmi	r2, #0
 80012cc:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012d2:	bf5e      	ittt	pl
 80012d4:	699a      	ldrpl	r2, [r3, #24]
 80012d6:	f042 0201 	orrpl.w	r2, r2, #1
 80012da:	619a      	strpl	r2, [r3, #24]
 80012dc:	4770      	bx	lr
	...

080012e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80012e0:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80012e2:	6805      	ldr	r5, [r0, #0]
 80012e4:	4c06      	ldr	r4, [pc, #24]	; (8001300 <I2C_TransferConfig+0x20>)
 80012e6:	6868      	ldr	r0, [r5, #4]
 80012e8:	4004      	ands	r4, r0
 80012ea:	9803      	ldr	r0, [sp, #12]
 80012ec:	4320      	orrs	r0, r4
 80012ee:	4303      	orrs	r3, r0
 80012f0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80012f4:	430b      	orrs	r3, r1

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80012f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80012fa:	606a      	str	r2, [r5, #4]
 80012fc:	bd30      	pop	{r4, r5, pc}
 80012fe:	bf00      	nop
 8001300:	fc009800 	.word	0xfc009800

08001304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001308:	9f06      	ldr	r7, [sp, #24]
 800130a:	4604      	mov	r4, r0
 800130c:	4688      	mov	r8, r1
 800130e:	4616      	mov	r6, r2
 8001310:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001312:	6822      	ldr	r2, [r4, #0]
 8001314:	6993      	ldr	r3, [r2, #24]
 8001316:	ea38 0303 	bics.w	r3, r8, r3
 800131a:	bf0c      	ite	eq
 800131c:	2301      	moveq	r3, #1
 800131e:	2300      	movne	r3, #0
 8001320:	42b3      	cmp	r3, r6
 8001322:	d113      	bne.n	800134c <I2C_WaitOnFlagUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001324:	1c6b      	adds	r3, r5, #1
 8001326:	d0f5      	beq.n	8001314 <I2C_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001328:	b955      	cbnz	r5, 8001340 <I2C_WaitOnFlagUntilTimeout+0x3c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 800132a:	2320      	movs	r3, #32
 800132c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001336:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800133a:	2003      	movs	r0, #3
 800133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001340:	f7ff fe66 	bl	8001010 <HAL_GetTick>
 8001344:	1bc0      	subs	r0, r0, r7
 8001346:	4285      	cmp	r5, r0
 8001348:	d2e3      	bcs.n	8001312 <I2C_WaitOnFlagUntilTimeout+0xe>
 800134a:	e7ee      	b.n	800132a <I2C_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800134c:	2000      	movs	r0, #0
}
 800134e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001354 <I2C_IsAcknowledgeFailed>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001354:	6803      	ldr	r3, [r0, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001356:	b570      	push	{r4, r5, r6, lr}
 8001358:	4604      	mov	r4, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800135a:	6998      	ldr	r0, [r3, #24]
 800135c:	f010 0010 	ands.w	r0, r0, #16
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001360:	460d      	mov	r5, r1
 8001362:	4616      	mov	r6, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001364:	d10b      	bne.n	800137e <I2C_IsAcknowledgeFailed+0x2a>
 8001366:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001368:	6999      	ldr	r1, [r3, #24]
 800136a:	068a      	lsls	r2, r1, #26
 800136c:	d413      	bmi.n	8001396 <I2C_IsAcknowledgeFailed+0x42>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800136e:	1c69      	adds	r1, r5, #1
 8001370:	d0fa      	beq.n	8001368 <I2C_IsAcknowledgeFailed+0x14>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001372:	b135      	cbz	r5, 8001382 <I2C_IsAcknowledgeFailed+0x2e>
 8001374:	f7ff fe4c 	bl	8001010 <HAL_GetTick>
 8001378:	1b80      	subs	r0, r0, r6
 800137a:	4285      	cmp	r5, r0
 800137c:	d301      	bcc.n	8001382 <I2C_IsAcknowledgeFailed+0x2e>
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	e7f2      	b.n	8001368 <I2C_IsAcknowledgeFailed+0x14>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8001382:	2320      	movs	r3, #32
 8001384:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	2300      	movs	r3, #0
 800138a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800138e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8001392:	2003      	movs	r0, #3
 8001394:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001396:	2210      	movs	r2, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001398:	2520      	movs	r5, #32
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800139a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800139c:	4620      	mov	r0, r4

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800139e:	61dd      	str	r5, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80013a0:	f7ff ff8f 	bl	80012c2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013a4:	6822      	ldr	r2, [r4, #0]
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <I2C_IsAcknowledgeFailed+0x70>)
 80013a8:	6851      	ldr	r1, [r2, #4]
 80013aa:	400b      	ands	r3, r1
 80013ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80013ae:	2304      	movs	r3, #4
 80013b0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b2:	2300      	movs	r3, #0

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 80013b4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
 80013c0:	2001      	movs	r0, #1
  }
  return HAL_OK;
}
 80013c2:	bd70      	pop	{r4, r5, r6, pc}
 80013c4:	fe00e800 	.word	0xfe00e800

080013c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	4604      	mov	r4, r0
 80013cc:	460d      	mov	r5, r1
 80013ce:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	079b      	lsls	r3, r3, #30
 80013d6:	d41c      	bmi.n	8001412 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013d8:	4632      	mov	r2, r6
 80013da:	4629      	mov	r1, r5
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff ffb9 	bl	8001354 <I2C_IsAcknowledgeFailed>
 80013e2:	b9c0      	cbnz	r0, 8001416 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80013e4:	1c6a      	adds	r2, r5, #1
 80013e6:	d0f3      	beq.n	80013d0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80013e8:	b96d      	cbnz	r5, 8001406 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80013f2:	2320      	movs	r3, #32
 80013f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001402:	2003      	movs	r0, #3
 8001404:	bd70      	pop	{r4, r5, r6, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001406:	f7ff fe03 	bl	8001010 <HAL_GetTick>
 800140a:	1b80      	subs	r0, r0, r6
 800140c:	4285      	cmp	r5, r0
 800140e:	d2df      	bcs.n	80013d0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8001410:	e7eb      	b.n	80013ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001412:	2000      	movs	r0, #0
 8001414:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 8001416:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001418:	bd70      	pop	{r4, r5, r6, pc}

0800141a <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800141a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800141c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800141e:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001424:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001426:	9300      	str	r3, [sp, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001428:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800142a:	2300      	movs	r3, #0
 800142c:	b2fa      	uxtb	r2, r7
 800142e:	f7ff ff57 	bl	80012e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001432:	4632      	mov	r2, r6
 8001434:	9908      	ldr	r1, [sp, #32]
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff ffc6 	bl	80013c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800143c:	b120      	cbz	r0, 8001448 <I2C_RequestMemoryRead+0x2e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800143e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001440:	2b04      	cmp	r3, #4
 8001442:	d10e      	bne.n	8001462 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 8001444:	2001      	movs	r0, #1
 8001446:	e019      	b.n	800147c <I2C_RequestMemoryRead+0x62>
      return HAL_TIMEOUT;
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001448:	2f01      	cmp	r7, #1
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	d10b      	bne.n	8001466 <I2C_RequestMemoryRead+0x4c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800144e:	b2ed      	uxtb	r5, r5
 8001450:	629d      	str	r5, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001452:	9b08      	ldr	r3, [sp, #32]
 8001454:	9600      	str	r6, [sp, #0]
 8001456:	2200      	movs	r2, #0
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	4620      	mov	r0, r4
 800145c:	f7ff ff52 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001460:	b160      	cbz	r0, 800147c <I2C_RequestMemoryRead+0x62>
    {
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 8001462:	2003      	movs	r0, #3
 8001464:	e00a      	b.n	800147c <I2C_RequestMemoryRead+0x62>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001466:	0a2a      	lsrs	r2, r5, #8
 8001468:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800146a:	9908      	ldr	r1, [sp, #32]
 800146c:	4632      	mov	r2, r6
 800146e:	4620      	mov	r0, r4
 8001470:	f7ff ffaa 	bl	80013c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001474:	2800      	cmp	r0, #0
 8001476:	d1e2      	bne.n	800143e <I2C_RequestMemoryRead+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	e7e8      	b.n	800144e <I2C_RequestMemoryRead+0x34>
  {
    return HAL_TIMEOUT;
  }
  
  return HAL_OK;
}
 800147c:	b003      	add	sp, #12
 800147e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	4604      	mov	r4, r0
 8001484:	460d      	mov	r5, r1
 8001486:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	069b      	lsls	r3, r3, #26
 800148e:	d41a      	bmi.n	80014c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001490:	4632      	mov	r2, r6
 8001492:	4629      	mov	r1, r5
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff ff5d 	bl	8001354 <I2C_IsAcknowledgeFailed>
 800149a:	b9b0      	cbnz	r0, 80014ca <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800149c:	b96d      	cbnz	r5, 80014ba <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800149e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80014a6:	2320      	movs	r3, #32
 80014a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80014b6:	2003      	movs	r0, #3
 80014b8:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80014ba:	f7ff fda9 	bl	8001010 <HAL_GetTick>
 80014be:	1b80      	subs	r0, r0, r6
 80014c0:	4285      	cmp	r5, r0
 80014c2:	d2e1      	bcs.n	8001488 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 80014c4:	e7eb      	b.n	800149e <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80014c6:	2000      	movs	r0, #0
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 80014ca:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 80014cc:	bd70      	pop	{r4, r5, r6, pc}

080014ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014ce:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80014d0:	4604      	mov	r4, r0
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d047      	beq.n	8001566 <HAL_I2C_Init+0x98>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80014d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014de:	b91b      	cbnz	r3, 80014e8 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014e4:	f001 fe0a 	bl	80030fc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e8:	2324      	movs	r3, #36	; 0x24
 80014ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	68e1      	ldr	r1, [r4, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014fa:	6862      	ldr	r2, [r4, #4]
 80014fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001500:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001508:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0U)
 800150a:	68a2      	ldr	r2, [r4, #8]
 800150c:	b142      	cbz	r2, 8001520 <HAL_I2C_Init+0x52>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800150e:	2901      	cmp	r1, #1
 8001510:	d103      	bne.n	800151a <HAL_I2C_Init+0x4c>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	e007      	b.n	800152a <HAL_I2C_Init+0x5c>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800151a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800151e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001520:	2902      	cmp	r1, #2
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001522:	bf04      	itt	eq
 8001524:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001528:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800152a:	685a      	ldr	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800152c:	6921      	ldr	r1, [r4, #16]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800152e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001536:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001538:	6962      	ldr	r2, [r4, #20]
 800153a:	430a      	orrs	r2, r1
 800153c:	69a1      	ldr	r1, [r4, #24]
 800153e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001542:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001544:	69e1      	ldr	r1, [r4, #28]
 8001546:	6a22      	ldr	r2, [r4, #32]
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001554:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001556:	2320      	movs	r3, #32
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001558:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800155a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800155e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001560:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001564:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8001566:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8001568:	bd10      	pop	{r4, pc}
	...

0800156c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800156c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001570:	4698      	mov	r8, r3
  uint32_t tickstart = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001572:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001576:	2b20      	cmp	r3, #32
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001578:	4604      	mov	r4, r0
 800157a:	460e      	mov	r6, r1
 800157c:	4691      	mov	r9, r2
  uint32_t tickstart = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 800157e:	f040 8086 	bne.w	800168e <HAL_I2C_Master_Transmit+0x122>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001582:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001586:	2b01      	cmp	r3, #1
 8001588:	f000 8081 	beq.w	800168e <HAL_I2C_Master_Transmit+0x122>
 800158c:	2701      	movs	r7, #1
 800158e:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001592:	f7ff fd3d 	bl	8001010 <HAL_GetTick>

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001596:	2319      	movs	r3, #25
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001598:	4605      	mov	r5, r0

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800159a:	9000      	str	r0, [sp, #0]
 800159c:	463a      	mov	r2, r7
 800159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff feae 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d14f      	bne.n	800164c <HAL_I2C_Master_Transmit+0xe0>
    {
      return HAL_TIMEOUT;
    }

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 80015ac:	2321      	movs	r3, #33	; 0x21
 80015ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_MASTER;
 80015b2:	2310      	movs	r3, #16
 80015b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015b8:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
 80015ba:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80015be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015c0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	2bff      	cmp	r3, #255	; 0xff
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 80015c8:	6360      	str	r0, [r4, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ca:	d905      	bls.n	80015d8 <HAL_I2C_Master_Transmit+0x6c>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015cc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015d2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	e00d      	b.n	80015f4 <HAL_I2C_Master_Transmit+0x88>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80015da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015de:	b292      	uxth	r2, r2
 80015e0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	e038      	b.n	8001658 <HAL_I2C_Master_Transmit+0xec>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
        {
          return HAL_TIMEOUT;
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	d930      	bls.n	8001650 <HAL_I2C_Master_Transmit+0xe4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ee:	22ff      	movs	r2, #255	; 0xff
 80015f0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015f2:	9000      	str	r0, [sp, #0]
 80015f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015f8:	4631      	mov	r1, r6
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fe70 	bl	80012e0 <I2C_TransferConfig>
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
    }

    while(hi2c->XferCount > 0U)
 8001600:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001602:	990a      	ldr	r1, [sp, #40]	; 0x28
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
    }

    while(hi2c->XferCount > 0U)
 8001604:	b29b      	uxth	r3, r3
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001606:	462a      	mov	r2, r5
 8001608:	4620      	mov	r0, r4
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
    }

    while(hi2c->XferCount > 0U)
 800160a:	2b00      	cmp	r3, #0
 800160c:	d02d      	beq.n	800166a <HAL_I2C_Master_Transmit+0xfe>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160e:	f7ff fedb 	bl	80013c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001612:	bb28      	cbnz	r0, 8001660 <HAL_I2C_Master_Transmit+0xf4>
        {
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001616:	6822      	ldr	r2, [r4, #0]
 8001618:	1c59      	adds	r1, r3, #1
 800161a:	6261      	str	r1, [r4, #36]	; 0x24
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001620:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001622:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8001624:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001626:	3a01      	subs	r2, #1
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8001628:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800162a:	b292      	uxth	r2, r2
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 800162c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800162e:	8522      	strh	r2, [r4, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8001630:	2a00      	cmp	r2, #0
 8001632:	d1e5      	bne.n	8001600 <HAL_I2C_Master_Transmit+0x94>
 8001634:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0e1      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x94>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800163c:	9500      	str	r5, [sp, #0]
 800163e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	4620      	mov	r0, r4
 8001644:	f7ff fe5e 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001648:	2800      	cmp	r0, #0
 800164a:	d0cc      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x7a>
        {
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 800164c:	2003      	movs	r0, #3
 800164e:	e01f      	b.n	8001690 <HAL_I2C_Master_Transmit+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001650:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001652:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001654:	b292      	uxth	r2, r2
 8001656:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001658:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	e7cb      	b.n	80015f8 <HAL_I2C_Master_Transmit+0x8c>
    while(hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001660:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001662:	2b04      	cmp	r3, #4
 8001664:	d1f2      	bne.n	800164c <HAL_I2C_Master_Transmit+0xe0>
        {
          return HAL_ERROR;
 8001666:	2001      	movs	r0, #1
 8001668:	e012      	b.n	8001690 <HAL_I2C_Master_Transmit+0x124>
      }
    }
  
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800166a:	f7ff ff09 	bl	8001480 <I2C_WaitOnSTOPFlagUntilTimeout>
 800166e:	2800      	cmp	r0, #0
 8001670:	d1f6      	bne.n	8001660 <HAL_I2C_Master_Transmit+0xf4>
        return HAL_TIMEOUT;
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001672:	6823      	ldr	r3, [r4, #0]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001674:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_I2C_Master_Transmit+0x12c>)
        return HAL_TIMEOUT;
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001676:	2120      	movs	r1, #32
 8001678:	61d9      	str	r1, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800167a:	685d      	ldr	r5, [r3, #4]
 800167c:	402a      	ands	r2, r5
 800167e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001680:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001684:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001688:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 800168c:	e000      	b.n	8001690 <HAL_I2C_Master_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800168e:	2002      	movs	r0, #2
  }
}
 8001690:	b003      	add	sp, #12
 8001692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001696:	bf00      	nop
 8001698:	fe00e800 	.word	0xfe00e800

0800169c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800169c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a0:	469b      	mov	fp, r3
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80016a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016a6:	b085      	sub	sp, #20
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80016a8:	2b20      	cmp	r3, #32
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016aa:	4604      	mov	r4, r0
 80016ac:	460f      	mov	r7, r1
 80016ae:	9203      	str	r2, [sp, #12]
 80016b0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80016b4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80016b8:	f040 80a5 	bne.w	8001806 <HAL_I2C_Mem_Read+0x16a>
  {
    if((pData == NULL) || (Size == 0U))
 80016bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80016be:	b90b      	cbnz	r3, 80016c4 <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;
 80016c0:	2001      	movs	r0, #1
 80016c2:	e0a1      	b.n	8001808 <HAL_I2C_Mem_Read+0x16c>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
 80016c4:	f1ba 0f00 	cmp.w	sl, #0
 80016c8:	d0fa      	beq.n	80016c0 <HAL_I2C_Mem_Read+0x24>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	f000 8099 	beq.w	8001806 <HAL_I2C_Mem_Read+0x16a>
 80016d4:	2501      	movs	r5, #1
 80016d6:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016da:	f7ff fc99 	bl	8001010 <HAL_GetTick>

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016de:	2319      	movs	r3, #25
 80016e0:	9000      	str	r0, [sp, #0]

    /* Process Locked */
    __HAL_LOCK(hi2c);

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016e2:	4606      	mov	r6, r0

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016e4:	462a      	mov	r2, r5
 80016e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff fe0a 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 80016f0:	4680      	mov	r8, r0
 80016f2:	2800      	cmp	r0, #0
 80016f4:	d177      	bne.n	80017e6 <HAL_I2C_Mem_Read+0x14a>
    {
      return HAL_TIMEOUT;
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016f6:	2322      	movs	r3, #34	; 0x22
 80016f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016fc:	2340      	movs	r3, #64	; 0x40
 80016fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      return HAL_TIMEOUT;
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001704:	6460      	str	r0, [r4, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001706:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 8001708:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
 800170a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800170e:	9601      	str	r6, [sp, #4]
 8001710:	f8cd 9000 	str.w	r9, [sp]
 8001714:	465b      	mov	r3, fp
 8001716:	9a03      	ldr	r2, [sp, #12]
 8001718:	4639      	mov	r1, r7
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff fe7d 	bl	800141a <I2C_RequestMemoryRead>
 8001720:	b118      	cbz	r0, 800172a <HAL_I2C_Mem_Read+0x8e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001722:	6c63      	ldr	r3, [r4, #68]	; 0x44
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001724:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
 8001728:	e05a      	b.n	80017e0 <HAL_I2C_Mem_Read+0x144>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800172a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800172c:	b29b      	uxth	r3, r3
 800172e:	2bff      	cmp	r3, #255	; 0xff
 8001730:	d907      	bls.n	8001742 <HAL_I2C_Mem_Read+0xa6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001732:	f44f 5310 	mov.w	r3, #9216	; 0x2400

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001736:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001738:	9300      	str	r3, [sp, #0]

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800173a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800173c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001740:	e008      	b.n	8001754 <HAL_I2C_Mem_Read+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001742:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001744:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001748:	b292      	uxth	r2, r2
 800174a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001754:	4639      	mov	r1, r7
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff fdc2 	bl	80012e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800175c:	9600      	str	r6, [sp, #0]
 800175e:	464b      	mov	r3, r9
 8001760:	2200      	movs	r2, #0
 8001762:	2104      	movs	r1, #4
 8001764:	4620      	mov	r0, r4
 8001766:	f7ff fdcd 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 800176a:	2800      	cmp	r0, #0
 800176c:	d13b      	bne.n	80017e6 <HAL_I2C_Mem_Read+0x14a>
      {
        return HAL_TIMEOUT;
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800176e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	6262      	str	r2, [r4, #36]	; 0x24
 8001774:	6822      	ldr	r2, [r4, #0]
 8001776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001778:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800177a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800177c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        return HAL_TIMEOUT;
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 800177e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001780:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8001782:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001784:	b29b      	uxth	r3, r3
        return HAL_TIMEOUT;
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8001786:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001788:	8563      	strh	r3, [r4, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800178a:	b9f2      	cbnz	r2, 80017ca <HAL_I2C_Mem_Read+0x12e>
 800178c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800178e:	b29b      	uxth	r3, r3
 8001790:	b1db      	cbz	r3, 80017ca <HAL_I2C_Mem_Read+0x12e>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001792:	9600      	str	r6, [sp, #0]
 8001794:	464b      	mov	r3, r9
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	4620      	mov	r0, r4
 800179a:	f7ff fdb3 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 800179e:	bb10      	cbnz	r0, 80017e6 <HAL_I2C_Mem_Read+0x14a>
        {
          return HAL_TIMEOUT;
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2bff      	cmp	r3, #255	; 0xff
 80017a6:	d905      	bls.n	80017b4 <HAL_I2C_Mem_Read+0x118>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017a8:	22ff      	movs	r2, #255	; 0xff
 80017aa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017ac:	9000      	str	r0, [sp, #0]
 80017ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b2:	e006      	b.n	80017c2 <HAL_I2C_Mem_Read+0x126>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017b6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017b8:	b292      	uxth	r2, r2
 80017ba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	4639      	mov	r1, r7
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff fd8b 	bl	80012e0 <I2C_TransferConfig>
        }
      }
    }while(hi2c->XferCount > 0U);
 80017ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1c4      	bne.n	800175c <HAL_I2C_Mem_Read+0xc0>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d2:	4632      	mov	r2, r6
 80017d4:	4649      	mov	r1, r9
 80017d6:	4620      	mov	r0, r4
 80017d8:	f7ff fe52 	bl	8001480 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017dc:	b128      	cbz	r0, 80017ea <HAL_I2C_Mem_Read+0x14e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	f43f af6d 	beq.w	80016c0 <HAL_I2C_Mem_Read+0x24>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 80017e6:	2003      	movs	r0, #3
 80017e8:	e00e      	b.n	8001808 <HAL_I2C_Mem_Read+0x16c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ea:	6823      	ldr	r3, [r4, #0]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ec:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_I2C_Mem_Read+0x174>)
        return HAL_TIMEOUT;
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ee:	2120      	movs	r1, #32
 80017f0:	61d9      	str	r1, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f2:	685d      	ldr	r5, [r3, #4]
 80017f4:	402a      	ands	r2, r5
 80017f6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001800:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 8001804:	e000      	b.n	8001808 <HAL_I2C_Mem_Read+0x16c>
  }
  else
  {
    return HAL_BUSY;
 8001806:	2002      	movs	r0, #2
  }
}
 8001808:	b005      	add	sp, #20
 800180a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	fe00e800 	.word	0xfe00e800

08001814 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001814:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	2a20      	cmp	r2, #32
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800181c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800181e:	d11d      	bne.n	800185c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  { 
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001820:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001824:	2b01      	cmp	r3, #1
 8001826:	d019      	beq.n	800185c <HAL_I2CEx_ConfigAnalogFilter+0x48>
    
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001828:	2324      	movs	r3, #36	; 0x24
 800182a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 800182e:	6803      	ldr	r3, [r0, #0]
 8001830:	681c      	ldr	r4, [r3, #0]
 8001832:	f024 0401 	bic.w	r4, r4, #1
 8001836:	601c      	str	r4, [r3, #0]
    
    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 8001838:	681c      	ldr	r4, [r3, #0]
 800183a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800183e:	601c      	str	r4, [r3, #0]
    
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001840:	681c      	ldr	r4, [r3, #0]
 8001842:	4321      	orrs	r1, r4
 8001844:	6019      	str	r1, [r3, #0]
    
    __HAL_I2C_ENABLE(hi2c); 
 8001846:	6819      	ldr	r1, [r3, #0]
 8001848:	f041 0101 	orr.w	r1, r1, #1
 800184c:	6019      	str	r1, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800184e:	2300      	movs	r3, #0
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
    
    __HAL_I2C_ENABLE(hi2c); 
    
    hi2c->State = HAL_I2C_STATE_READY;
 8001850:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001854:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    
    return HAL_OK; 
 8001858:	4618      	mov	r0, r3
 800185a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800185c:	2002      	movs	r0, #2
  }
}
 800185e:	bd10      	pop	{r4, pc}

08001860 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001860:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001862:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	07de      	lsls	r6, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	d403      	bmi.n	8001874 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	079c      	lsls	r4, r3, #30
 8001870:	d471      	bmi.n	8001956 <HAL_RCC_OscConfig+0xf6>
 8001872:	e0f0      	b.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001874:	4cb3      	ldr	r4, [pc, #716]	; (8001b44 <HAL_RCC_OscConfig+0x2e4>)
 8001876:	6863      	ldr	r3, [r4, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b04      	cmp	r3, #4
 800187e:	d007      	beq.n	8001890 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001880:	6863      	ldr	r3, [r4, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b08      	cmp	r3, #8
 8001888:	d116      	bne.n	80018b8 <HAL_RCC_OscConfig+0x58>
 800188a:	6863      	ldr	r3, [r4, #4]
 800188c:	03d8      	lsls	r0, r3, #15
 800188e:	d513      	bpl.n	80018b8 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001894:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	6822      	ldr	r2, [r4, #0]
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	fa22 f303 	lsr.w	r3, r2, r3
 80018aa:	07d9      	lsls	r1, r3, #31
 80018ac:	d5de      	bpl.n	800186c <HAL_RCC_OscConfig+0xc>
 80018ae:	686b      	ldr	r3, [r5, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1db      	bne.n	800186c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80018b4:	2001      	movs	r0, #1
 80018b6:	e233      	b.n	8001d20 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b8:	686b      	ldr	r3, [r5, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d007      	beq.n	80018d0 <HAL_RCC_OscConfig+0x70>
 80018c0:	6822      	ldr	r2, [r4, #0]
 80018c2:	b14b      	cbz	r3, 80018d8 <HAL_RCC_OscConfig+0x78>
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c8:	d106      	bne.n	80018d8 <HAL_RCC_OscConfig+0x78>
 80018ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018ce:	6022      	str	r2, [r4, #0]
 80018d0:	6822      	ldr	r2, [r4, #0]
 80018d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018d6:	e005      	b.n	80018e4 <HAL_RCC_OscConfig+0x84>
 80018d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018dc:	6022      	str	r2, [r4, #0]
 80018de:	6822      	ldr	r2, [r4, #0]
 80018e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018e4:	6022      	str	r2, [r4, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018e8:	f022 010f 	bic.w	r1, r2, #15
 80018ec:	68aa      	ldr	r2, [r5, #8]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	62e2      	str	r2, [r4, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f2:	b1c3      	cbz	r3, 8001926 <HAL_RCC_OscConfig+0xc6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb8c 	bl	8001010 <HAL_GetTick>
 80018f8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80018fc:	4607      	mov	r7, r0
 80018fe:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	6822      	ldr	r2, [r4, #0]
 8001904:	fa96 f3a6 	rbit	r3, r6
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	07da      	lsls	r2, r3, #31
 8001916:	d4a9      	bmi.n	800186c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fb7a 	bl	8001010 <HAL_GetTick>
 800191c:	1bc0      	subs	r0, r0, r7
 800191e:	2864      	cmp	r0, #100	; 0x64
 8001920:	d9ed      	bls.n	80018fe <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001922:	2003      	movs	r0, #3
 8001924:	e1fc      	b.n	8001d20 <HAL_RCC_OscConfig+0x4c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fb73 	bl	8001010 <HAL_GetTick>
 800192a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800192e:	4607      	mov	r7, r0
 8001930:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	fa96 f3a6 	rbit	r3, r6
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	07db      	lsls	r3, r3, #31
 8001948:	d590      	bpl.n	800186c <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194a:	f7ff fb61 	bl	8001010 <HAL_GetTick>
 800194e:	1bc0      	subs	r0, r0, r7
 8001950:	2864      	cmp	r0, #100	; 0x64
 8001952:	d9ed      	bls.n	8001930 <HAL_RCC_OscConfig+0xd0>
 8001954:	e7e5      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001956:	4c7b      	ldr	r4, [pc, #492]	; (8001b44 <HAL_RCC_OscConfig+0x2e4>)
 8001958:	6863      	ldr	r3, [r4, #4]
 800195a:	f013 0f0c 	tst.w	r3, #12
 800195e:	d007      	beq.n	8001970 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001960:	6863      	ldr	r3, [r4, #4]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b08      	cmp	r3, #8
 8001968:	d121      	bne.n	80019ae <HAL_RCC_OscConfig+0x14e>
 800196a:	6863      	ldr	r3, [r4, #4]
 800196c:	03d8      	lsls	r0, r3, #15
 800196e:	d41e      	bmi.n	80019ae <HAL_RCC_OscConfig+0x14e>
 8001970:	2302      	movs	r3, #2
 8001972:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	6822      	ldr	r2, [r4, #0]
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	07d9      	lsls	r1, r3, #31
 800198a:	d502      	bpl.n	8001992 <HAL_RCC_OscConfig+0x132>
 800198c:	692b      	ldr	r3, [r5, #16]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d190      	bne.n	80018b4 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	22f8      	movs	r2, #248	; 0xf8
 8001996:	fa92 f2a2 	rbit	r2, r2
 800199a:	6969      	ldr	r1, [r5, #20]
 800199c:	fab2 f282 	clz	r2, r2
 80019a0:	fa01 f202 	lsl.w	r2, r1, r2
 80019a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019a8:	4313      	orrs	r3, r2
 80019aa:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ac:	e053      	b.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ae:	692a      	ldr	r2, [r5, #16]
 80019b0:	2301      	movs	r3, #1
 80019b2:	b37a      	cbz	r2, 8001a14 <HAL_RCC_OscConfig+0x1b4>
 80019b4:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b8:	fab2 f282 	clz	r2, r2
 80019bc:	0092      	lsls	r2, r2, #2
 80019be:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 80019c2:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 80019c6:	2602      	movs	r6, #2
 80019c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fb21 	bl	8001010 <HAL_GetTick>
 80019ce:	4607      	mov	r7, r0
 80019d0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	485b      	ldr	r0, [pc, #364]	; (8001b44 <HAL_RCC_OscConfig+0x2e4>)
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	fa96 f3a6 	rbit	r3, r6
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	07da      	lsls	r2, r3, #31
 80019ea:	d405      	bmi.n	80019f8 <HAL_RCC_OscConfig+0x198>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fb10 	bl	8001010 <HAL_GetTick>
 80019f0:	1bc0      	subs	r0, r0, r7
 80019f2:	2802      	cmp	r0, #2
 80019f4:	d9ec      	bls.n	80019d0 <HAL_RCC_OscConfig+0x170>
 80019f6:	e794      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	6803      	ldr	r3, [r0, #0]
 80019fa:	22f8      	movs	r2, #248	; 0xf8
 80019fc:	fa92 f2a2 	rbit	r2, r2
 8001a00:	6969      	ldr	r1, [r5, #20]
 8001a02:	fab2 f282 	clz	r2, r2
 8001a06:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	6003      	str	r3, [r0, #0]
 8001a12:	e020      	b.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
 8001a14:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001a22:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001a26:	2602      	movs	r6, #2
 8001a28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff faf1 	bl	8001010 <HAL_GetTick>
 8001a2e:	4607      	mov	r7, r0
 8001a30:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	fa96 f3a6 	rbit	r3, r6
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	07db      	lsls	r3, r3, #31
 8001a48:	d505      	bpl.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fae1 	bl	8001010 <HAL_GetTick>
 8001a4e:	1bc0      	subs	r0, r0, r7
 8001a50:	2802      	cmp	r0, #2
 8001a52:	d9ed      	bls.n	8001a30 <HAL_RCC_OscConfig+0x1d0>
 8001a54:	e765      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	682b      	ldr	r3, [r5, #0]
 8001a58:	0718      	lsls	r0, r3, #28
 8001a5a:	d403      	bmi.n	8001a64 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	0759      	lsls	r1, r3, #29
 8001a60:	d447      	bmi.n	8001af2 <HAL_RCC_OscConfig+0x292>
 8001a62:	e0da      	b.n	8001c1a <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a64:	69aa      	ldr	r2, [r5, #24]
 8001a66:	4c37      	ldr	r4, [pc, #220]	; (8001b44 <HAL_RCC_OscConfig+0x2e4>)
 8001a68:	4937      	ldr	r1, [pc, #220]	; (8001b48 <HAL_RCC_OscConfig+0x2e8>)
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	b302      	cbz	r2, 8001ab0 <HAL_RCC_OscConfig+0x250>
 8001a6e:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a72:	fab2 f282 	clz	r2, r2
 8001a76:	2602      	movs	r6, #2
 8001a78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fac8 	bl	8001010 <HAL_GetTick>
 8001a80:	4607      	mov	r7, r0
 8001a82:	fa96 f3a6 	rbit	r3, r6
 8001a86:	fa96 f3a6 	rbit	r3, r6
 8001a8a:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a90:	fa96 f3a6 	rbit	r3, r6
 8001a94:	fab3 f383 	clz	r3, r3
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	07da      	lsls	r2, r3, #31
 8001aa2:	d4db      	bmi.n	8001a5c <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fab4 	bl	8001010 <HAL_GetTick>
 8001aa8:	1bc0      	subs	r0, r0, r7
 8001aaa:	2802      	cmp	r0, #2
 8001aac:	d9e9      	bls.n	8001a82 <HAL_RCC_OscConfig+0x222>
 8001aae:	e738      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
 8001ab0:	fa93 f3a3 	rbit	r3, r3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	2602      	movs	r6, #2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff faa7 	bl	8001010 <HAL_GetTick>
 8001ac2:	4607      	mov	r7, r0
 8001ac4:	fa96 f3a6 	rbit	r3, r6
 8001ac8:	fa96 f3a6 	rbit	r3, r6
 8001acc:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ad2:	fa96 f3a6 	rbit	r3, r6
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	07db      	lsls	r3, r3, #31
 8001ae4:	d5ba      	bpl.n	8001a5c <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fa93 	bl	8001010 <HAL_GetTick>
 8001aea:	1bc0      	subs	r0, r0, r7
 8001aec:	2802      	cmp	r0, #2
 8001aee:	d9e9      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x264>
 8001af0:	e717      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af2:	4c14      	ldr	r4, [pc, #80]	; (8001b44 <HAL_RCC_OscConfig+0x2e4>)
 8001af4:	69e3      	ldr	r3, [r4, #28]
 8001af6:	00de      	lsls	r6, r3, #3
 8001af8:	d40a      	bmi.n	8001b10 <HAL_RCC_OscConfig+0x2b0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	69e3      	ldr	r3, [r4, #28]
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61e3      	str	r3, [r4, #28]
 8001b02:	69e3      	ldr	r3, [r4, #28]
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b0c:	2701      	movs	r7, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x2b2>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b10:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4e0e      	ldr	r6, [pc, #56]	; (8001b4c <HAL_RCC_OscConfig+0x2ec>)
 8001b14:	6833      	ldr	r3, [r6, #0]
 8001b16:	05d8      	lsls	r0, r3, #23
 8001b18:	d503      	bpl.n	8001b22 <HAL_RCC_OscConfig+0x2c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1a:	68eb      	ldr	r3, [r5, #12]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d117      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
 8001b20:	e02d      	b.n	8001b7e <HAL_RCC_OscConfig+0x31e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	6833      	ldr	r3, [r6, #0]
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fa71 	bl	8001010 <HAL_GetTick>
 8001b2e:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	6833      	ldr	r3, [r6, #0]
 8001b32:	05d9      	lsls	r1, r3, #23
 8001b34:	d4f1      	bmi.n	8001b1a <HAL_RCC_OscConfig+0x2ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff fa6b 	bl	8001010 <HAL_GetTick>
 8001b3a:	ebc8 0000 	rsb	r0, r8, r0
 8001b3e:	2864      	cmp	r0, #100	; 0x64
 8001b40:	d9f6      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2d0>
 8001b42:	e6ee      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
 8001b44:	40021000 	.word	0x40021000
 8001b48:	42420480 	.word	0x42420480
 8001b4c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	b97b      	cbnz	r3, 8001b72 <HAL_RCC_OscConfig+0x312>
 8001b52:	6a23      	ldr	r3, [r4, #32]
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6223      	str	r3, [r4, #32]
 8001b5a:	6a23      	ldr	r3, [r4, #32]
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fa55 	bl	8001010 <HAL_GetTick>
 8001b66:	2602      	movs	r6, #2
 8001b68:	4681      	mov	r9, r0
 8001b6a:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f241 3a88 	movw	sl, #5000	; 0x1388
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b70:	e039      	b.n	8001be6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	6a23      	ldr	r3, [r4, #32]
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x326>
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6223      	str	r3, [r4, #32]
 8001b7e:	6a23      	ldr	r3, [r4, #32]
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	e005      	b.n	8001b92 <HAL_RCC_OscConfig+0x332>
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	6223      	str	r3, [r4, #32]
 8001b8c:	6a23      	ldr	r3, [r4, #32]
 8001b8e:	f023 0304 	bic.w	r3, r3, #4
 8001b92:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7ff fa3c 	bl	8001010 <HAL_GetTick>
 8001b98:	2602      	movs	r6, #2
 8001b9a:	4682      	mov	sl, r0
 8001b9c:	46b1      	mov	r9, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f241 3888 	movw	r8, #5000	; 0x1388
 8001ba2:	fa96 f3a6 	rbit	r3, r6
 8001ba6:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	b10b      	cbz	r3, 8001bb0 <HAL_RCC_OscConfig+0x350>
 8001bac:	6a22      	ldr	r2, [r4, #32]
 8001bae:	e002      	b.n	8001bb6 <HAL_RCC_OscConfig+0x356>
 8001bb0:	fa96 f3a6 	rbit	r3, r6
 8001bb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bb6:	fa99 f3a9 	rbit	r3, r9
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	07da      	lsls	r2, r3, #31
 8001bc8:	d41d      	bmi.n	8001c06 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff fa21 	bl	8001010 <HAL_GetTick>
 8001bce:	ebca 0000 	rsb	r0, sl, r0
 8001bd2:	4540      	cmp	r0, r8
 8001bd4:	d9e5      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x342>
 8001bd6:	e6a4      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fa1a 	bl	8001010 <HAL_GetTick>
 8001bdc:	ebc9 0000 	rsb	r0, r9, r0
 8001be0:	4550      	cmp	r0, sl
 8001be2:	f63f ae9e 	bhi.w	8001922 <HAL_RCC_OscConfig+0xc2>
 8001be6:	fa96 f3a6 	rbit	r3, r6
 8001bea:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bee:	b183      	cbz	r3, 8001c12 <HAL_RCC_OscConfig+0x3b2>
 8001bf0:	6a22      	ldr	r2, [r4, #32]
 8001bf2:	fa98 f3a8 	rbit	r3, r8
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	07db      	lsls	r3, r3, #31
 8001c04:	d4e8      	bmi.n	8001bd8 <HAL_RCC_OscConfig+0x378>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c06:	b147      	cbz	r7, 8001c1a <HAL_RCC_OscConfig+0x3ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c08:	69e3      	ldr	r3, [r4, #28]
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	61e3      	str	r3, [r4, #28]
 8001c10:	e003      	b.n	8001c1a <HAL_RCC_OscConfig+0x3ba>
 8001c12:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c18:	e7eb      	b.n	8001bf2 <HAL_RCC_OscConfig+0x392>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1a:	69ea      	ldr	r2, [r5, #28]
 8001c1c:	b90a      	cbnz	r2, 8001c22 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001c1e:	2000      	movs	r0, #0
 8001c20:	e07e      	b.n	8001d20 <HAL_RCC_OscConfig+0x4c0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c22:	4c41      	ldr	r4, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001c24:	6863      	ldr	r3, [r4, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	f43f ae42 	beq.w	80018b4 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c30:	2a02      	cmp	r2, #2
 8001c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c36:	d150      	bne.n	8001cda <HAL_RCC_OscConfig+0x47a>
 8001c38:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001c46:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff f9df 	bl	8001010 <HAL_GetTick>
 8001c52:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001c56:	4607      	mov	r7, r0
 8001c58:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	4932      	ldr	r1, [pc, #200]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	fa96 f3a6 	rbit	r3, r6
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	07d8      	lsls	r0, r3, #31
 8001c72:	d505      	bpl.n	8001c80 <HAL_RCC_OscConfig+0x420>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff f9cc 	bl	8001010 <HAL_GetTick>
 8001c78:	1bc0      	subs	r0, r0, r7
 8001c7a:	2802      	cmp	r0, #2
 8001c7c:	d9ec      	bls.n	8001c58 <HAL_RCC_OscConfig+0x3f8>
 8001c7e:	e650      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c80:	684b      	ldr	r3, [r1, #4]
 8001c82:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001c84:	6a2a      	ldr	r2, [r5, #32]
 8001c86:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001c8a:	4302      	orrs	r2, r0
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
 8001c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c94:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001ca2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff f9b1 	bl	8001010 <HAL_GetTick>
 8001cae:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001cb2:	4606      	mov	r6, r0
 8001cb4:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb8:	6822      	ldr	r2, [r4, #0]
 8001cba:	fa95 f3a5 	rbit	r3, r5
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cca:	07da      	lsls	r2, r3, #31
 8001ccc:	d4a7      	bmi.n	8001c1e <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff f99f 	bl	8001010 <HAL_GetTick>
 8001cd2:	1b80      	subs	r0, r0, r6
 8001cd4:	2802      	cmp	r0, #2
 8001cd6:	d9ed      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x454>
 8001cd8:	e623      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
 8001cda:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001ce8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f98e 	bl	8001010 <HAL_GetTick>
 8001cf4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001cf8:	4606      	mov	r6, r0
 8001cfa:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	6822      	ldr	r2, [r4, #0]
 8001d00:	fa95 f3a5 	rbit	r3, r5
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d10:	07db      	lsls	r3, r3, #31
 8001d12:	d584      	bpl.n	8001c1e <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff f97c 	bl	8001010 <HAL_GetTick>
 8001d18:	1b80      	subs	r0, r0, r6
 8001d1a:	2802      	cmp	r0, #2
 8001d1c:	d9ed      	bls.n	8001cfa <HAL_RCC_OscConfig+0x49a>
 8001d1e:	e600      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001d20:	b002      	add	sp, #8
 8001d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8001d2c:	4913      	ldr	r1, [pc, #76]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x50>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d2e:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8001d30:	684c      	ldr	r4, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d32:	f004 030c 	and.w	r3, r4, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d11e      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0x4c>
 8001d3a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001d3e:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d42:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x54>)
 8001d50:	5cd3      	ldrb	r3, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001d54:	210f      	movs	r1, #15
 8001d56:	fa91 f1a1 	rbit	r1, r1
 8001d5a:	fab1 f181 	clz	r1, r1
 8001d5e:	f002 020f 	and.w	r2, r2, #15
 8001d62:	40ca      	lsrs	r2, r1
 8001d64:	4907      	ldr	r1, [pc, #28]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x58>)
 8001d66:	5c88      	ldrb	r0, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d68:	03e2      	lsls	r2, r4, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8001d6a:	bf52      	itee	pl
 8001d6c:	4806      	ldrpl	r0, [pc, #24]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x5c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001d6e:	4a07      	ldrmi	r2, [pc, #28]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x60>)
 8001d70:	fbb2 f0f0 	udivmi	r0, r2, r0
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8001d74:	4358      	muls	r0, r3
 8001d76:	bd10      	pop	{r4, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d7a:	bd10      	pop	{r4, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08006fa0 	.word	0x08006fa0
 8001d84:	08006f90 	.word	0x08006f90
 8001d88:	003d0900 	.word	0x003d0900
 8001d8c:	007a1200 	.word	0x007a1200

08001d90 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d90:	4a54      	ldr	r2, [pc, #336]	; (8001ee4 <HAL_RCC_ClockConfig+0x154>)
 8001d92:	6813      	ldr	r3, [r2, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d9e:	4606      	mov	r6, r0
 8001da0:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001da2:	d30a      	bcc.n	8001dba <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da4:	6831      	ldr	r1, [r6, #0]
 8001da6:	078c      	lsls	r4, r1, #30
 8001da8:	d514      	bpl.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001daa:	484f      	ldr	r0, [pc, #316]	; (8001ee8 <HAL_RCC_ClockConfig+0x158>)
 8001dac:	6843      	ldr	r3, [r0, #4]
 8001dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db2:	68b3      	ldr	r3, [r6, #8]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	6043      	str	r3, [r0, #4]
 8001db8:	e00c      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	f023 0307 	bic.w	r3, r3, #7
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dc4:	6813      	ldr	r3, [r2, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	4299      	cmp	r1, r3
 8001dcc:	d0ea      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001dce:	2001      	movs	r0, #1
 8001dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd4:	07c8      	lsls	r0, r1, #31
 8001dd6:	d406      	bmi.n	8001de6 <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dd8:	4a42      	ldr	r2, [pc, #264]	; (8001ee4 <HAL_RCC_ClockConfig+0x154>)
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	429d      	cmp	r5, r3
 8001de2:	d34a      	bcc.n	8001e7a <HAL_RCC_ClockConfig+0xea>
 8001de4:	e053      	b.n	8001e8e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	6872      	ldr	r2, [r6, #4]
 8001de8:	4c3f      	ldr	r4, [pc, #252]	; (8001ee8 <HAL_RCC_ClockConfig+0x158>)
 8001dea:	2a01      	cmp	r2, #1
 8001dec:	d102      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x64>
 8001dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df2:	e004      	b.n	8001dfe <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df4:	2a02      	cmp	r2, #2
 8001df6:	bf0c      	ite	eq
 8001df8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001dfc:	2302      	movne	r3, #2
 8001dfe:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	6821      	ldr	r1, [r4, #0]
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa21 f303 	lsr.w	r3, r1, r3
 8001e14:	07d9      	lsls	r1, r3, #31
 8001e16:	d5da      	bpl.n	8001dce <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e18:	6863      	ldr	r3, [r4, #4]
 8001e1a:	f023 0303 	bic.w	r3, r3, #3
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e22:	f7ff f8f5 	bl	8001010 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	6873      	ldr	r3, [r6, #4]
 8001e28:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e2a:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e32:	6863      	ldr	r3, [r4, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d0cd      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7ff f8e8 	bl	8001010 <HAL_GetTick>
 8001e40:	1bc0      	subs	r0, r0, r7
 8001e42:	4540      	cmp	r0, r8
 8001e44:	d9f5      	bls.n	8001e32 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8001e46:	2003      	movs	r0, #3
 8001e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d10f      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e50:	6863      	ldr	r3, [r4, #4]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d0be      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5a:	f7ff f8d9 	bl	8001010 <HAL_GetTick>
 8001e5e:	1bc0      	subs	r0, r0, r7
 8001e60:	4540      	cmp	r0, r8
 8001e62:	d9f5      	bls.n	8001e50 <HAL_RCC_ClockConfig+0xc0>
 8001e64:	e7ef      	b.n	8001e46 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e66:	f7ff f8d3 	bl	8001010 <HAL_GetTick>
 8001e6a:	1bc0      	subs	r0, r0, r7
 8001e6c:	4540      	cmp	r0, r8
 8001e6e:	d8ea      	bhi.n	8001e46 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e70:	6863      	ldr	r3, [r4, #4]
 8001e72:	f013 0f0c 	tst.w	r3, #12
 8001e76:	d1f6      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xd6>
 8001e78:	e7ae      	b.n	8001dd8 <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	6813      	ldr	r3, [r2, #0]
 8001e7c:	f023 0307 	bic.w	r3, r3, #7
 8001e80:	432b      	orrs	r3, r5
 8001e82:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e84:	6813      	ldr	r3, [r2, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	429d      	cmp	r5, r3
 8001e8c:	d19f      	bne.n	8001dce <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8e:	6831      	ldr	r1, [r6, #0]
 8001e90:	4c15      	ldr	r4, [pc, #84]	; (8001ee8 <HAL_RCC_ClockConfig+0x158>)
 8001e92:	f011 0f04 	tst.w	r1, #4
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e98:	6863      	ldr	r3, [r4, #4]
 8001e9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e9e:	68f3      	ldr	r3, [r6, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	070b      	lsls	r3, r1, #28
 8001ea6:	d506      	bpl.n	8001eb6 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ea8:	6863      	ldr	r3, [r4, #4]
 8001eaa:	6932      	ldr	r2, [r6, #16]
 8001eac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001eb0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001eb4:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001eb6:	f7ff ff39 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001eba:	6863      	ldr	r3, [r4, #4]
 8001ebc:	22f0      	movs	r2, #240	; 0xf0
 8001ebe:	fa92 f2a2 	rbit	r2, r2
 8001ec2:	fab2 f282 	clz	r2, r2
 8001ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eca:	40d3      	lsrs	r3, r2
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_RCC_ClockConfig+0x15c>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	40d8      	lsrs	r0, r3
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_RCC_ClockConfig+0x160>)
 8001ed4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff f86c 	bl	8000fb4 <HAL_InitTick>
  
  return HAL_OK;
 8001edc:	2000      	movs	r0, #0
}
 8001ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08006f78 	.word	0x08006f78
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001ef4:	4b01      	ldr	r3, [pc, #4]	; (8001efc <HAL_RCC_GetHCLKFreq+0x8>)
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	fa92 f2a2 	rbit	r2, r2
 8001f0c:	fab2 f282 	clz	r2, r2
 8001f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f14:	40d3      	lsrs	r3, r2
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001f1c:	6810      	ldr	r0, [r2, #0]
}    
 8001f1e:	40d8      	lsrs	r0, r3
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	08006f88 	.word	0x08006f88
 8001f2c:	20000000 	.word	0x20000000

08001f30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f32:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	fa92 f2a2 	rbit	r2, r2
 8001f3c:	fab2 f282 	clz	r2, r2
 8001f40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f44:	40d3      	lsrs	r3, r2
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001f4c:	6810      	ldr	r0, [r2, #0]
} 
 8001f4e:	40d8      	lsrs	r0, r3
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08006f88 	.word	0x08006f88
 8001f5c:	20000000 	.word	0x20000000

08001f60 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f60:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f62:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f66:	03df      	lsls	r7, r3, #15
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f68:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f6a:	d579      	bpl.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x100>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6c:	4d71      	ldr	r5, [pc, #452]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f6e:	69eb      	ldr	r3, [r5, #28]
 8001f70:	00de      	lsls	r6, r3, #3
 8001f72:	d40a      	bmi.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x2a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	69eb      	ldr	r3, [r5, #28]
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	61eb      	str	r3, [r5, #28]
 8001f7c:	69eb      	ldr	r3, [r5, #28]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f86:	2701      	movs	r7, #1
 8001f88:	e000      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001f8a:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4e6a      	ldr	r6, [pc, #424]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f8e:	6833      	ldr	r3, [r6, #0]
 8001f90:	05d8      	lsls	r0, r3, #23
 8001f92:	d505      	bpl.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x40>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f94:	6a2b      	ldr	r3, [r5, #32]
 8001f96:	4867      	ldr	r0, [pc, #412]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f98:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f9c:	d112      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f9e:	e016      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x6e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa0:	6833      	ldr	r3, [r6, #0]
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f832 	bl	8001010 <HAL_GetTick>
 8001fac:	4680      	mov	r8, r0
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	6833      	ldr	r3, [r6, #0]
 8001fb0:	05d9      	lsls	r1, r3, #23
 8001fb2:	d4ef      	bmi.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x34>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb4:	f7ff f82c 	bl	8001010 <HAL_GetTick>
 8001fb8:	ebc8 0000 	rsb	r0, r8, r0
 8001fbc:	2864      	cmp	r0, #100	; 0x64
 8001fbe:	d9f6      	bls.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	e0b3      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fc4:	6862      	ldr	r2, [r4, #4]
 8001fc6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10d      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x8a>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001fce:	6a2b      	ldr	r3, [r5, #32]
 8001fd0:	4958      	ldr	r1, [pc, #352]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fd6:	6863      	ldr	r3, [r4, #4]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fdc:	2f00      	cmp	r7, #0
 8001fde:	d03f      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	69cb      	ldr	r3, [r1, #28]
 8001fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	61cb      	str	r3, [r1, #28]
 8001fe8:	e03a      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x100>
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fea:	6a01      	ldr	r1, [r0, #32]
 8001fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff0:	f421 7e40 	bic.w	lr, r1, #768	; 0x300
 8001ff4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ff8:	4e50      	ldr	r6, [pc, #320]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	f04f 0c01 	mov.w	ip, #1
 8002002:	f846 c022 	str.w	ip, [r6, r2, lsl #2]
 8002006:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	2200      	movs	r2, #0
 8002010:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002014:	07ca      	lsls	r2, r1, #31
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002016:	f8c0 e020 	str.w	lr, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800201a:	d5d8      	bpl.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe fff8 	bl	8001010 <HAL_GetTick>
 8002020:	2602      	movs	r6, #2
 8002022:	4681      	mov	r9, r0
 8002024:	46b0      	mov	r8, r6
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f241 3a88 	movw	sl, #5000	; 0x1388
 800202a:	fa96 f3a6 	rbit	r3, r6
 800202e:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	b10b      	cbz	r3, 8002038 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8002034:	6a2a      	ldr	r2, [r5, #32]
 8002036:	e002      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002038:	fa96 f3a6 	rbit	r3, r6
 800203c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800203e:	fa98 f3a8 	rbit	r3, r8
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	07db      	lsls	r3, r3, #31
 8002050:	d4bd      	bmi.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe ffdd 	bl	8001010 <HAL_GetTick>
 8002056:	ebc9 0000 	rsb	r0, r9, r0
 800205a:	4550      	cmp	r0, sl
 800205c:	d9e5      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xca>
 800205e:	e7af      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002060:	6820      	ldr	r0, [r4, #0]
 8002062:	07c5      	lsls	r5, r0, #31
 8002064:	d506      	bpl.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002066:	4933      	ldr	r1, [pc, #204]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002068:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	68a3      	ldr	r3, [r4, #8]
 8002070:	4313      	orrs	r3, r2
 8002072:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002074:	0681      	lsls	r1, r0, #26
 8002076:	d506      	bpl.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002078:	492e      	ldr	r1, [pc, #184]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800207a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800207c:	f023 0210 	bic.w	r2, r3, #16
 8002080:	68e3      	ldr	r3, [r4, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002086:	0382      	lsls	r2, r0, #14
 8002088:	d506      	bpl.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800208a:	492a      	ldr	r1, [pc, #168]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800208c:	684b      	ldr	r3, [r1, #4]
 800208e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002092:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002098:	0643      	lsls	r3, r0, #25
 800209a:	d506      	bpl.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800209c:	4925      	ldr	r1, [pc, #148]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800209e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80020a0:	f023 0220 	bic.w	r2, r3, #32
 80020a4:	6923      	ldr	r3, [r4, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020aa:	0407      	lsls	r7, r0, #16
 80020ac:	d506      	bpl.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ae:	4921      	ldr	r1, [pc, #132]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80020b2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020b6:	6963      	ldr	r3, [r4, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020bc:	0586      	lsls	r6, r0, #22
 80020be:	d506      	bpl.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020c0:	491c      	ldr	r1, [pc, #112]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020c2:	684b      	ldr	r3, [r1, #4]
 80020c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020c8:	69e3      	ldr	r3, [r4, #28]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80020ce:	0605      	lsls	r5, r0, #24
 80020d0:	d506      	bpl.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80020d2:	4918      	ldr	r1, [pc, #96]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020d4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80020d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80020da:	69a3      	ldr	r3, [r4, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020e0:	04c1      	lsls	r1, r0, #19
 80020e2:	d506      	bpl.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80020e4:	4913      	ldr	r1, [pc, #76]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80020e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ec:	6a23      	ldr	r3, [r4, #32]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80020f2:	0342      	lsls	r2, r0, #13
 80020f4:	d506      	bpl.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80020f6:	490f      	ldr	r1, [pc, #60]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80020fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80020fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002100:	4313      	orrs	r3, r2
 8002102:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002104:	0303      	lsls	r3, r0, #12
 8002106:	d506      	bpl.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002108:	490a      	ldr	r1, [pc, #40]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800210a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800210c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002112:	4313      	orrs	r3, r2
 8002114:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002116:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800211a:	d007      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800211c:	4905      	ldr	r1, [pc, #20]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800211e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002120:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002124:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002126:	4313      	orrs	r3, r2
 8002128:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800212a:	2000      	movs	r0, #0
}
 800212c:	b002      	add	sp, #8
 800212e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	42420400 	.word	0x42420400

08002140 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002140:	6803      	ldr	r3, [r0, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002152:	2000      	movs	r0, #0
 8002154:	4770      	bx	lr

08002156 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002156:	6803      	ldr	r3, [r0, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002160:	6a19      	ldr	r1, [r3, #32]
 8002162:	f241 1211 	movw	r2, #4369	; 0x1111
 8002166:	400a      	ands	r2, r1
 8002168:	b942      	cbnz	r2, 800217c <HAL_TIM_Base_Stop_IT+0x26>
 800216a:	6a19      	ldr	r1, [r3, #32]
 800216c:	f240 4244 	movw	r2, #1092	; 0x444
 8002170:	400a      	ands	r2, r1
 8002172:	b91a      	cbnz	r2, 800217c <HAL_TIM_Base_Stop_IT+0x26>
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 800217c:	2000      	movs	r0, #0
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_OC_DelayElapsedCallback>:
 8002180:	4770      	bx	lr

08002182 <HAL_TIM_IC_CaptureCallback>:
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002184:	4770      	bx	lr

08002186 <HAL_TIM_TriggerCallback>:
 8002186:	4770      	bx	lr

08002188 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002188:	6803      	ldr	r3, [r0, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800218e:	b510      	push	{r4, lr}
 8002190:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002192:	d514      	bpl.n	80021be <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	0792      	lsls	r2, r2, #30
 8002198:	d511      	bpl.n	80021be <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800219a:	f06f 0202 	mvn.w	r2, #2
 800219e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80021a0:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a2:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80021a4:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a6:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80021a8:	d002      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	f7ff ffea 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
 80021ae:	e004      	b.n	80021ba <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b0:	f7ff ffe6 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	4620      	mov	r0, r4
 80021b6:	f7ff ffe5 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	2300      	movs	r3, #0
 80021bc:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	0750      	lsls	r0, r2, #29
 80021c4:	d516      	bpl.n	80021f4 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	0751      	lsls	r1, r2, #29
 80021ca:	d513      	bpl.n	80021f4 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021cc:	f06f 0204 	mvn.w	r2, #4
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80021d2:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021d4:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80021d6:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021da:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021dc:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80021de:	d002      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021e0:	f7ff ffcf 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
 80021e4:	e004      	b.n	80021f0 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	f7ff ffcb 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff ffca 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f0:	2300      	movs	r3, #0
 80021f2:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	0712      	lsls	r2, r2, #28
 80021fa:	d515      	bpl.n	8002228 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	0710      	lsls	r0, r2, #28
 8002200:	d512      	bpl.n	8002228 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002202:	f06f 0208 	mvn.w	r2, #8
 8002206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002208:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220a:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800220c:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002210:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002212:	d002      	beq.n	800221a <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002214:	f7ff ffb5 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
 8002218:	e004      	b.n	8002224 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	f7ff ffb1 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800221e:	4620      	mov	r0, r4
 8002220:	f7ff ffb0 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002224:	2300      	movs	r3, #0
 8002226:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	06d2      	lsls	r2, r2, #27
 800222e:	d516      	bpl.n	800225e <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	06d0      	lsls	r0, r2, #27
 8002234:	d513      	bpl.n	800225e <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002236:	f06f 0210 	mvn.w	r2, #16
 800223a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800223c:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800223e:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002240:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002244:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002248:	d002      	beq.n	8002250 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800224a:	f7ff ff9a 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
 800224e:	e004      	b.n	800225a <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002250:	f7ff ff96 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	4620      	mov	r0, r4
 8002256:	f7ff ff95 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	2300      	movs	r3, #0
 800225c:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	07d1      	lsls	r1, r2, #31
 8002264:	d508      	bpl.n	8002278 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	07d2      	lsls	r2, r2, #31
 800226a:	d505      	bpl.n	8002278 <HAL_TIM_IRQHandler+0xf0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800226c:	f06f 0201 	mvn.w	r2, #1
 8002270:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002272:	4620      	mov	r0, r4
 8002274:	f000 fe58 	bl	8002f28 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	0610      	lsls	r0, r2, #24
 800227e:	d508      	bpl.n	8002292 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	0611      	lsls	r1, r2, #24
 8002284:	d505      	bpl.n	8002292 <HAL_TIM_IRQHandler+0x10a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002286:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800228a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800228c:	4620      	mov	r0, r4
 800228e:	f000 f898 	bl	80023c2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	0652      	lsls	r2, r2, #25
 8002298:	d508      	bpl.n	80022ac <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	0650      	lsls	r0, r2, #25
 800229e:	d505      	bpl.n	80022ac <HAL_TIM_IRQHandler+0x124>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7ff ff6d 	bl	8002186 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	0691      	lsls	r1, r2, #26
 80022b2:	d50a      	bpl.n	80022ca <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	0692      	lsls	r2, r2, #26
 80022b8:	d507      	bpl.n	80022ca <HAL_TIM_IRQHandler+0x142>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80022be:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 80022c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 80022c6:	f000 b87b 	b.w	80023c0 <HAL_TIMEx_CommutationCallback>
 80022ca:	bd10      	pop	{r4, pc}

080022cc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <TIM_Base_SetConfig+0x74>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80022ce:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d0:	4290      	cmp	r0, r2
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022d2:	b510      	push	{r4, lr}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d4:	d002      	beq.n	80022dc <TIM_Base_SetConfig+0x10>
 80022d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022da:	d109      	bne.n	80022f0 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80022dc:	684c      	ldr	r4, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e2:	4290      	cmp	r0, r2
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80022e4:	ea43 0304 	orr.w	r3, r3, r4
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e8:	d00d      	beq.n	8002306 <TIM_Base_SetConfig+0x3a>
 80022ea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022ee:	d00a      	beq.n	8002306 <TIM_Base_SetConfig+0x3a>
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <TIM_Base_SetConfig+0x78>)
 80022f2:	4290      	cmp	r0, r2
 80022f4:	d007      	beq.n	8002306 <TIM_Base_SetConfig+0x3a>
 80022f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022fa:	4290      	cmp	r0, r2
 80022fc:	d003      	beq.n	8002306 <TIM_Base_SetConfig+0x3a>
 80022fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002302:	4290      	cmp	r0, r2
 8002304:	d103      	bne.n	800230e <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002306:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800230c:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 800230e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002310:	688b      	ldr	r3, [r1, #8]
 8002312:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002314:	680b      	ldr	r3, [r1, #0]
 8002316:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <TIM_Base_SetConfig+0x74>)
 800231a:	4298      	cmp	r0, r3
 800231c:	d00b      	beq.n	8002336 <TIM_Base_SetConfig+0x6a>
 800231e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002322:	4298      	cmp	r0, r3
 8002324:	d007      	beq.n	8002336 <TIM_Base_SetConfig+0x6a>
 8002326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232a:	4298      	cmp	r0, r3
 800232c:	d003      	beq.n	8002336 <TIM_Base_SetConfig+0x6a>
 800232e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002332:	4298      	cmp	r0, r3
 8002334:	d101      	bne.n	800233a <TIM_Base_SetConfig+0x6e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002336:	690b      	ldr	r3, [r1, #16]
 8002338:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800233a:	2301      	movs	r3, #1
 800233c:	6143      	str	r3, [r0, #20]
 800233e:	bd10      	pop	{r4, pc}
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40014000 	.word	0x40014000

08002348 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002348:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800234a:	4604      	mov	r4, r0
 800234c:	b1a0      	cbz	r0, 8002378 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800234e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002352:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002356:	b91b      	cbnz	r3, 8002360 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002358:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800235c:	f000 fef6 	bl	800314c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002360:	2302      	movs	r3, #2
 8002362:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002366:	6820      	ldr	r0, [r4, #0]
 8002368:	1d21      	adds	r1, r4, #4
 800236a:	f7ff ffaf 	bl	80022cc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800236e:	2301      	movs	r3, #1
 8002370:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002374:	2000      	movs	r0, #0
 8002376:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002378:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 800237a:	bd10      	pop	{r4, pc}

0800237c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800237c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002380:	2b01      	cmp	r3, #1
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002382:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002384:	d018      	beq.n	80023b8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002386:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002388:	4c0c      	ldr	r4, [pc, #48]	; (80023bc <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800238a:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800238c:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800238e:	42a2      	cmp	r2, r4
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002390:	bf02      	ittt	eq
 8002392:	684c      	ldreq	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002394:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002398:	4323      	orreq	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800239a:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800239c:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023a2:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80023a4:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023a8:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023aa:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80023ac:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023ae:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 80023b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80023b8:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 80023ba:	bd30      	pop	{r4, r5, pc}
 80023bc:	40012c00 	.word	0x40012c00

080023c0 <HAL_TIMEx_CommutationCallback>:
 80023c0:	4770      	bx	lr

080023c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c2:	4770      	bx	lr

080023c4 <HAL_UART_TxCpltCallback>:
 80023c4:	4770      	bx	lr

080023c6 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023c6:	4770      	bx	lr

080023c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c8:	b538      	push	{r3, r4, r5, lr}
 80023ca:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023cc:	6805      	ldr	r5, [r0, #0]
 80023ce:	6923      	ldr	r3, [r4, #16]
 80023d0:	68a2      	ldr	r2, [r4, #8]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023d2:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023d4:	6828      	ldr	r0, [r5, #0]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	6963      	ldr	r3, [r4, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	ea43 0201 	orr.w	r2, r3, r1
 80023e0:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <UART_SetConfig+0x148>)
 80023e2:	4003      	ands	r3, r0
 80023e4:	4313      	orrs	r3, r2
 80023e6:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e8:	686b      	ldr	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023ea:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023f0:	68e3      	ldr	r3, [r4, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023f6:	68ab      	ldr	r3, [r5, #8]
 80023f8:	6a22      	ldr	r2, [r4, #32]
 80023fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80023fe:	4302      	orrs	r2, r0
 8002400:	4313      	orrs	r3, r2
 8002402:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <UART_SetConfig+0x14c>)
 8002406:	429d      	cmp	r5, r3
 8002408:	d10a      	bne.n	8002420 <UART_SetConfig+0x58>
 800240a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800240e:	4a42      	ldr	r2, [pc, #264]	; (8002518 <UART_SetConfig+0x150>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0303 	and.w	r3, r3, #3
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002416:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	d008      	beq.n	8002430 <UART_SetConfig+0x68>
 800241e:	e03f      	b.n	80024a0 <UART_SetConfig+0xd8>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002420:	4b3e      	ldr	r3, [pc, #248]	; (800251c <UART_SetConfig+0x154>)
 8002422:	429d      	cmp	r5, r3
 8002424:	d00d      	beq.n	8002442 <UART_SetConfig+0x7a>
 8002426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800242a:	429d      	cmp	r5, r3
 800242c:	d12b      	bne.n	8002486 <UART_SetConfig+0xbe>
 800242e:	e008      	b.n	8002442 <UART_SetConfig+0x7a>
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002430:	2b08      	cmp	r3, #8
 8002432:	d82b      	bhi.n	800248c <UART_SetConfig+0xc4>
 8002434:	e8df f003 	tbb	[pc, r3]
 8002438:	2a0e0b08 	.word	0x2a0e0b08
 800243c:	2a2a2a15 	.word	0x2a2a2a15
 8002440:	1e          	.byte	0x1e
 8002441:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002442:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002446:	d134      	bne.n	80024b2 <UART_SetConfig+0xea>
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002448:	f7ff fd5a 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 800244c:	e00b      	b.n	8002466 <UART_SetConfig+0x9e>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800244e:	f7ff fd6f 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 8002452:	e008      	b.n	8002466 <UART_SetConfig+0x9e>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002454:	6860      	ldr	r0, [r4, #4]
 8002456:	0842      	lsrs	r2, r0, #1
 8002458:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 800245c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002460:	e00c      	b.n	800247c <UART_SetConfig+0xb4>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002462:	f7ff fc63 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8002466:	6863      	ldr	r3, [r4, #4]
 8002468:	085a      	lsrs	r2, r3, #1
 800246a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	e005      	b.n	8002480 <UART_SetConfig+0xb8>
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002474:	6860      	ldr	r0, [r4, #4]
 8002476:	0843      	lsrs	r3, r0, #1
 8002478:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800247c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002480:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002482:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
        break;
 8002484:	e004      	b.n	8002490 <UART_SetConfig+0xc8>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002486:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800248a:	d13e      	bne.n	800250a <UART_SetConfig+0x142>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800248c:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 800248e:	2300      	movs	r3, #0
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002490:	f3c3 0142 	ubfx	r1, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002494:	6822      	ldr	r2, [r4, #0]
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002496:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 800249a:	430b      	orrs	r3, r1
 800249c:	60d3      	str	r3, [r2, #12]
 800249e:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d832      	bhi.n	800250a <UART_SetConfig+0x142>
 80024a4:	e8df f003 	tbb	[pc, r3]
 80024a8:	31120f05 	.word	0x31120f05
 80024ac:	3131311b 	.word	0x3131311b
 80024b0:	26          	.byte	0x26
 80024b1:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024b2:	f7ff fd25 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 80024b6:	6863      	ldr	r3, [r4, #4]
 80024b8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80024bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80024c0:	b280      	uxth	r0, r0
 80024c2:	60e8      	str	r0, [r5, #12]
 80024c4:	e01f      	b.n	8002506 <UART_SetConfig+0x13e>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024c6:	f7ff fd33 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 80024ca:	e00a      	b.n	80024e2 <UART_SetConfig+0x11a>
        break;
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80024cc:	6861      	ldr	r1, [r4, #4]
 80024ce:	084a      	lsrs	r2, r1, #1
 80024d0:	f502 03f4 	add.w	r3, r2, #7995392	; 0x7a0000
 80024d4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80024d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80024dc:	e010      	b.n	8002500 <UART_SetConfig+0x138>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024de:	f7ff fc25 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 80024e2:	6863      	ldr	r3, [r4, #4]
 80024e4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80024e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <UART_SetConfig+0x14c>)
 80024ee:	b280      	uxth	r0, r0
 80024f0:	60d8      	str	r0, [r3, #12]
 80024f2:	e008      	b.n	8002506 <UART_SetConfig+0x13e>
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80024f4:	6862      	ldr	r2, [r4, #4]
 80024f6:	0853      	lsrs	r3, r2, #1
 80024f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <UART_SetConfig+0x14c>)
 8002502:	b29b      	uxth	r3, r3
 8002504:	60d3      	str	r3, [r2, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002506:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
        break;
 8002508:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800250a:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800250c:	bd38      	pop	{r3, r4, r5, pc}
 800250e:	bf00      	nop
 8002510:	efff69f3 	.word	0xefff69f3
 8002514:	40013800 	.word	0x40013800
 8002518:	08006fb0 	.word	0x08006fb0
 800251c:	40004400 	.word	0x40004400

08002520 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002520:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002522:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002524:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002526:	d506      	bpl.n	8002536 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002528:	6804      	ldr	r4, [r0, #0]
 800252a:	6862      	ldr	r2, [r4, #4]
 800252c:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002530:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002532:	430a      	orrs	r2, r1
 8002534:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002536:	079c      	lsls	r4, r3, #30
 8002538:	d506      	bpl.n	8002548 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800253a:	6804      	ldr	r4, [r0, #0]
 800253c:	6862      	ldr	r2, [r4, #4]
 800253e:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002542:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002544:	430a      	orrs	r2, r1
 8002546:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002548:	0759      	lsls	r1, r3, #29
 800254a:	d506      	bpl.n	800255a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800254c:	6804      	ldr	r4, [r0, #0]
 800254e:	6862      	ldr	r2, [r4, #4]
 8002550:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002554:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002556:	430a      	orrs	r2, r1
 8002558:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800255a:	071a      	lsls	r2, r3, #28
 800255c:	d506      	bpl.n	800256c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800255e:	6804      	ldr	r4, [r0, #0]
 8002560:	6862      	ldr	r2, [r4, #4]
 8002562:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002566:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002568:	430a      	orrs	r2, r1
 800256a:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800256c:	06dc      	lsls	r4, r3, #27
 800256e:	d506      	bpl.n	800257e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002570:	6804      	ldr	r4, [r0, #0]
 8002572:	68a2      	ldr	r2, [r4, #8]
 8002574:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002578:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800257a:	430a      	orrs	r2, r1
 800257c:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800257e:	0699      	lsls	r1, r3, #26
 8002580:	d506      	bpl.n	8002590 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002582:	6804      	ldr	r4, [r0, #0]
 8002584:	68a2      	ldr	r2, [r4, #8]
 8002586:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800258a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800258c:	430a      	orrs	r2, r1
 800258e:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002590:	065a      	lsls	r2, r3, #25
 8002592:	d50f      	bpl.n	80025b4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002594:	6801      	ldr	r1, [r0, #0]
 8002596:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002598:	684a      	ldr	r2, [r1, #4]
 800259a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800259e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025a0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025a4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025a6:	d105      	bne.n	80025b4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025a8:	684a      	ldr	r2, [r1, #4]
 80025aa:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 80025ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80025b0:	4322      	orrs	r2, r4
 80025b2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	d506      	bpl.n	80025c6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025b8:	6801      	ldr	r1, [r0, #0]
 80025ba:	684b      	ldr	r3, [r1, #4]
 80025bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80025c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
 80025c6:	bd10      	pop	{r4, pc}

080025c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80025c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025cc:	4604      	mov	r4, r0
 80025ce:	460e      	mov	r6, r1
 80025d0:	4690      	mov	r8, r2
 80025d2:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7fe fd1c 	bl	8001010 <HAL_GetTick>
 80025d8:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 80025da:	f1b8 0f00 	cmp.w	r8, #0
 80025de:	d138      	bne.n	8002652 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80025e0:	6822      	ldr	r2, [r4, #0]
 80025e2:	69d3      	ldr	r3, [r2, #28]
 80025e4:	ea36 0303 	bics.w	r3, r6, r3
 80025e8:	d00e      	beq.n	8002608 <UART_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80025ea:	1c69      	adds	r1, r5, #1
 80025ec:	d0f9      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80025ee:	b17d      	cbz	r5, 8002610 <UART_WaitOnFlagUntilTimeout+0x48>
 80025f0:	f7fe fd0e 	bl	8001010 <HAL_GetTick>
 80025f4:	1bc0      	subs	r0, r0, r7
 80025f6:	4285      	cmp	r5, r0
 80025f8:	d2f2      	bcs.n	80025e0 <UART_WaitOnFlagUntilTimeout+0x18>
 80025fa:	e009      	b.n	8002610 <UART_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80025fc:	1c6b      	adds	r3, r5, #1
 80025fe:	d106      	bne.n	800260e <UART_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8002600:	69d3      	ldr	r3, [r2, #28]
 8002602:	ea36 0303 	bics.w	r3, r6, r3
 8002606:	d0f9      	beq.n	80025fc <UART_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002608:	2000      	movs	r0, #0
 800260a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800260e:	b9dd      	cbnz	r5, 8002648 <UART_WaitOnFlagUntilTimeout+0x80>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002618:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	f022 0220 	bic.w	r2, r2, #32
 8002620:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002628:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002632:	2320      	movs	r3, #32
 8002634:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 8002638:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800263c:	2300      	movs	r3, #0
 800263e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

          return HAL_TIMEOUT;
 8002642:	2003      	movs	r0, #3
 8002644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002648:	f7fe fce2 	bl	8001010 <HAL_GetTick>
 800264c:	1bc0      	subs	r0, r0, r7
 800264e:	4285      	cmp	r5, r0
 8002650:	d3de      	bcc.n	8002610 <UART_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8002652:	6822      	ldr	r2, [r4, #0]
 8002654:	e7d4      	b.n	8002600 <UART_WaitOnFlagUntilTimeout+0x38>

08002656 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002656:	b570      	push	{r4, r5, r6, lr}
 8002658:	461e      	mov	r6, r3
   uint16_t* tmp;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800265a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800265e:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002660:	4604      	mov	r4, r0
 8002662:	460d      	mov	r5, r1
   uint16_t* tmp;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002664:	d142      	bne.n	80026ec <HAL_UART_Transmit+0x96>
  {
    if((pData == NULL ) || (Size == 0))
 8002666:	2900      	cmp	r1, #0
 8002668:	d03e      	beq.n	80026e8 <HAL_UART_Transmit+0x92>
 800266a:	2a00      	cmp	r2, #0
 800266c:	d03c      	beq.n	80026e8 <HAL_UART_Transmit+0x92>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800266e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002672:	2b01      	cmp	r3, #1
 8002674:	d03a      	beq.n	80026ec <HAL_UART_Transmit+0x96>
 8002676:	2301      	movs	r3, #1
 8002678:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267c:	2300      	movs	r3, #0
 800267e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002680:	2321      	movs	r3, #33	; 0x21
 8002682:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    huart->TxXferSize = Size;
 8002686:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800268a:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    while(huart->TxXferCount > 0)
 800268e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002692:	b1e2      	cbz	r2, 80026ce <HAL_UART_Transmit+0x78>
    {
      huart->TxXferCount--;
 8002694:	3a01      	subs	r2, #1
 8002696:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800269a:	4633      	mov	r3, r6
 800269c:	2200      	movs	r2, #0
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff ff91 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 80026a6:	b108      	cbz	r0, 80026ac <HAL_UART_Transmit+0x56>
      {
        return HAL_TIMEOUT;
 80026a8:	2003      	movs	r0, #3
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ac:	68a3      	ldr	r3, [r4, #8]
 80026ae:	6822      	ldr	r2, [r4, #0]
 80026b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b4:	d107      	bne.n	80026c6 <HAL_UART_Transmit+0x70>
 80026b6:	6923      	ldr	r3, [r4, #16]
 80026b8:	b92b      	cbnz	r3, 80026c6 <HAL_UART_Transmit+0x70>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80026ba:	f835 3b02 	ldrh.w	r3, [r5], #2
 80026be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c2:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80026c4:	e7e3      	b.n	800268e <HAL_UART_Transmit+0x38>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80026c6:	782b      	ldrb	r3, [r5, #0]
 80026c8:	8513      	strh	r3, [r2, #40]	; 0x28
 80026ca:	3501      	adds	r5, #1
 80026cc:	e7df      	b.n	800268e <HAL_UART_Transmit+0x38>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80026ce:	4633      	mov	r3, r6
 80026d0:	2140      	movs	r1, #64	; 0x40
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff ff78 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 80026d8:	2800      	cmp	r0, #0
 80026da:	d1e5      	bne.n	80026a8 <HAL_UART_Transmit+0x52>
    {
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026dc:	2320      	movs	r3, #32
 80026de:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026e2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80026e6:	bd70      	pop	{r4, r5, r6, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 80026e8:	2001      	movs	r0, #1
 80026ea:	bd70      	pop	{r4, r5, r6, pc}

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80026ec:	2002      	movs	r0, #2
  }
}
 80026ee:	bd70      	pop	{r4, r5, r6, pc}

080026f0 <UART_CheckIdleState>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f0:	2200      	movs	r2, #0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026f2:	6803      	ldr	r3, [r0, #0]
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026f4:	b510      	push	{r4, lr}
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f6:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0719      	lsls	r1, r3, #28
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026fc:	4604      	mov	r4, r0
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026fe:	d404      	bmi.n	800270a <UART_CheckIdleState+0x1a>
      /* Timeout Occured */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	075b      	lsls	r3, r3, #29
 8002706:	d514      	bpl.n	8002732 <UART_CheckIdleState+0x42>
 8002708:	e009      	b.n	800271e <UART_CheckIdleState+0x2e>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800270a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002712:	f7ff ff59 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 8002716:	2800      	cmp	r0, #0
 8002718:	d0f2      	beq.n	8002700 <UART_CheckIdleState+0x10>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800271a:	2003      	movs	r0, #3
 800271c:	bd10      	pop	{r4, pc}
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800271e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002722:	2200      	movs	r2, #0
 8002724:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff ff4d 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 800272e:	2800      	cmp	r0, #0
 8002730:	d1f3      	bne.n	800271a <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002732:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002734:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002736:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800273a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 800273e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8002742:	bd10      	pop	{r4, pc}

08002744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002744:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002746:	4604      	mov	r4, r0
 8002748:	b360      	cbz	r0, 80027a4 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800274a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800274e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002752:	b91b      	cbnz	r3, 800275c <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002754:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002758:	f000 fd16 	bl	8003188 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800275c:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800275e:	2324      	movs	r3, #36	; 0x24
 8002760:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002764:	6813      	ldr	r3, [r2, #0]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff fe2b 	bl	80023c8 <UART_SetConfig>
 8002772:	2801      	cmp	r0, #1
 8002774:	d016      	beq.n	80027a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002778:	b113      	cbz	r3, 8002780 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff fed0 	bl	8002520 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002788:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002790:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002798:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800279a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 800279c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027a0:	f7ff bfa6 	b.w	80026f0 <UART_CheckIdleState>
}
 80027a4:	2001      	movs	r0, #1
 80027a6:	bd10      	pop	{r4, pc}

080027a8 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027a8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80027ac:	2b21      	cmp	r3, #33	; 0x21
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027ae:	b510      	push	{r4, lr}
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027b0:	d123      	bne.n	80027fa <UART_Transmit_IT+0x52>
  {

    if(huart->TxXferCount == 0)
 80027b2:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80027b6:	6801      	ldr	r1, [r0, #0]
 80027b8:	b943      	cbnz	r3, 80027cc <UART_Transmit_IT+0x24>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027ba:	680a      	ldr	r2, [r1, #0]
 80027bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c0:	600a      	str	r2, [r1, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027c2:	680a      	ldr	r2, [r1, #0]
 80027c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027c8:	600a      	str	r2, [r1, #0]
 80027ca:	e014      	b.n	80027f6 <UART_Transmit_IT+0x4e>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027cc:	6882      	ldr	r2, [r0, #8]
 80027ce:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80027d2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80027d4:	d108      	bne.n	80027e8 <UART_Transmit_IT+0x40>
 80027d6:	6904      	ldr	r4, [r0, #16]
 80027d8:	b934      	cbnz	r4, 80027e8 <UART_Transmit_IT+0x40>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80027da:	f832 4b02 	ldrh.w	r4, [r2], #2
 80027de:	f3c4 0408 	ubfx	r4, r4, #0, #9
 80027e2:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80027e4:	64c2      	str	r2, [r0, #76]	; 0x4c
 80027e6:	e003      	b.n	80027f0 <UART_Transmit_IT+0x48>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80027e8:	1c54      	adds	r4, r2, #1
 80027ea:	64c4      	str	r4, [r0, #76]	; 0x4c
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	850a      	strh	r2, [r1, #40]	; 0x28
      }

      huart->TxXferCount--;
 80027f0:	3b01      	subs	r3, #1
 80027f2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

      return HAL_OK;
 80027f6:	2000      	movs	r0, #0
 80027f8:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    return HAL_BUSY;
 80027fa:	2002      	movs	r0, #2
  }
}
 80027fc:	bd10      	pop	{r4, pc}

080027fe <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027fe:	6801      	ldr	r1, [r0, #0]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002800:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002802:	680b      	ldr	r3, [r1, #0]
 8002804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002808:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800280a:	2320      	movs	r3, #32
 800280c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8002810:	f7ff fdd8 	bl	80023c4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002814:	2000      	movs	r0, #0
 8002816:	bd08      	pop	{r3, pc}

08002818 <UART_Receive_IT>:
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002818:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800281c:	6802      	ldr	r2, [r0, #0]
 800281e:	2b22      	cmp	r3, #34	; 0x22
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002820:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002822:	d12f      	bne.n	8002884 <UART_Receive_IT+0x6c>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002824:	6883      	ldr	r3, [r0, #8]
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8002826:	f8b0 405c 	ldrh.w	r4, [r0, #92]	; 0x5c

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002830:	d108      	bne.n	8002844 <UART_Receive_IT+0x2c>
 8002832:	6901      	ldr	r1, [r0, #16]
 8002834:	b931      	cbnz	r1, 8002844 <UART_Receive_IT+0x2c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002836:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8002838:	ea04 0201 	and.w	r2, r4, r1
 800283c:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2;
 8002840:	6543      	str	r3, [r0, #84]	; 0x54
 8002842:	e004      	b.n	800284e <UART_Receive_IT+0x36>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002844:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002846:	1c59      	adds	r1, r3, #1
 8002848:	4022      	ands	r2, r4
 800284a:	6541      	str	r1, [r0, #84]	; 0x54
 800284c:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 800284e:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002852:	3c01      	subs	r4, #1
 8002854:	b2a4      	uxth	r4, r4
 8002856:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 800285a:	b9cc      	cbnz	r4, 8002890 <UART_Receive_IT+0x78>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800285c:	6803      	ldr	r3, [r0, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	f022 0220 	bic.w	r2, r2, #32
 8002864:	601a      	str	r2, [r3, #0]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800286c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002876:	2320      	movs	r3, #32
 8002878:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800287c:	f000 fab4 	bl	8002de8 <HAL_UART_RxCpltCallback>
 8002880:	4620      	mov	r0, r4
 8002882:	bd10      	pop	{r4, pc}
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002884:	6993      	ldr	r3, [r2, #24]
 8002886:	f043 0308 	orr.w	r3, r3, #8
 800288a:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 800288c:	2002      	movs	r0, #2
 800288e:	bd10      	pop	{r4, pc}
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8002890:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8002892:	bd10      	pop	{r4, pc}

08002894 <HAL_UART_IRQHandler>:
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  /* UART parity error interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8002894:	6803      	ldr	r3, [r0, #0]
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	07d1      	lsls	r1, r2, #31
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800289a:	b510      	push	{r4, lr}
 800289c:	4604      	mov	r4, r0
  /* UART parity error interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 800289e:	d508      	bpl.n	80028b2 <HAL_UART_IRQHandler+0x1e>
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	05d2      	lsls	r2, r2, #23
 80028a4:	d505      	bpl.n	80028b2 <HAL_UART_IRQHandler+0x1e>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80028a6:	2201      	movs	r2, #1
 80028a8:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028aa:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	66c2      	str	r2, [r0, #108]	; 0x6c
  }

  /* UART frame error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80028b2:	69da      	ldr	r2, [r3, #28]
 80028b4:	0790      	lsls	r0, r2, #30
 80028b6:	d508      	bpl.n	80028ca <HAL_UART_IRQHandler+0x36>
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	07d1      	lsls	r1, r2, #31
 80028bc:	d505      	bpl.n	80028ca <HAL_UART_IRQHandler+0x36>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80028be:	2202      	movs	r2, #2
 80028c0:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028c2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80028c4:	f042 0204 	orr.w	r2, r2, #4
 80028c8:	66e2      	str	r2, [r4, #108]	; 0x6c
  }

  /* UART noise error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	0752      	lsls	r2, r2, #29
 80028ce:	d508      	bpl.n	80028e2 <HAL_UART_IRQHandler+0x4e>
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	07d0      	lsls	r0, r2, #31
 80028d4:	d505      	bpl.n	80028e2 <HAL_UART_IRQHandler+0x4e>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80028d6:	2204      	movs	r2, #4
 80028d8:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028da:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80028dc:	f042 0202 	orr.w	r2, r2, #2
 80028e0:	66e2      	str	r2, [r4, #108]	; 0x6c
  }

  /* UART Over-Run interrupt occurred -----------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80028e2:	69da      	ldr	r2, [r3, #28]
 80028e4:	0711      	lsls	r1, r2, #28
 80028e6:	d508      	bpl.n	80028fa <HAL_UART_IRQHandler+0x66>
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	07d2      	lsls	r2, r2, #31
 80028ec:	d505      	bpl.n	80028fa <HAL_UART_IRQHandler+0x66>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80028ee:	2208      	movs	r2, #8
 80028f0:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028f2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80028f4:	f042 0208 	orr.w	r2, r2, #8
 80028f8:	66e2      	str	r2, [r4, #108]	; 0x6c
  }

  /* UART wakeup from Stop mode interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	02d0      	lsls	r0, r2, #11
 80028fe:	d50d      	bpl.n	800291c <HAL_UART_IRQHandler+0x88>
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	0251      	lsls	r1, r2, #9
 8002904:	d50a      	bpl.n	800291c <HAL_UART_IRQHandler+0x88>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002906:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800290a:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
 800290c:	2320      	movs	r3, #32
 800290e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;

    HAL_UARTEx_WakeupCallback(huart);
 8002912:	4620      	mov	r0, r4
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
    huart->RxState = HAL_UART_STATE_READY;
 8002914:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    HAL_UARTEx_WakeupCallback(huart);
 8002918:	f000 f829 	bl	800296e <HAL_UARTEx_WakeupCallback>
  }

  /* UART in mode Receiver ---------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	0692      	lsls	r2, r2, #26
 8002922:	d505      	bpl.n	8002930 <HAL_UART_IRQHandler+0x9c>
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	069b      	lsls	r3, r3, #26
 8002928:	d502      	bpl.n	8002930 <HAL_UART_IRQHandler+0x9c>
  {
    UART_Receive_IT(huart);
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff ff74 	bl	8002818 <UART_Receive_IT>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	69da      	ldr	r2, [r3, #28]
 8002934:	0610      	lsls	r0, r2, #24
 8002936:	d505      	bpl.n	8002944 <HAL_UART_IRQHandler+0xb0>
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0619      	lsls	r1, r3, #24
 800293c:	d502      	bpl.n	8002944 <HAL_UART_IRQHandler+0xb0>
  {
    UART_Transmit_IT(huart);
 800293e:	4620      	mov	r0, r4
 8002940:	f7ff ff32 	bl	80027a8 <UART_Transmit_IT>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	0652      	lsls	r2, r2, #25
 800294a:	d505      	bpl.n	8002958 <HAL_UART_IRQHandler+0xc4>
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	065b      	lsls	r3, r3, #25
 8002950:	d502      	bpl.n	8002958 <HAL_UART_IRQHandler+0xc4>
  {
    UART_EndTransmit_IT(huart);
 8002952:	4620      	mov	r0, r4
 8002954:	f7ff ff53 	bl	80027fe <UART_EndTransmit_IT>
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002958:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800295a:	b13b      	cbz	r3, 800296c <HAL_UART_IRQHandler+0xd8>
  {
    /* Set the UART state ready to be able to start again the Tx/Rx process */
    huart->gState = HAL_UART_STATE_READY;
 800295c:	2320      	movs	r3, #32
 800295e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;

    HAL_UART_ErrorCallback(huart);
 8002962:	4620      	mov	r0, r4

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Set the UART state ready to be able to start again the Tx/Rx process */
    huart->gState = HAL_UART_STATE_READY;
    huart->RxState = HAL_UART_STATE_READY;
 8002964:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    HAL_UART_ErrorCallback(huart);
 8002968:	f7ff fd2d 	bl	80023c6 <HAL_UART_ErrorCallback>
 800296c:	bd10      	pop	{r4, pc}

0800296e <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback
  * @param  huart: UART handle
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800296e:	4770      	bx	lr

08002970 <compass_init>:
#endif

I2C_HandleTypeDef *_i2c = 0;

bool compass_init(I2C_HandleTypeDef *i2c)
{
 8002970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002972:	b089      	sub	sp, #36	; 0x24
	uint8_t data[16] = {0};
 8002974:	ac04      	add	r4, sp, #16
#endif

I2C_HandleTypeDef *_i2c = 0;

bool compass_init(I2C_HandleTypeDef *i2c)
{
 8002976:	4607      	mov	r7, r0
	uint8_t data[16] = {0};
 8002978:	2210      	movs	r2, #16
 800297a:	2100      	movs	r1, #0
 800297c:	4620      	mov	r0, r4
 800297e:	f000 fed0 	bl	8003722 <memset>
	bool success = false;
	//store our handle
	_i2c = i2c;
 8002982:	4d17      	ldr	r5, [pc, #92]	; (80029e0 <compass_init+0x70>)

	HAL_I2C_Mem_Read(_i2c, HMC5883L_ADDRESS, HMC5883L_REG_IDENT_A, 1, data, 3, 100);
 8002984:	9400      	str	r4, [sp, #0]
 8002986:	2303      	movs	r3, #3
 8002988:	2664      	movs	r6, #100	; 0x64
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	9602      	str	r6, [sp, #8]
 800298e:	2301      	movs	r3, #1
 8002990:	220a      	movs	r2, #10
 8002992:	213c      	movs	r1, #60	; 0x3c
 8002994:	4638      	mov	r0, r7
bool compass_init(I2C_HandleTypeDef *i2c)
{
	uint8_t data[16] = {0};
	bool success = false;
	//store our handle
	_i2c = i2c;
 8002996:	602f      	str	r7, [r5, #0]

	HAL_I2C_Mem_Read(_i2c, HMC5883L_ADDRESS, HMC5883L_REG_IDENT_A, 1, data, 3, 100);
 8002998:	f7fe fe80 	bl	800169c <HAL_I2C_Mem_Read>
	PRINT("ID = %02x, %02x, %02x\n\r", data[0], data[1], data[2]);
	if((data[0] == HMC5883L_REG_IDENT_A_VAL) &&
 800299c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80029a0:	2b48      	cmp	r3, #72	; 0x48
 80029a2:	d119      	bne.n	80029d8 <compass_init+0x68>
 80029a4:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80029a8:	2b34      	cmp	r3, #52	; 0x34
 80029aa:	d115      	bne.n	80029d8 <compass_init+0x68>
	  (data[1] == HMC5883L_REG_IDENT_B_VAL) &&
 80029ac:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80029b0:	2b33      	cmp	r3, #51	; 0x33
 80029b2:	d111      	bne.n	80029d8 <compass_init+0x68>
	  (data[2] == HMC5883L_REG_IDENT_C_VAL))
	{
		PRINT("Compass Found\n\r");
		//configure the compass
		data[0] = HMC5883L_REG_CONFIG_A;
		data[1] = (HMC5883L_SAMPLES_8 << HMC5883L_CRA_MA_Offset) | (HMC5883L_DATARATE_15HZ << HMC5883L_CRA_DO_Offset);
 80029b4:	2270      	movs	r2, #112	; 0x70
	  (data[1] == HMC5883L_REG_IDENT_B_VAL) &&
	  (data[2] == HMC5883L_REG_IDENT_C_VAL))
	{
		PRINT("Compass Found\n\r");
		//configure the compass
		data[0] = HMC5883L_REG_CONFIG_A;
 80029b6:	2300      	movs	r3, #0
		data[1] = (HMC5883L_SAMPLES_8 << HMC5883L_CRA_MA_Offset) | (HMC5883L_DATARATE_15HZ << HMC5883L_CRA_DO_Offset);
 80029b8:	f88d 2011 	strb.w	r2, [sp, #17]
		data[2] = HMC5883L_RANGE_1_3GA << HMC5883L_CRB_GN_Offset;
 80029bc:	2220      	movs	r2, #32
	  (data[1] == HMC5883L_REG_IDENT_B_VAL) &&
	  (data[2] == HMC5883L_REG_IDENT_C_VAL))
	{
		PRINT("Compass Found\n\r");
		//configure the compass
		data[0] = HMC5883L_REG_CONFIG_A;
 80029be:	f88d 3010 	strb.w	r3, [sp, #16]
		data[1] = (HMC5883L_SAMPLES_8 << HMC5883L_CRA_MA_Offset) | (HMC5883L_DATARATE_15HZ << HMC5883L_CRA_DO_Offset);
		data[2] = HMC5883L_RANGE_1_3GA << HMC5883L_CRB_GN_Offset;
 80029c2:	f88d 2012 	strb.w	r2, [sp, #18]
		data[3] = HMC5883L_CONTINOUS;
 80029c6:	f88d 3013 	strb.w	r3, [sp, #19]
		HAL_I2C_Master_Transmit(_i2c, HMC5883L_ADDRESS,data, 4, 100);
 80029ca:	9600      	str	r6, [sp, #0]
 80029cc:	2304      	movs	r3, #4
 80029ce:	4622      	mov	r2, r4
 80029d0:	213c      	movs	r1, #60	; 0x3c
 80029d2:	6828      	ldr	r0, [r5, #0]
 80029d4:	f7fe fdca 	bl	800156c <HAL_I2C_Master_Transmit>
	}
	return success;
}
 80029d8:	2000      	movs	r0, #0
 80029da:	b009      	add	sp, #36	; 0x24
 80029dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000058c 	.word	0x2000058c
 80029e4:	00000000 	.word	0x00000000

080029e8 <compass_get_heading>:


int16_t compass_get_heading()
{
 80029e8:	b5d0      	push	{r4, r6, r7, lr}
 80029ea:	b086      	sub	sp, #24
		int16_t x;
		int16_t z;
		int16_t y;
	} data_t;

	data_t mag_data = {0};
 80029ec:	2200      	movs	r2, #0
 80029ee:	9204      	str	r2, [sp, #16]
 80029f0:	f8ad 2014 	strh.w	r2, [sp, #20]

	if(HAL_OK == HAL_I2C_Mem_Read(_i2c, HMC5883L_ADDRESS,HMC5883L_REG_OUT_X_M, 1, (uint8_t *)&mag_data, 6,100))
 80029f4:	2264      	movs	r2, #100	; 0x64
		int16_t x;
		int16_t z;
		int16_t y;
	} data_t;

	data_t mag_data = {0};
 80029f6:	ab04      	add	r3, sp, #16

	if(HAL_OK == HAL_I2C_Mem_Read(_i2c, HMC5883L_ADDRESS,HMC5883L_REG_OUT_X_M, 1, (uint8_t *)&mag_data, 6,100))
 80029f8:	9202      	str	r2, [sp, #8]
 80029fa:	4829      	ldr	r0, [pc, #164]	; (8002aa0 <compass_get_heading+0xb8>)
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2206      	movs	r2, #6
 8002a00:	9201      	str	r2, [sp, #4]
 8002a02:	2301      	movs	r3, #1
 8002a04:	2203      	movs	r2, #3
 8002a06:	213c      	movs	r1, #60	; 0x3c
 8002a08:	6800      	ldr	r0, [r0, #0]
 8002a0a:	f7fe fe47 	bl	800169c <HAL_I2C_Mem_Read>
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	d13a      	bne.n	8002a88 <compass_get_heading+0xa0>
 8002a12:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8002a16:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8002a1a:	bae4      	revsh	r4, r4
 8002a1c:	bac0      	revsh	r0, r0
		mag_data.z = ((mag_data.z >> 8)&0x00FF) | ((mag_data.z << 8) & 0xFF00);
		PRINT("X=%d ; Y=%d ; Z=%d\n\r", mag_data.x, mag_data.y, mag_data.z);

		double xy = 0.0;
		double heading = 0.0;
		if(mag_data.y != 0)
 8002a1e:	b344      	cbz	r4, 8002a72 <compass_get_heading+0x8a>
		{
			xy = (double)mag_data.x / (double)mag_data.y;
			xy = atan(xy) * 180.0 / 3.14;
 8002a20:	f7fd fd80 	bl	8000524 <__aeabi_i2d>
 8002a24:	4606      	mov	r6, r0
 8002a26:	4620      	mov	r0, r4
 8002a28:	460f      	mov	r7, r1
 8002a2a:	f7fd fd7b 	bl	8000524 <__aeabi_i2d>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4630      	mov	r0, r6
 8002a34:	4639      	mov	r1, r7
 8002a36:	f7fd ff05 	bl	8000844 <__aeabi_ddiv>
 8002a3a:	ec41 0b10 	vmov	d0, r0, r1
 8002a3e:	f004 f8ab 	bl	8006b98 <atan>
 8002a42:	2200      	movs	r2, #0
 8002a44:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <compass_get_heading+0xbc>)
 8002a46:	ec51 0b10 	vmov	r0, r1, d0
 8002a4a:	f7fd fdd1 	bl	80005f0 <__aeabi_dmul>
 8002a4e:	a310      	add	r3, pc, #64	; (adr r3, 8002a90 <compass_get_heading+0xa8>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fef6 	bl	8000844 <__aeabi_ddiv>
			if(mag_data.y < 0)
 8002a58:	2c00      	cmp	r4, #0
		double xy = 0.0;
		double heading = 0.0;
		if(mag_data.y != 0)
		{
			xy = (double)mag_data.x / (double)mag_data.y;
			xy = atan(xy) * 180.0 / 3.14;
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
			if(mag_data.y < 0)
 8002a5e:	da03      	bge.n	8002a68 <compass_get_heading+0x80>
			{
				heading = 270 - xy;
 8002a60:	a10d      	add	r1, pc, #52	; (adr r1, 8002a98 <compass_get_heading+0xb0>)
 8002a62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a66:	e001      	b.n	8002a6c <compass_get_heading+0x84>
			}
			else
			{
				heading = 90 - xy;
 8002a68:	490f      	ldr	r1, [pc, #60]	; (8002aa8 <compass_get_heading+0xc0>)
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fd fc0c 	bl	8000288 <__aeabi_dsub>
 8002a70:	e006      	b.n	8002a80 <compass_get_heading+0x98>
			}
		}
		else
		{
			if(mag_data.x < 0)
 8002a72:	2800      	cmp	r0, #0
				heading = 180.0;
 8002a74:	bfb8      	it	lt
 8002a76:	490b      	ldrlt	r1, [pc, #44]	; (8002aa4 <compass_get_heading+0xbc>)
 8002a78:	f04f 0000 	mov.w	r0, #0
			else
				heading = 0.0;
 8002a7c:	bfa8      	it	ge
 8002a7e:	2100      	movge	r1, #0
		}
		PRINT("%d degrees \n\r", (uint16_t)heading);
		return (uint16_t)heading;
 8002a80:	f7fe f88e 	bl	8000ba0 <__aeabi_d2uiz>
 8002a84:	b200      	sxth	r0, r0
 8002a86:	e001      	b.n	8002a8c <compass_get_heading+0xa4>
	}//if hal ok
	return -1;
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002a8c:	b006      	add	sp, #24
 8002a8e:	bdd0      	pop	{r4, r6, r7, pc}
 8002a90:	51eb851f 	.word	0x51eb851f
 8002a94:	40091eb8 	.word	0x40091eb8
 8002a98:	00000000 	.word	0x00000000
 8002a9c:	4070e000 	.word	0x4070e000
 8002aa0:	2000058c 	.word	0x2000058c
 8002aa4:	40668000 	.word	0x40668000
 8002aa8:	40568000 	.word	0x40568000

08002aac <_write>:
	GET_FIX,
	ACTIVE,
	COMPASS_ERROR = -1
} state_t;

int _write(int file, char *data, int len) {   // arbitrary timeout 1000
 8002aac:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8002aae:	2301      	movs	r3, #1
	GET_FIX,
	ACTIVE,
	COMPASS_ERROR = -1
} state_t;

int _write(int file, char *data, int len) {   // arbitrary timeout 1000
 8002ab0:	4614      	mov	r4, r2
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8002ab2:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <_write+0x18>)
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	f7ff fdce 	bl	8002656 <HAL_UART_Transmit>
			1);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8002aba:	2800      	cmp	r0, #0
}
 8002abc:	bf0c      	ite	eq
 8002abe:	4620      	moveq	r0, r4
 8002ac0:	2000      	movne	r0, #0
 8002ac2:	bd10      	pop	{r4, pc}
 8002ac4:	200006d8 	.word	0x200006d8

08002ac8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002ac8:	b510      	push	{r4, lr}
 8002aca:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002acc:	2301      	movs	r3, #1
 8002ace:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ad4:	2300      	movs	r3, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ad6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ad8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ada:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002adc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ae0:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae2:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002ae4:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae6:	f7fe febb 	bl	8001860 <HAL_RCC_OscConfig>
 8002aea:	b100      	cbz	r0, 8002aee <SystemClock_Config+0x26>
 8002aec:	e7fe      	b.n	8002aec <SystemClock_Config+0x24>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aee:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af0:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002af4:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002afa:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002afc:	4621      	mov	r1, r4
 8002afe:	4668      	mov	r0, sp

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b00:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b02:	f7ff f945 	bl	8001d90 <HAL_RCC_ClockConfig>
 8002b06:	b100      	cbz	r0, 8002b0a <SystemClock_Config+0x42>
 8002b08:	e7fe      	b.n	8002b08 <SystemClock_Config+0x40>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002b0a:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b0c:	9011      	str	r0, [sp, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002b0e:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b10:	a80f      	add	r0, sp, #60	; 0x3c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002b12:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b14:	f7ff fa24 	bl	8001f60 <HAL_RCCEx_PeriphCLKConfig>
 8002b18:	4604      	mov	r4, r0
 8002b1a:	b100      	cbz	r0, 8002b1e <SystemClock_Config+0x56>
 8002b1c:	e7fe      	b.n	8002b1c <SystemClock_Config+0x54>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002b1e:	f7ff f9e9 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8002b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b26:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b2a:	f7fe fad7 	bl	80010dc <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b2e:	2004      	movs	r0, #4
 8002b30:	f7fe faea 	bl	8001108 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b34:	4622      	mov	r2, r4
 8002b36:	4621      	mov	r1, r4
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f7fe fa8e 	bl	800105c <HAL_NVIC_SetPriority>
}
 8002b40:	b01c      	add	sp, #112	; 0x70
 8002b42:	bd10      	pop	{r4, pc}

08002b44 <main>:
bool _cmd_rcvd;
#define TEST
/* USER CODE END 0 */

int main(void)
{
 8002b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* USER CODE BEGIN 1 */
	_cmd_rcvd = false;
 8002b48:	4b90      	ldr	r3, [pc, #576]	; (8002d8c <main+0x248>)
bool _cmd_rcvd;
#define TEST
/* USER CODE END 0 */

int main(void)
{
 8002b4a:	b08a      	sub	sp, #40	; 0x28

  /* USER CODE BEGIN 1 */
	_cmd_rcvd = false;
 8002b4c:	2400      	movs	r4, #0
 8002b4e:	701c      	strb	r4, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b50:	f7fe fa44 	bl	8000fdc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002b54:	f7ff ffb8 	bl	8002ac8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b58:	4b8d      	ldr	r3, [pc, #564]	; (8002d90 <main+0x24c>)

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b5a:	488e      	ldr	r0, [pc, #568]	; (8002d94 <main+0x250>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002b62:	615a      	str	r2, [r3, #20]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002b6a:	9201      	str	r2, [sp, #4]
 8002b6c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002b74:	615a      	str	r2, [r3, #20]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002b7c:	9202      	str	r2, [sp, #8]
 8002b7e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b86:	615a      	str	r2, [r3, #20]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002b8e:	9203      	str	r2, [sp, #12]
 8002b90:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b98:	615a      	str	r2, [r3, #20]
 8002b9a:	695b      	ldr	r3, [r3, #20]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba2:	9304      	str	r3, [sp, #16]
 8002ba4:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002baa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bac:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002bae:	4b7a      	ldr	r3, [pc, #488]	; (8002d98 <main+0x254>)
 8002bb0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : MOTOR_1_Pin MOTOR_2_Pin testpin_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin|testpin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb2:	2601      	movs	r6, #1

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bb4:	f7fe faba 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_1_Pin MOTOR_2_Pin testpin_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin|testpin_Pin;
 8002bb8:	f04f 0813 	mov.w	r8, #19
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbc:	a905      	add	r1, sp, #20
 8002bbe:	4875      	ldr	r0, [pc, #468]	; (8002d94 <main+0x250>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : MOTOR_1_Pin MOTOR_2_Pin testpin_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin|testpin_Pin;
 8002bc0:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bca:	f7fe faaf 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : COMPASS_ZERO_Pin */
  GPIO_InitStruct.Pin = COMPASS_ZERO_Pin;
 8002bce:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(COMPASS_ZERO_GPIO_Port, &GPIO_InitStruct);
 8002bd0:	a905      	add	r1, sp, #20
 8002bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : COMPASS_ZERO_Pin */
  GPIO_InitStruct.Pin = COMPASS_ZERO_Pin;
 8002bd6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(COMPASS_ZERO_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MOTOR_4_Pin */
  GPIO_InitStruct.Pin = MOTOR_4_Pin;
 8002bd8:	2710      	movs	r7, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : COMPASS_ZERO_Pin */
  GPIO_InitStruct.Pin = COMPASS_ZERO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bda:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(COMPASS_ZERO_GPIO_Port, &GPIO_InitStruct);
 8002bde:	f7fe faa5 	bl	800112c <HAL_GPIO_Init>
  /*Configure GPIO pin : MOTOR_4_Pin */
  GPIO_InitStruct.Pin = MOTOR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 8002be2:	a905      	add	r1, sp, #20
 8002be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pins : MOTOR_3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = MOTOR_3_Pin|LD2_Pin;
 8002be8:	f242 0501 	movw	r5, #8193	; 0x2001
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(COMPASS_ZERO_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MOTOR_4_Pin */
  GPIO_InitStruct.Pin = MOTOR_4_Pin;
 8002bec:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bee:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 8002bf4:	f7fe fa9a 	bl	800112c <HAL_GPIO_Init>
  /*Configure GPIO pins : MOTOR_3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = MOTOR_3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf8:	a905      	add	r1, sp, #20
 8002bfa:	4868      	ldr	r0, [pc, #416]	; (8002d9c <main+0x258>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOTOR_4_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : MOTOR_3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = MOTOR_3_Pin|LD2_Pin;
 8002bfc:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bfe:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c02:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c04:	f7fe fa92 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	a905      	add	r1, sp, #20
 8002c0e:	4863      	ldr	r0, [pc, #396]	; (8002d9c <main+0x258>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c10:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c12:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c16:	f7fe fa89 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_1_Pin|MOTOR_2_Pin|testpin_Pin, GPIO_PIN_RESET);
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	485d      	ldr	r0, [pc, #372]	; (8002d94 <main+0x250>)
 8002c20:	f7fe fb4a 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_4_GPIO_Port, MOTOR_4_Pin, GPIO_PIN_RESET);
 8002c24:	4639      	mov	r1, r7
 8002c26:	4622      	mov	r2, r4
 8002c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2c:	f7fe fb44 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c30:	4629      	mov	r1, r5
 8002c32:	4622      	mov	r2, r4

/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
 8002c34:	4d5a      	ldr	r5, [pc, #360]	; (8002da0 <main+0x25c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_4_GPIO_Port, MOTOR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c36:	4859      	ldr	r0, [pc, #356]	; (8002d9c <main+0x258>)
/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
 8002c38:	4f5a      	ldr	r7, [pc, #360]	; (8002da4 <main+0x260>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_4_GPIO_Port, MOTOR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c3a:	f7fe fb3d 	bl	80012b8 <HAL_GPIO_WritePin>
/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	; (8002da8 <main+0x264>)
  hi2c1.Init.OwnAddress1 = 0;
 8002c40:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c42:	4628      	mov	r0, r5
/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
 8002c44:	e885 0088 	stmia.w	r5, {r3, r7}
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c48:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c4a:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c4c:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c4e:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c50:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c52:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c54:	f7fe fc3b 	bl	80014ce <HAL_I2C_Init>
 8002c58:	4601      	mov	r1, r0
 8002c5a:	b100      	cbz	r0, 8002c5e <main+0x11a>
 8002c5c:	e7fe      	b.n	8002c5c <main+0x118>
    Error_Handler();
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c5e:	4628      	mov	r0, r5
 8002c60:	f7fe fdd8 	bl	8001814 <HAL_I2CEx_ConfigAnalogFilter>
 8002c64:	b100      	cbz	r0, 8002c68 <main+0x124>
 8002c66:	e7fe      	b.n	8002c66 <main+0x122>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8002c68:	4b50      	ldr	r3, [pc, #320]	; (8002dac <main+0x268>)
  huart1.Init.BaudRate = 9600;
 8002c6a:	4a51      	ldr	r2, [pc, #324]	; (8002db0 <main+0x26c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6c:	6098      	str	r0, [r3, #8]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8002c6e:	f44f 5416 	mov.w	r4, #9600	; 0x2580
 8002c72:	e883 0014 	stmia.w	r3, {r2, r4}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c76:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c78:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c7a:	240c      	movs	r4, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c7c:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c7e:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c80:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c82:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c84:	4618      	mov	r0, r3
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c86:	615c      	str	r4, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c88:	f7ff fd5c 	bl	8002744 <HAL_UART_Init>
 8002c8c:	b100      	cbz	r0, 8002c90 <main+0x14c>
 8002c8e:	e7fe      	b.n	8002c8e <main+0x14a>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8002c90:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <main+0x270>)
  huart2.Init.BaudRate = 115200;
 8002c92:	4949      	ldr	r1, [pc, #292]	; (8002db8 <main+0x274>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c94:	6098      	str	r0, [r3, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8002c96:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c9a:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c9c:	6118      	str	r0, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c9e:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ca0:	61d8      	str	r0, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ca2:	6218      	str	r0, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ca4:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ca6:	4618      	mov	r0, r3
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8002ca8:	e883 0006 	stmia.w	r3, {r1, r2}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cac:	615c      	str	r4, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cae:	f7ff fd49 	bl	8002744 <HAL_UART_Init>
 8002cb2:	b100      	cbz	r0, 8002cb6 <main+0x172>
 8002cb4:	e7fe      	b.n	8002cb4 <main+0x170>
static void MX_TIM6_Init(void)
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8002cb6:	4c41      	ldr	r4, [pc, #260]	; (8002dbc <main+0x278>)
 8002cb8:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <main+0x27c>)
  htim6.Init.Prescaler = 1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cba:	60a0      	str	r0, [r4, #8]
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 1;
 8002cbc:	e884 0048 	stmia.w	r4, {r3, r6}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 255;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002cc0:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 255;
 8002cc2:	23ff      	movs	r3, #255	; 0xff
 8002cc4:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002cc6:	f7ff fb3f 	bl	8002348 <HAL_TIM_Base_Init>
 8002cca:	b100      	cbz	r0, 8002cce <main+0x18a>
 8002ccc:	e7fe      	b.n	8002ccc <main+0x188>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cce:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd0:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002cd2:	a905      	add	r1, sp, #20
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f7ff fb51 	bl	800237c <HAL_TIMEx_MasterConfigSynchronization>
 8002cda:	b100      	cbz	r0, 8002cde <main+0x19a>
 8002cdc:	e7fe      	b.n	8002cdc <main+0x198>
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM6_Init();

  /* USER CODE BEGIN 2 */
	printf("Compass\n\r");
 8002cde:	4839      	ldr	r0, [pc, #228]	; (8002dc4 <main+0x280>)
 8002ce0:	f000 fd2a 	bl	8003738 <printf>
	if(get_zero_state())
 8002ce4:	f000 f886 	bl	8002df4 <get_zero_state>
 8002ce8:	b908      	cbnz	r0, 8002cee <main+0x1aa>
 8002cea:	4604      	mov	r4, r0
 8002cec:	e010      	b.n	8002d10 <main+0x1cc>
	{
	motors_off();
 8002cee:	f000 f88d 	bl	8002e0c <motors_off>
	printf("Paused...\n\r");
 8002cf2:	4835      	ldr	r0, [pc, #212]	; (8002dc8 <main+0x284>)
 8002cf4:	f000 fd20 	bl	8003738 <printf>
 8002cf8:	e7fe      	b.n	8002cf8 <main+0x1b4>
	int16_t resolved_angle = 0;
	while (1) {
		switch(state)
		{
		case STARTUP:
			printf("Start up\n\r");
 8002cfa:	4834      	ldr	r0, [pc, #208]	; (8002dcc <main+0x288>)
 8002cfc:	f000 fd1c 	bl	8003738 <printf>
			compass_init(&hi2c1);
 8002d00:	4827      	ldr	r0, [pc, #156]	; (8002da0 <main+0x25c>)
 8002d02:	f7ff fe35 	bl	8002970 <compass_init>
			state = ZERO_MOTORS;
 8002d06:	2401      	movs	r4, #1
		default:
			printf("Error occurred...\n\r");
			while(1);
			return 1;
		}
		HAL_Delay(500);
 8002d08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d0c:	f7fe f986 	bl	800101c <HAL_Delay>
//	get_location(&gps_pos);//i think it is reasonable that the unit isn't going to move in this situation, at least not by enough we'll care

	int16_t current_bearing = 0;
	int16_t resolved_angle = 0;
	while (1) {
		switch(state)
 8002d10:	2c03      	cmp	r4, #3
 8002d12:	d836      	bhi.n	8002d82 <main+0x23e>
 8002d14:	a301      	add	r3, pc, #4	; (adr r3, 8002d1c <main+0x1d8>)
 8002d16:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002cfb 	.word	0x08002cfb
 8002d20:	08002d2d 	.word	0x08002d2d
 8002d24:	08002d43 	.word	0x08002d43
 8002d28:	08002d55 	.word	0x08002d55
			printf("Start up\n\r");
			compass_init(&hi2c1);
			state = ZERO_MOTORS;
			break;
		case ZERO_MOTORS:
			printf("Zeroing motors\n\r");
 8002d2c:	4828      	ldr	r0, [pc, #160]	; (8002dd0 <main+0x28c>)
 8002d2e:	f000 fd03 	bl	8003738 <printf>
			if(zero_motor())
 8002d32:	f000 f91f 	bl	8002f74 <zero_motor>
				state = ACTIVE;
#endif
			}
			else
			{
				state = COMPASS_ERROR;
 8002d36:	2800      	cmp	r0, #0
 8002d38:	bf14      	ite	ne
 8002d3a:	2403      	movne	r4, #3
 8002d3c:	f04f 34ff 	moveq.w	r4, #4294967295
 8002d40:	e7e2      	b.n	8002d08 <main+0x1c4>
			}
			break;
		case GET_FIX:
			printf("Get fix\n\r");
 8002d42:	4824      	ldr	r0, [pc, #144]	; (8002dd4 <main+0x290>)
 8002d44:	f000 fcf8 	bl	8003738 <printf>
//			get_location(&gps_pos);//i think it is reasonable that the unit isn't going to move in this situation, at least not by enough we'll care
			resolved_angle = 0; //angleFromCoordinate(&gps_pos, &dest_pos);
			printf("A= %d\n\r", resolved_angle);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4823      	ldr	r0, [pc, #140]	; (8002dd8 <main+0x294>)
 8002d4c:	f000 fcf4 	bl	8003738 <printf>

			//@todo implement a timeout
			state = ACTIVE;
 8002d50:	2403      	movs	r4, #3
			break;
 8002d52:	e7d9      	b.n	8002d08 <main+0x1c4>
		case ACTIVE:
			printf("Active!!\n\r");
 8002d54:	4821      	ldr	r0, [pc, #132]	; (8002ddc <main+0x298>)
 8002d56:	f000 fcef 	bl	8003738 <printf>
			current_bearing = compass_get_heading();
 8002d5a:	f7ff fe45 	bl	80029e8 <compass_get_heading>
//			for now, we'll assume there is 0 fudge factor between the compass and box
			printf("C = %d,p = %d\n\r", current_bearing, resolved_angle - current_bearing);
 8002d5e:	4242      	negs	r2, r0
 8002d60:	4601      	mov	r1, r0
			//@todo implement a timeout
			state = ACTIVE;
			break;
		case ACTIVE:
			printf("Active!!\n\r");
			current_bearing = compass_get_heading();
 8002d62:	4605      	mov	r5, r0
//			for now, we'll assume there is 0 fudge factor between the compass and box
			printf("C = %d,p = %d\n\r", current_bearing, resolved_angle - current_bearing);
 8002d64:	481e      	ldr	r0, [pc, #120]	; (8002de0 <main+0x29c>)
 8002d66:	f000 fce7 	bl	8003738 <printf>
			set_target((resolved_angle - current_bearing + 360)%360);
 8002d6a:	f5c5 75b4 	rsb	r5, r5, #360	; 0x168
 8002d6e:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8002d72:	fb95 f3f0 	sdiv	r3, r5, r0
 8002d76:	fb00 5013 	mls	r0, r0, r3, r5
 8002d7a:	b200      	sxth	r0, r0
 8002d7c:	f000 f930 	bl	8002fe0 <set_target>
			break;
 8002d80:	e7c2      	b.n	8002d08 <main+0x1c4>

		default:
			printf("Error occurred...\n\r");
 8002d82:	4818      	ldr	r0, [pc, #96]	; (8002de4 <main+0x2a0>)
 8002d84:	f000 fcd8 	bl	8003738 <printf>
 8002d88:	e7fe      	b.n	8002d88 <main+0x244>
 8002d8a:	bf00      	nop
 8002d8c:	200005dc 	.word	0x200005dc
 8002d90:	40021000 	.word	0x40021000
 8002d94:	48000800 	.word	0x48000800
 8002d98:	10120000 	.word	0x10120000
 8002d9c:	48000400 	.word	0x48000400
 8002da0:	200005e0 	.word	0x200005e0
 8002da4:	2000090e 	.word	0x2000090e
 8002da8:	40005400 	.word	0x40005400
 8002dac:	2000062c 	.word	0x2000062c
 8002db0:	40013800 	.word	0x40013800
 8002db4:	200006d8 	.word	0x200006d8
 8002db8:	40004400 	.word	0x40004400
 8002dbc:	2000069c 	.word	0x2000069c
 8002dc0:	40001000 	.word	0x40001000
 8002dc4:	08006fb4 	.word	0x08006fb4
 8002dc8:	08006fbe 	.word	0x08006fbe
 8002dcc:	08006fca 	.word	0x08006fca
 8002dd0:	08006fd5 	.word	0x08006fd5
 8002dd4:	08006fe6 	.word	0x08006fe6
 8002dd8:	08006ff0 	.word	0x08006ff0
 8002ddc:	08006ff8 	.word	0x08006ff8
 8002de0:	08007003 	.word	0x08007003
 8002de4:	08007013 	.word	0x08007013

08002de8 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	_cmd_rcvd = true;
 8002de8:	4b01      	ldr	r3, [pc, #4]	; (8002df0 <HAL_UART_RxCpltCallback+0x8>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	4770      	bx	lr
 8002df0:	200005dc 	.word	0x200005dc

08002df4 <get_zero_state>:
		}
	}
}

bool get_zero_state()
{
 8002df4:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET);
 8002df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dfa:	4803      	ldr	r0, [pc, #12]	; (8002e08 <get_zero_state+0x14>)
 8002dfc:	f7fe fa56 	bl	80012ac <HAL_GPIO_ReadPin>
}
 8002e00:	fab0 f080 	clz	r0, r0
 8002e04:	0940      	lsrs	r0, r0, #5
 8002e06:	bd08      	pop	{r3, pc}
 8002e08:	48000800 	.word	0x48000800

08002e0c <motors_off>:

void motors_off()
{
 8002e0c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(MOTOR_1_GPIO_Port,MOTOR_1_Pin, GPIO_PIN_RESET);
 8002e0e:	4c0c      	ldr	r4, [pc, #48]	; (8002e40 <motors_off+0x34>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	4620      	mov	r0, r4
 8002e14:	2101      	movs	r1, #1
 8002e16:	f7fe fa4f 	bl	80012b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_2_GPIO_Port,MOTOR_2_Pin, GPIO_PIN_RESET);
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2102      	movs	r1, #2
 8002e20:	f7fe fa4a 	bl	80012b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_RESET);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2101      	movs	r1, #1
 8002e28:	4806      	ldr	r0, [pc, #24]	; (8002e44 <motors_off+0x38>)
 8002e2a:	f7fe fa45 	bl	80012b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_RESET);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2110      	movs	r1, #16
 8002e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8002e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void motors_off()
{
	HAL_GPIO_WritePin(MOTOR_1_GPIO_Port,MOTOR_1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_2_GPIO_Port,MOTOR_2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_RESET);
 8002e3a:	f7fe ba3d 	b.w	80012b8 <HAL_GPIO_WritePin>
 8002e3e:	bf00      	nop
 8002e40:	48000800 	.word	0x48000800
 8002e44:	48000400 	.word	0x48000400

08002e48 <set_speed>:
	return motor_running;
}
//@param speed 0-255 (0 being off) linear scale between off and full speed
//@param clockwise - direction to rotate
void set_speed(uint8_t speed, bool cw_nacw)
{
 8002e48:	b538      	push	{r3, r4, r5, lr}
	direction = cw_nacw;
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <set_speed+0x34>)
 8002e4c:	4c0c      	ldr	r4, [pc, #48]	; (8002e80 <set_speed+0x38>)
 8002e4e:	7019      	strb	r1, [r3, #0]
	if(0 == speed)
 8002e50:	4605      	mov	r5, r0
 8002e52:	b938      	cbnz	r0, 8002e64 <set_speed+0x1c>
	{
		motors_off();
 8002e54:	f7ff ffda 	bl	8002e0c <motors_off>
		motor_running = false;
 8002e58:	7025      	strb	r5, [r4, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 8002e5a:	480a      	ldr	r0, [pc, #40]	; (8002e84 <set_speed+0x3c>)
		{
			HAL_TIM_Base_Start_IT(&htim6);
			motor_running = true;
		}
	}
}
 8002e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	direction = cw_nacw;
	if(0 == speed)
	{
		motors_off();
		motor_running = false;
		HAL_TIM_Base_Stop_IT(&htim6);
 8002e60:	f7ff b979 	b.w	8002156 <HAL_TIM_Base_Stop_IT>
	}
	else
	{
		htim6.Instance->ARR = MIN_SPEED;
 8002e64:	4807      	ldr	r0, [pc, #28]	; (8002e84 <set_speed+0x3c>)
 8002e66:	6803      	ldr	r3, [r0, #0]
 8002e68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e6c:	62da      	str	r2, [r3, #44]	; 0x2c
//		htim6.Instance->ARR = (MIN_SPEED - ((MIN_SPEED - MAX_SPEED) / (256 - (uint32_t)speed)));
		if(!motor_running)
 8002e6e:	7823      	ldrb	r3, [r4, #0]
 8002e70:	b91b      	cbnz	r3, 8002e7a <set_speed+0x32>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 8002e72:	f7ff f965 	bl	8002140 <HAL_TIM_Base_Start_IT>
			motor_running = true;
 8002e76:	2301      	movs	r3, #1
 8002e78:	7023      	strb	r3, [r4, #0]
 8002e7a:	bd38      	pop	{r3, r4, r5, pc}
 8002e7c:	20000599 	.word	0x20000599
 8002e80:	20000598 	.word	0x20000598
 8002e84:	2000069c 	.word	0x2000069c

08002e88 <write_motors>:
	HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_RESET);
}

void write_motors(uint8_t state)
{
 8002e88:	b510      	push	{r4, lr}
 8002e8a:	4604      	mov	r4, r0
	motors_off();
 8002e8c:	f7ff ffbe 	bl	8002e0c <motors_off>
	if(state & 0x01)
 8002e90:	07e0      	lsls	r0, r4, #31
 8002e92:	d504      	bpl.n	8002e9e <write_motors+0x16>
	{
		HAL_GPIO_WritePin(MOTOR_1_GPIO_Port,MOTOR_1_Pin, GPIO_PIN_SET);
 8002e94:	2201      	movs	r2, #1
 8002e96:	4611      	mov	r1, r2
 8002e98:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <write_motors+0x48>)
 8002e9a:	f7fe fa0d 	bl	80012b8 <HAL_GPIO_WritePin>
//	else
//	{
//		HAL_GPIO_WritePin(MOTOR_1_GPIO_Port,MOTOR_1_Pin, GPIO_PIN_RESET);
//	}

	if(state & 0x02)
 8002e9e:	07a1      	lsls	r1, r4, #30
 8002ea0:	d504      	bpl.n	8002eac <write_motors+0x24>
	{
		HAL_GPIO_WritePin(MOTOR_2_GPIO_Port,MOTOR_2_Pin, GPIO_PIN_SET);
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	480a      	ldr	r0, [pc, #40]	; (8002ed0 <write_motors+0x48>)
 8002ea8:	f7fe fa06 	bl	80012b8 <HAL_GPIO_WritePin>
//	else
//	{
//		HAL_GPIO_WritePin(MOTOR_2_GPIO_Port,MOTOR_2_Pin, GPIO_PIN_RESET);
//	}

	if(state & 0x04)
 8002eac:	0762      	lsls	r2, r4, #29
 8002eae:	d504      	bpl.n	8002eba <write_motors+0x32>
	{
		HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_SET);
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4807      	ldr	r0, [pc, #28]	; (8002ed4 <write_motors+0x4c>)
 8002eb6:	f7fe f9ff 	bl	80012b8 <HAL_GPIO_WritePin>
//	else
//	{
//		HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_RESET);
//	}

	if(state & 0x08)
 8002eba:	0723      	lsls	r3, r4, #28
 8002ebc:	d507      	bpl.n	8002ece <write_motors+0x46>
	{
		HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_SET);
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	}
//	else
//	{
//		HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_RESET);
//	}
}
 8002ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//		HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_RESET);
//	}

	if(state & 0x08)
	{
		HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_SET);
 8002eca:	f7fe b9f5 	b.w	80012b8 <HAL_GPIO_WritePin>
 8002ece:	bd10      	pop	{r4, pc}
 8002ed0:	48000800 	.word	0x48000800
 8002ed4:	48000400 	.word	0x48000400

08002ed8 <step_acw>:
//		HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_RESET);
//	}
}

void step_acw()
{
 8002ed8:	b510      	push	{r4, lr}
	uint8_t i = --step_count%8; //0-7 val
 8002eda:	4c07      	ldr	r4, [pc, #28]	; (8002ef8 <step_acw+0x20>)
	write_motors(motor_movement_cw[i]);
 8002edc:	4a07      	ldr	r2, [pc, #28]	; (8002efc <step_acw+0x24>)
//	}
}

void step_acw()
{
	uint8_t i = --step_count%8; //0-7 val
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	6023      	str	r3, [r4, #0]
	write_motors(motor_movement_cw[i]);
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	5cd0      	ldrb	r0, [r2, r3]
 8002eea:	f7ff ffcd 	bl	8002e88 <write_motors>
	step_count %= STEPS_PER_ROTATION;
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef4:	6023      	str	r3, [r4, #0]
 8002ef6:	bd10      	pop	{r4, pc}
 8002ef8:	2000059c 	.word	0x2000059c
 8002efc:	20000004 	.word	0x20000004

08002f00 <step_cw>:
}

void step_cw()
{
 8002f00:	b510      	push	{r4, lr}
	write_motors(motor_movement_cw[step_count++%8]);
 8002f02:	4c07      	ldr	r4, [pc, #28]	; (8002f20 <step_cw+0x20>)
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	6022      	str	r2, [r4, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <step_cw+0x24>)
 8002f10:	5cd0      	ldrb	r0, [r2, r3]
 8002f12:	f7ff ffb9 	bl	8002e88 <write_motors>
	step_count %= STEPS_PER_ROTATION;
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	bd10      	pop	{r4, pc}
 8002f20:	2000059c 	.word	0x2000059c
 8002f24:	20000004 	.word	0x20000004

08002f28 <HAL_TIM_PeriodElapsedCallback>:
						   };



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b508      	push	{r3, lr}
//	HAL_GPIO_TogglePin(testpin_GPIO_Port, testpin_Pin);
	if(target_step_count == step_count)
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d109      	bne.n	8002f4a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		motors_off();
 8002f36:	f7ff ff69 	bl	8002e0c <motors_off>
		motor_running = false;
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x40>)
		HAL_TIM_Base_Stop_IT(&htim6);
 8002f3c:	480b      	ldr	r0, [pc, #44]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x44>)
{
//	HAL_GPIO_TogglePin(testpin_GPIO_Port, testpin_Pin);
	if(target_step_count == step_count)
	{
		motors_off();
		motor_running = false;
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
	if(direction)
		step_cw();
	else
		step_acw();
	}
}
 8002f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//	HAL_GPIO_TogglePin(testpin_GPIO_Port, testpin_Pin);
	if(target_step_count == step_count)
	{
		motors_off();
		motor_running = false;
		HAL_TIM_Base_Stop_IT(&htim6);
 8002f46:	f7ff b906 	b.w	8002156 <HAL_TIM_Base_Stop_IT>
	}
	else{

	if(direction)
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b11b      	cbz	r3, 8002f58 <HAL_TIM_PeriodElapsedCallback+0x30>
		step_cw();
	else
		step_acw();
	}
}
 8002f50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop_IT(&htim6);
	}
	else{

	if(direction)
		step_cw();
 8002f54:	f7ff bfd4 	b.w	8002f00 <step_cw>
	else
		step_acw();
	}
}
 8002f58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	else{

	if(direction)
		step_cw();
	else
		step_acw();
 8002f5c:	f7ff bfbc 	b.w	8002ed8 <step_acw>
 8002f60:	20000594 	.word	0x20000594
 8002f64:	2000059c 	.word	0x2000059c
 8002f68:	20000598 	.word	0x20000598
 8002f6c:	2000069c 	.word	0x2000069c
 8002f70:	20000599 	.word	0x20000599

08002f74 <zero_motor>:
	step_count %= STEPS_PER_ROTATION;
}


bool zero_motor()
{
 8002f74:	b508      	push	{r3, lr}
	//get us to zero location
	//if we are already at 0, move 10degrees acw first
	while(get_zero_state())
 8002f76:	f7ff ff3d 	bl	8002df4 <get_zero_state>
 8002f7a:	b128      	cbz	r0, 8002f88 <zero_motor+0x14>
	{
		step_acw();
 8002f7c:	f7ff ffac 	bl	8002ed8 <step_acw>
		HAL_Delay(1);
 8002f80:	2001      	movs	r0, #1
 8002f82:	f7fe f84b 	bl	800101c <HAL_Delay>
 8002f86:	e7f6      	b.n	8002f76 <zero_motor+0x2>
	}

	//rotate clockwise until the zero location is triggered
	while(!get_zero_state())
 8002f88:	f7ff ff34 	bl	8002df4 <get_zero_state>
 8002f8c:	b928      	cbnz	r0, 8002f9a <zero_motor+0x26>
	{
		step_cw();
 8002f8e:	f7ff ffb7 	bl	8002f00 <step_cw>
		HAL_Delay(1);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f7fe f842 	bl	800101c <HAL_Delay>
 8002f98:	e7f6      	b.n	8002f88 <zero_motor+0x14>
	}
	 motors_off();
 8002f9a:	f7ff ff37 	bl	8002e0c <motors_off>
	 current_angle_deg = 0;
 8002f9e:	4a03      	ldr	r2, [pc, #12]	; (8002fac <zero_motor+0x38>)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	8013      	strh	r3, [r2, #0]
	 step_count = 0;
 8002fa4:	4a02      	ldr	r2, [pc, #8]	; (8002fb0 <zero_motor+0x3c>)

	return true;
}
 8002fa6:	2001      	movs	r0, #1
		step_cw();
		HAL_Delay(1);
	}
	 motors_off();
	 current_angle_deg = 0;
	 step_count = 0;
 8002fa8:	6013      	str	r3, [r2, #0]

	return true;
}
 8002faa:	bd08      	pop	{r3, pc}
 8002fac:	20000592 	.word	0x20000592
 8002fb0:	2000059c 	.word	0x2000059c

08002fb4 <angle_difference>:


int16_t angle_difference(int16_t b1, int16_t b2) {
    int16_t r = (b2 - b1) % 360;
 8002fb4:	1a09      	subs	r1, r1, r0
 8002fb6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002fba:	fb91 f3f2 	sdiv	r3, r1, r2
 8002fbe:	fb02 1113 	mls	r1, r2, r3, r1
    if (r < -180) {
 8002fc2:	f111 0fb4 	cmn.w	r1, #180	; 0xb4
 8002fc6:	db03      	blt.n	8002fd0 <angle_difference+0x1c>
	return true;
}


int16_t angle_difference(int16_t b1, int16_t b2) {
    int16_t r = (b2 - b1) % 360;
 8002fc8:	b208      	sxth	r0, r1
    if (r < -180) {
      r += 360;
    }
    if (r >= 180) {
 8002fca:	28b3      	cmp	r0, #179	; 0xb3
 8002fcc:	dc03      	bgt.n	8002fd6 <angle_difference+0x22>
 8002fce:	4770      	bx	lr


int16_t angle_difference(int16_t b1, int16_t b2) {
    int16_t r = (b2 - b1) % 360;
    if (r < -180) {
      r += 360;
 8002fd0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002fd4:	e001      	b.n	8002fda <angle_difference+0x26>
    }
    if (r >= 180) {
      r -= 360;
 8002fd6:	f5a1 71b4 	sub.w	r1, r1, #360	; 0x168
 8002fda:	b208      	sxth	r0, r1
    }
    return r;
}
 8002fdc:	4770      	bx	lr
	...

08002fe0 <set_target>:
}


void set_target(int16_t target_deg)
{
	target_angle_deg = target_deg;
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <set_target+0x80>)
	}
}


void set_target(int16_t target_deg)
{
 8002fe2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	target_angle_deg = target_deg;
 8002fe6:	8018      	strh	r0, [r3, #0]
	}
}


void set_target(int16_t target_deg)
{
 8002fe8:	4604      	mov	r4, r0
	target_angle_deg = target_deg;
	target_step_count = (uint32_t)((double)target_angle_deg / STEP_ANGLE);
 8002fea:	f7fd fa9b 	bl	8000524 <__aeabi_i2d>
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <set_target+0x84>)
 8002ff2:	f7fd fc27 	bl	8000844 <__aeabi_ddiv>
 8002ff6:	f7fd fdd3 	bl	8000ba0 <__aeabi_d2uiz>
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <set_target+0x88>)
 8002ffc:	6018      	str	r0, [r3, #0]
	current_angle_deg = step_count * STEP_ANGLE;
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <set_target+0x8c>)
 8003000:	f8d3 8000 	ldr.w	r8, [r3]


void set_target(int16_t target_deg)
{
	target_angle_deg = target_deg;
	target_step_count = (uint32_t)((double)target_angle_deg / STEP_ANGLE);
 8003004:	4607      	mov	r7, r0
	current_angle_deg = step_count * STEP_ANGLE;
 8003006:	4640      	mov	r0, r8
 8003008:	f7fd fa7c 	bl	8000504 <__aeabi_ui2d>
 800300c:	2200      	movs	r2, #0
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <set_target+0x84>)
 8003010:	f7fd faee 	bl	80005f0 <__aeabi_dmul>
 8003014:	f7fd fd9c 	bl	8000b50 <__aeabi_d2iz>
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <set_target+0x90>)
 800301a:	b205      	sxth	r5, r0
	bool dir = (angle_difference(current_angle_deg, target_angle_deg) > 0);
 800301c:	4621      	mov	r1, r4
 800301e:	4628      	mov	r0, r5

void set_target(int16_t target_deg)
{
	target_angle_deg = target_deg;
	target_step_count = (uint32_t)((double)target_angle_deg / STEP_ANGLE);
	current_angle_deg = step_count * STEP_ANGLE;
 8003020:	801d      	strh	r5, [r3, #0]
	bool dir = (angle_difference(current_angle_deg, target_angle_deg) > 0);
 8003022:	f7ff ffc7 	bl	8002fb4 <angle_difference>
	printf("t=%d:%d, c=%d:%d\n\r", target_angle_deg, target_step_count, current_angle_deg, step_count);
 8003026:	4621      	mov	r1, r4
void set_target(int16_t target_deg)
{
	target_angle_deg = target_deg;
	target_step_count = (uint32_t)((double)target_angle_deg / STEP_ANGLE);
	current_angle_deg = step_count * STEP_ANGLE;
	bool dir = (angle_difference(current_angle_deg, target_angle_deg) > 0);
 8003028:	2800      	cmp	r0, #0
 800302a:	4606      	mov	r6, r0
	printf("t=%d:%d, c=%d:%d\n\r", target_angle_deg, target_step_count, current_angle_deg, step_count);
 800302c:	462b      	mov	r3, r5
 800302e:	463a      	mov	r2, r7
 8003030:	f8cd 8000 	str.w	r8, [sp]
 8003034:	480f      	ldr	r0, [pc, #60]	; (8003074 <set_target+0x94>)
void set_target(int16_t target_deg)
{
	target_angle_deg = target_deg;
	target_step_count = (uint32_t)((double)target_angle_deg / STEP_ANGLE);
	current_angle_deg = step_count * STEP_ANGLE;
	bool dir = (angle_difference(current_angle_deg, target_angle_deg) > 0);
 8003036:	bfd4      	ite	le
 8003038:	f04f 0900 	movle.w	r9, #0
 800303c:	f04f 0901 	movgt.w	r9, #1
	printf("t=%d:%d, c=%d:%d\n\r", target_angle_deg, target_step_count, current_angle_deg, step_count);
 8003040:	f000 fb7a 	bl	8003738 <printf>
	if(dir)
 8003044:	2e00      	cmp	r6, #0
	printf("cw\n\r");
 8003046:	bfcc      	ite	gt
 8003048:	480b      	ldrgt	r0, [pc, #44]	; (8003078 <set_target+0x98>)
	else
		printf("acw\n\r");
 800304a:	480c      	ldrle	r0, [pc, #48]	; (800307c <set_target+0x9c>)
 800304c:	f000 fb74 	bl	8003738 <printf>
	set_speed(100, dir);
 8003050:	4649      	mov	r1, r9
 8003052:	2064      	movs	r0, #100	; 0x64
}
 8003054:	b003      	add	sp, #12
 8003056:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("t=%d:%d, c=%d:%d\n\r", target_angle_deg, target_step_count, current_angle_deg, step_count);
	if(dir)
	printf("cw\n\r");
	else
		printf("acw\n\r");
	set_speed(100, dir);
 800305a:	f7ff bef5 	b.w	8002e48 <set_speed>
 800305e:	bf00      	nop
 8003060:	20000590 	.word	0x20000590
 8003064:	3fb68000 	.word	0x3fb68000
 8003068:	20000594 	.word	0x20000594
 800306c:	2000059c 	.word	0x2000059c
 8003070:	20000592 	.word	0x20000592
 8003074:	08007059 	.word	0x08007059
 8003078:	0800706d 	.word	0x0800706d
 800307c:	0800706c 	.word	0x0800706c

08003080 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_MspInit+0x78>)

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003082:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	619a      	str	r2, [r3, #24]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003094:	2007      	movs	r0, #7
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003096:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003098:	f7fd ffce 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800309c:	2200      	movs	r2, #0
 800309e:	4611      	mov	r1, r2
 80030a0:	f06f 000b 	mvn.w	r0, #11
 80030a4:	f7fd ffda 	bl	800105c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	4611      	mov	r1, r2
 80030ac:	f06f 000a 	mvn.w	r0, #10
 80030b0:	f7fd ffd4 	bl	800105c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80030b4:	2200      	movs	r2, #0
 80030b6:	4611      	mov	r1, r2
 80030b8:	f06f 0009 	mvn.w	r0, #9
 80030bc:	f7fd ffce 	bl	800105c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80030c0:	2200      	movs	r2, #0
 80030c2:	4611      	mov	r1, r2
 80030c4:	f06f 0004 	mvn.w	r0, #4
 80030c8:	f7fd ffc8 	bl	800105c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80030cc:	2200      	movs	r2, #0
 80030ce:	4611      	mov	r1, r2
 80030d0:	f06f 0003 	mvn.w	r0, #3
 80030d4:	f7fd ffc2 	bl	800105c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80030d8:	2200      	movs	r2, #0
 80030da:	4611      	mov	r1, r2
 80030dc:	f06f 0001 	mvn.w	r0, #1
 80030e0:	f7fd ffbc 	bl	800105c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	4611      	mov	r1, r2
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f7fd ffb6 	bl	800105c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030f0:	b003      	add	sp, #12
 80030f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80030fe:	6802      	ldr	r2, [r0, #0]
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <HAL_I2C_MspInit+0x44>)
 8003102:	429a      	cmp	r2, r3
 8003104:	d119      	bne.n	800313a <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SCA_Pin;
 8003106:	f44f 7340 	mov.w	r3, #768	; 0x300
 800310a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800310c:	2312      	movs	r3, #18
 800310e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003110:	2301      	movs	r3, #1
 8003112:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003118:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800311a:	eb0d 0103 	add.w	r1, sp, r3
 800311e:	4809      	ldr	r0, [pc, #36]	; (8003144 <HAL_I2C_MspInit+0x48>)
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SCA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003120:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003122:	f7fe f803 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_I2C_MspInit+0x4c>)
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800312e:	61da      	str	r2, [r3, #28]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800313a:	b007      	add	sp, #28
 800313c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003140:	40005400 	.word	0x40005400
 8003144:	48000400 	.word	0x48000400
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_TIM_Base_MspInit>:
  /* USER CODE END I2C1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800314c:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <HAL_TIM_Base_MspInit+0x38>)
 8003150:	6802      	ldr	r2, [r0, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d112      	bne.n	800317c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003156:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800315a:	2036      	movs	r0, #54	; 0x36
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	f042 0210 	orr.w	r2, r2, #16
 8003162:	61da      	str	r2, [r3, #28]
 8003164:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800316e:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003170:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003172:	f7fd ff73 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003176:	2036      	movs	r0, #54	; 0x36
 8003178:	f7fd ffa4 	bl	80010c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800317c:	b003      	add	sp, #12
 800317e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003182:	bf00      	nop
 8003184:	40001000 	.word	0x40001000

08003188 <HAL_UART_MspInit>:
  /* USER CODE END TIM6_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003188:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800318a:	6803      	ldr	r3, [r0, #0]
 800318c:	4a26      	ldr	r2, [pc, #152]	; (8003228 <HAL_UART_MspInit+0xa0>)
 800318e:	4293      	cmp	r3, r2
  /* USER CODE END TIM6_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003190:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003192:	d12c      	bne.n	80031ee <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_UART_MspInit+0xa4>)
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800319c:	619a      	str	r2, [r3, #24]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	9b01      	ldr	r3, [sp, #4]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2702      	movs	r7, #2
  
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 80031aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ae:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b0:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031b2:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80031b4:	a903      	add	r1, sp, #12
 80031b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 80031ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031be:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031c0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031c2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80031c4:	f7fd ffb2 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80031c8:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80031ca:	a903      	add	r1, sp, #12
 80031cc:	4818      	ldr	r0, [pc, #96]	; (8003230 <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80031ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031d2:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031d4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031d6:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80031d8:	f7fd ffa8 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031dc:	2200      	movs	r2, #0
 80031de:	4611      	mov	r1, r2
 80031e0:	2025      	movs	r0, #37	; 0x25
 80031e2:	f7fd ff3b 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031e6:	2025      	movs	r0, #37	; 0x25
 80031e8:	f7fd ff6c 	bl	80010c4 <HAL_NVIC_EnableIRQ>
 80031ec:	e01a      	b.n	8003224 <HAL_UART_MspInit+0x9c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80031ee:	4a11      	ldr	r2, [pc, #68]	; (8003234 <HAL_UART_MspInit+0xac>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d117      	bne.n	8003224 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_UART_MspInit+0xa4>)
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031fc:	61da      	str	r2, [r3, #28]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	9302      	str	r3, [sp, #8]
 8003206:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003208:	230c      	movs	r3, #12
 800320a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003216:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003218:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800321e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003220:	f7fd ff84 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003224:	b009      	add	sp, #36	; 0x24
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003228:	40013800 	.word	0x40013800
 800322c:	40021000 	.word	0x40021000
 8003230:	48000400 	.word	0x48000400
 8003234:	40004400 	.word	0x40004400

08003238 <NMI_Handler>:
 8003238:	4770      	bx	lr

0800323a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800323a:	e7fe      	b.n	800323a <HardFault_Handler>

0800323c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800323c:	e7fe      	b.n	800323c <MemManage_Handler>

0800323e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800323e:	e7fe      	b.n	800323e <BusFault_Handler>

08003240 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003240:	e7fe      	b.n	8003240 <UsageFault_Handler>

08003242 <SVC_Handler>:
 8003242:	4770      	bx	lr

08003244 <DebugMon_Handler>:
 8003244:	4770      	bx	lr

08003246 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003246:	4770      	bx	lr

08003248 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003248:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800324a:	f7fd fed9 	bl	8001000 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800324e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8003252:	f7fd bf66 	b.w	8001122 <HAL_SYSTICK_IRQHandler>
	...

08003258 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003258:	4801      	ldr	r0, [pc, #4]	; (8003260 <USART1_IRQHandler+0x8>)
 800325a:	f7ff bb1b 	b.w	8002894 <HAL_UART_IRQHandler>
 800325e:	bf00      	nop
 8003260:	2000062c 	.word	0x2000062c

08003264 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003264:	4801      	ldr	r0, [pc, #4]	; (800326c <TIM6_DAC_IRQHandler+0x8>)
 8003266:	f7fe bf8f 	b.w	8002188 <HAL_TIM_IRQHandler>
 800326a:	bf00      	nop
 800326c:	2000069c 	.word	0x2000069c

08003270 <__libc_init_array>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <__libc_init_array+0x3c>)
 8003274:	4c0e      	ldr	r4, [pc, #56]	; (80032b0 <__libc_init_array+0x40>)
 8003276:	1ae4      	subs	r4, r4, r3
 8003278:	10a4      	asrs	r4, r4, #2
 800327a:	2500      	movs	r5, #0
 800327c:	461e      	mov	r6, r3
 800327e:	42a5      	cmp	r5, r4
 8003280:	d004      	beq.n	800328c <__libc_init_array+0x1c>
 8003282:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003286:	4798      	blx	r3
 8003288:	3501      	adds	r5, #1
 800328a:	e7f8      	b.n	800327e <__libc_init_array+0xe>
 800328c:	f003 fe66 	bl	8006f5c <_init>
 8003290:	4c08      	ldr	r4, [pc, #32]	; (80032b4 <__libc_init_array+0x44>)
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <__libc_init_array+0x48>)
 8003294:	1ae4      	subs	r4, r4, r3
 8003296:	10a4      	asrs	r4, r4, #2
 8003298:	2500      	movs	r5, #0
 800329a:	461e      	mov	r6, r3
 800329c:	42a5      	cmp	r5, r4
 800329e:	d004      	beq.n	80032aa <__libc_init_array+0x3a>
 80032a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032a4:	4798      	blx	r3
 80032a6:	3501      	adds	r5, #1
 80032a8:	e7f8      	b.n	800329c <__libc_init_array+0x2c>
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	080072c8 	.word	0x080072c8
 80032b0:	080072c8 	.word	0x080072c8
 80032b4:	080072cc 	.word	0x080072cc
 80032b8:	080072c8 	.word	0x080072c8

080032bc <malloc>:
 80032bc:	4b02      	ldr	r3, [pc, #8]	; (80032c8 <malloc+0xc>)
 80032be:	4601      	mov	r1, r0
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	f000 b803 	b.w	80032cc <_malloc_r>
 80032c6:	bf00      	nop
 80032c8:	200000fc 	.word	0x200000fc

080032cc <_malloc_r>:
 80032cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d0:	f101 040b 	add.w	r4, r1, #11
 80032d4:	2c16      	cmp	r4, #22
 80032d6:	b085      	sub	sp, #20
 80032d8:	4681      	mov	r9, r0
 80032da:	d903      	bls.n	80032e4 <_malloc_r+0x18>
 80032dc:	f034 0407 	bics.w	r4, r4, #7
 80032e0:	d501      	bpl.n	80032e6 <_malloc_r+0x1a>
 80032e2:	e002      	b.n	80032ea <_malloc_r+0x1e>
 80032e4:	2410      	movs	r4, #16
 80032e6:	428c      	cmp	r4, r1
 80032e8:	d203      	bcs.n	80032f2 <_malloc_r+0x26>
 80032ea:	230c      	movs	r3, #12
 80032ec:	f8c9 3000 	str.w	r3, [r9]
 80032f0:	e1ea      	b.n	80036c8 <_malloc_r+0x3fc>
 80032f2:	4648      	mov	r0, r9
 80032f4:	f000 fa1d 	bl	8003732 <__malloc_lock>
 80032f8:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80032fc:	4d9e      	ldr	r5, [pc, #632]	; (8003578 <_malloc_r+0x2ac>)
 80032fe:	d217      	bcs.n	8003330 <_malloc_r+0x64>
 8003300:	f104 0208 	add.w	r2, r4, #8
 8003304:	442a      	add	r2, r5
 8003306:	f1a2 0108 	sub.w	r1, r2, #8
 800330a:	6856      	ldr	r6, [r2, #4]
 800330c:	428e      	cmp	r6, r1
 800330e:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8003312:	d102      	bne.n	800331a <_malloc_r+0x4e>
 8003314:	68d6      	ldr	r6, [r2, #12]
 8003316:	42b2      	cmp	r2, r6
 8003318:	d008      	beq.n	800332c <_malloc_r+0x60>
 800331a:	6873      	ldr	r3, [r6, #4]
 800331c:	68f2      	ldr	r2, [r6, #12]
 800331e:	68b1      	ldr	r1, [r6, #8]
 8003320:	f023 0303 	bic.w	r3, r3, #3
 8003324:	60ca      	str	r2, [r1, #12]
 8003326:	4433      	add	r3, r6
 8003328:	6091      	str	r1, [r2, #8]
 800332a:	e02f      	b.n	800338c <_malloc_r+0xc0>
 800332c:	3302      	adds	r3, #2
 800332e:	e03d      	b.n	80033ac <_malloc_r+0xe0>
 8003330:	0a63      	lsrs	r3, r4, #9
 8003332:	d01a      	beq.n	800336a <_malloc_r+0x9e>
 8003334:	2b04      	cmp	r3, #4
 8003336:	d802      	bhi.n	800333e <_malloc_r+0x72>
 8003338:	09a3      	lsrs	r3, r4, #6
 800333a:	3338      	adds	r3, #56	; 0x38
 800333c:	e018      	b.n	8003370 <_malloc_r+0xa4>
 800333e:	2b14      	cmp	r3, #20
 8003340:	d801      	bhi.n	8003346 <_malloc_r+0x7a>
 8003342:	335b      	adds	r3, #91	; 0x5b
 8003344:	e014      	b.n	8003370 <_malloc_r+0xa4>
 8003346:	2b54      	cmp	r3, #84	; 0x54
 8003348:	d802      	bhi.n	8003350 <_malloc_r+0x84>
 800334a:	0b23      	lsrs	r3, r4, #12
 800334c:	336e      	adds	r3, #110	; 0x6e
 800334e:	e00f      	b.n	8003370 <_malloc_r+0xa4>
 8003350:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003354:	d802      	bhi.n	800335c <_malloc_r+0x90>
 8003356:	0be3      	lsrs	r3, r4, #15
 8003358:	3377      	adds	r3, #119	; 0x77
 800335a:	e009      	b.n	8003370 <_malloc_r+0xa4>
 800335c:	f240 5254 	movw	r2, #1364	; 0x554
 8003360:	4293      	cmp	r3, r2
 8003362:	d804      	bhi.n	800336e <_malloc_r+0xa2>
 8003364:	0ca3      	lsrs	r3, r4, #18
 8003366:	337c      	adds	r3, #124	; 0x7c
 8003368:	e002      	b.n	8003370 <_malloc_r+0xa4>
 800336a:	233f      	movs	r3, #63	; 0x3f
 800336c:	e000      	b.n	8003370 <_malloc_r+0xa4>
 800336e:	237e      	movs	r3, #126	; 0x7e
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003376:	f1a2 0008 	sub.w	r0, r2, #8
 800337a:	6856      	ldr	r6, [r2, #4]
 800337c:	e00c      	b.n	8003398 <_malloc_r+0xcc>
 800337e:	2900      	cmp	r1, #0
 8003380:	68f1      	ldr	r1, [r6, #12]
 8003382:	db08      	blt.n	8003396 <_malloc_r+0xca>
 8003384:	68b3      	ldr	r3, [r6, #8]
 8003386:	60d9      	str	r1, [r3, #12]
 8003388:	608b      	str	r3, [r1, #8]
 800338a:	18b3      	adds	r3, r6, r2
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	e1a3      	b.n	80036de <_malloc_r+0x412>
 8003396:	460e      	mov	r6, r1
 8003398:	4286      	cmp	r6, r0
 800339a:	d006      	beq.n	80033aa <_malloc_r+0xde>
 800339c:	6872      	ldr	r2, [r6, #4]
 800339e:	f022 0203 	bic.w	r2, r2, #3
 80033a2:	1b11      	subs	r1, r2, r4
 80033a4:	290f      	cmp	r1, #15
 80033a6:	ddea      	ble.n	800337e <_malloc_r+0xb2>
 80033a8:	3b01      	subs	r3, #1
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a72      	ldr	r2, [pc, #456]	; (8003578 <_malloc_r+0x2ac>)
 80033ae:	692e      	ldr	r6, [r5, #16]
 80033b0:	f102 0708 	add.w	r7, r2, #8
 80033b4:	42be      	cmp	r6, r7
 80033b6:	4639      	mov	r1, r7
 80033b8:	d079      	beq.n	80034ae <_malloc_r+0x1e2>
 80033ba:	6870      	ldr	r0, [r6, #4]
 80033bc:	f020 0003 	bic.w	r0, r0, #3
 80033c0:	ebc4 0e00 	rsb	lr, r4, r0
 80033c4:	f1be 0f0f 	cmp.w	lr, #15
 80033c8:	dd0d      	ble.n	80033e6 <_malloc_r+0x11a>
 80033ca:	1933      	adds	r3, r6, r4
 80033cc:	f044 0401 	orr.w	r4, r4, #1
 80033d0:	6074      	str	r4, [r6, #4]
 80033d2:	6153      	str	r3, [r2, #20]
 80033d4:	6113      	str	r3, [r2, #16]
 80033d6:	f04e 0201 	orr.w	r2, lr, #1
 80033da:	60df      	str	r7, [r3, #12]
 80033dc:	609f      	str	r7, [r3, #8]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	f843 e00e 	str.w	lr, [r3, lr]
 80033e4:	e17b      	b.n	80036de <_malloc_r+0x412>
 80033e6:	f1be 0f00 	cmp.w	lr, #0
 80033ea:	6157      	str	r7, [r2, #20]
 80033ec:	6117      	str	r7, [r2, #16]
 80033ee:	db05      	blt.n	80033fc <_malloc_r+0x130>
 80033f0:	4430      	add	r0, r6
 80033f2:	6843      	ldr	r3, [r0, #4]
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6043      	str	r3, [r0, #4]
 80033fa:	e170      	b.n	80036de <_malloc_r+0x412>
 80033fc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003400:	d215      	bcs.n	800342e <_malloc_r+0x162>
 8003402:	08c0      	lsrs	r0, r0, #3
 8003404:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8003408:	2701      	movs	r7, #1
 800340a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800340e:	6857      	ldr	r7, [r2, #4]
 8003410:	3001      	adds	r0, #1
 8003412:	ea4e 0707 	orr.w	r7, lr, r7
 8003416:	6057      	str	r7, [r2, #4]
 8003418:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 800341c:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8003420:	f8c6 e008 	str.w	lr, [r6, #8]
 8003424:	3f08      	subs	r7, #8
 8003426:	60f7      	str	r7, [r6, #12]
 8003428:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 800342c:	e03d      	b.n	80034aa <_malloc_r+0x1de>
 800342e:	0a42      	lsrs	r2, r0, #9
 8003430:	2a04      	cmp	r2, #4
 8003432:	d802      	bhi.n	800343a <_malloc_r+0x16e>
 8003434:	0982      	lsrs	r2, r0, #6
 8003436:	3238      	adds	r2, #56	; 0x38
 8003438:	e015      	b.n	8003466 <_malloc_r+0x19a>
 800343a:	2a14      	cmp	r2, #20
 800343c:	d801      	bhi.n	8003442 <_malloc_r+0x176>
 800343e:	325b      	adds	r2, #91	; 0x5b
 8003440:	e011      	b.n	8003466 <_malloc_r+0x19a>
 8003442:	2a54      	cmp	r2, #84	; 0x54
 8003444:	d802      	bhi.n	800344c <_malloc_r+0x180>
 8003446:	0b02      	lsrs	r2, r0, #12
 8003448:	326e      	adds	r2, #110	; 0x6e
 800344a:	e00c      	b.n	8003466 <_malloc_r+0x19a>
 800344c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003450:	d802      	bhi.n	8003458 <_malloc_r+0x18c>
 8003452:	0bc2      	lsrs	r2, r0, #15
 8003454:	3277      	adds	r2, #119	; 0x77
 8003456:	e006      	b.n	8003466 <_malloc_r+0x19a>
 8003458:	f240 5754 	movw	r7, #1364	; 0x554
 800345c:	42ba      	cmp	r2, r7
 800345e:	bf9a      	itte	ls
 8003460:	0c82      	lsrls	r2, r0, #18
 8003462:	327c      	addls	r2, #124	; 0x7c
 8003464:	227e      	movhi	r2, #126	; 0x7e
 8003466:	1c57      	adds	r7, r2, #1
 8003468:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800346c:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003470:	f8df c104 	ldr.w	ip, [pc, #260]	; 8003578 <_malloc_r+0x2ac>
 8003474:	45be      	cmp	lr, r7
 8003476:	d10d      	bne.n	8003494 <_malloc_r+0x1c8>
 8003478:	2001      	movs	r0, #1
 800347a:	1092      	asrs	r2, r2, #2
 800347c:	fa00 f202 	lsl.w	r2, r0, r2
 8003480:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8003484:	4310      	orrs	r0, r2
 8003486:	f8cc 0004 	str.w	r0, [ip, #4]
 800348a:	4672      	mov	r2, lr
 800348c:	e009      	b.n	80034a2 <_malloc_r+0x1d6>
 800348e:	68bf      	ldr	r7, [r7, #8]
 8003490:	45be      	cmp	lr, r7
 8003492:	d004      	beq.n	800349e <_malloc_r+0x1d2>
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	f022 0203 	bic.w	r2, r2, #3
 800349a:	4290      	cmp	r0, r2
 800349c:	d3f7      	bcc.n	800348e <_malloc_r+0x1c2>
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	46be      	mov	lr, r7
 80034a2:	60f2      	str	r2, [r6, #12]
 80034a4:	f8c6 e008 	str.w	lr, [r6, #8]
 80034a8:	6096      	str	r6, [r2, #8]
 80034aa:	f8ce 600c 	str.w	r6, [lr, #12]
 80034ae:	2001      	movs	r0, #1
 80034b0:	109a      	asrs	r2, r3, #2
 80034b2:	fa00 f202 	lsl.w	r2, r0, r2
 80034b6:	6868      	ldr	r0, [r5, #4]
 80034b8:	4282      	cmp	r2, r0
 80034ba:	d85f      	bhi.n	800357c <_malloc_r+0x2b0>
 80034bc:	4202      	tst	r2, r0
 80034be:	d106      	bne.n	80034ce <_malloc_r+0x202>
 80034c0:	f023 0303 	bic.w	r3, r3, #3
 80034c4:	0052      	lsls	r2, r2, #1
 80034c6:	4202      	tst	r2, r0
 80034c8:	f103 0304 	add.w	r3, r3, #4
 80034cc:	d0fa      	beq.n	80034c4 <_malloc_r+0x1f8>
 80034ce:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80034d2:	46c2      	mov	sl, r8
 80034d4:	469c      	mov	ip, r3
 80034d6:	f8da 600c 	ldr.w	r6, [sl, #12]
 80034da:	4556      	cmp	r6, sl
 80034dc:	d02c      	beq.n	8003538 <_malloc_r+0x26c>
 80034de:	6870      	ldr	r0, [r6, #4]
 80034e0:	68f7      	ldr	r7, [r6, #12]
 80034e2:	f020 0003 	bic.w	r0, r0, #3
 80034e6:	ebc4 0e00 	rsb	lr, r4, r0
 80034ea:	f1be 0f0f 	cmp.w	lr, #15
 80034ee:	dd11      	ble.n	8003514 <_malloc_r+0x248>
 80034f0:	1933      	adds	r3, r6, r4
 80034f2:	f044 0401 	orr.w	r4, r4, #1
 80034f6:	6074      	str	r4, [r6, #4]
 80034f8:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80034fc:	60d7      	str	r7, [r2, #12]
 80034fe:	60ba      	str	r2, [r7, #8]
 8003500:	f04e 0201 	orr.w	r2, lr, #1
 8003504:	616b      	str	r3, [r5, #20]
 8003506:	612b      	str	r3, [r5, #16]
 8003508:	60d9      	str	r1, [r3, #12]
 800350a:	6099      	str	r1, [r3, #8]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	f843 e00e 	str.w	lr, [r3, lr]
 8003512:	e00b      	b.n	800352c <_malloc_r+0x260>
 8003514:	f1be 0f00 	cmp.w	lr, #0
 8003518:	db0c      	blt.n	8003534 <_malloc_r+0x268>
 800351a:	1833      	adds	r3, r6, r0
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003528:	60df      	str	r7, [r3, #12]
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	4648      	mov	r0, r9
 800352e:	f000 f901 	bl	8003734 <__malloc_unlock>
 8003532:	e0d8      	b.n	80036e6 <_malloc_r+0x41a>
 8003534:	463e      	mov	r6, r7
 8003536:	e7d0      	b.n	80034da <_malloc_r+0x20e>
 8003538:	f10c 0c01 	add.w	ip, ip, #1
 800353c:	f01c 0f03 	tst.w	ip, #3
 8003540:	f10a 0a08 	add.w	sl, sl, #8
 8003544:	d1c7      	bne.n	80034d6 <_malloc_r+0x20a>
 8003546:	0798      	lsls	r0, r3, #30
 8003548:	d104      	bne.n	8003554 <_malloc_r+0x288>
 800354a:	686b      	ldr	r3, [r5, #4]
 800354c:	ea23 0302 	bic.w	r3, r3, r2
 8003550:	606b      	str	r3, [r5, #4]
 8003552:	e005      	b.n	8003560 <_malloc_r+0x294>
 8003554:	f858 0908 	ldr.w	r0, [r8], #-8
 8003558:	4580      	cmp	r8, r0
 800355a:	f103 33ff 	add.w	r3, r3, #4294967295
 800355e:	d0f2      	beq.n	8003546 <_malloc_r+0x27a>
 8003560:	6868      	ldr	r0, [r5, #4]
 8003562:	0052      	lsls	r2, r2, #1
 8003564:	4282      	cmp	r2, r0
 8003566:	d809      	bhi.n	800357c <_malloc_r+0x2b0>
 8003568:	b142      	cbz	r2, 800357c <_malloc_r+0x2b0>
 800356a:	4663      	mov	r3, ip
 800356c:	4202      	tst	r2, r0
 800356e:	d1ae      	bne.n	80034ce <_malloc_r+0x202>
 8003570:	3304      	adds	r3, #4
 8003572:	0052      	lsls	r2, r2, #1
 8003574:	e7fa      	b.n	800356c <_malloc_r+0x2a0>
 8003576:	bf00      	nop
 8003578:	20000100 	.word	0x20000100
 800357c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003580:	f8db 6004 	ldr.w	r6, [fp, #4]
 8003584:	f026 0603 	bic.w	r6, r6, #3
 8003588:	42b4      	cmp	r4, r6
 800358a:	d803      	bhi.n	8003594 <_malloc_r+0x2c8>
 800358c:	1b33      	subs	r3, r6, r4
 800358e:	2b0f      	cmp	r3, #15
 8003590:	f300 809c 	bgt.w	80036cc <_malloc_r+0x400>
 8003594:	4a56      	ldr	r2, [pc, #344]	; (80036f0 <_malloc_r+0x424>)
 8003596:	4957      	ldr	r1, [pc, #348]	; (80036f4 <_malloc_r+0x428>)
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	6808      	ldr	r0, [r1, #0]
 800359c:	9101      	str	r1, [sp, #4]
 800359e:	f102 0810 	add.w	r8, r2, #16
 80035a2:	4a55      	ldr	r2, [pc, #340]	; (80036f8 <_malloc_r+0x42c>)
 80035a4:	9203      	str	r2, [sp, #12]
 80035a6:	3001      	adds	r0, #1
 80035a8:	bf18      	it	ne
 80035aa:	f102 31ff 	addne.w	r1, r2, #4294967295
 80035ae:	44a0      	add	r8, r4
 80035b0:	bf1e      	ittt	ne
 80035b2:	4488      	addne	r8, r1
 80035b4:	4251      	negne	r1, r2
 80035b6:	ea01 0808 	andne.w	r8, r1, r8
 80035ba:	eb0b 0306 	add.w	r3, fp, r6
 80035be:	4641      	mov	r1, r8
 80035c0:	4648      	mov	r0, r9
 80035c2:	9302      	str	r3, [sp, #8]
 80035c4:	f000 f8d0 	bl	8003768 <_sbrk_r>
 80035c8:	1c42      	adds	r2, r0, #1
 80035ca:	4607      	mov	r7, r0
 80035cc:	d06f      	beq.n	80036ae <_malloc_r+0x3e2>
 80035ce:	9b02      	ldr	r3, [sp, #8]
 80035d0:	9a03      	ldr	r2, [sp, #12]
 80035d2:	4283      	cmp	r3, r0
 80035d4:	d901      	bls.n	80035da <_malloc_r+0x30e>
 80035d6:	45ab      	cmp	fp, r5
 80035d8:	d169      	bne.n	80036ae <_malloc_r+0x3e2>
 80035da:	f8df a128 	ldr.w	sl, [pc, #296]	; 8003704 <_malloc_r+0x438>
 80035de:	f8df c128 	ldr.w	ip, [pc, #296]	; 8003708 <_malloc_r+0x43c>
 80035e2:	f8da 0000 	ldr.w	r0, [sl]
 80035e6:	42bb      	cmp	r3, r7
 80035e8:	4440      	add	r0, r8
 80035ea:	f8ca 0000 	str.w	r0, [sl]
 80035ee:	d108      	bne.n	8003602 <_malloc_r+0x336>
 80035f0:	ea13 0f0c 	tst.w	r3, ip
 80035f4:	d105      	bne.n	8003602 <_malloc_r+0x336>
 80035f6:	68ab      	ldr	r3, [r5, #8]
 80035f8:	4446      	add	r6, r8
 80035fa:	f046 0601 	orr.w	r6, r6, #1
 80035fe:	605e      	str	r6, [r3, #4]
 8003600:	e049      	b.n	8003696 <_malloc_r+0x3ca>
 8003602:	9901      	ldr	r1, [sp, #4]
 8003604:	f8d1 e000 	ldr.w	lr, [r1]
 8003608:	f1be 3fff 	cmp.w	lr, #4294967295
 800360c:	bf15      	itete	ne
 800360e:	1afb      	subne	r3, r7, r3
 8003610:	4b38      	ldreq	r3, [pc, #224]	; (80036f4 <_malloc_r+0x428>)
 8003612:	181b      	addne	r3, r3, r0
 8003614:	601f      	streq	r7, [r3, #0]
 8003616:	bf18      	it	ne
 8003618:	f8ca 3000 	strne.w	r3, [sl]
 800361c:	f017 0307 	ands.w	r3, r7, #7
 8003620:	bf1c      	itt	ne
 8003622:	f1c3 0308 	rsbne	r3, r3, #8
 8003626:	18ff      	addne	r7, r7, r3
 8003628:	44b8      	add	r8, r7
 800362a:	441a      	add	r2, r3
 800362c:	ea08 080c 	and.w	r8, r8, ip
 8003630:	ebc8 0802 	rsb	r8, r8, r2
 8003634:	4641      	mov	r1, r8
 8003636:	4648      	mov	r0, r9
 8003638:	f000 f896 	bl	8003768 <_sbrk_r>
 800363c:	1c43      	adds	r3, r0, #1
 800363e:	bf04      	itt	eq
 8003640:	4638      	moveq	r0, r7
 8003642:	f04f 0800 	moveq.w	r8, #0
 8003646:	f8da 3000 	ldr.w	r3, [sl]
 800364a:	60af      	str	r7, [r5, #8]
 800364c:	1bc2      	subs	r2, r0, r7
 800364e:	4442      	add	r2, r8
 8003650:	4443      	add	r3, r8
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	45ab      	cmp	fp, r5
 8003658:	f8ca 3000 	str.w	r3, [sl]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	d01a      	beq.n	8003696 <_malloc_r+0x3ca>
 8003660:	2e0f      	cmp	r6, #15
 8003662:	d802      	bhi.n	800366a <_malloc_r+0x39e>
 8003664:	2301      	movs	r3, #1
 8003666:	607b      	str	r3, [r7, #4]
 8003668:	e021      	b.n	80036ae <_malloc_r+0x3e2>
 800366a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800366e:	3e0c      	subs	r6, #12
 8003670:	f026 0607 	bic.w	r6, r6, #7
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	4333      	orrs	r3, r6
 800367a:	f8cb 3004 	str.w	r3, [fp, #4]
 800367e:	eb0b 0306 	add.w	r3, fp, r6
 8003682:	2205      	movs	r2, #5
 8003684:	2e0f      	cmp	r6, #15
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	609a      	str	r2, [r3, #8]
 800368a:	d904      	bls.n	8003696 <_malloc_r+0x3ca>
 800368c:	f10b 0108 	add.w	r1, fp, #8
 8003690:	4648      	mov	r0, r9
 8003692:	f002 f98f 	bl	80059b4 <_free_r>
 8003696:	4a19      	ldr	r2, [pc, #100]	; (80036fc <_malloc_r+0x430>)
 8003698:	f8da 3000 	ldr.w	r3, [sl]
 800369c:	6811      	ldr	r1, [r2, #0]
 800369e:	428b      	cmp	r3, r1
 80036a0:	bf88      	it	hi
 80036a2:	6013      	strhi	r3, [r2, #0]
 80036a4:	4a16      	ldr	r2, [pc, #88]	; (8003700 <_malloc_r+0x434>)
 80036a6:	6811      	ldr	r1, [r2, #0]
 80036a8:	428b      	cmp	r3, r1
 80036aa:	bf88      	it	hi
 80036ac:	6013      	strhi	r3, [r2, #0]
 80036ae:	68ab      	ldr	r3, [r5, #8]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	f022 0203 	bic.w	r2, r2, #3
 80036b6:	4294      	cmp	r4, r2
 80036b8:	eba2 0304 	sub.w	r3, r2, r4
 80036bc:	d801      	bhi.n	80036c2 <_malloc_r+0x3f6>
 80036be:	2b0f      	cmp	r3, #15
 80036c0:	dc04      	bgt.n	80036cc <_malloc_r+0x400>
 80036c2:	4648      	mov	r0, r9
 80036c4:	f000 f836 	bl	8003734 <__malloc_unlock>
 80036c8:	2600      	movs	r6, #0
 80036ca:	e00c      	b.n	80036e6 <_malloc_r+0x41a>
 80036cc:	68ae      	ldr	r6, [r5, #8]
 80036ce:	f044 0201 	orr.w	r2, r4, #1
 80036d2:	4434      	add	r4, r6
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6072      	str	r2, [r6, #4]
 80036da:	60ac      	str	r4, [r5, #8]
 80036dc:	6063      	str	r3, [r4, #4]
 80036de:	4648      	mov	r0, r9
 80036e0:	f000 f828 	bl	8003734 <__malloc_unlock>
 80036e4:	3608      	adds	r6, #8
 80036e6:	4630      	mov	r0, r6
 80036e8:	b005      	add	sp, #20
 80036ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ee:	bf00      	nop
 80036f0:	200005a8 	.word	0x200005a8
 80036f4:	2000050c 	.word	0x2000050c
 80036f8:	00000080 	.word	0x00000080
 80036fc:	200005a4 	.word	0x200005a4
 8003700:	200005a0 	.word	0x200005a0
 8003704:	200005ac 	.word	0x200005ac
 8003708:	0000007f 	.word	0x0000007f

0800370c <memcpy>:
 800370c:	b510      	push	{r4, lr}
 800370e:	1e43      	subs	r3, r0, #1
 8003710:	440a      	add	r2, r1
 8003712:	4291      	cmp	r1, r2
 8003714:	d004      	beq.n	8003720 <memcpy+0x14>
 8003716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800371a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800371e:	e7f8      	b.n	8003712 <memcpy+0x6>
 8003720:	bd10      	pop	{r4, pc}

08003722 <memset>:
 8003722:	4402      	add	r2, r0
 8003724:	4603      	mov	r3, r0
 8003726:	4293      	cmp	r3, r2
 8003728:	d002      	beq.n	8003730 <memset+0xe>
 800372a:	f803 1b01 	strb.w	r1, [r3], #1
 800372e:	e7fa      	b.n	8003726 <memset+0x4>
 8003730:	4770      	bx	lr

08003732 <__malloc_lock>:
 8003732:	4770      	bx	lr

08003734 <__malloc_unlock>:
 8003734:	4770      	bx	lr
	...

08003738 <printf>:
 8003738:	b40f      	push	{r0, r1, r2, r3}
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <printf+0x2c>)
 800373c:	b513      	push	{r0, r1, r4, lr}
 800373e:	681c      	ldr	r4, [r3, #0]
 8003740:	b124      	cbz	r4, 800374c <printf+0x14>
 8003742:	69a3      	ldr	r3, [r4, #24]
 8003744:	b913      	cbnz	r3, 800374c <printf+0x14>
 8003746:	4620      	mov	r0, r4
 8003748:	f002 f81c 	bl	8005784 <__sinit>
 800374c:	ab05      	add	r3, sp, #20
 800374e:	9a04      	ldr	r2, [sp, #16]
 8003750:	68a1      	ldr	r1, [r4, #8]
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	4620      	mov	r0, r4
 8003756:	f000 f84b 	bl	80037f0 <_vfprintf_r>
 800375a:	b002      	add	sp, #8
 800375c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003760:	b004      	add	sp, #16
 8003762:	4770      	bx	lr
 8003764:	200000fc 	.word	0x200000fc

08003768 <_sbrk_r>:
 8003768:	b538      	push	{r3, r4, r5, lr}
 800376a:	4c06      	ldr	r4, [pc, #24]	; (8003784 <_sbrk_r+0x1c>)
 800376c:	2300      	movs	r3, #0
 800376e:	4605      	mov	r5, r0
 8003770:	4608      	mov	r0, r1
 8003772:	6023      	str	r3, [r4, #0]
 8003774:	f003 fbe4 	bl	8006f40 <_sbrk>
 8003778:	1c43      	adds	r3, r0, #1
 800377a:	d102      	bne.n	8003782 <_sbrk_r+0x1a>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	b103      	cbz	r3, 8003782 <_sbrk_r+0x1a>
 8003780:	602b      	str	r3, [r5, #0]
 8003782:	bd38      	pop	{r3, r4, r5, pc}
 8003784:	20000748 	.word	0x20000748

08003788 <__sprint_r>:
 8003788:	6893      	ldr	r3, [r2, #8]
 800378a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800378e:	4680      	mov	r8, r0
 8003790:	460f      	mov	r7, r1
 8003792:	4614      	mov	r4, r2
 8003794:	b91b      	cbnz	r3, 800379e <__sprint_r+0x16>
 8003796:	6053      	str	r3, [r2, #4]
 8003798:	4618      	mov	r0, r3
 800379a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800379e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80037a0:	049d      	lsls	r5, r3, #18
 80037a2:	d51c      	bpl.n	80037de <__sprint_r+0x56>
 80037a4:	6815      	ldr	r5, [r2, #0]
 80037a6:	68a0      	ldr	r0, [r4, #8]
 80037a8:	3508      	adds	r5, #8
 80037aa:	b1d0      	cbz	r0, 80037e2 <__sprint_r+0x5a>
 80037ac:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80037b0:	f855 ac08 	ldr.w	sl, [r5, #-8]
 80037b4:	08b6      	lsrs	r6, r6, #2
 80037b6:	f04f 0900 	mov.w	r9, #0
 80037ba:	454e      	cmp	r6, r9
 80037bc:	dd0a      	ble.n	80037d4 <__sprint_r+0x4c>
 80037be:	463a      	mov	r2, r7
 80037c0:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 80037c4:	4640      	mov	r0, r8
 80037c6:	f002 f88e 	bl	80058e6 <_fputwc_r>
 80037ca:	1c43      	adds	r3, r0, #1
 80037cc:	d009      	beq.n	80037e2 <__sprint_r+0x5a>
 80037ce:	f109 0901 	add.w	r9, r9, #1
 80037d2:	e7f2      	b.n	80037ba <__sprint_r+0x32>
 80037d4:	68a3      	ldr	r3, [r4, #8]
 80037d6:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 80037da:	60a6      	str	r6, [r4, #8]
 80037dc:	e7e3      	b.n	80037a6 <__sprint_r+0x1e>
 80037de:	f002 f9a7 	bl	8005b30 <__sfvwrite_r>
 80037e2:	2300      	movs	r3, #0
 80037e4:	60a3      	str	r3, [r4, #8]
 80037e6:	6063      	str	r3, [r4, #4]
 80037e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ec:	0000      	movs	r0, r0
	...

080037f0 <_vfprintf_r>:
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	b0bd      	sub	sp, #244	; 0xf4
 80037f6:	468b      	mov	fp, r1
 80037f8:	9205      	str	r2, [sp, #20]
 80037fa:	461c      	mov	r4, r3
 80037fc:	461f      	mov	r7, r3
 80037fe:	4682      	mov	sl, r0
 8003800:	f002 fb08 	bl	8005e14 <_localeconv_r>
 8003804:	6803      	ldr	r3, [r0, #0]
 8003806:	930d      	str	r3, [sp, #52]	; 0x34
 8003808:	4618      	mov	r0, r3
 800380a:	f7fc fd31 	bl	8000270 <strlen>
 800380e:	9008      	str	r0, [sp, #32]
 8003810:	f1ba 0f00 	cmp.w	sl, #0
 8003814:	d005      	beq.n	8003822 <_vfprintf_r+0x32>
 8003816:	f8da 3018 	ldr.w	r3, [sl, #24]
 800381a:	b913      	cbnz	r3, 8003822 <_vfprintf_r+0x32>
 800381c:	4650      	mov	r0, sl
 800381e:	f001 ffb1 	bl	8005784 <__sinit>
 8003822:	4b9d      	ldr	r3, [pc, #628]	; (8003a98 <_vfprintf_r+0x2a8>)
 8003824:	459b      	cmp	fp, r3
 8003826:	d102      	bne.n	800382e <_vfprintf_r+0x3e>
 8003828:	f8da b004 	ldr.w	fp, [sl, #4]
 800382c:	e00a      	b.n	8003844 <_vfprintf_r+0x54>
 800382e:	4b9b      	ldr	r3, [pc, #620]	; (8003a9c <_vfprintf_r+0x2ac>)
 8003830:	459b      	cmp	fp, r3
 8003832:	d102      	bne.n	800383a <_vfprintf_r+0x4a>
 8003834:	f8da b008 	ldr.w	fp, [sl, #8]
 8003838:	e004      	b.n	8003844 <_vfprintf_r+0x54>
 800383a:	4b99      	ldr	r3, [pc, #612]	; (8003aa0 <_vfprintf_r+0x2b0>)
 800383c:	459b      	cmp	fp, r3
 800383e:	bf08      	it	eq
 8003840:	f8da b00c 	ldreq.w	fp, [sl, #12]
 8003844:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8003848:	0498      	lsls	r0, r3, #18
 800384a:	d409      	bmi.n	8003860 <_vfprintf_r+0x70>
 800384c:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 8003850:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003858:	f8ab 300c 	strh.w	r3, [fp, #12]
 800385c:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 8003860:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003864:	0719      	lsls	r1, r3, #28
 8003866:	d509      	bpl.n	800387c <_vfprintf_r+0x8c>
 8003868:	f8db 3010 	ldr.w	r3, [fp, #16]
 800386c:	b133      	cbz	r3, 800387c <_vfprintf_r+0x8c>
 800386e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003872:	f003 031a 	and.w	r3, r3, #26
 8003876:	2b0a      	cmp	r3, #10
 8003878:	d116      	bne.n	80038a8 <_vfprintf_r+0xb8>
 800387a:	e009      	b.n	8003890 <_vfprintf_r+0xa0>
 800387c:	4659      	mov	r1, fp
 800387e:	4650      	mov	r0, sl
 8003880:	f000 ffe6 	bl	8004850 <__swsetup_r>
 8003884:	2800      	cmp	r0, #0
 8003886:	d0f2      	beq.n	800386e <_vfprintf_r+0x7e>
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	f000 bfa3 	b.w	80047d6 <_vfprintf_r+0xfe6>
 8003890:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8003894:	2b00      	cmp	r3, #0
 8003896:	db07      	blt.n	80038a8 <_vfprintf_r+0xb8>
 8003898:	4623      	mov	r3, r4
 800389a:	9a05      	ldr	r2, [sp, #20]
 800389c:	4659      	mov	r1, fp
 800389e:	4650      	mov	r0, sl
 80038a0:	f000 ffa0 	bl	80047e4 <__sbprintf>
 80038a4:	f000 bf97 	b.w	80047d6 <_vfprintf_r+0xfe6>
 80038a8:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8003a90 <_vfprintf_r+0x2a0>
 80038ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80038b0:	2300      	movs	r3, #0
 80038b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80038b4:	941f      	str	r4, [sp, #124]	; 0x7c
 80038b6:	9321      	str	r3, [sp, #132]	; 0x84
 80038b8:	9320      	str	r3, [sp, #128]	; 0x80
 80038ba:	9304      	str	r3, [sp, #16]
 80038bc:	9311      	str	r3, [sp, #68]	; 0x44
 80038be:	9310      	str	r3, [sp, #64]	; 0x40
 80038c0:	930a      	str	r3, [sp, #40]	; 0x28
 80038c2:	9d05      	ldr	r5, [sp, #20]
 80038c4:	462b      	mov	r3, r5
 80038c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038ca:	b11a      	cbz	r2, 80038d4 <_vfprintf_r+0xe4>
 80038cc:	2a25      	cmp	r2, #37	; 0x25
 80038ce:	d001      	beq.n	80038d4 <_vfprintf_r+0xe4>
 80038d0:	461d      	mov	r5, r3
 80038d2:	e7f7      	b.n	80038c4 <_vfprintf_r+0xd4>
 80038d4:	9b05      	ldr	r3, [sp, #20]
 80038d6:	1aee      	subs	r6, r5, r3
 80038d8:	d017      	beq.n	800390a <_vfprintf_r+0x11a>
 80038da:	e884 0048 	stmia.w	r4, {r3, r6}
 80038de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038e0:	4433      	add	r3, r6
 80038e2:	9321      	str	r3, [sp, #132]	; 0x84
 80038e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80038e6:	3301      	adds	r3, #1
 80038e8:	2b07      	cmp	r3, #7
 80038ea:	9320      	str	r3, [sp, #128]	; 0x80
 80038ec:	dc01      	bgt.n	80038f2 <_vfprintf_r+0x102>
 80038ee:	3408      	adds	r4, #8
 80038f0:	e008      	b.n	8003904 <_vfprintf_r+0x114>
 80038f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80038f4:	4659      	mov	r1, fp
 80038f6:	4650      	mov	r0, sl
 80038f8:	f7ff ff46 	bl	8003788 <__sprint_r>
 80038fc:	2800      	cmp	r0, #0
 80038fe:	f040 8633 	bne.w	8004568 <_vfprintf_r+0xd78>
 8003902:	ac2c      	add	r4, sp, #176	; 0xb0
 8003904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003906:	4433      	add	r3, r6
 8003908:	930a      	str	r3, [sp, #40]	; 0x28
 800390a:	782b      	ldrb	r3, [r5, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8624 	beq.w	800455a <_vfprintf_r+0xd6a>
 8003912:	2200      	movs	r2, #0
 8003914:	1c6b      	adds	r3, r5, #1
 8003916:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800391a:	4611      	mov	r1, r2
 800391c:	f04f 39ff 	mov.w	r9, #4294967295
 8003920:	9209      	str	r2, [sp, #36]	; 0x24
 8003922:	4615      	mov	r5, r2
 8003924:	200a      	movs	r0, #10
 8003926:	1c5e      	adds	r6, r3, #1
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	9605      	str	r6, [sp, #20]
 800392c:	9302      	str	r3, [sp, #8]
 800392e:	9b02      	ldr	r3, [sp, #8]
 8003930:	3b20      	subs	r3, #32
 8003932:	2b58      	cmp	r3, #88	; 0x58
 8003934:	f200 826a 	bhi.w	8003e0c <_vfprintf_r+0x61c>
 8003938:	e8df f013 	tbh	[pc, r3, lsl #1]
 800393c:	0268005c 	.word	0x0268005c
 8003940:	006c0268 	.word	0x006c0268
 8003944:	02680268 	.word	0x02680268
 8003948:	02680268 	.word	0x02680268
 800394c:	02680268 	.word	0x02680268
 8003950:	0059006f 	.word	0x0059006f
 8003954:	007a0268 	.word	0x007a0268
 8003958:	0268007d 	.word	0x0268007d
 800395c:	00b600a4 	.word	0x00b600a4
 8003960:	00b600b6 	.word	0x00b600b6
 8003964:	00b600b6 	.word	0x00b600b6
 8003968:	00b600b6 	.word	0x00b600b6
 800396c:	00b600b6 	.word	0x00b600b6
 8003970:	02680268 	.word	0x02680268
 8003974:	02680268 	.word	0x02680268
 8003978:	02680268 	.word	0x02680268
 800397c:	02680268 	.word	0x02680268
 8003980:	02680268 	.word	0x02680268
 8003984:	011200e6 	.word	0x011200e6
 8003988:	01120268 	.word	0x01120268
 800398c:	02680268 	.word	0x02680268
 8003990:	02680268 	.word	0x02680268
 8003994:	026800c9 	.word	0x026800c9
 8003998:	01590268 	.word	0x01590268
 800399c:	02680268 	.word	0x02680268
 80039a0:	02680268 	.word	0x02680268
 80039a4:	01a00268 	.word	0x01a00268
 80039a8:	02680268 	.word	0x02680268
 80039ac:	02680067 	.word	0x02680067
 80039b0:	02680268 	.word	0x02680268
 80039b4:	02680268 	.word	0x02680268
 80039b8:	02680268 	.word	0x02680268
 80039bc:	02680268 	.word	0x02680268
 80039c0:	00dd0268 	.word	0x00dd0268
 80039c4:	01120061 	.word	0x01120061
 80039c8:	01120112 	.word	0x01120112
 80039cc:	006100cc 	.word	0x006100cc
 80039d0:	02680268 	.word	0x02680268
 80039d4:	026800cf 	.word	0x026800cf
 80039d8:	015b013b 	.word	0x015b013b
 80039dc:	00da0176 	.word	0x00da0176
 80039e0:	01870268 	.word	0x01870268
 80039e4:	01a20268 	.word	0x01a20268
 80039e8:	02680268 	.word	0x02680268
 80039ec:	01ba      	.short	0x01ba
 80039ee:	2201      	movs	r2, #1
 80039f0:	212b      	movs	r1, #43	; 0x2b
 80039f2:	e002      	b.n	80039fa <_vfprintf_r+0x20a>
 80039f4:	b909      	cbnz	r1, 80039fa <_vfprintf_r+0x20a>
 80039f6:	2201      	movs	r2, #1
 80039f8:	2120      	movs	r1, #32
 80039fa:	9b05      	ldr	r3, [sp, #20]
 80039fc:	e793      	b.n	8003926 <_vfprintf_r+0x136>
 80039fe:	2a00      	cmp	r2, #0
 8003a00:	f000 8087 	beq.w	8003b12 <_vfprintf_r+0x322>
 8003a04:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003a08:	e083      	b.n	8003b12 <_vfprintf_r+0x322>
 8003a0a:	b10a      	cbz	r2, 8003a10 <_vfprintf_r+0x220>
 8003a0c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003a10:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <_vfprintf_r+0x2b4>)
 8003a12:	e151      	b.n	8003cb8 <_vfprintf_r+0x4c8>
 8003a14:	f045 0501 	orr.w	r5, r5, #1
 8003a18:	e7ef      	b.n	80039fa <_vfprintf_r+0x20a>
 8003a1a:	683e      	ldr	r6, [r7, #0]
 8003a1c:	9609      	str	r6, [sp, #36]	; 0x24
 8003a1e:	2e00      	cmp	r6, #0
 8003a20:	f107 0304 	add.w	r3, r7, #4
 8003a24:	db01      	blt.n	8003a2a <_vfprintf_r+0x23a>
 8003a26:	461f      	mov	r7, r3
 8003a28:	e7e7      	b.n	80039fa <_vfprintf_r+0x20a>
 8003a2a:	4276      	negs	r6, r6
 8003a2c:	9609      	str	r6, [sp, #36]	; 0x24
 8003a2e:	461f      	mov	r7, r3
 8003a30:	f045 0504 	orr.w	r5, r5, #4
 8003a34:	e7e1      	b.n	80039fa <_vfprintf_r+0x20a>
 8003a36:	9e05      	ldr	r6, [sp, #20]
 8003a38:	9b05      	ldr	r3, [sp, #20]
 8003a3a:	7836      	ldrb	r6, [r6, #0]
 8003a3c:	9602      	str	r6, [sp, #8]
 8003a3e:	2e2a      	cmp	r6, #42	; 0x2a
 8003a40:	f103 0301 	add.w	r3, r3, #1
 8003a44:	d002      	beq.n	8003a4c <_vfprintf_r+0x25c>
 8003a46:	f04f 0900 	mov.w	r9, #0
 8003a4a:	e00a      	b.n	8003a62 <_vfprintf_r+0x272>
 8003a4c:	f8d7 9000 	ldr.w	r9, [r7]
 8003a50:	9305      	str	r3, [sp, #20]
 8003a52:	1d3e      	adds	r6, r7, #4
 8003a54:	f1b9 0f00 	cmp.w	r9, #0
 8003a58:	4637      	mov	r7, r6
 8003a5a:	dace      	bge.n	80039fa <_vfprintf_r+0x20a>
 8003a5c:	f04f 39ff 	mov.w	r9, #4294967295
 8003a60:	e7cb      	b.n	80039fa <_vfprintf_r+0x20a>
 8003a62:	9305      	str	r3, [sp, #20]
 8003a64:	9b02      	ldr	r3, [sp, #8]
 8003a66:	3b30      	subs	r3, #48	; 0x30
 8003a68:	2b09      	cmp	r3, #9
 8003a6a:	d808      	bhi.n	8003a7e <_vfprintf_r+0x28e>
 8003a6c:	fb00 3909 	mla	r9, r0, r9, r3
 8003a70:	9b05      	ldr	r3, [sp, #20]
 8003a72:	461e      	mov	r6, r3
 8003a74:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003a78:	9302      	str	r3, [sp, #8]
 8003a7a:	4633      	mov	r3, r6
 8003a7c:	e7f1      	b.n	8003a62 <_vfprintf_r+0x272>
 8003a7e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8003a82:	e754      	b.n	800392e <_vfprintf_r+0x13e>
 8003a84:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003a88:	e7b7      	b.n	80039fa <_vfprintf_r+0x20a>
 8003a8a:	bf00      	nop
 8003a8c:	f3af 8000 	nop.w
	...
 8003a98:	08007114 	.word	0x08007114
 8003a9c:	08007134 	.word	0x08007134
 8003aa0:	08007154 	.word	0x08007154
 8003aa4:	080070d0 	.word	0x080070d0
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8003aac:	9b02      	ldr	r3, [sp, #8]
 8003aae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003ab0:	3b30      	subs	r3, #48	; 0x30
 8003ab2:	fb00 3306 	mla	r3, r0, r6, r3
 8003ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ab8:	9b05      	ldr	r3, [sp, #20]
 8003aba:	461e      	mov	r6, r3
 8003abc:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003ac0:	9302      	str	r3, [sp, #8]
 8003ac2:	9b02      	ldr	r3, [sp, #8]
 8003ac4:	9605      	str	r6, [sp, #20]
 8003ac6:	3b30      	subs	r3, #48	; 0x30
 8003ac8:	2b09      	cmp	r3, #9
 8003aca:	d9ef      	bls.n	8003aac <_vfprintf_r+0x2bc>
 8003acc:	e72f      	b.n	800392e <_vfprintf_r+0x13e>
 8003ace:	f045 0508 	orr.w	r5, r5, #8
 8003ad2:	e792      	b.n	80039fa <_vfprintf_r+0x20a>
 8003ad4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003ad8:	e78f      	b.n	80039fa <_vfprintf_r+0x20a>
 8003ada:	9b05      	ldr	r3, [sp, #20]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b6c      	cmp	r3, #108	; 0x6c
 8003ae0:	d103      	bne.n	8003aea <_vfprintf_r+0x2fa>
 8003ae2:	9b05      	ldr	r3, [sp, #20]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	9305      	str	r3, [sp, #20]
 8003ae8:	e002      	b.n	8003af0 <_vfprintf_r+0x300>
 8003aea:	f045 0510 	orr.w	r5, r5, #16
 8003aee:	e784      	b.n	80039fa <_vfprintf_r+0x20a>
 8003af0:	f045 0520 	orr.w	r5, r5, #32
 8003af4:	e781      	b.n	80039fa <_vfprintf_r+0x20a>
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	9303      	str	r3, [sp, #12]
 8003afa:	2600      	movs	r6, #0
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003b02:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003b06:	e190      	b.n	8003e2a <_vfprintf_r+0x63a>
 8003b08:	b10a      	cbz	r2, 8003b0e <_vfprintf_r+0x31e>
 8003b0a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003b0e:	f045 0510 	orr.w	r5, r5, #16
 8003b12:	06aa      	lsls	r2, r5, #26
 8003b14:	d508      	bpl.n	8003b28 <_vfprintf_r+0x338>
 8003b16:	3707      	adds	r7, #7
 8003b18:	f027 0707 	bic.w	r7, r7, #7
 8003b1c:	f107 0308 	add.w	r3, r7, #8
 8003b20:	9303      	str	r3, [sp, #12]
 8003b22:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003b26:	e00e      	b.n	8003b46 <_vfprintf_r+0x356>
 8003b28:	f015 0f10 	tst.w	r5, #16
 8003b2c:	f107 0304 	add.w	r3, r7, #4
 8003b30:	d002      	beq.n	8003b38 <_vfprintf_r+0x348>
 8003b32:	9303      	str	r3, [sp, #12]
 8003b34:	683e      	ldr	r6, [r7, #0]
 8003b36:	e005      	b.n	8003b44 <_vfprintf_r+0x354>
 8003b38:	683e      	ldr	r6, [r7, #0]
 8003b3a:	9303      	str	r3, [sp, #12]
 8003b3c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b40:	bf18      	it	ne
 8003b42:	b236      	sxthne	r6, r6
 8003b44:	17f7      	asrs	r7, r6, #31
 8003b46:	2e00      	cmp	r6, #0
 8003b48:	f177 0300 	sbcs.w	r3, r7, #0
 8003b4c:	f280 80de 	bge.w	8003d0c <_vfprintf_r+0x51c>
 8003b50:	4276      	negs	r6, r6
 8003b52:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8003b56:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8003b5a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003b5e:	e0d5      	b.n	8003d0c <_vfprintf_r+0x51c>
 8003b60:	b10a      	cbz	r2, 8003b66 <_vfprintf_r+0x376>
 8003b62:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003b66:	3707      	adds	r7, #7
 8003b68:	f027 0707 	bic.w	r7, r7, #7
 8003b6c:	f107 0308 	add.w	r3, r7, #8
 8003b70:	9303      	str	r3, [sp, #12]
 8003b72:	ed97 7b00 	vldr	d7, [r7]
 8003b76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003b7a:	9b06      	ldr	r3, [sp, #24]
 8003b7c:	9312      	str	r3, [sp, #72]	; 0x48
 8003b7e:	9b07      	ldr	r3, [sp, #28]
 8003b80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b84:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b86:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8a:	4bab      	ldr	r3, [pc, #684]	; (8003e38 <_vfprintf_r+0x648>)
 8003b8c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003b90:	f7fc ffc8 	bl	8000b24 <__aeabi_dcmpun>
 8003b94:	2800      	cmp	r0, #0
 8003b96:	f040 84ee 	bne.w	8004576 <_vfprintf_r+0xd86>
 8003b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9e:	4ba6      	ldr	r3, [pc, #664]	; (8003e38 <_vfprintf_r+0x648>)
 8003ba0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003ba4:	f7fc ffa0 	bl	8000ae8 <__aeabi_dcmple>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	f040 84e4 	bne.w	8004576 <_vfprintf_r+0xd86>
 8003bae:	f000 bdfb 	b.w	80047a8 <_vfprintf_r+0xfb8>
 8003bb2:	b10a      	cbz	r2, 8003bb8 <_vfprintf_r+0x3c8>
 8003bb4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003bb8:	f015 0f20 	tst.w	r5, #32
 8003bbc:	f107 0304 	add.w	r3, r7, #4
 8003bc0:	d007      	beq.n	8003bd2 <_vfprintf_r+0x3e2>
 8003bc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	17ce      	asrs	r6, r1, #31
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4631      	mov	r1, r6
 8003bcc:	e9c2 0100 	strd	r0, r1, [r2]
 8003bd0:	e00b      	b.n	8003bea <_vfprintf_r+0x3fa>
 8003bd2:	06e9      	lsls	r1, r5, #27
 8003bd4:	d406      	bmi.n	8003be4 <_vfprintf_r+0x3f4>
 8003bd6:	066a      	lsls	r2, r5, #25
 8003bd8:	d504      	bpl.n	8003be4 <_vfprintf_r+0x3f4>
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8003be0:	8011      	strh	r1, [r2, #0]
 8003be2:	e002      	b.n	8003bea <_vfprintf_r+0x3fa>
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003be8:	6011      	str	r1, [r2, #0]
 8003bea:	461f      	mov	r7, r3
 8003bec:	e669      	b.n	80038c2 <_vfprintf_r+0xd2>
 8003bee:	f045 0510 	orr.w	r5, r5, #16
 8003bf2:	f015 0320 	ands.w	r3, r5, #32
 8003bf6:	d009      	beq.n	8003c0c <_vfprintf_r+0x41c>
 8003bf8:	3707      	adds	r7, #7
 8003bfa:	f027 0707 	bic.w	r7, r7, #7
 8003bfe:	f107 0308 	add.w	r3, r7, #8
 8003c02:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003c06:	9303      	str	r3, [sp, #12]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e07b      	b.n	8003d04 <_vfprintf_r+0x514>
 8003c0c:	1d3a      	adds	r2, r7, #4
 8003c0e:	f015 0110 	ands.w	r1, r5, #16
 8003c12:	9203      	str	r2, [sp, #12]
 8003c14:	d105      	bne.n	8003c22 <_vfprintf_r+0x432>
 8003c16:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8003c1a:	d002      	beq.n	8003c22 <_vfprintf_r+0x432>
 8003c1c:	883e      	ldrh	r6, [r7, #0]
 8003c1e:	2700      	movs	r7, #0
 8003c20:	e7f2      	b.n	8003c08 <_vfprintf_r+0x418>
 8003c22:	683e      	ldr	r6, [r7, #0]
 8003c24:	2700      	movs	r7, #0
 8003c26:	e06d      	b.n	8003d04 <_vfprintf_r+0x514>
 8003c28:	1d3b      	adds	r3, r7, #4
 8003c2a:	9303      	str	r3, [sp, #12]
 8003c2c:	2330      	movs	r3, #48	; 0x30
 8003c2e:	2278      	movs	r2, #120	; 0x78
 8003c30:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003c34:	4b81      	ldr	r3, [pc, #516]	; (8003e3c <_vfprintf_r+0x64c>)
 8003c36:	683e      	ldr	r6, [r7, #0]
 8003c38:	9311      	str	r3, [sp, #68]	; 0x44
 8003c3a:	2700      	movs	r7, #0
 8003c3c:	f045 0502 	orr.w	r5, r5, #2
 8003c40:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8003c44:	2302      	movs	r3, #2
 8003c46:	9202      	str	r2, [sp, #8]
 8003c48:	e05c      	b.n	8003d04 <_vfprintf_r+0x514>
 8003c4a:	2600      	movs	r6, #0
 8003c4c:	1d3b      	adds	r3, r7, #4
 8003c4e:	45b1      	cmp	r9, r6
 8003c50:	9303      	str	r3, [sp, #12]
 8003c52:	f8d7 8000 	ldr.w	r8, [r7]
 8003c56:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003c5a:	db0a      	blt.n	8003c72 <_vfprintf_r+0x482>
 8003c5c:	464a      	mov	r2, r9
 8003c5e:	4631      	mov	r1, r6
 8003c60:	4640      	mov	r0, r8
 8003c62:	f7fc fab5 	bl	80001d0 <memchr>
 8003c66:	2800      	cmp	r0, #0
 8003c68:	f000 80ea 	beq.w	8003e40 <_vfprintf_r+0x650>
 8003c6c:	ebc8 0900 	rsb	r9, r8, r0
 8003c70:	e0e7      	b.n	8003e42 <_vfprintf_r+0x652>
 8003c72:	4640      	mov	r0, r8
 8003c74:	f7fc fafc 	bl	8000270 <strlen>
 8003c78:	4681      	mov	r9, r0
 8003c7a:	e0e2      	b.n	8003e42 <_vfprintf_r+0x652>
 8003c7c:	f045 0510 	orr.w	r5, r5, #16
 8003c80:	06ae      	lsls	r6, r5, #26
 8003c82:	d508      	bpl.n	8003c96 <_vfprintf_r+0x4a6>
 8003c84:	3707      	adds	r7, #7
 8003c86:	f027 0707 	bic.w	r7, r7, #7
 8003c8a:	f107 0308 	add.w	r3, r7, #8
 8003c8e:	9303      	str	r3, [sp, #12]
 8003c90:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003c94:	e00a      	b.n	8003cac <_vfprintf_r+0x4bc>
 8003c96:	1d3b      	adds	r3, r7, #4
 8003c98:	f015 0f10 	tst.w	r5, #16
 8003c9c:	9303      	str	r3, [sp, #12]
 8003c9e:	d103      	bne.n	8003ca8 <_vfprintf_r+0x4b8>
 8003ca0:	0668      	lsls	r0, r5, #25
 8003ca2:	d501      	bpl.n	8003ca8 <_vfprintf_r+0x4b8>
 8003ca4:	883e      	ldrh	r6, [r7, #0]
 8003ca6:	e000      	b.n	8003caa <_vfprintf_r+0x4ba>
 8003ca8:	683e      	ldr	r6, [r7, #0]
 8003caa:	2700      	movs	r7, #0
 8003cac:	2301      	movs	r3, #1
 8003cae:	e029      	b.n	8003d04 <_vfprintf_r+0x514>
 8003cb0:	b10a      	cbz	r2, 8003cb6 <_vfprintf_r+0x4c6>
 8003cb2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003cb6:	4b61      	ldr	r3, [pc, #388]	; (8003e3c <_vfprintf_r+0x64c>)
 8003cb8:	9311      	str	r3, [sp, #68]	; 0x44
 8003cba:	06a9      	lsls	r1, r5, #26
 8003cbc:	d508      	bpl.n	8003cd0 <_vfprintf_r+0x4e0>
 8003cbe:	3707      	adds	r7, #7
 8003cc0:	f027 0707 	bic.w	r7, r7, #7
 8003cc4:	f107 0308 	add.w	r3, r7, #8
 8003cc8:	9303      	str	r3, [sp, #12]
 8003cca:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003cce:	e00a      	b.n	8003ce6 <_vfprintf_r+0x4f6>
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	f015 0f10 	tst.w	r5, #16
 8003cd6:	9303      	str	r3, [sp, #12]
 8003cd8:	d103      	bne.n	8003ce2 <_vfprintf_r+0x4f2>
 8003cda:	066a      	lsls	r2, r5, #25
 8003cdc:	d501      	bpl.n	8003ce2 <_vfprintf_r+0x4f2>
 8003cde:	883e      	ldrh	r6, [r7, #0]
 8003ce0:	e000      	b.n	8003ce4 <_vfprintf_r+0x4f4>
 8003ce2:	683e      	ldr	r6, [r7, #0]
 8003ce4:	2700      	movs	r7, #0
 8003ce6:	07eb      	lsls	r3, r5, #31
 8003ce8:	d50b      	bpl.n	8003d02 <_vfprintf_r+0x512>
 8003cea:	ea56 0307 	orrs.w	r3, r6, r7
 8003cee:	d008      	beq.n	8003d02 <_vfprintf_r+0x512>
 8003cf0:	2330      	movs	r3, #48	; 0x30
 8003cf2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003cf6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003cfa:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8003cfe:	f045 0502 	orr.w	r5, r5, #2
 8003d02:	2302      	movs	r3, #2
 8003d04:	2200      	movs	r2, #0
 8003d06:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003d0a:	e000      	b.n	8003d0e <_vfprintf_r+0x51e>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f1b9 0f00 	cmp.w	r9, #0
 8003d12:	f2c0 855a 	blt.w	80047ca <_vfprintf_r+0xfda>
 8003d16:	ea56 0207 	orrs.w	r2, r6, r7
 8003d1a:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8003d1e:	d103      	bne.n	8003d28 <_vfprintf_r+0x538>
 8003d20:	f1b9 0f00 	cmp.w	r9, #0
 8003d24:	d05f      	beq.n	8003de6 <_vfprintf_r+0x5f6>
 8003d26:	e006      	b.n	8003d36 <_vfprintf_r+0x546>
 8003d28:	460d      	mov	r5, r1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d025      	beq.n	8003d7a <_vfprintf_r+0x58a>
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d046      	beq.n	8003dc0 <_vfprintf_r+0x5d0>
 8003d32:	4629      	mov	r1, r5
 8003d34:	e007      	b.n	8003d46 <_vfprintf_r+0x556>
 8003d36:	460d      	mov	r5, r1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d022      	beq.n	8003d82 <_vfprintf_r+0x592>
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d03d      	beq.n	8003dbc <_vfprintf_r+0x5cc>
 8003d40:	4629      	mov	r1, r5
 8003d42:	2600      	movs	r6, #0
 8003d44:	2700      	movs	r7, #0
 8003d46:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003d4a:	08f2      	lsrs	r2, r6, #3
 8003d4c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8003d50:	08f8      	lsrs	r0, r7, #3
 8003d52:	f006 0307 	and.w	r3, r6, #7
 8003d56:	4607      	mov	r7, r0
 8003d58:	4616      	mov	r6, r2
 8003d5a:	3330      	adds	r3, #48	; 0x30
 8003d5c:	ea56 0207 	orrs.w	r2, r6, r7
 8003d60:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003d64:	d1f1      	bne.n	8003d4a <_vfprintf_r+0x55a>
 8003d66:	07e8      	lsls	r0, r5, #31
 8003d68:	d548      	bpl.n	8003dfc <_vfprintf_r+0x60c>
 8003d6a:	2b30      	cmp	r3, #48	; 0x30
 8003d6c:	d046      	beq.n	8003dfc <_vfprintf_r+0x60c>
 8003d6e:	2330      	movs	r3, #48	; 0x30
 8003d70:	f808 3c01 	strb.w	r3, [r8, #-1]
 8003d74:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d78:	e040      	b.n	8003dfc <_vfprintf_r+0x60c>
 8003d7a:	2f00      	cmp	r7, #0
 8003d7c:	bf08      	it	eq
 8003d7e:	2e0a      	cmpeq	r6, #10
 8003d80:	d205      	bcs.n	8003d8e <_vfprintf_r+0x59e>
 8003d82:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003d86:	3630      	adds	r6, #48	; 0x30
 8003d88:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8003d8c:	e029      	b.n	8003de2 <_vfprintf_r+0x5f2>
 8003d8e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003d92:	4630      	mov	r0, r6
 8003d94:	4639      	mov	r1, r7
 8003d96:	220a      	movs	r2, #10
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f7fc ff21 	bl	8000be0 <__aeabi_uldivmod>
 8003d9e:	3230      	adds	r2, #48	; 0x30
 8003da0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8003da4:	2300      	movs	r3, #0
 8003da6:	4630      	mov	r0, r6
 8003da8:	4639      	mov	r1, r7
 8003daa:	220a      	movs	r2, #10
 8003dac:	f7fc ff18 	bl	8000be0 <__aeabi_uldivmod>
 8003db0:	4606      	mov	r6, r0
 8003db2:	460f      	mov	r7, r1
 8003db4:	ea56 0307 	orrs.w	r3, r6, r7
 8003db8:	d1eb      	bne.n	8003d92 <_vfprintf_r+0x5a2>
 8003dba:	e012      	b.n	8003de2 <_vfprintf_r+0x5f2>
 8003dbc:	2600      	movs	r6, #0
 8003dbe:	2700      	movs	r7, #0
 8003dc0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003dc4:	f006 030f 	and.w	r3, r6, #15
 8003dc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003dca:	5cd3      	ldrb	r3, [r2, r3]
 8003dcc:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003dd0:	0933      	lsrs	r3, r6, #4
 8003dd2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003dd6:	093a      	lsrs	r2, r7, #4
 8003dd8:	461e      	mov	r6, r3
 8003dda:	4617      	mov	r7, r2
 8003ddc:	ea56 0307 	orrs.w	r3, r6, r7
 8003de0:	d1f0      	bne.n	8003dc4 <_vfprintf_r+0x5d4>
 8003de2:	4629      	mov	r1, r5
 8003de4:	e00a      	b.n	8003dfc <_vfprintf_r+0x60c>
 8003de6:	b93b      	cbnz	r3, 8003df8 <_vfprintf_r+0x608>
 8003de8:	07ea      	lsls	r2, r5, #31
 8003dea:	d505      	bpl.n	8003df8 <_vfprintf_r+0x608>
 8003dec:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003df0:	2330      	movs	r3, #48	; 0x30
 8003df2:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8003df6:	e001      	b.n	8003dfc <_vfprintf_r+0x60c>
 8003df8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003dfc:	464e      	mov	r6, r9
 8003dfe:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8003e02:	ebc8 0909 	rsb	r9, r8, r9
 8003e06:	460d      	mov	r5, r1
 8003e08:	2700      	movs	r7, #0
 8003e0a:	e01b      	b.n	8003e44 <_vfprintf_r+0x654>
 8003e0c:	b10a      	cbz	r2, 8003e12 <_vfprintf_r+0x622>
 8003e0e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003e12:	9b02      	ldr	r3, [sp, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 83a0 	beq.w	800455a <_vfprintf_r+0xd6a>
 8003e1a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003e1e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003e22:	2600      	movs	r6, #0
 8003e24:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003e28:	9703      	str	r7, [sp, #12]
 8003e2a:	f04f 0901 	mov.w	r9, #1
 8003e2e:	4637      	mov	r7, r6
 8003e30:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8003e34:	e006      	b.n	8003e44 <_vfprintf_r+0x654>
 8003e36:	bf00      	nop
 8003e38:	7fefffff 	.word	0x7fefffff
 8003e3c:	080070e1 	.word	0x080070e1
 8003e40:	4606      	mov	r6, r0
 8003e42:	4637      	mov	r7, r6
 8003e44:	454e      	cmp	r6, r9
 8003e46:	4633      	mov	r3, r6
 8003e48:	bfb8      	it	lt
 8003e4a:	464b      	movlt	r3, r9
 8003e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e4e:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003e52:	b113      	cbz	r3, 8003e5a <_vfprintf_r+0x66a>
 8003e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e56:	3301      	adds	r3, #1
 8003e58:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e5a:	f015 0302 	ands.w	r3, r5, #2
 8003e5e:	9314      	str	r3, [sp, #80]	; 0x50
 8003e60:	bf1e      	ittt	ne
 8003e62:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8003e64:	3302      	addne	r3, #2
 8003e66:	930b      	strne	r3, [sp, #44]	; 0x2c
 8003e68:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8003e6c:	9315      	str	r3, [sp, #84]	; 0x54
 8003e6e:	d139      	bne.n	8003ee4 <_vfprintf_r+0x6f4>
 8003e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	930c      	str	r3, [sp, #48]	; 0x30
 8003e7a:	dd33      	ble.n	8003ee4 <_vfprintf_r+0x6f4>
 8003e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	4ba6      	ldr	r3, [pc, #664]	; (800411c <_vfprintf_r+0x92c>)
 8003e82:	6023      	str	r3, [r4, #0]
 8003e84:	dd18      	ble.n	8003eb8 <_vfprintf_r+0x6c8>
 8003e86:	2310      	movs	r3, #16
 8003e88:	6063      	str	r3, [r4, #4]
 8003e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e8c:	3310      	adds	r3, #16
 8003e8e:	9321      	str	r3, [sp, #132]	; 0x84
 8003e90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e92:	3301      	adds	r3, #1
 8003e94:	2b07      	cmp	r3, #7
 8003e96:	9320      	str	r3, [sp, #128]	; 0x80
 8003e98:	dc01      	bgt.n	8003e9e <_vfprintf_r+0x6ae>
 8003e9a:	3408      	adds	r4, #8
 8003e9c:	e008      	b.n	8003eb0 <_vfprintf_r+0x6c0>
 8003e9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ea0:	4659      	mov	r1, fp
 8003ea2:	4650      	mov	r0, sl
 8003ea4:	f7ff fc70 	bl	8003788 <__sprint_r>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	f040 835d 	bne.w	8004568 <_vfprintf_r+0xd78>
 8003eae:	ac2c      	add	r4, sp, #176	; 0xb0
 8003eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003eb2:	3b10      	subs	r3, #16
 8003eb4:	930c      	str	r3, [sp, #48]	; 0x30
 8003eb6:	e7e1      	b.n	8003e7c <_vfprintf_r+0x68c>
 8003eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003eba:	6063      	str	r3, [r4, #4]
 8003ebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ec0:	4413      	add	r3, r2
 8003ec2:	9321      	str	r3, [sp, #132]	; 0x84
 8003ec4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	2b07      	cmp	r3, #7
 8003eca:	9320      	str	r3, [sp, #128]	; 0x80
 8003ecc:	dc01      	bgt.n	8003ed2 <_vfprintf_r+0x6e2>
 8003ece:	3408      	adds	r4, #8
 8003ed0:	e008      	b.n	8003ee4 <_vfprintf_r+0x6f4>
 8003ed2:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	4650      	mov	r0, sl
 8003ed8:	f7ff fc56 	bl	8003788 <__sprint_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f040 8343 	bne.w	8004568 <_vfprintf_r+0xd78>
 8003ee2:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ee4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003ee8:	b1bb      	cbz	r3, 8003f1a <_vfprintf_r+0x72a>
 8003eea:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8003eee:	6023      	str	r3, [r4, #0]
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	6063      	str	r3, [r4, #4]
 8003ef4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	9321      	str	r3, [sp, #132]	; 0x84
 8003efa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003efc:	3301      	adds	r3, #1
 8003efe:	2b07      	cmp	r3, #7
 8003f00:	9320      	str	r3, [sp, #128]	; 0x80
 8003f02:	dc01      	bgt.n	8003f08 <_vfprintf_r+0x718>
 8003f04:	3408      	adds	r4, #8
 8003f06:	e008      	b.n	8003f1a <_vfprintf_r+0x72a>
 8003f08:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f0a:	4659      	mov	r1, fp
 8003f0c:	4650      	mov	r0, sl
 8003f0e:	f7ff fc3b 	bl	8003788 <__sprint_r>
 8003f12:	2800      	cmp	r0, #0
 8003f14:	f040 8328 	bne.w	8004568 <_vfprintf_r+0xd78>
 8003f18:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f1c:	b1b3      	cbz	r3, 8003f4c <_vfprintf_r+0x75c>
 8003f1e:	ab18      	add	r3, sp, #96	; 0x60
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	2302      	movs	r3, #2
 8003f24:	6063      	str	r3, [r4, #4]
 8003f26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f28:	3302      	adds	r3, #2
 8003f2a:	9321      	str	r3, [sp, #132]	; 0x84
 8003f2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f2e:	3301      	adds	r3, #1
 8003f30:	2b07      	cmp	r3, #7
 8003f32:	9320      	str	r3, [sp, #128]	; 0x80
 8003f34:	dc01      	bgt.n	8003f3a <_vfprintf_r+0x74a>
 8003f36:	3408      	adds	r4, #8
 8003f38:	e008      	b.n	8003f4c <_vfprintf_r+0x75c>
 8003f3a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	4650      	mov	r0, sl
 8003f40:	f7ff fc22 	bl	8003788 <__sprint_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	f040 830f 	bne.w	8004568 <_vfprintf_r+0xd78>
 8003f4a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d135      	bne.n	8003fbe <_vfprintf_r+0x7ce>
 8003f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	dd30      	ble.n	8003fbe <_vfprintf_r+0x7ce>
 8003f5c:	4a70      	ldr	r2, [pc, #448]	; (8004120 <_vfprintf_r+0x930>)
 8003f5e:	6022      	str	r2, [r4, #0]
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	dd18      	ble.n	8003f96 <_vfprintf_r+0x7a6>
 8003f64:	2210      	movs	r2, #16
 8003f66:	6062      	str	r2, [r4, #4]
 8003f68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f6a:	3210      	adds	r2, #16
 8003f6c:	9221      	str	r2, [sp, #132]	; 0x84
 8003f6e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f70:	3201      	adds	r2, #1
 8003f72:	2a07      	cmp	r2, #7
 8003f74:	9220      	str	r2, [sp, #128]	; 0x80
 8003f76:	dc01      	bgt.n	8003f7c <_vfprintf_r+0x78c>
 8003f78:	3408      	adds	r4, #8
 8003f7a:	e00a      	b.n	8003f92 <_vfprintf_r+0x7a2>
 8003f7c:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f7e:	4659      	mov	r1, fp
 8003f80:	4650      	mov	r0, sl
 8003f82:	930c      	str	r3, [sp, #48]	; 0x30
 8003f84:	f7ff fc00 	bl	8003788 <__sprint_r>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f040 82ed 	bne.w	8004568 <_vfprintf_r+0xd78>
 8003f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f90:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f92:	3b10      	subs	r3, #16
 8003f94:	e7e2      	b.n	8003f5c <_vfprintf_r+0x76c>
 8003f96:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f98:	6063      	str	r3, [r4, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	9321      	str	r3, [sp, #132]	; 0x84
 8003f9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	2b07      	cmp	r3, #7
 8003fa4:	9320      	str	r3, [sp, #128]	; 0x80
 8003fa6:	dc01      	bgt.n	8003fac <_vfprintf_r+0x7bc>
 8003fa8:	3408      	adds	r4, #8
 8003faa:	e008      	b.n	8003fbe <_vfprintf_r+0x7ce>
 8003fac:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fae:	4659      	mov	r1, fp
 8003fb0:	4650      	mov	r0, sl
 8003fb2:	f7ff fbe9 	bl	8003788 <__sprint_r>
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	f040 82d6 	bne.w	8004568 <_vfprintf_r+0xd78>
 8003fbc:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fbe:	ebc9 0606 	rsb	r6, r9, r6
 8003fc2:	2e00      	cmp	r6, #0
 8003fc4:	dd2e      	ble.n	8004024 <_vfprintf_r+0x834>
 8003fc6:	4b56      	ldr	r3, [pc, #344]	; (8004120 <_vfprintf_r+0x930>)
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	2e10      	cmp	r6, #16
 8003fcc:	dd16      	ble.n	8003ffc <_vfprintf_r+0x80c>
 8003fce:	2310      	movs	r3, #16
 8003fd0:	6063      	str	r3, [r4, #4]
 8003fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fd4:	3310      	adds	r3, #16
 8003fd6:	9321      	str	r3, [sp, #132]	; 0x84
 8003fd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fda:	3301      	adds	r3, #1
 8003fdc:	2b07      	cmp	r3, #7
 8003fde:	9320      	str	r3, [sp, #128]	; 0x80
 8003fe0:	dc01      	bgt.n	8003fe6 <_vfprintf_r+0x7f6>
 8003fe2:	3408      	adds	r4, #8
 8003fe4:	e008      	b.n	8003ff8 <_vfprintf_r+0x808>
 8003fe6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fe8:	4659      	mov	r1, fp
 8003fea:	4650      	mov	r0, sl
 8003fec:	f7ff fbcc 	bl	8003788 <__sprint_r>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	f040 82b9 	bne.w	8004568 <_vfprintf_r+0xd78>
 8003ff6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ff8:	3e10      	subs	r6, #16
 8003ffa:	e7e4      	b.n	8003fc6 <_vfprintf_r+0x7d6>
 8003ffc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ffe:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004000:	6066      	str	r6, [r4, #4]
 8004002:	3301      	adds	r3, #1
 8004004:	4406      	add	r6, r0
 8004006:	2b07      	cmp	r3, #7
 8004008:	9621      	str	r6, [sp, #132]	; 0x84
 800400a:	9320      	str	r3, [sp, #128]	; 0x80
 800400c:	dc01      	bgt.n	8004012 <_vfprintf_r+0x822>
 800400e:	3408      	adds	r4, #8
 8004010:	e008      	b.n	8004024 <_vfprintf_r+0x834>
 8004012:	aa1f      	add	r2, sp, #124	; 0x7c
 8004014:	4659      	mov	r1, fp
 8004016:	4650      	mov	r0, sl
 8004018:	f7ff fbb6 	bl	8003788 <__sprint_r>
 800401c:	2800      	cmp	r0, #0
 800401e:	f040 82a3 	bne.w	8004568 <_vfprintf_r+0xd78>
 8004022:	ac2c      	add	r4, sp, #176	; 0xb0
 8004024:	05eb      	lsls	r3, r5, #23
 8004026:	d414      	bmi.n	8004052 <_vfprintf_r+0x862>
 8004028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800402a:	e884 0300 	stmia.w	r4, {r8, r9}
 800402e:	444b      	add	r3, r9
 8004030:	9321      	str	r3, [sp, #132]	; 0x84
 8004032:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004034:	3301      	adds	r3, #1
 8004036:	2b07      	cmp	r3, #7
 8004038:	9320      	str	r3, [sp, #128]	; 0x80
 800403a:	f340 8244 	ble.w	80044c6 <_vfprintf_r+0xcd6>
 800403e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004040:	4659      	mov	r1, fp
 8004042:	4650      	mov	r0, sl
 8004044:	f7ff fba0 	bl	8003788 <__sprint_r>
 8004048:	2800      	cmp	r0, #0
 800404a:	f040 828d 	bne.w	8004568 <_vfprintf_r+0xd78>
 800404e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004050:	e23a      	b.n	80044c8 <_vfprintf_r+0xcd8>
 8004052:	9b02      	ldr	r3, [sp, #8]
 8004054:	2b65      	cmp	r3, #101	; 0x65
 8004056:	f340 81ad 	ble.w	80043b4 <_vfprintf_r+0xbc4>
 800405a:	2200      	movs	r2, #0
 800405c:	2300      	movs	r3, #0
 800405e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004062:	f7fc fd2d 	bl	8000ac0 <__aeabi_dcmpeq>
 8004066:	2800      	cmp	r0, #0
 8004068:	d05e      	beq.n	8004128 <_vfprintf_r+0x938>
 800406a:	4b2e      	ldr	r3, [pc, #184]	; (8004124 <_vfprintf_r+0x934>)
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	2301      	movs	r3, #1
 8004070:	6063      	str	r3, [r4, #4]
 8004072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004074:	3301      	adds	r3, #1
 8004076:	9321      	str	r3, [sp, #132]	; 0x84
 8004078:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800407a:	3301      	adds	r3, #1
 800407c:	2b07      	cmp	r3, #7
 800407e:	9320      	str	r3, [sp, #128]	; 0x80
 8004080:	dc01      	bgt.n	8004086 <_vfprintf_r+0x896>
 8004082:	3408      	adds	r4, #8
 8004084:	e008      	b.n	8004098 <_vfprintf_r+0x8a8>
 8004086:	aa1f      	add	r2, sp, #124	; 0x7c
 8004088:	4659      	mov	r1, fp
 800408a:	4650      	mov	r0, sl
 800408c:	f7ff fb7c 	bl	8003788 <__sprint_r>
 8004090:	2800      	cmp	r0, #0
 8004092:	f040 8269 	bne.w	8004568 <_vfprintf_r+0xd78>
 8004096:	ac2c      	add	r4, sp, #176	; 0xb0
 8004098:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800409a:	9a04      	ldr	r2, [sp, #16]
 800409c:	4293      	cmp	r3, r2
 800409e:	db02      	blt.n	80040a6 <_vfprintf_r+0x8b6>
 80040a0:	07ef      	lsls	r7, r5, #31
 80040a2:	f140 8211 	bpl.w	80044c8 <_vfprintf_r+0xcd8>
 80040a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	9b08      	ldr	r3, [sp, #32]
 80040ac:	6063      	str	r3, [r4, #4]
 80040ae:	9a08      	ldr	r2, [sp, #32]
 80040b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040b2:	4413      	add	r3, r2
 80040b4:	9321      	str	r3, [sp, #132]	; 0x84
 80040b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80040b8:	3301      	adds	r3, #1
 80040ba:	2b07      	cmp	r3, #7
 80040bc:	9320      	str	r3, [sp, #128]	; 0x80
 80040be:	dc01      	bgt.n	80040c4 <_vfprintf_r+0x8d4>
 80040c0:	3408      	adds	r4, #8
 80040c2:	e008      	b.n	80040d6 <_vfprintf_r+0x8e6>
 80040c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80040c6:	4659      	mov	r1, fp
 80040c8:	4650      	mov	r0, sl
 80040ca:	f7ff fb5d 	bl	8003788 <__sprint_r>
 80040ce:	2800      	cmp	r0, #0
 80040d0:	f040 824a 	bne.w	8004568 <_vfprintf_r+0xd78>
 80040d4:	ac2c      	add	r4, sp, #176	; 0xb0
 80040d6:	9b04      	ldr	r3, [sp, #16]
 80040d8:	1e5e      	subs	r6, r3, #1
 80040da:	2e00      	cmp	r6, #0
 80040dc:	f340 81f4 	ble.w	80044c8 <_vfprintf_r+0xcd8>
 80040e0:	4f0f      	ldr	r7, [pc, #60]	; (8004120 <_vfprintf_r+0x930>)
 80040e2:	f04f 0810 	mov.w	r8, #16
 80040e6:	2e10      	cmp	r6, #16
 80040e8:	f340 8159 	ble.w	800439e <_vfprintf_r+0xbae>
 80040ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040ee:	3310      	adds	r3, #16
 80040f0:	9321      	str	r3, [sp, #132]	; 0x84
 80040f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80040f4:	3301      	adds	r3, #1
 80040f6:	2b07      	cmp	r3, #7
 80040f8:	e884 0180 	stmia.w	r4, {r7, r8}
 80040fc:	9320      	str	r3, [sp, #128]	; 0x80
 80040fe:	dc01      	bgt.n	8004104 <_vfprintf_r+0x914>
 8004100:	3408      	adds	r4, #8
 8004102:	e008      	b.n	8004116 <_vfprintf_r+0x926>
 8004104:	aa1f      	add	r2, sp, #124	; 0x7c
 8004106:	4659      	mov	r1, fp
 8004108:	4650      	mov	r0, sl
 800410a:	f7ff fb3d 	bl	8003788 <__sprint_r>
 800410e:	2800      	cmp	r0, #0
 8004110:	f040 822a 	bne.w	8004568 <_vfprintf_r+0xd78>
 8004114:	ac2c      	add	r4, sp, #176	; 0xb0
 8004116:	3e10      	subs	r6, #16
 8004118:	e7e5      	b.n	80040e6 <_vfprintf_r+0x8f6>
 800411a:	bf00      	nop
 800411c:	080070b0 	.word	0x080070b0
 8004120:	080070f4 	.word	0x080070f4
 8004124:	080070f2 	.word	0x080070f2
 8004128:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800412a:	2b00      	cmp	r3, #0
 800412c:	dc7c      	bgt.n	8004228 <_vfprintf_r+0xa38>
 800412e:	4b9f      	ldr	r3, [pc, #636]	; (80043ac <_vfprintf_r+0xbbc>)
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	2301      	movs	r3, #1
 8004134:	6063      	str	r3, [r4, #4]
 8004136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004138:	3301      	adds	r3, #1
 800413a:	9321      	str	r3, [sp, #132]	; 0x84
 800413c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800413e:	3301      	adds	r3, #1
 8004140:	2b07      	cmp	r3, #7
 8004142:	9320      	str	r3, [sp, #128]	; 0x80
 8004144:	dc01      	bgt.n	800414a <_vfprintf_r+0x95a>
 8004146:	3408      	adds	r4, #8
 8004148:	e008      	b.n	800415c <_vfprintf_r+0x96c>
 800414a:	aa1f      	add	r2, sp, #124	; 0x7c
 800414c:	4659      	mov	r1, fp
 800414e:	4650      	mov	r0, sl
 8004150:	f7ff fb1a 	bl	8003788 <__sprint_r>
 8004154:	2800      	cmp	r0, #0
 8004156:	f040 8207 	bne.w	8004568 <_vfprintf_r+0xd78>
 800415a:	ac2c      	add	r4, sp, #176	; 0xb0
 800415c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800415e:	b923      	cbnz	r3, 800416a <_vfprintf_r+0x97a>
 8004160:	9b04      	ldr	r3, [sp, #16]
 8004162:	b913      	cbnz	r3, 800416a <_vfprintf_r+0x97a>
 8004164:	07ee      	lsls	r6, r5, #31
 8004166:	f140 81af 	bpl.w	80044c8 <_vfprintf_r+0xcd8>
 800416a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	9b08      	ldr	r3, [sp, #32]
 8004170:	6063      	str	r3, [r4, #4]
 8004172:	9a08      	ldr	r2, [sp, #32]
 8004174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004176:	4413      	add	r3, r2
 8004178:	9321      	str	r3, [sp, #132]	; 0x84
 800417a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800417c:	3301      	adds	r3, #1
 800417e:	2b07      	cmp	r3, #7
 8004180:	9320      	str	r3, [sp, #128]	; 0x80
 8004182:	dc02      	bgt.n	800418a <_vfprintf_r+0x99a>
 8004184:	f104 0308 	add.w	r3, r4, #8
 8004188:	e008      	b.n	800419c <_vfprintf_r+0x9ac>
 800418a:	aa1f      	add	r2, sp, #124	; 0x7c
 800418c:	4659      	mov	r1, fp
 800418e:	4650      	mov	r0, sl
 8004190:	f7ff fafa 	bl	8003788 <__sprint_r>
 8004194:	2800      	cmp	r0, #0
 8004196:	f040 81e7 	bne.w	8004568 <_vfprintf_r+0xd78>
 800419a:	ab2c      	add	r3, sp, #176	; 0xb0
 800419c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800419e:	4276      	negs	r6, r6
 80041a0:	2e00      	cmp	r6, #0
 80041a2:	dd30      	ble.n	8004206 <_vfprintf_r+0xa16>
 80041a4:	4f82      	ldr	r7, [pc, #520]	; (80043b0 <_vfprintf_r+0xbc0>)
 80041a6:	2410      	movs	r4, #16
 80041a8:	2e10      	cmp	r6, #16
 80041aa:	dd16      	ble.n	80041da <_vfprintf_r+0x9ea>
 80041ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041ae:	601f      	str	r7, [r3, #0]
 80041b0:	3210      	adds	r2, #16
 80041b2:	9221      	str	r2, [sp, #132]	; 0x84
 80041b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041b6:	605c      	str	r4, [r3, #4]
 80041b8:	3201      	adds	r2, #1
 80041ba:	2a07      	cmp	r2, #7
 80041bc:	9220      	str	r2, [sp, #128]	; 0x80
 80041be:	dc01      	bgt.n	80041c4 <_vfprintf_r+0x9d4>
 80041c0:	3308      	adds	r3, #8
 80041c2:	e008      	b.n	80041d6 <_vfprintf_r+0x9e6>
 80041c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80041c6:	4659      	mov	r1, fp
 80041c8:	4650      	mov	r0, sl
 80041ca:	f7ff fadd 	bl	8003788 <__sprint_r>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	f040 81ca 	bne.w	8004568 <_vfprintf_r+0xd78>
 80041d4:	ab2c      	add	r3, sp, #176	; 0xb0
 80041d6:	3e10      	subs	r6, #16
 80041d8:	e7e6      	b.n	80041a8 <_vfprintf_r+0x9b8>
 80041da:	4a75      	ldr	r2, [pc, #468]	; (80043b0 <_vfprintf_r+0xbc0>)
 80041dc:	e883 0044 	stmia.w	r3, {r2, r6}
 80041e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041e2:	4416      	add	r6, r2
 80041e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041e6:	9621      	str	r6, [sp, #132]	; 0x84
 80041e8:	3201      	adds	r2, #1
 80041ea:	2a07      	cmp	r2, #7
 80041ec:	9220      	str	r2, [sp, #128]	; 0x80
 80041ee:	dc01      	bgt.n	80041f4 <_vfprintf_r+0xa04>
 80041f0:	3308      	adds	r3, #8
 80041f2:	e008      	b.n	8004206 <_vfprintf_r+0xa16>
 80041f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80041f6:	4659      	mov	r1, fp
 80041f8:	4650      	mov	r0, sl
 80041fa:	f7ff fac5 	bl	8003788 <__sprint_r>
 80041fe:	2800      	cmp	r0, #0
 8004200:	f040 81b2 	bne.w	8004568 <_vfprintf_r+0xd78>
 8004204:	ab2c      	add	r3, sp, #176	; 0xb0
 8004206:	9a04      	ldr	r2, [sp, #16]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	9904      	ldr	r1, [sp, #16]
 800420c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800420e:	f8c3 8000 	str.w	r8, [r3]
 8004212:	440a      	add	r2, r1
 8004214:	9221      	str	r2, [sp, #132]	; 0x84
 8004216:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004218:	3201      	adds	r2, #1
 800421a:	2a07      	cmp	r2, #7
 800421c:	9220      	str	r2, [sp, #128]	; 0x80
 800421e:	f73f af0e 	bgt.w	800403e <_vfprintf_r+0x84e>
 8004222:	f103 0408 	add.w	r4, r3, #8
 8004226:	e14f      	b.n	80044c8 <_vfprintf_r+0xcd8>
 8004228:	9b04      	ldr	r3, [sp, #16]
 800422a:	42bb      	cmp	r3, r7
 800422c:	bfa8      	it	ge
 800422e:	463b      	movge	r3, r7
 8004230:	2b00      	cmp	r3, #0
 8004232:	461e      	mov	r6, r3
 8004234:	dd15      	ble.n	8004262 <_vfprintf_r+0xa72>
 8004236:	6063      	str	r3, [r4, #4]
 8004238:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800423a:	f8c4 8000 	str.w	r8, [r4]
 800423e:	4433      	add	r3, r6
 8004240:	9321      	str	r3, [sp, #132]	; 0x84
 8004242:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004244:	3301      	adds	r3, #1
 8004246:	2b07      	cmp	r3, #7
 8004248:	9320      	str	r3, [sp, #128]	; 0x80
 800424a:	dc01      	bgt.n	8004250 <_vfprintf_r+0xa60>
 800424c:	3408      	adds	r4, #8
 800424e:	e008      	b.n	8004262 <_vfprintf_r+0xa72>
 8004250:	aa1f      	add	r2, sp, #124	; 0x7c
 8004252:	4659      	mov	r1, fp
 8004254:	4650      	mov	r0, sl
 8004256:	f7ff fa97 	bl	8003788 <__sprint_r>
 800425a:	2800      	cmp	r0, #0
 800425c:	f040 8184 	bne.w	8004568 <_vfprintf_r+0xd78>
 8004260:	ac2c      	add	r4, sp, #176	; 0xb0
 8004262:	2e00      	cmp	r6, #0
 8004264:	bfac      	ite	ge
 8004266:	1bbe      	subge	r6, r7, r6
 8004268:	463e      	movlt	r6, r7
 800426a:	2e00      	cmp	r6, #0
 800426c:	dd30      	ble.n	80042d0 <_vfprintf_r+0xae0>
 800426e:	f04f 0910 	mov.w	r9, #16
 8004272:	4b4f      	ldr	r3, [pc, #316]	; (80043b0 <_vfprintf_r+0xbc0>)
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	2e10      	cmp	r6, #16
 8004278:	dd16      	ble.n	80042a8 <_vfprintf_r+0xab8>
 800427a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800427c:	f8c4 9004 	str.w	r9, [r4, #4]
 8004280:	3310      	adds	r3, #16
 8004282:	9321      	str	r3, [sp, #132]	; 0x84
 8004284:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004286:	3301      	adds	r3, #1
 8004288:	2b07      	cmp	r3, #7
 800428a:	9320      	str	r3, [sp, #128]	; 0x80
 800428c:	dc01      	bgt.n	8004292 <_vfprintf_r+0xaa2>
 800428e:	3408      	adds	r4, #8
 8004290:	e008      	b.n	80042a4 <_vfprintf_r+0xab4>
 8004292:	aa1f      	add	r2, sp, #124	; 0x7c
 8004294:	4659      	mov	r1, fp
 8004296:	4650      	mov	r0, sl
 8004298:	f7ff fa76 	bl	8003788 <__sprint_r>
 800429c:	2800      	cmp	r0, #0
 800429e:	f040 8163 	bne.w	8004568 <_vfprintf_r+0xd78>
 80042a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80042a4:	3e10      	subs	r6, #16
 80042a6:	e7e4      	b.n	8004272 <_vfprintf_r+0xa82>
 80042a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042aa:	6066      	str	r6, [r4, #4]
 80042ac:	441e      	add	r6, r3
 80042ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80042b0:	9621      	str	r6, [sp, #132]	; 0x84
 80042b2:	3301      	adds	r3, #1
 80042b4:	2b07      	cmp	r3, #7
 80042b6:	9320      	str	r3, [sp, #128]	; 0x80
 80042b8:	dc01      	bgt.n	80042be <_vfprintf_r+0xace>
 80042ba:	3408      	adds	r4, #8
 80042bc:	e008      	b.n	80042d0 <_vfprintf_r+0xae0>
 80042be:	aa1f      	add	r2, sp, #124	; 0x7c
 80042c0:	4659      	mov	r1, fp
 80042c2:	4650      	mov	r0, sl
 80042c4:	f7ff fa60 	bl	8003788 <__sprint_r>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	f040 814d 	bne.w	8004568 <_vfprintf_r+0xd78>
 80042ce:	ac2c      	add	r4, sp, #176	; 0xb0
 80042d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042d2:	9a04      	ldr	r2, [sp, #16]
 80042d4:	4293      	cmp	r3, r2
 80042d6:	4447      	add	r7, r8
 80042d8:	db01      	blt.n	80042de <_vfprintf_r+0xaee>
 80042da:	07e8      	lsls	r0, r5, #31
 80042dc:	d517      	bpl.n	800430e <_vfprintf_r+0xb1e>
 80042de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	9b08      	ldr	r3, [sp, #32]
 80042e4:	6063      	str	r3, [r4, #4]
 80042e6:	9a08      	ldr	r2, [sp, #32]
 80042e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042ea:	4413      	add	r3, r2
 80042ec:	9321      	str	r3, [sp, #132]	; 0x84
 80042ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80042f0:	3301      	adds	r3, #1
 80042f2:	2b07      	cmp	r3, #7
 80042f4:	9320      	str	r3, [sp, #128]	; 0x80
 80042f6:	dc01      	bgt.n	80042fc <_vfprintf_r+0xb0c>
 80042f8:	3408      	adds	r4, #8
 80042fa:	e008      	b.n	800430e <_vfprintf_r+0xb1e>
 80042fc:	aa1f      	add	r2, sp, #124	; 0x7c
 80042fe:	4659      	mov	r1, fp
 8004300:	4650      	mov	r0, sl
 8004302:	f7ff fa41 	bl	8003788 <__sprint_r>
 8004306:	2800      	cmp	r0, #0
 8004308:	f040 812e 	bne.w	8004568 <_vfprintf_r+0xd78>
 800430c:	ac2c      	add	r4, sp, #176	; 0xb0
 800430e:	9b04      	ldr	r3, [sp, #16]
 8004310:	9a04      	ldr	r2, [sp, #16]
 8004312:	eb08 0603 	add.w	r6, r8, r3
 8004316:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004318:	1bf6      	subs	r6, r6, r7
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	429e      	cmp	r6, r3
 800431e:	bfa8      	it	ge
 8004320:	461e      	movge	r6, r3
 8004322:	2e00      	cmp	r6, #0
 8004324:	dd14      	ble.n	8004350 <_vfprintf_r+0xb60>
 8004326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004328:	6027      	str	r7, [r4, #0]
 800432a:	4433      	add	r3, r6
 800432c:	9321      	str	r3, [sp, #132]	; 0x84
 800432e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004330:	6066      	str	r6, [r4, #4]
 8004332:	3301      	adds	r3, #1
 8004334:	2b07      	cmp	r3, #7
 8004336:	9320      	str	r3, [sp, #128]	; 0x80
 8004338:	dc01      	bgt.n	800433e <_vfprintf_r+0xb4e>
 800433a:	3408      	adds	r4, #8
 800433c:	e008      	b.n	8004350 <_vfprintf_r+0xb60>
 800433e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004340:	4659      	mov	r1, fp
 8004342:	4650      	mov	r0, sl
 8004344:	f7ff fa20 	bl	8003788 <__sprint_r>
 8004348:	2800      	cmp	r0, #0
 800434a:	f040 810d 	bne.w	8004568 <_vfprintf_r+0xd78>
 800434e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004350:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004352:	9a04      	ldr	r2, [sp, #16]
 8004354:	2e00      	cmp	r6, #0
 8004356:	eba2 0303 	sub.w	r3, r2, r3
 800435a:	bfac      	ite	ge
 800435c:	1b9e      	subge	r6, r3, r6
 800435e:	461e      	movlt	r6, r3
 8004360:	2e00      	cmp	r6, #0
 8004362:	f340 80b1 	ble.w	80044c8 <_vfprintf_r+0xcd8>
 8004366:	4f12      	ldr	r7, [pc, #72]	; (80043b0 <_vfprintf_r+0xbc0>)
 8004368:	f04f 0810 	mov.w	r8, #16
 800436c:	2e10      	cmp	r6, #16
 800436e:	dd16      	ble.n	800439e <_vfprintf_r+0xbae>
 8004370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004372:	3310      	adds	r3, #16
 8004374:	9321      	str	r3, [sp, #132]	; 0x84
 8004376:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004378:	3301      	adds	r3, #1
 800437a:	2b07      	cmp	r3, #7
 800437c:	e884 0180 	stmia.w	r4, {r7, r8}
 8004380:	9320      	str	r3, [sp, #128]	; 0x80
 8004382:	dc01      	bgt.n	8004388 <_vfprintf_r+0xb98>
 8004384:	3408      	adds	r4, #8
 8004386:	e008      	b.n	800439a <_vfprintf_r+0xbaa>
 8004388:	aa1f      	add	r2, sp, #124	; 0x7c
 800438a:	4659      	mov	r1, fp
 800438c:	4650      	mov	r0, sl
 800438e:	f7ff f9fb 	bl	8003788 <__sprint_r>
 8004392:	2800      	cmp	r0, #0
 8004394:	f040 80e8 	bne.w	8004568 <_vfprintf_r+0xd78>
 8004398:	ac2c      	add	r4, sp, #176	; 0xb0
 800439a:	3e10      	subs	r6, #16
 800439c:	e7e6      	b.n	800436c <_vfprintf_r+0xb7c>
 800439e:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <_vfprintf_r+0xbc0>)
 80043a0:	e884 0048 	stmia.w	r4, {r3, r6}
 80043a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043a6:	441e      	add	r6, r3
 80043a8:	9621      	str	r6, [sp, #132]	; 0x84
 80043aa:	e642      	b.n	8004032 <_vfprintf_r+0x842>
 80043ac:	080070f2 	.word	0x080070f2
 80043b0:	080070f4 	.word	0x080070f4
 80043b4:	9b04      	ldr	r3, [sp, #16]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	dc01      	bgt.n	80043be <_vfprintf_r+0xbce>
 80043ba:	07e9      	lsls	r1, r5, #31
 80043bc:	d573      	bpl.n	80044a6 <_vfprintf_r+0xcb6>
 80043be:	2301      	movs	r3, #1
 80043c0:	6063      	str	r3, [r4, #4]
 80043c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043c4:	f8c4 8000 	str.w	r8, [r4]
 80043c8:	3301      	adds	r3, #1
 80043ca:	9321      	str	r3, [sp, #132]	; 0x84
 80043cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043ce:	3301      	adds	r3, #1
 80043d0:	2b07      	cmp	r3, #7
 80043d2:	9320      	str	r3, [sp, #128]	; 0x80
 80043d4:	dc01      	bgt.n	80043da <_vfprintf_r+0xbea>
 80043d6:	3408      	adds	r4, #8
 80043d8:	e008      	b.n	80043ec <_vfprintf_r+0xbfc>
 80043da:	aa1f      	add	r2, sp, #124	; 0x7c
 80043dc:	4659      	mov	r1, fp
 80043de:	4650      	mov	r0, sl
 80043e0:	f7ff f9d2 	bl	8003788 <__sprint_r>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	f040 80bf 	bne.w	8004568 <_vfprintf_r+0xd78>
 80043ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80043ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043ee:	6023      	str	r3, [r4, #0]
 80043f0:	9b08      	ldr	r3, [sp, #32]
 80043f2:	6063      	str	r3, [r4, #4]
 80043f4:	9a08      	ldr	r2, [sp, #32]
 80043f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043f8:	4413      	add	r3, r2
 80043fa:	9321      	str	r3, [sp, #132]	; 0x84
 80043fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043fe:	3301      	adds	r3, #1
 8004400:	2b07      	cmp	r3, #7
 8004402:	9320      	str	r3, [sp, #128]	; 0x80
 8004404:	dc01      	bgt.n	800440a <_vfprintf_r+0xc1a>
 8004406:	3408      	adds	r4, #8
 8004408:	e008      	b.n	800441c <_vfprintf_r+0xc2c>
 800440a:	aa1f      	add	r2, sp, #124	; 0x7c
 800440c:	4659      	mov	r1, fp
 800440e:	4650      	mov	r0, sl
 8004410:	f7ff f9ba 	bl	8003788 <__sprint_r>
 8004414:	2800      	cmp	r0, #0
 8004416:	f040 80a7 	bne.w	8004568 <_vfprintf_r+0xd78>
 800441a:	ac2c      	add	r4, sp, #176	; 0xb0
 800441c:	2300      	movs	r3, #0
 800441e:	2200      	movs	r2, #0
 8004420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004424:	f7fc fb4c 	bl	8000ac0 <__aeabi_dcmpeq>
 8004428:	9b04      	ldr	r3, [sp, #16]
 800442a:	1e5e      	subs	r6, r3, #1
 800442c:	b9b8      	cbnz	r0, 800445e <_vfprintf_r+0xc6e>
 800442e:	f108 0301 	add.w	r3, r8, #1
 8004432:	e884 0048 	stmia.w	r4, {r3, r6}
 8004436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004438:	9a04      	ldr	r2, [sp, #16]
 800443a:	3b01      	subs	r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	9321      	str	r3, [sp, #132]	; 0x84
 8004440:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004442:	3301      	adds	r3, #1
 8004444:	2b07      	cmp	r3, #7
 8004446:	9320      	str	r3, [sp, #128]	; 0x80
 8004448:	dd34      	ble.n	80044b4 <_vfprintf_r+0xcc4>
 800444a:	aa1f      	add	r2, sp, #124	; 0x7c
 800444c:	4659      	mov	r1, fp
 800444e:	4650      	mov	r0, sl
 8004450:	f7ff f99a 	bl	8003788 <__sprint_r>
 8004454:	2800      	cmp	r0, #0
 8004456:	f040 8087 	bne.w	8004568 <_vfprintf_r+0xd78>
 800445a:	ac2c      	add	r4, sp, #176	; 0xb0
 800445c:	e02b      	b.n	80044b6 <_vfprintf_r+0xcc6>
 800445e:	2e00      	cmp	r6, #0
 8004460:	dd29      	ble.n	80044b6 <_vfprintf_r+0xcc6>
 8004462:	4fa6      	ldr	r7, [pc, #664]	; (80046fc <_vfprintf_r+0xf0c>)
 8004464:	f04f 0810 	mov.w	r8, #16
 8004468:	2e10      	cmp	r6, #16
 800446a:	dd15      	ble.n	8004498 <_vfprintf_r+0xca8>
 800446c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800446e:	3310      	adds	r3, #16
 8004470:	9321      	str	r3, [sp, #132]	; 0x84
 8004472:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004474:	3301      	adds	r3, #1
 8004476:	2b07      	cmp	r3, #7
 8004478:	e884 0180 	stmia.w	r4, {r7, r8}
 800447c:	9320      	str	r3, [sp, #128]	; 0x80
 800447e:	dc01      	bgt.n	8004484 <_vfprintf_r+0xc94>
 8004480:	3408      	adds	r4, #8
 8004482:	e007      	b.n	8004494 <_vfprintf_r+0xca4>
 8004484:	aa1f      	add	r2, sp, #124	; 0x7c
 8004486:	4659      	mov	r1, fp
 8004488:	4650      	mov	r0, sl
 800448a:	f7ff f97d 	bl	8003788 <__sprint_r>
 800448e:	2800      	cmp	r0, #0
 8004490:	d16a      	bne.n	8004568 <_vfprintf_r+0xd78>
 8004492:	ac2c      	add	r4, sp, #176	; 0xb0
 8004494:	3e10      	subs	r6, #16
 8004496:	e7e7      	b.n	8004468 <_vfprintf_r+0xc78>
 8004498:	4b98      	ldr	r3, [pc, #608]	; (80046fc <_vfprintf_r+0xf0c>)
 800449a:	e884 0048 	stmia.w	r4, {r3, r6}
 800449e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044a0:	441e      	add	r6, r3
 80044a2:	9621      	str	r6, [sp, #132]	; 0x84
 80044a4:	e7cc      	b.n	8004440 <_vfprintf_r+0xc50>
 80044a6:	2301      	movs	r3, #1
 80044a8:	6063      	str	r3, [r4, #4]
 80044aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044ac:	f8c4 8000 	str.w	r8, [r4]
 80044b0:	3301      	adds	r3, #1
 80044b2:	e7c4      	b.n	800443e <_vfprintf_r+0xc4e>
 80044b4:	3408      	adds	r4, #8
 80044b6:	ab1b      	add	r3, sp, #108	; 0x6c
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044bc:	6063      	str	r3, [r4, #4]
 80044be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044c2:	4413      	add	r3, r2
 80044c4:	e5b4      	b.n	8004030 <_vfprintf_r+0x840>
 80044c6:	3408      	adds	r4, #8
 80044c8:	076a      	lsls	r2, r5, #29
 80044ca:	d40b      	bmi.n	80044e4 <_vfprintf_r+0xcf4>
 80044cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044d2:	428a      	cmp	r2, r1
 80044d4:	bfac      	ite	ge
 80044d6:	189b      	addge	r3, r3, r2
 80044d8:	185b      	addlt	r3, r3, r1
 80044da:	930a      	str	r3, [sp, #40]	; 0x28
 80044dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d035      	beq.n	800454e <_vfprintf_r+0xd5e>
 80044e2:	e02e      	b.n	8004542 <_vfprintf_r+0xd52>
 80044e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044e8:	1a9d      	subs	r5, r3, r2
 80044ea:	2d00      	cmp	r5, #0
 80044ec:	ddee      	ble.n	80044cc <_vfprintf_r+0xcdc>
 80044ee:	2610      	movs	r6, #16
 80044f0:	4b83      	ldr	r3, [pc, #524]	; (8004700 <_vfprintf_r+0xf10>)
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	2d10      	cmp	r5, #16
 80044f6:	dd13      	ble.n	8004520 <_vfprintf_r+0xd30>
 80044f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044fa:	6066      	str	r6, [r4, #4]
 80044fc:	3310      	adds	r3, #16
 80044fe:	9321      	str	r3, [sp, #132]	; 0x84
 8004500:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004502:	3301      	adds	r3, #1
 8004504:	2b07      	cmp	r3, #7
 8004506:	9320      	str	r3, [sp, #128]	; 0x80
 8004508:	dc01      	bgt.n	800450e <_vfprintf_r+0xd1e>
 800450a:	3408      	adds	r4, #8
 800450c:	e006      	b.n	800451c <_vfprintf_r+0xd2c>
 800450e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004510:	4659      	mov	r1, fp
 8004512:	4650      	mov	r0, sl
 8004514:	f7ff f938 	bl	8003788 <__sprint_r>
 8004518:	bb30      	cbnz	r0, 8004568 <_vfprintf_r+0xd78>
 800451a:	ac2c      	add	r4, sp, #176	; 0xb0
 800451c:	3d10      	subs	r5, #16
 800451e:	e7e7      	b.n	80044f0 <_vfprintf_r+0xd00>
 8004520:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004522:	6065      	str	r5, [r4, #4]
 8004524:	441d      	add	r5, r3
 8004526:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004528:	9521      	str	r5, [sp, #132]	; 0x84
 800452a:	3301      	adds	r3, #1
 800452c:	2b07      	cmp	r3, #7
 800452e:	9320      	str	r3, [sp, #128]	; 0x80
 8004530:	ddcc      	ble.n	80044cc <_vfprintf_r+0xcdc>
 8004532:	aa1f      	add	r2, sp, #124	; 0x7c
 8004534:	4659      	mov	r1, fp
 8004536:	4650      	mov	r0, sl
 8004538:	f7ff f926 	bl	8003788 <__sprint_r>
 800453c:	2800      	cmp	r0, #0
 800453e:	d0c5      	beq.n	80044cc <_vfprintf_r+0xcdc>
 8004540:	e012      	b.n	8004568 <_vfprintf_r+0xd78>
 8004542:	aa1f      	add	r2, sp, #124	; 0x7c
 8004544:	4659      	mov	r1, fp
 8004546:	4650      	mov	r0, sl
 8004548:	f7ff f91e 	bl	8003788 <__sprint_r>
 800454c:	b960      	cbnz	r0, 8004568 <_vfprintf_r+0xd78>
 800454e:	2300      	movs	r3, #0
 8004550:	9320      	str	r3, [sp, #128]	; 0x80
 8004552:	9f03      	ldr	r7, [sp, #12]
 8004554:	ac2c      	add	r4, sp, #176	; 0xb0
 8004556:	f7ff b9b4 	b.w	80038c2 <_vfprintf_r+0xd2>
 800455a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800455c:	b123      	cbz	r3, 8004568 <_vfprintf_r+0xd78>
 800455e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004560:	4659      	mov	r1, fp
 8004562:	4650      	mov	r0, sl
 8004564:	f7ff f910 	bl	8003788 <__sprint_r>
 8004568:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800456c:	065b      	lsls	r3, r3, #25
 800456e:	f53f a98b 	bmi.w	8003888 <_vfprintf_r+0x98>
 8004572:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004574:	e12f      	b.n	80047d6 <_vfprintf_r+0xfe6>
 8004576:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800457a:	4610      	mov	r0, r2
 800457c:	4619      	mov	r1, r3
 800457e:	f7fc fad1 	bl	8000b24 <__aeabi_dcmpun>
 8004582:	b160      	cbz	r0, 800459e <_vfprintf_r+0xdae>
 8004584:	4b5f      	ldr	r3, [pc, #380]	; (8004704 <_vfprintf_r+0xf14>)
 8004586:	4a60      	ldr	r2, [pc, #384]	; (8004708 <_vfprintf_r+0xf18>)
 8004588:	9902      	ldr	r1, [sp, #8]
 800458a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800458e:	2947      	cmp	r1, #71	; 0x47
 8004590:	bfcc      	ite	gt
 8004592:	4690      	movgt	r8, r2
 8004594:	4698      	movle	r8, r3
 8004596:	f04f 0903 	mov.w	r9, #3
 800459a:	2600      	movs	r6, #0
 800459c:	e451      	b.n	8003e42 <_vfprintf_r+0x652>
 800459e:	f1b9 3fff 	cmp.w	r9, #4294967295
 80045a2:	d00a      	beq.n	80045ba <_vfprintf_r+0xdca>
 80045a4:	9b02      	ldr	r3, [sp, #8]
 80045a6:	f023 0320 	bic.w	r3, r3, #32
 80045aa:	2b47      	cmp	r3, #71	; 0x47
 80045ac:	d107      	bne.n	80045be <_vfprintf_r+0xdce>
 80045ae:	f1b9 0f00 	cmp.w	r9, #0
 80045b2:	bf08      	it	eq
 80045b4:	f04f 0901 	moveq.w	r9, #1
 80045b8:	e001      	b.n	80045be <_vfprintf_r+0xdce>
 80045ba:	f04f 0906 	mov.w	r9, #6
 80045be:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80045c2:	930c      	str	r3, [sp, #48]	; 0x30
 80045c4:	9b07      	ldr	r3, [sp, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	da07      	bge.n	80045da <_vfprintf_r+0xdea>
 80045ca:	9b06      	ldr	r3, [sp, #24]
 80045cc:	930e      	str	r3, [sp, #56]	; 0x38
 80045ce:	9b07      	ldr	r3, [sp, #28]
 80045d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80045d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80045d6:	232d      	movs	r3, #45	; 0x2d
 80045d8:	e004      	b.n	80045e4 <_vfprintf_r+0xdf4>
 80045da:	ed9d 7b06 	vldr	d7, [sp, #24]
 80045de:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80045e2:	2300      	movs	r3, #0
 80045e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80045e6:	9b02      	ldr	r3, [sp, #8]
 80045e8:	f023 0720 	bic.w	r7, r3, #32
 80045ec:	2f46      	cmp	r7, #70	; 0x46
 80045ee:	d004      	beq.n	80045fa <_vfprintf_r+0xe0a>
 80045f0:	2f45      	cmp	r7, #69	; 0x45
 80045f2:	d105      	bne.n	8004600 <_vfprintf_r+0xe10>
 80045f4:	f109 0601 	add.w	r6, r9, #1
 80045f8:	e003      	b.n	8004602 <_vfprintf_r+0xe12>
 80045fa:	464e      	mov	r6, r9
 80045fc:	2103      	movs	r1, #3
 80045fe:	e001      	b.n	8004604 <_vfprintf_r+0xe14>
 8004600:	464e      	mov	r6, r9
 8004602:	2102      	movs	r1, #2
 8004604:	ab1d      	add	r3, sp, #116	; 0x74
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	ab1a      	add	r3, sp, #104	; 0x68
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4632      	mov	r2, r6
 800460e:	ab19      	add	r3, sp, #100	; 0x64
 8004610:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8004614:	4650      	mov	r0, sl
 8004616:	f000 fa1b 	bl	8004a50 <_dtoa_r>
 800461a:	2f47      	cmp	r7, #71	; 0x47
 800461c:	4680      	mov	r8, r0
 800461e:	d102      	bne.n	8004626 <_vfprintf_r+0xe36>
 8004620:	07eb      	lsls	r3, r5, #31
 8004622:	f140 80ce 	bpl.w	80047c2 <_vfprintf_r+0xfd2>
 8004626:	eb08 0306 	add.w	r3, r8, r6
 800462a:	2f46      	cmp	r7, #70	; 0x46
 800462c:	9304      	str	r3, [sp, #16]
 800462e:	d111      	bne.n	8004654 <_vfprintf_r+0xe64>
 8004630:	f898 3000 	ldrb.w	r3, [r8]
 8004634:	2b30      	cmp	r3, #48	; 0x30
 8004636:	d109      	bne.n	800464c <_vfprintf_r+0xe5c>
 8004638:	2200      	movs	r2, #0
 800463a:	2300      	movs	r3, #0
 800463c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004640:	f7fc fa3e 	bl	8000ac0 <__aeabi_dcmpeq>
 8004644:	b910      	cbnz	r0, 800464c <_vfprintf_r+0xe5c>
 8004646:	f1c6 0601 	rsb	r6, r6, #1
 800464a:	9619      	str	r6, [sp, #100]	; 0x64
 800464c:	9a04      	ldr	r2, [sp, #16]
 800464e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004650:	441a      	add	r2, r3
 8004652:	9204      	str	r2, [sp, #16]
 8004654:	2200      	movs	r2, #0
 8004656:	2300      	movs	r3, #0
 8004658:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800465c:	f7fc fa30 	bl	8000ac0 <__aeabi_dcmpeq>
 8004660:	b908      	cbnz	r0, 8004666 <_vfprintf_r+0xe76>
 8004662:	2230      	movs	r2, #48	; 0x30
 8004664:	e002      	b.n	800466c <_vfprintf_r+0xe7c>
 8004666:	9b04      	ldr	r3, [sp, #16]
 8004668:	931d      	str	r3, [sp, #116]	; 0x74
 800466a:	e007      	b.n	800467c <_vfprintf_r+0xe8c>
 800466c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800466e:	9904      	ldr	r1, [sp, #16]
 8004670:	4299      	cmp	r1, r3
 8004672:	d903      	bls.n	800467c <_vfprintf_r+0xe8c>
 8004674:	1c59      	adds	r1, r3, #1
 8004676:	911d      	str	r1, [sp, #116]	; 0x74
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	e7f7      	b.n	800466c <_vfprintf_r+0xe7c>
 800467c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800467e:	2f47      	cmp	r7, #71	; 0x47
 8004680:	ebc8 0303 	rsb	r3, r8, r3
 8004684:	9304      	str	r3, [sp, #16]
 8004686:	d108      	bne.n	800469a <_vfprintf_r+0xeaa>
 8004688:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800468a:	1cdf      	adds	r7, r3, #3
 800468c:	db01      	blt.n	8004692 <_vfprintf_r+0xea2>
 800468e:	4599      	cmp	r9, r3
 8004690:	da69      	bge.n	8004766 <_vfprintf_r+0xf76>
 8004692:	9b02      	ldr	r3, [sp, #8]
 8004694:	3b02      	subs	r3, #2
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	e002      	b.n	80046a0 <_vfprintf_r+0xeb0>
 800469a:	9b02      	ldr	r3, [sp, #8]
 800469c:	2b65      	cmp	r3, #101	; 0x65
 800469e:	dc4b      	bgt.n	8004738 <_vfprintf_r+0xf48>
 80046a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046a2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80046a6:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 80046aa:	3b01      	subs	r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	9319      	str	r3, [sp, #100]	; 0x64
 80046b0:	bfba      	itte	lt
 80046b2:	425b      	neglt	r3, r3
 80046b4:	222d      	movlt	r2, #45	; 0x2d
 80046b6:	222b      	movge	r2, #43	; 0x2b
 80046b8:	2b09      	cmp	r3, #9
 80046ba:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80046be:	dd25      	ble.n	800470c <_vfprintf_r+0xf1c>
 80046c0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80046c4:	200a      	movs	r0, #10
 80046c6:	fb93 f1f0 	sdiv	r1, r3, r0
 80046ca:	fb00 3311 	mls	r3, r0, r1, r3
 80046ce:	3330      	adds	r3, #48	; 0x30
 80046d0:	2909      	cmp	r1, #9
 80046d2:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80046d6:	460b      	mov	r3, r1
 80046d8:	dcf5      	bgt.n	80046c6 <_vfprintf_r+0xed6>
 80046da:	3330      	adds	r3, #48	; 0x30
 80046dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80046e0:	1e51      	subs	r1, r2, #1
 80046e2:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80046e6:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80046ea:	4281      	cmp	r1, r0
 80046ec:	461a      	mov	r2, r3
 80046ee:	d214      	bcs.n	800471a <_vfprintf_r+0xf2a>
 80046f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046f4:	f803 2b01 	strb.w	r2, [r3], #1
 80046f8:	e7f7      	b.n	80046ea <_vfprintf_r+0xefa>
 80046fa:	bf00      	nop
 80046fc:	080070f4 	.word	0x080070f4
 8004700:	080070b0 	.word	0x080070b0
 8004704:	080070c8 	.word	0x080070c8
 8004708:	080070cc 	.word	0x080070cc
 800470c:	2230      	movs	r2, #48	; 0x30
 800470e:	4413      	add	r3, r2
 8004710:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004714:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8004718:	aa1c      	add	r2, sp, #112	; 0x70
 800471a:	ab1b      	add	r3, sp, #108	; 0x6c
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	9a04      	ldr	r2, [sp, #16]
 8004720:	9310      	str	r3, [sp, #64]	; 0x40
 8004722:	2a01      	cmp	r2, #1
 8004724:	eb03 0902 	add.w	r9, r3, r2
 8004728:	dc02      	bgt.n	8004730 <_vfprintf_r+0xf40>
 800472a:	f015 0701 	ands.w	r7, r5, #1
 800472e:	d032      	beq.n	8004796 <_vfprintf_r+0xfa6>
 8004730:	9b08      	ldr	r3, [sp, #32]
 8004732:	2700      	movs	r7, #0
 8004734:	4499      	add	r9, r3
 8004736:	e02e      	b.n	8004796 <_vfprintf_r+0xfa6>
 8004738:	9b02      	ldr	r3, [sp, #8]
 800473a:	2b66      	cmp	r3, #102	; 0x66
 800473c:	d113      	bne.n	8004766 <_vfprintf_r+0xf76>
 800473e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004740:	2b00      	cmp	r3, #0
 8004742:	dd07      	ble.n	8004754 <_vfprintf_r+0xf64>
 8004744:	f1b9 0f00 	cmp.w	r9, #0
 8004748:	d101      	bne.n	800474e <_vfprintf_r+0xf5e>
 800474a:	07ee      	lsls	r6, r5, #31
 800474c:	d521      	bpl.n	8004792 <_vfprintf_r+0xfa2>
 800474e:	9a08      	ldr	r2, [sp, #32]
 8004750:	4413      	add	r3, r2
 8004752:	e006      	b.n	8004762 <_vfprintf_r+0xf72>
 8004754:	f1b9 0f00 	cmp.w	r9, #0
 8004758:	d101      	bne.n	800475e <_vfprintf_r+0xf6e>
 800475a:	07ed      	lsls	r5, r5, #31
 800475c:	d514      	bpl.n	8004788 <_vfprintf_r+0xf98>
 800475e:	9b08      	ldr	r3, [sp, #32]
 8004760:	3301      	adds	r3, #1
 8004762:	444b      	add	r3, r9
 8004764:	e015      	b.n	8004792 <_vfprintf_r+0xfa2>
 8004766:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004768:	9a04      	ldr	r2, [sp, #16]
 800476a:	4293      	cmp	r3, r2
 800476c:	db03      	blt.n	8004776 <_vfprintf_r+0xf86>
 800476e:	07e8      	lsls	r0, r5, #31
 8004770:	d50d      	bpl.n	800478e <_vfprintf_r+0xf9e>
 8004772:	9a08      	ldr	r2, [sp, #32]
 8004774:	e006      	b.n	8004784 <_vfprintf_r+0xf94>
 8004776:	9a04      	ldr	r2, [sp, #16]
 8004778:	9908      	ldr	r1, [sp, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	440a      	add	r2, r1
 800477e:	dc05      	bgt.n	800478c <_vfprintf_r+0xf9c>
 8004780:	f1c3 0301 	rsb	r3, r3, #1
 8004784:	4413      	add	r3, r2
 8004786:	e002      	b.n	800478e <_vfprintf_r+0xf9e>
 8004788:	2301      	movs	r3, #1
 800478a:	e002      	b.n	8004792 <_vfprintf_r+0xfa2>
 800478c:	4613      	mov	r3, r2
 800478e:	2267      	movs	r2, #103	; 0x67
 8004790:	9202      	str	r2, [sp, #8]
 8004792:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004794:	4699      	mov	r9, r3
 8004796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004798:	b113      	cbz	r3, 80047a0 <_vfprintf_r+0xfb0>
 800479a:	232d      	movs	r3, #45	; 0x2d
 800479c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80047a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047a2:	2600      	movs	r6, #0
 80047a4:	f7ff bb4e 	b.w	8003e44 <_vfprintf_r+0x654>
 80047a8:	2200      	movs	r2, #0
 80047aa:	2300      	movs	r3, #0
 80047ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047b0:	f7fc f990 	bl	8000ad4 <__aeabi_dcmplt>
 80047b4:	b110      	cbz	r0, 80047bc <_vfprintf_r+0xfcc>
 80047b6:	232d      	movs	r3, #45	; 0x2d
 80047b8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80047bc:	4b07      	ldr	r3, [pc, #28]	; (80047dc <_vfprintf_r+0xfec>)
 80047be:	4a08      	ldr	r2, [pc, #32]	; (80047e0 <_vfprintf_r+0xff0>)
 80047c0:	e6e2      	b.n	8004588 <_vfprintf_r+0xd98>
 80047c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047c4:	1a1b      	subs	r3, r3, r0
 80047c6:	9304      	str	r3, [sp, #16]
 80047c8:	e75e      	b.n	8004688 <_vfprintf_r+0xe98>
 80047ca:	ea56 0207 	orrs.w	r2, r6, r7
 80047ce:	f47f aaac 	bne.w	8003d2a <_vfprintf_r+0x53a>
 80047d2:	f7ff bab1 	b.w	8003d38 <_vfprintf_r+0x548>
 80047d6:	b03d      	add	sp, #244	; 0xf4
 80047d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047dc:	080070c0 	.word	0x080070c0
 80047e0:	080070c4 	.word	0x080070c4

080047e4 <__sbprintf>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	460c      	mov	r4, r1
 80047e8:	8989      	ldrh	r1, [r1, #12]
 80047ea:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80047ee:	f021 0102 	bic.w	r1, r1, #2
 80047f2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80047f6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80047f8:	9119      	str	r1, [sp, #100]	; 0x64
 80047fa:	89e1      	ldrh	r1, [r4, #14]
 80047fc:	f8ad 100e 	strh.w	r1, [sp, #14]
 8004800:	6a21      	ldr	r1, [r4, #32]
 8004802:	9108      	str	r1, [sp, #32]
 8004804:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004806:	910a      	str	r1, [sp, #40]	; 0x28
 8004808:	a91a      	add	r1, sp, #104	; 0x68
 800480a:	9100      	str	r1, [sp, #0]
 800480c:	9104      	str	r1, [sp, #16]
 800480e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004812:	9102      	str	r1, [sp, #8]
 8004814:	9105      	str	r1, [sp, #20]
 8004816:	2100      	movs	r1, #0
 8004818:	9106      	str	r1, [sp, #24]
 800481a:	4669      	mov	r1, sp
 800481c:	4606      	mov	r6, r0
 800481e:	f7fe ffe7 	bl	80037f0 <_vfprintf_r>
 8004822:	1e05      	subs	r5, r0, #0
 8004824:	db07      	blt.n	8004836 <__sbprintf+0x52>
 8004826:	4669      	mov	r1, sp
 8004828:	4630      	mov	r0, r6
 800482a:	f000 ff41 	bl	80056b0 <_fflush_r>
 800482e:	2800      	cmp	r0, #0
 8004830:	bf18      	it	ne
 8004832:	f04f 35ff 	movne.w	r5, #4294967295
 8004836:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800483a:	065b      	lsls	r3, r3, #25
 800483c:	bf48      	it	mi
 800483e:	89a3      	ldrhmi	r3, [r4, #12]
 8004840:	4628      	mov	r0, r5
 8004842:	bf44      	itt	mi
 8004844:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8004848:	81a3      	strhmi	r3, [r4, #12]
 800484a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800484e:	bd70      	pop	{r4, r5, r6, pc}

08004850 <__swsetup_r>:
 8004850:	4b32      	ldr	r3, [pc, #200]	; (800491c <__swsetup_r+0xcc>)
 8004852:	b570      	push	{r4, r5, r6, lr}
 8004854:	681d      	ldr	r5, [r3, #0]
 8004856:	4606      	mov	r6, r0
 8004858:	460c      	mov	r4, r1
 800485a:	b125      	cbz	r5, 8004866 <__swsetup_r+0x16>
 800485c:	69ab      	ldr	r3, [r5, #24]
 800485e:	b913      	cbnz	r3, 8004866 <__swsetup_r+0x16>
 8004860:	4628      	mov	r0, r5
 8004862:	f000 ff8f 	bl	8005784 <__sinit>
 8004866:	4b2e      	ldr	r3, [pc, #184]	; (8004920 <__swsetup_r+0xd0>)
 8004868:	429c      	cmp	r4, r3
 800486a:	d101      	bne.n	8004870 <__swsetup_r+0x20>
 800486c:	686c      	ldr	r4, [r5, #4]
 800486e:	e008      	b.n	8004882 <__swsetup_r+0x32>
 8004870:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <__swsetup_r+0xd4>)
 8004872:	429c      	cmp	r4, r3
 8004874:	d101      	bne.n	800487a <__swsetup_r+0x2a>
 8004876:	68ac      	ldr	r4, [r5, #8]
 8004878:	e003      	b.n	8004882 <__swsetup_r+0x32>
 800487a:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <__swsetup_r+0xd8>)
 800487c:	429c      	cmp	r4, r3
 800487e:	bf08      	it	eq
 8004880:	68ec      	ldreq	r4, [r5, #12]
 8004882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004886:	b29a      	uxth	r2, r3
 8004888:	0715      	lsls	r5, r2, #28
 800488a:	d41d      	bmi.n	80048c8 <__swsetup_r+0x78>
 800488c:	06d0      	lsls	r0, r2, #27
 800488e:	d402      	bmi.n	8004896 <__swsetup_r+0x46>
 8004890:	2209      	movs	r2, #9
 8004892:	6032      	str	r2, [r6, #0]
 8004894:	e03a      	b.n	800490c <__swsetup_r+0xbc>
 8004896:	0751      	lsls	r1, r2, #29
 8004898:	d512      	bpl.n	80048c0 <__swsetup_r+0x70>
 800489a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800489c:	b141      	cbz	r1, 80048b0 <__swsetup_r+0x60>
 800489e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048a2:	4299      	cmp	r1, r3
 80048a4:	d002      	beq.n	80048ac <__swsetup_r+0x5c>
 80048a6:	4630      	mov	r0, r6
 80048a8:	f001 f884 	bl	80059b4 <_free_r>
 80048ac:	2300      	movs	r3, #0
 80048ae:	6363      	str	r3, [r4, #52]	; 0x34
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	2300      	movs	r3, #0
 80048ba:	6063      	str	r3, [r4, #4]
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	6023      	str	r3, [r4, #0]
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	f043 0308 	orr.w	r3, r3, #8
 80048c6:	81a3      	strh	r3, [r4, #12]
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	b94b      	cbnz	r3, 80048e0 <__swsetup_r+0x90>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d6:	d003      	beq.n	80048e0 <__swsetup_r+0x90>
 80048d8:	4621      	mov	r1, r4
 80048da:	4630      	mov	r0, r6
 80048dc:	f001 faca 	bl	8005e74 <__smakebuf_r>
 80048e0:	89a2      	ldrh	r2, [r4, #12]
 80048e2:	f012 0301 	ands.w	r3, r2, #1
 80048e6:	d005      	beq.n	80048f4 <__swsetup_r+0xa4>
 80048e8:	2300      	movs	r3, #0
 80048ea:	60a3      	str	r3, [r4, #8]
 80048ec:	6963      	ldr	r3, [r4, #20]
 80048ee:	425b      	negs	r3, r3
 80048f0:	61a3      	str	r3, [r4, #24]
 80048f2:	e003      	b.n	80048fc <__swsetup_r+0xac>
 80048f4:	0792      	lsls	r2, r2, #30
 80048f6:	bf58      	it	pl
 80048f8:	6963      	ldrpl	r3, [r4, #20]
 80048fa:	60a3      	str	r3, [r4, #8]
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	b95b      	cbnz	r3, 8004918 <__swsetup_r+0xc8>
 8004900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004904:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8004908:	b280      	uxth	r0, r0
 800490a:	b130      	cbz	r0, 800491a <__swsetup_r+0xca>
 800490c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004910:	81a3      	strh	r3, [r4, #12]
 8004912:	f04f 30ff 	mov.w	r0, #4294967295
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	2000      	movs	r0, #0
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	200000fc 	.word	0x200000fc
 8004920:	08007114 	.word	0x08007114
 8004924:	08007134 	.word	0x08007134
 8004928:	08007154 	.word	0x08007154

0800492c <quorem>:
 800492c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004930:	6903      	ldr	r3, [r0, #16]
 8004932:	690c      	ldr	r4, [r1, #16]
 8004934:	429c      	cmp	r4, r3
 8004936:	4680      	mov	r8, r0
 8004938:	f300 8083 	bgt.w	8004a42 <quorem+0x116>
 800493c:	3c01      	subs	r4, #1
 800493e:	f101 0714 	add.w	r7, r1, #20
 8004942:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004946:	f100 0614 	add.w	r6, r0, #20
 800494a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800494e:	eb06 030e 	add.w	r3, r6, lr
 8004952:	9301      	str	r3, [sp, #4]
 8004954:	3501      	adds	r5, #1
 8004956:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800495a:	fbb3 f5f5 	udiv	r5, r3, r5
 800495e:	eb07 090e 	add.w	r9, r7, lr
 8004962:	2d00      	cmp	r5, #0
 8004964:	d039      	beq.n	80049da <quorem+0xae>
 8004966:	f04f 0a00 	mov.w	sl, #0
 800496a:	4638      	mov	r0, r7
 800496c:	46b4      	mov	ip, r6
 800496e:	46d3      	mov	fp, sl
 8004970:	f850 2b04 	ldr.w	r2, [r0], #4
 8004974:	b293      	uxth	r3, r2
 8004976:	fb05 a303 	mla	r3, r5, r3, sl
 800497a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800497e:	b29b      	uxth	r3, r3
 8004980:	ebc3 030b 	rsb	r3, r3, fp
 8004984:	0c12      	lsrs	r2, r2, #16
 8004986:	f8bc b000 	ldrh.w	fp, [ip]
 800498a:	fb05 a202 	mla	r2, r5, r2, sl
 800498e:	fa13 f38b 	uxtah	r3, r3, fp
 8004992:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004996:	fa1f fb82 	uxth.w	fp, r2
 800499a:	f8dc 2000 	ldr.w	r2, [ip]
 800499e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80049a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049ac:	4581      	cmp	r9, r0
 80049ae:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80049b2:	f84c 3b04 	str.w	r3, [ip], #4
 80049b6:	d2db      	bcs.n	8004970 <quorem+0x44>
 80049b8:	f856 300e 	ldr.w	r3, [r6, lr]
 80049bc:	b96b      	cbnz	r3, 80049da <quorem+0xae>
 80049be:	9b01      	ldr	r3, [sp, #4]
 80049c0:	3b04      	subs	r3, #4
 80049c2:	429e      	cmp	r6, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	d302      	bcc.n	80049ce <quorem+0xa2>
 80049c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80049cc:	e005      	b.n	80049da <quorem+0xae>
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	3b04      	subs	r3, #4
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	d1f8      	bne.n	80049c8 <quorem+0x9c>
 80049d6:	3c01      	subs	r4, #1
 80049d8:	e7f3      	b.n	80049c2 <quorem+0x96>
 80049da:	4640      	mov	r0, r8
 80049dc:	f001 fcaf 	bl	800633e <__mcmp>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	db2c      	blt.n	8004a3e <quorem+0x112>
 80049e4:	3501      	adds	r5, #1
 80049e6:	4630      	mov	r0, r6
 80049e8:	f04f 0e00 	mov.w	lr, #0
 80049ec:	f857 1b04 	ldr.w	r1, [r7], #4
 80049f0:	f8d0 c000 	ldr.w	ip, [r0]
 80049f4:	b28a      	uxth	r2, r1
 80049f6:	ebc2 030e 	rsb	r3, r2, lr
 80049fa:	0c09      	lsrs	r1, r1, #16
 80049fc:	fa13 f38c 	uxtah	r3, r3, ip
 8004a00:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8004a04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a0e:	45b9      	cmp	r9, r7
 8004a10:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004a14:	f840 3b04 	str.w	r3, [r0], #4
 8004a18:	d2e8      	bcs.n	80049ec <quorem+0xc0>
 8004a1a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004a1e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004a22:	b962      	cbnz	r2, 8004a3e <quorem+0x112>
 8004a24:	3b04      	subs	r3, #4
 8004a26:	429e      	cmp	r6, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <quorem+0x106>
 8004a2c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a30:	e005      	b.n	8004a3e <quorem+0x112>
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	3b04      	subs	r3, #4
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	d1f8      	bne.n	8004a2c <quorem+0x100>
 8004a3a:	3c01      	subs	r4, #1
 8004a3c:	e7f3      	b.n	8004a26 <quorem+0xfa>
 8004a3e:	4628      	mov	r0, r5
 8004a40:	e000      	b.n	8004a44 <quorem+0x118>
 8004a42:	2000      	movs	r0, #0
 8004a44:	b003      	add	sp, #12
 8004a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4a:	0000      	movs	r0, r0
 8004a4c:	0000      	movs	r0, r0
	...

08004a50 <_dtoa_r>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	ec59 8b10 	vmov	r8, r9, d0
 8004a58:	b097      	sub	sp, #92	; 0x5c
 8004a5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a5c:	9106      	str	r1, [sp, #24]
 8004a5e:	4682      	mov	sl, r0
 8004a60:	9209      	str	r2, [sp, #36]	; 0x24
 8004a62:	9310      	str	r3, [sp, #64]	; 0x40
 8004a64:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8004a66:	e9cd 8900 	strd	r8, r9, [sp]
 8004a6a:	b945      	cbnz	r5, 8004a7e <_dtoa_r+0x2e>
 8004a6c:	2010      	movs	r0, #16
 8004a6e:	f7fe fc25 	bl	80032bc <malloc>
 8004a72:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8004a76:	6045      	str	r5, [r0, #4]
 8004a78:	6085      	str	r5, [r0, #8]
 8004a7a:	6005      	str	r5, [r0, #0]
 8004a7c:	60c5      	str	r5, [r0, #12]
 8004a7e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	b159      	cbz	r1, 8004a9e <_dtoa_r+0x4e>
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	604a      	str	r2, [r1, #4]
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4093      	lsls	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]
 8004a90:	4650      	mov	r0, sl
 8004a92:	f001 fa7b 	bl	8005f8c <_Bfree>
 8004a96:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	9b01      	ldr	r3, [sp, #4]
 8004aa0:	4a9f      	ldr	r2, [pc, #636]	; (8004d20 <_dtoa_r+0x2d0>)
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bfbf      	itttt	lt
 8004aa6:	2301      	movlt	r3, #1
 8004aa8:	6023      	strlt	r3, [r4, #0]
 8004aaa:	9b01      	ldrlt	r3, [sp, #4]
 8004aac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ab0:	bfb8      	it	lt
 8004ab2:	9301      	strlt	r3, [sp, #4]
 8004ab4:	9f01      	ldr	r7, [sp, #4]
 8004ab6:	bfa4      	itt	ge
 8004ab8:	2300      	movge	r3, #0
 8004aba:	6023      	strge	r3, [r4, #0]
 8004abc:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8004ac0:	0d1b      	lsrs	r3, r3, #20
 8004ac2:	051b      	lsls	r3, r3, #20
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d11d      	bne.n	8004b04 <_dtoa_r+0xb4>
 8004ac8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004aca:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	9b00      	ldr	r3, [sp, #0]
 8004ad2:	b943      	cbnz	r3, 8004ae6 <_dtoa_r+0x96>
 8004ad4:	4a93      	ldr	r2, [pc, #588]	; (8004d24 <_dtoa_r+0x2d4>)
 8004ad6:	4b94      	ldr	r3, [pc, #592]	; (8004d28 <_dtoa_r+0x2d8>)
 8004ad8:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8004adc:	2800      	cmp	r0, #0
 8004ade:	bf14      	ite	ne
 8004ae0:	4618      	movne	r0, r3
 8004ae2:	4610      	moveq	r0, r2
 8004ae4:	e000      	b.n	8004ae8 <_dtoa_r+0x98>
 8004ae6:	4890      	ldr	r0, [pc, #576]	; (8004d28 <_dtoa_r+0x2d8>)
 8004ae8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 854a 	beq.w	8005584 <_dtoa_r+0xb34>
 8004af0:	78c3      	ldrb	r3, [r0, #3]
 8004af2:	b113      	cbz	r3, 8004afa <_dtoa_r+0xaa>
 8004af4:	f100 0308 	add.w	r3, r0, #8
 8004af8:	e000      	b.n	8004afc <_dtoa_r+0xac>
 8004afa:	1cc3      	adds	r3, r0, #3
 8004afc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	f000 bd40 	b.w	8005584 <_dtoa_r+0xb34>
 8004b04:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	4629      	mov	r1, r5
 8004b10:	f7fb ffd6 	bl	8000ac0 <__aeabi_dcmpeq>
 8004b14:	4680      	mov	r8, r0
 8004b16:	b158      	cbz	r0, 8004b30 <_dtoa_r+0xe0>
 8004b18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8522 	beq.w	800556a <_dtoa_r+0xb1a>
 8004b26:	4881      	ldr	r0, [pc, #516]	; (8004d2c <_dtoa_r+0x2dc>)
 8004b28:	6018      	str	r0, [r3, #0]
 8004b2a:	3801      	subs	r0, #1
 8004b2c:	f000 bd2a 	b.w	8005584 <_dtoa_r+0xb34>
 8004b30:	aa14      	add	r2, sp, #80	; 0x50
 8004b32:	a915      	add	r1, sp, #84	; 0x54
 8004b34:	ec45 4b10 	vmov	d0, r4, r5
 8004b38:	4650      	mov	r0, sl
 8004b3a:	f001 fc7b 	bl	8006434 <__d2b>
 8004b3e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004b42:	9002      	str	r0, [sp, #8]
 8004b44:	b15e      	cbz	r6, 8004b5e <_dtoa_r+0x10e>
 8004b46:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004b4a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004b54:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8004b58:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8004b5c:	e01d      	b.n	8004b9a <_dtoa_r+0x14a>
 8004b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b60:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004b62:	441e      	add	r6, r3
 8004b64:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	dd0a      	ble.n	8004b82 <_dtoa_r+0x132>
 8004b6c:	9a00      	ldr	r2, [sp, #0]
 8004b6e:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8004b72:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004b76:	fa22 f000 	lsr.w	r0, r2, r0
 8004b7a:	fa07 f303 	lsl.w	r3, r7, r3
 8004b7e:	4318      	orrs	r0, r3
 8004b80:	e004      	b.n	8004b8c <_dtoa_r+0x13c>
 8004b82:	f1c3 0020 	rsb	r0, r3, #32
 8004b86:	9b00      	ldr	r3, [sp, #0]
 8004b88:	fa03 f000 	lsl.w	r0, r3, r0
 8004b8c:	f7fb fcba 	bl	8000504 <__aeabi_ui2d>
 8004b90:	2301      	movs	r3, #1
 8004b92:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004b96:	3e01      	subs	r6, #1
 8004b98:	9311      	str	r3, [sp, #68]	; 0x44
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	4b64      	ldr	r3, [pc, #400]	; (8004d30 <_dtoa_r+0x2e0>)
 8004b9e:	f7fb fb73 	bl	8000288 <__aeabi_dsub>
 8004ba2:	a359      	add	r3, pc, #356	; (adr r3, 8004d08 <_dtoa_r+0x2b8>)
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f7fb fd22 	bl	80005f0 <__aeabi_dmul>
 8004bac:	a358      	add	r3, pc, #352	; (adr r3, 8004d10 <_dtoa_r+0x2c0>)
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	f7fb fb6b 	bl	800028c <__adddf3>
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	4630      	mov	r0, r6
 8004bba:	460d      	mov	r5, r1
 8004bbc:	f7fb fcb2 	bl	8000524 <__aeabi_i2d>
 8004bc0:	a355      	add	r3, pc, #340	; (adr r3, 8004d18 <_dtoa_r+0x2c8>)
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f7fb fd13 	bl	80005f0 <__aeabi_dmul>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4620      	mov	r0, r4
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	f7fb fb5b 	bl	800028c <__adddf3>
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	460d      	mov	r5, r1
 8004bda:	f7fb ffb9 	bl	8000b50 <__aeabi_d2iz>
 8004bde:	2200      	movs	r2, #0
 8004be0:	4683      	mov	fp, r0
 8004be2:	2300      	movs	r3, #0
 8004be4:	4620      	mov	r0, r4
 8004be6:	4629      	mov	r1, r5
 8004be8:	f7fb ff74 	bl	8000ad4 <__aeabi_dcmplt>
 8004bec:	b158      	cbz	r0, 8004c06 <_dtoa_r+0x1b6>
 8004bee:	4658      	mov	r0, fp
 8004bf0:	f7fb fc98 	bl	8000524 <__aeabi_i2d>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	f7fb ff60 	bl	8000ac0 <__aeabi_dcmpeq>
 8004c00:	b908      	cbnz	r0, 8004c06 <_dtoa_r+0x1b6>
 8004c02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c06:	f1bb 0f16 	cmp.w	fp, #22
 8004c0a:	d80d      	bhi.n	8004c28 <_dtoa_r+0x1d8>
 8004c0c:	4949      	ldr	r1, [pc, #292]	; (8004d34 <_dtoa_r+0x2e4>)
 8004c0e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004c12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c1a:	f7fb ff79 	bl	8000b10 <__aeabi_dcmpgt>
 8004c1e:	b130      	cbz	r0, 8004c2e <_dtoa_r+0x1de>
 8004c20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c24:	2300      	movs	r3, #0
 8004c26:	e000      	b.n	8004c2a <_dtoa_r+0x1da>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	930d      	str	r3, [sp, #52]	; 0x34
 8004c2c:	e000      	b.n	8004c30 <_dtoa_r+0x1e0>
 8004c2e:	900d      	str	r0, [sp, #52]	; 0x34
 8004c30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c32:	1b9e      	subs	r6, r3, r6
 8004c34:	1e73      	subs	r3, r6, #1
 8004c36:	9305      	str	r3, [sp, #20]
 8004c38:	bf43      	ittte	mi
 8004c3a:	f1c3 0900 	rsbmi	r9, r3, #0
 8004c3e:	2300      	movmi	r3, #0
 8004c40:	9305      	strmi	r3, [sp, #20]
 8004c42:	f04f 0900 	movpl.w	r9, #0
 8004c46:	f1bb 0f00 	cmp.w	fp, #0
 8004c4a:	db07      	blt.n	8004c5c <_dtoa_r+0x20c>
 8004c4c:	9b05      	ldr	r3, [sp, #20]
 8004c4e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8004c52:	445b      	add	r3, fp
 8004c54:	9305      	str	r3, [sp, #20]
 8004c56:	2300      	movs	r3, #0
 8004c58:	9307      	str	r3, [sp, #28]
 8004c5a:	e006      	b.n	8004c6a <_dtoa_r+0x21a>
 8004c5c:	f1cb 0300 	rsb	r3, fp, #0
 8004c60:	9307      	str	r3, [sp, #28]
 8004c62:	2300      	movs	r3, #0
 8004c64:	ebcb 0909 	rsb	r9, fp, r9
 8004c68:	930c      	str	r3, [sp, #48]	; 0x30
 8004c6a:	9b06      	ldr	r3, [sp, #24]
 8004c6c:	2b09      	cmp	r3, #9
 8004c6e:	d827      	bhi.n	8004cc0 <_dtoa_r+0x270>
 8004c70:	2b05      	cmp	r3, #5
 8004c72:	bfc4      	itt	gt
 8004c74:	3b04      	subgt	r3, #4
 8004c76:	9306      	strgt	r3, [sp, #24]
 8004c78:	9b06      	ldr	r3, [sp, #24]
 8004c7a:	f1a3 0302 	sub.w	r3, r3, #2
 8004c7e:	bfcc      	ite	gt
 8004c80:	2500      	movgt	r5, #0
 8004c82:	2501      	movle	r5, #1
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d820      	bhi.n	8004cca <_dtoa_r+0x27a>
 8004c88:	e8df f003 	tbb	[pc, r3]
 8004c8c:	04020e06 	.word	0x04020e06
 8004c90:	2301      	movs	r3, #1
 8004c92:	e002      	b.n	8004c9a <_dtoa_r+0x24a>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e008      	b.n	8004caa <_dtoa_r+0x25a>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	9308      	str	r3, [sp, #32]
 8004c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	dd1c      	ble.n	8004cdc <_dtoa_r+0x28c>
 8004ca2:	9303      	str	r3, [sp, #12]
 8004ca4:	4698      	mov	r8, r3
 8004ca6:	e01e      	b.n	8004ce6 <_dtoa_r+0x296>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9308      	str	r3, [sp, #32]
 8004cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cae:	445b      	add	r3, fp
 8004cb0:	f103 0801 	add.w	r8, r3, #1
 8004cb4:	9303      	str	r3, [sp, #12]
 8004cb6:	4643      	mov	r3, r8
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	bfb8      	it	lt
 8004cbc:	2301      	movlt	r3, #1
 8004cbe:	e012      	b.n	8004ce6 <_dtoa_r+0x296>
 8004cc0:	2501      	movs	r5, #1
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9306      	str	r3, [sp, #24]
 8004cc6:	9508      	str	r5, [sp, #32]
 8004cc8:	e001      	b.n	8004cce <_dtoa_r+0x27e>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	9308      	str	r3, [sp, #32]
 8004cce:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd2:	9303      	str	r3, [sp, #12]
 8004cd4:	4698      	mov	r8, r3
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2312      	movs	r3, #18
 8004cda:	e003      	b.n	8004ce4 <_dtoa_r+0x294>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	9303      	str	r3, [sp, #12]
 8004ce0:	4698      	mov	r8, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ce6:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8004cea:	2200      	movs	r2, #0
 8004cec:	6062      	str	r2, [r4, #4]
 8004cee:	2104      	movs	r1, #4
 8004cf0:	f101 0214 	add.w	r2, r1, #20
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d81f      	bhi.n	8004d38 <_dtoa_r+0x2e8>
 8004cf8:	6862      	ldr	r2, [r4, #4]
 8004cfa:	3201      	adds	r2, #1
 8004cfc:	6062      	str	r2, [r4, #4]
 8004cfe:	0049      	lsls	r1, r1, #1
 8004d00:	e7f6      	b.n	8004cf0 <_dtoa_r+0x2a0>
 8004d02:	bf00      	nop
 8004d04:	f3af 8000 	nop.w
 8004d08:	636f4361 	.word	0x636f4361
 8004d0c:	3fd287a7 	.word	0x3fd287a7
 8004d10:	8b60c8b3 	.word	0x8b60c8b3
 8004d14:	3fc68a28 	.word	0x3fc68a28
 8004d18:	509f79fb 	.word	0x509f79fb
 8004d1c:	3fd34413 	.word	0x3fd34413
 8004d20:	7ff00000 	.word	0x7ff00000
 8004d24:	08007104 	.word	0x08007104
 8004d28:	0800710d 	.word	0x0800710d
 8004d2c:	080070f3 	.word	0x080070f3
 8004d30:	3ff80000 	.word	0x3ff80000
 8004d34:	08007180 	.word	0x08007180
 8004d38:	6861      	ldr	r1, [r4, #4]
 8004d3a:	4650      	mov	r0, sl
 8004d3c:	f001 f8f1 	bl	8005f22 <_Balloc>
 8004d40:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004d44:	6020      	str	r0, [r4, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	9304      	str	r3, [sp, #16]
 8004d4a:	f1b8 0f0e 	cmp.w	r8, #14
 8004d4e:	f200 815d 	bhi.w	800500c <_dtoa_r+0x5bc>
 8004d52:	2d00      	cmp	r5, #0
 8004d54:	f000 815a 	beq.w	800500c <_dtoa_r+0x5bc>
 8004d58:	ed9d 7b00 	vldr	d7, [sp]
 8004d5c:	f1bb 0f00 	cmp.w	fp, #0
 8004d60:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004d64:	dd31      	ble.n	8004dca <_dtoa_r+0x37a>
 8004d66:	4aa0      	ldr	r2, [pc, #640]	; (8004fe8 <_dtoa_r+0x598>)
 8004d68:	f00b 030f 	and.w	r3, fp, #15
 8004d6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d70:	ed93 7b00 	vldr	d7, [r3]
 8004d74:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004d78:	06e2      	lsls	r2, r4, #27
 8004d7a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004d7e:	d50c      	bpl.n	8004d9a <_dtoa_r+0x34a>
 8004d80:	4b9a      	ldr	r3, [pc, #616]	; (8004fec <_dtoa_r+0x59c>)
 8004d82:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004d86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d8a:	f7fb fd5b 	bl	8000844 <__aeabi_ddiv>
 8004d8e:	f004 040f 	and.w	r4, r4, #15
 8004d92:	e9cd 0100 	strd	r0, r1, [sp]
 8004d96:	2603      	movs	r6, #3
 8004d98:	e000      	b.n	8004d9c <_dtoa_r+0x34c>
 8004d9a:	2602      	movs	r6, #2
 8004d9c:	4d93      	ldr	r5, [pc, #588]	; (8004fec <_dtoa_r+0x59c>)
 8004d9e:	b16c      	cbz	r4, 8004dbc <_dtoa_r+0x36c>
 8004da0:	07e3      	lsls	r3, r4, #31
 8004da2:	d508      	bpl.n	8004db6 <_dtoa_r+0x366>
 8004da4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004da8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004dac:	f7fb fc20 	bl	80005f0 <__aeabi_dmul>
 8004db0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004db4:	3601      	adds	r6, #1
 8004db6:	1064      	asrs	r4, r4, #1
 8004db8:	3508      	adds	r5, #8
 8004dba:	e7f0      	b.n	8004d9e <_dtoa_r+0x34e>
 8004dbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004dc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dc4:	f7fb fd3e 	bl	8000844 <__aeabi_ddiv>
 8004dc8:	e020      	b.n	8004e0c <_dtoa_r+0x3bc>
 8004dca:	f1cb 0400 	rsb	r4, fp, #0
 8004dce:	b304      	cbz	r4, 8004e12 <_dtoa_r+0x3c2>
 8004dd0:	4b85      	ldr	r3, [pc, #532]	; (8004fe8 <_dtoa_r+0x598>)
 8004dd2:	4d86      	ldr	r5, [pc, #536]	; (8004fec <_dtoa_r+0x59c>)
 8004dd4:	f004 020f 	and.w	r2, r4, #15
 8004dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004de4:	f7fb fc04 	bl	80005f0 <__aeabi_dmul>
 8004de8:	e9cd 0100 	strd	r0, r1, [sp]
 8004dec:	1124      	asrs	r4, r4, #4
 8004dee:	2300      	movs	r3, #0
 8004df0:	2602      	movs	r6, #2
 8004df2:	b154      	cbz	r4, 8004e0a <_dtoa_r+0x3ba>
 8004df4:	07e7      	lsls	r7, r4, #31
 8004df6:	d505      	bpl.n	8004e04 <_dtoa_r+0x3b4>
 8004df8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004dfc:	f7fb fbf8 	bl	80005f0 <__aeabi_dmul>
 8004e00:	3601      	adds	r6, #1
 8004e02:	2301      	movs	r3, #1
 8004e04:	1064      	asrs	r4, r4, #1
 8004e06:	3508      	adds	r5, #8
 8004e08:	e7f3      	b.n	8004df2 <_dtoa_r+0x3a2>
 8004e0a:	b11b      	cbz	r3, 8004e14 <_dtoa_r+0x3c4>
 8004e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8004e10:	e000      	b.n	8004e14 <_dtoa_r+0x3c4>
 8004e12:	2602      	movs	r6, #2
 8004e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e16:	b1eb      	cbz	r3, 8004e54 <_dtoa_r+0x404>
 8004e18:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4b74      	ldr	r3, [pc, #464]	; (8004ff0 <_dtoa_r+0x5a0>)
 8004e20:	4620      	mov	r0, r4
 8004e22:	4629      	mov	r1, r5
 8004e24:	f7fb fe56 	bl	8000ad4 <__aeabi_dcmplt>
 8004e28:	b1a0      	cbz	r0, 8004e54 <_dtoa_r+0x404>
 8004e2a:	f1b8 0f00 	cmp.w	r8, #0
 8004e2e:	d011      	beq.n	8004e54 <_dtoa_r+0x404>
 8004e30:	9b03      	ldr	r3, [sp, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f340 80e6 	ble.w	8005004 <_dtoa_r+0x5b4>
 8004e38:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004e3c:	930a      	str	r3, [sp, #40]	; 0x28
 8004e3e:	2200      	movs	r2, #0
 8004e40:	4b6c      	ldr	r3, [pc, #432]	; (8004ff4 <_dtoa_r+0x5a4>)
 8004e42:	4620      	mov	r0, r4
 8004e44:	4629      	mov	r1, r5
 8004e46:	f7fb fbd3 	bl	80005f0 <__aeabi_dmul>
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e9cd 0100 	strd	r0, r1, [sp]
 8004e50:	9f03      	ldr	r7, [sp, #12]
 8004e52:	e002      	b.n	8004e5a <_dtoa_r+0x40a>
 8004e54:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004e58:	4647      	mov	r7, r8
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7fb fb62 	bl	8000524 <__aeabi_i2d>
 8004e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e64:	f7fb fbc4 	bl	80005f0 <__aeabi_dmul>
 8004e68:	2200      	movs	r2, #0
 8004e6a:	4b63      	ldr	r3, [pc, #396]	; (8004ff8 <_dtoa_r+0x5a8>)
 8004e6c:	f7fb fa0e 	bl	800028c <__adddf3>
 8004e70:	4604      	mov	r4, r0
 8004e72:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004e76:	b9cf      	cbnz	r7, 8004eac <_dtoa_r+0x45c>
 8004e78:	2200      	movs	r2, #0
 8004e7a:	4b60      	ldr	r3, [pc, #384]	; (8004ffc <_dtoa_r+0x5ac>)
 8004e7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e80:	f7fb fa02 	bl	8000288 <__aeabi_dsub>
 8004e84:	4622      	mov	r2, r4
 8004e86:	462b      	mov	r3, r5
 8004e88:	e9cd 0100 	strd	r0, r1, [sp]
 8004e8c:	f7fb fe40 	bl	8000b10 <__aeabi_dcmpgt>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	f040 8241 	bne.w	8005318 <_dtoa_r+0x8c8>
 8004e96:	4622      	mov	r2, r4
 8004e98:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004e9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ea0:	f7fb fe18 	bl	8000ad4 <__aeabi_dcmplt>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f040 822e 	bne.w	8005306 <_dtoa_r+0x8b6>
 8004eaa:	e0ab      	b.n	8005004 <_dtoa_r+0x5b4>
 8004eac:	9a08      	ldr	r2, [sp, #32]
 8004eae:	4b4e      	ldr	r3, [pc, #312]	; (8004fe8 <_dtoa_r+0x598>)
 8004eb0:	1e79      	subs	r1, r7, #1
 8004eb2:	2a00      	cmp	r2, #0
 8004eb4:	d04a      	beq.n	8004f4c <_dtoa_r+0x4fc>
 8004eb6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	494f      	ldr	r1, [pc, #316]	; (8005000 <_dtoa_r+0x5b0>)
 8004ec2:	f7fb fcbf 	bl	8000844 <__aeabi_ddiv>
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	462b      	mov	r3, r5
 8004eca:	f7fb f9dd 	bl	8000288 <__aeabi_dsub>
 8004ece:	9c04      	ldr	r4, [sp, #16]
 8004ed0:	4605      	mov	r5, r0
 8004ed2:	460e      	mov	r6, r1
 8004ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed8:	f7fb fe3a 	bl	8000b50 <__aeabi_d2iz>
 8004edc:	9012      	str	r0, [sp, #72]	; 0x48
 8004ede:	f7fb fb21 	bl	8000524 <__aeabi_i2d>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eea:	f7fb f9cd 	bl	8000288 <__aeabi_dsub>
 8004eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ef0:	3330      	adds	r3, #48	; 0x30
 8004ef2:	f804 3b01 	strb.w	r3, [r4], #1
 8004ef6:	462a      	mov	r2, r5
 8004ef8:	4633      	mov	r3, r6
 8004efa:	e9cd 0100 	strd	r0, r1, [sp]
 8004efe:	f7fb fde9 	bl	8000ad4 <__aeabi_dcmplt>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	f040 8321 	bne.w	800554a <_dtoa_r+0xafa>
 8004f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	4938      	ldr	r1, [pc, #224]	; (8004ff0 <_dtoa_r+0x5a0>)
 8004f10:	f7fb f9ba 	bl	8000288 <__aeabi_dsub>
 8004f14:	462a      	mov	r2, r5
 8004f16:	4633      	mov	r3, r6
 8004f18:	f7fb fddc 	bl	8000ad4 <__aeabi_dcmplt>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	f040 80d2 	bne.w	80050c6 <_dtoa_r+0x676>
 8004f22:	9b04      	ldr	r3, [sp, #16]
 8004f24:	1ae3      	subs	r3, r4, r3
 8004f26:	42bb      	cmp	r3, r7
 8004f28:	da6c      	bge.n	8005004 <_dtoa_r+0x5b4>
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	4b31      	ldr	r3, [pc, #196]	; (8004ff4 <_dtoa_r+0x5a4>)
 8004f2e:	4628      	mov	r0, r5
 8004f30:	4631      	mov	r1, r6
 8004f32:	f7fb fb5d 	bl	80005f0 <__aeabi_dmul>
 8004f36:	2200      	movs	r2, #0
 8004f38:	4605      	mov	r5, r0
 8004f3a:	460e      	mov	r6, r1
 8004f3c:	4b2d      	ldr	r3, [pc, #180]	; (8004ff4 <_dtoa_r+0x5a4>)
 8004f3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f42:	f7fb fb55 	bl	80005f0 <__aeabi_dmul>
 8004f46:	e9cd 0100 	strd	r0, r1, [sp]
 8004f4a:	e7c3      	b.n	8004ed4 <_dtoa_r+0x484>
 8004f4c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004f50:	4622      	mov	r2, r4
 8004f52:	462b      	mov	r3, r5
 8004f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f58:	f7fb fb4a 	bl	80005f0 <__aeabi_dmul>
 8004f5c:	9b04      	ldr	r3, [sp, #16]
 8004f5e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004f62:	19dc      	adds	r4, r3, r7
 8004f64:	461d      	mov	r5, r3
 8004f66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f6a:	f7fb fdf1 	bl	8000b50 <__aeabi_d2iz>
 8004f6e:	4606      	mov	r6, r0
 8004f70:	f7fb fad8 	bl	8000524 <__aeabi_i2d>
 8004f74:	3630      	adds	r6, #48	; 0x30
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f7e:	f7fb f983 	bl	8000288 <__aeabi_dsub>
 8004f82:	f805 6b01 	strb.w	r6, [r5], #1
 8004f86:	42ac      	cmp	r4, r5
 8004f88:	e9cd 0100 	strd	r0, r1, [sp]
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	d123      	bne.n	8004fda <_dtoa_r+0x58a>
 8004f92:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <_dtoa_r+0x5b0>)
 8004f94:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004f98:	f7fb f978 	bl	800028c <__adddf3>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fa4:	f7fb fdb4 	bl	8000b10 <__aeabi_dcmpgt>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f040 808c 	bne.w	80050c6 <_dtoa_r+0x676>
 8004fae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	4912      	ldr	r1, [pc, #72]	; (8005000 <_dtoa_r+0x5b0>)
 8004fb6:	f7fb f967 	bl	8000288 <__aeabi_dsub>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fc2:	f7fb fd87 	bl	8000ad4 <__aeabi_dcmplt>
 8004fc6:	b1e8      	cbz	r0, 8005004 <_dtoa_r+0x5b4>
 8004fc8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8004fcc:	2b30      	cmp	r3, #48	; 0x30
 8004fce:	f104 32ff 	add.w	r2, r4, #4294967295
 8004fd2:	f040 82ba 	bne.w	800554a <_dtoa_r+0xafa>
 8004fd6:	4614      	mov	r4, r2
 8004fd8:	e7f6      	b.n	8004fc8 <_dtoa_r+0x578>
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <_dtoa_r+0x5a4>)
 8004fdc:	f7fb fb08 	bl	80005f0 <__aeabi_dmul>
 8004fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8004fe4:	e7bf      	b.n	8004f66 <_dtoa_r+0x516>
 8004fe6:	bf00      	nop
 8004fe8:	08007180 	.word	0x08007180
 8004fec:	08007248 	.word	0x08007248
 8004ff0:	3ff00000 	.word	0x3ff00000
 8004ff4:	40240000 	.word	0x40240000
 8004ff8:	401c0000 	.word	0x401c0000
 8004ffc:	40140000 	.word	0x40140000
 8005000:	3fe00000 	.word	0x3fe00000
 8005004:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8005008:	e88d 0018 	stmia.w	sp, {r3, r4}
 800500c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800500e:	2b00      	cmp	r3, #0
 8005010:	db7c      	blt.n	800510c <_dtoa_r+0x6bc>
 8005012:	f1bb 0f0e 	cmp.w	fp, #14
 8005016:	dc79      	bgt.n	800510c <_dtoa_r+0x6bc>
 8005018:	4b8f      	ldr	r3, [pc, #572]	; (8005258 <_dtoa_r+0x808>)
 800501a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800501e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	da14      	bge.n	8005052 <_dtoa_r+0x602>
 8005028:	f1b8 0f00 	cmp.w	r8, #0
 800502c:	dc11      	bgt.n	8005052 <_dtoa_r+0x602>
 800502e:	f040 816c 	bne.w	800530a <_dtoa_r+0x8ba>
 8005032:	2200      	movs	r2, #0
 8005034:	4b89      	ldr	r3, [pc, #548]	; (800525c <_dtoa_r+0x80c>)
 8005036:	4630      	mov	r0, r6
 8005038:	4639      	mov	r1, r7
 800503a:	f7fb fad9 	bl	80005f0 <__aeabi_dmul>
 800503e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005042:	f7fb fd5b 	bl	8000afc <__aeabi_dcmpge>
 8005046:	4645      	mov	r5, r8
 8005048:	4646      	mov	r6, r8
 800504a:	2800      	cmp	r0, #0
 800504c:	f040 815f 	bne.w	800530e <_dtoa_r+0x8be>
 8005050:	e166      	b.n	8005320 <_dtoa_r+0x8d0>
 8005052:	9c04      	ldr	r4, [sp, #16]
 8005054:	4632      	mov	r2, r6
 8005056:	463b      	mov	r3, r7
 8005058:	e9dd 0100 	ldrd	r0, r1, [sp]
 800505c:	f7fb fbf2 	bl	8000844 <__aeabi_ddiv>
 8005060:	f7fb fd76 	bl	8000b50 <__aeabi_d2iz>
 8005064:	4605      	mov	r5, r0
 8005066:	f7fb fa5d 	bl	8000524 <__aeabi_i2d>
 800506a:	4632      	mov	r2, r6
 800506c:	463b      	mov	r3, r7
 800506e:	f7fb fabf 	bl	80005f0 <__aeabi_dmul>
 8005072:	460b      	mov	r3, r1
 8005074:	4602      	mov	r2, r0
 8005076:	e9dd 0100 	ldrd	r0, r1, [sp]
 800507a:	f7fb f905 	bl	8000288 <__aeabi_dsub>
 800507e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8005082:	f804 eb01 	strb.w	lr, [r4], #1
 8005086:	9b04      	ldr	r3, [sp, #16]
 8005088:	ebc3 0e04 	rsb	lr, r3, r4
 800508c:	45f0      	cmp	r8, lr
 800508e:	e9cd 0100 	strd	r0, r1, [sp]
 8005092:	d12e      	bne.n	80050f2 <_dtoa_r+0x6a2>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	f7fb f8f8 	bl	800028c <__adddf3>
 800509c:	4680      	mov	r8, r0
 800509e:	4689      	mov	r9, r1
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4630      	mov	r0, r6
 80050a6:	4639      	mov	r1, r7
 80050a8:	f7fb fd14 	bl	8000ad4 <__aeabi_dcmplt>
 80050ac:	b978      	cbnz	r0, 80050ce <_dtoa_r+0x67e>
 80050ae:	4642      	mov	r2, r8
 80050b0:	464b      	mov	r3, r9
 80050b2:	4630      	mov	r0, r6
 80050b4:	4639      	mov	r1, r7
 80050b6:	f7fb fd03 	bl	8000ac0 <__aeabi_dcmpeq>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	f000 8247 	beq.w	800554e <_dtoa_r+0xafe>
 80050c0:	07e9      	lsls	r1, r5, #31
 80050c2:	d404      	bmi.n	80050ce <_dtoa_r+0x67e>
 80050c4:	e243      	b.n	800554e <_dtoa_r+0xafe>
 80050c6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80050ca:	e000      	b.n	80050ce <_dtoa_r+0x67e>
 80050cc:	461c      	mov	r4, r3
 80050ce:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80050d2:	2a39      	cmp	r2, #57	; 0x39
 80050d4:	f104 33ff 	add.w	r3, r4, #4294967295
 80050d8:	d107      	bne.n	80050ea <_dtoa_r+0x69a>
 80050da:	9a04      	ldr	r2, [sp, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d1f5      	bne.n	80050cc <_dtoa_r+0x67c>
 80050e0:	9904      	ldr	r1, [sp, #16]
 80050e2:	2230      	movs	r2, #48	; 0x30
 80050e4:	f10b 0b01 	add.w	fp, fp, #1
 80050e8:	700a      	strb	r2, [r1, #0]
 80050ea:	781a      	ldrb	r2, [r3, #0]
 80050ec:	3201      	adds	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e22d      	b.n	800554e <_dtoa_r+0xafe>
 80050f2:	2200      	movs	r2, #0
 80050f4:	4b5a      	ldr	r3, [pc, #360]	; (8005260 <_dtoa_r+0x810>)
 80050f6:	f7fb fa7b 	bl	80005f0 <__aeabi_dmul>
 80050fa:	2200      	movs	r2, #0
 80050fc:	2300      	movs	r3, #0
 80050fe:	e9cd 0100 	strd	r0, r1, [sp]
 8005102:	f7fb fcdd 	bl	8000ac0 <__aeabi_dcmpeq>
 8005106:	2800      	cmp	r0, #0
 8005108:	d0a4      	beq.n	8005054 <_dtoa_r+0x604>
 800510a:	e220      	b.n	800554e <_dtoa_r+0xafe>
 800510c:	9a08      	ldr	r2, [sp, #32]
 800510e:	2a00      	cmp	r2, #0
 8005110:	d02d      	beq.n	800516e <_dtoa_r+0x71e>
 8005112:	9a06      	ldr	r2, [sp, #24]
 8005114:	2a01      	cmp	r2, #1
 8005116:	dc0a      	bgt.n	800512e <_dtoa_r+0x6de>
 8005118:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800511a:	b112      	cbz	r2, 8005122 <_dtoa_r+0x6d2>
 800511c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005120:	e002      	b.n	8005128 <_dtoa_r+0x6d8>
 8005122:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005124:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005128:	9d07      	ldr	r5, [sp, #28]
 800512a:	464c      	mov	r4, r9
 800512c:	e015      	b.n	800515a <_dtoa_r+0x70a>
 800512e:	9b07      	ldr	r3, [sp, #28]
 8005130:	f108 35ff 	add.w	r5, r8, #4294967295
 8005134:	42ab      	cmp	r3, r5
 8005136:	bfbf      	itttt	lt
 8005138:	9b07      	ldrlt	r3, [sp, #28]
 800513a:	9507      	strlt	r5, [sp, #28]
 800513c:	1aea      	sublt	r2, r5, r3
 800513e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005140:	bfb7      	itett	lt
 8005142:	189b      	addlt	r3, r3, r2
 8005144:	1b5d      	subge	r5, r3, r5
 8005146:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005148:	2500      	movlt	r5, #0
 800514a:	f1b8 0f00 	cmp.w	r8, #0
 800514e:	bfb9      	ittee	lt
 8005150:	ebc8 0409 	rsblt	r4, r8, r9
 8005154:	2300      	movlt	r3, #0
 8005156:	464c      	movge	r4, r9
 8005158:	4643      	movge	r3, r8
 800515a:	9a05      	ldr	r2, [sp, #20]
 800515c:	2101      	movs	r1, #1
 800515e:	441a      	add	r2, r3
 8005160:	4650      	mov	r0, sl
 8005162:	4499      	add	r9, r3
 8005164:	9205      	str	r2, [sp, #20]
 8005166:	f000 ffb0 	bl	80060ca <__i2b>
 800516a:	4606      	mov	r6, r0
 800516c:	e002      	b.n	8005174 <_dtoa_r+0x724>
 800516e:	9d07      	ldr	r5, [sp, #28]
 8005170:	9e08      	ldr	r6, [sp, #32]
 8005172:	464c      	mov	r4, r9
 8005174:	b15c      	cbz	r4, 800518e <_dtoa_r+0x73e>
 8005176:	9b05      	ldr	r3, [sp, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	dd08      	ble.n	800518e <_dtoa_r+0x73e>
 800517c:	42a3      	cmp	r3, r4
 800517e:	9a05      	ldr	r2, [sp, #20]
 8005180:	bfa8      	it	ge
 8005182:	4623      	movge	r3, r4
 8005184:	ebc3 0909 	rsb	r9, r3, r9
 8005188:	1ae4      	subs	r4, r4, r3
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	9305      	str	r3, [sp, #20]
 800518e:	9b07      	ldr	r3, [sp, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	dd1d      	ble.n	80051d0 <_dtoa_r+0x780>
 8005194:	9b08      	ldr	r3, [sp, #32]
 8005196:	b1ab      	cbz	r3, 80051c4 <_dtoa_r+0x774>
 8005198:	b185      	cbz	r5, 80051bc <_dtoa_r+0x76c>
 800519a:	4631      	mov	r1, r6
 800519c:	462a      	mov	r2, r5
 800519e:	4650      	mov	r0, sl
 80051a0:	f001 f82e 	bl	8006200 <__pow5mult>
 80051a4:	9a02      	ldr	r2, [sp, #8]
 80051a6:	4601      	mov	r1, r0
 80051a8:	4606      	mov	r6, r0
 80051aa:	4650      	mov	r0, sl
 80051ac:	f000 ff96 	bl	80060dc <__multiply>
 80051b0:	9902      	ldr	r1, [sp, #8]
 80051b2:	4607      	mov	r7, r0
 80051b4:	4650      	mov	r0, sl
 80051b6:	f000 fee9 	bl	8005f8c <_Bfree>
 80051ba:	9702      	str	r7, [sp, #8]
 80051bc:	9b07      	ldr	r3, [sp, #28]
 80051be:	1b5a      	subs	r2, r3, r5
 80051c0:	d006      	beq.n	80051d0 <_dtoa_r+0x780>
 80051c2:	e000      	b.n	80051c6 <_dtoa_r+0x776>
 80051c4:	9a07      	ldr	r2, [sp, #28]
 80051c6:	9902      	ldr	r1, [sp, #8]
 80051c8:	4650      	mov	r0, sl
 80051ca:	f001 f819 	bl	8006200 <__pow5mult>
 80051ce:	9002      	str	r0, [sp, #8]
 80051d0:	2101      	movs	r1, #1
 80051d2:	4650      	mov	r0, sl
 80051d4:	f000 ff79 	bl	80060ca <__i2b>
 80051d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051da:	4605      	mov	r5, r0
 80051dc:	b35b      	cbz	r3, 8005236 <_dtoa_r+0x7e6>
 80051de:	461a      	mov	r2, r3
 80051e0:	4601      	mov	r1, r0
 80051e2:	4650      	mov	r0, sl
 80051e4:	f001 f80c 	bl	8006200 <__pow5mult>
 80051e8:	9b06      	ldr	r3, [sp, #24]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	4605      	mov	r5, r0
 80051ee:	dc18      	bgt.n	8005222 <_dtoa_r+0x7d2>
 80051f0:	9b00      	ldr	r3, [sp, #0]
 80051f2:	b983      	cbnz	r3, 8005216 <_dtoa_r+0x7c6>
 80051f4:	9b01      	ldr	r3, [sp, #4]
 80051f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051fa:	b973      	cbnz	r3, 800521a <_dtoa_r+0x7ca>
 80051fc:	9b01      	ldr	r3, [sp, #4]
 80051fe:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8005202:	0d3f      	lsrs	r7, r7, #20
 8005204:	053f      	lsls	r7, r7, #20
 8005206:	b14f      	cbz	r7, 800521c <_dtoa_r+0x7cc>
 8005208:	9b05      	ldr	r3, [sp, #20]
 800520a:	3301      	adds	r3, #1
 800520c:	f109 0901 	add.w	r9, r9, #1
 8005210:	9305      	str	r3, [sp, #20]
 8005212:	2701      	movs	r7, #1
 8005214:	e002      	b.n	800521c <_dtoa_r+0x7cc>
 8005216:	2700      	movs	r7, #0
 8005218:	e000      	b.n	800521c <_dtoa_r+0x7cc>
 800521a:	9f00      	ldr	r7, [sp, #0]
 800521c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800521e:	b173      	cbz	r3, 800523e <_dtoa_r+0x7ee>
 8005220:	e000      	b.n	8005224 <_dtoa_r+0x7d4>
 8005222:	2700      	movs	r7, #0
 8005224:	692b      	ldr	r3, [r5, #16]
 8005226:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800522a:	6918      	ldr	r0, [r3, #16]
 800522c:	f000 ff00 	bl	8006030 <__hi0bits>
 8005230:	f1c0 0020 	rsb	r0, r0, #32
 8005234:	e004      	b.n	8005240 <_dtoa_r+0x7f0>
 8005236:	9b06      	ldr	r3, [sp, #24]
 8005238:	2b01      	cmp	r3, #1
 800523a:	ddd9      	ble.n	80051f0 <_dtoa_r+0x7a0>
 800523c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800523e:	2001      	movs	r0, #1
 8005240:	9b05      	ldr	r3, [sp, #20]
 8005242:	4418      	add	r0, r3
 8005244:	f010 001f 	ands.w	r0, r0, #31
 8005248:	d00e      	beq.n	8005268 <_dtoa_r+0x818>
 800524a:	f1c0 0320 	rsb	r3, r0, #32
 800524e:	2b04      	cmp	r3, #4
 8005250:	dd08      	ble.n	8005264 <_dtoa_r+0x814>
 8005252:	f1c0 001c 	rsb	r0, r0, #28
 8005256:	e008      	b.n	800526a <_dtoa_r+0x81a>
 8005258:	08007180 	.word	0x08007180
 800525c:	40140000 	.word	0x40140000
 8005260:	40240000 	.word	0x40240000
 8005264:	d006      	beq.n	8005274 <_dtoa_r+0x824>
 8005266:	4618      	mov	r0, r3
 8005268:	301c      	adds	r0, #28
 800526a:	9b05      	ldr	r3, [sp, #20]
 800526c:	4403      	add	r3, r0
 800526e:	4481      	add	r9, r0
 8005270:	4404      	add	r4, r0
 8005272:	9305      	str	r3, [sp, #20]
 8005274:	f1b9 0f00 	cmp.w	r9, #0
 8005278:	dd05      	ble.n	8005286 <_dtoa_r+0x836>
 800527a:	464a      	mov	r2, r9
 800527c:	9902      	ldr	r1, [sp, #8]
 800527e:	4650      	mov	r0, sl
 8005280:	f001 f80c 	bl	800629c <__lshift>
 8005284:	9002      	str	r0, [sp, #8]
 8005286:	9b05      	ldr	r3, [sp, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	dd05      	ble.n	8005298 <_dtoa_r+0x848>
 800528c:	4629      	mov	r1, r5
 800528e:	461a      	mov	r2, r3
 8005290:	4650      	mov	r0, sl
 8005292:	f001 f803 	bl	800629c <__lshift>
 8005296:	4605      	mov	r5, r0
 8005298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800529a:	b1eb      	cbz	r3, 80052d8 <_dtoa_r+0x888>
 800529c:	4629      	mov	r1, r5
 800529e:	9802      	ldr	r0, [sp, #8]
 80052a0:	f001 f84d 	bl	800633e <__mcmp>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	da17      	bge.n	80052d8 <_dtoa_r+0x888>
 80052a8:	2300      	movs	r3, #0
 80052aa:	220a      	movs	r2, #10
 80052ac:	9902      	ldr	r1, [sp, #8]
 80052ae:	4650      	mov	r0, sl
 80052b0:	f000 fe83 	bl	8005fba <__multadd>
 80052b4:	9b08      	ldr	r3, [sp, #32]
 80052b6:	9002      	str	r0, [sp, #8]
 80052b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8158 	beq.w	8005572 <_dtoa_r+0xb22>
 80052c2:	2300      	movs	r3, #0
 80052c4:	4631      	mov	r1, r6
 80052c6:	220a      	movs	r2, #10
 80052c8:	4650      	mov	r0, sl
 80052ca:	f000 fe76 	bl	8005fba <__multadd>
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	4606      	mov	r6, r0
 80052d4:	dc37      	bgt.n	8005346 <_dtoa_r+0x8f6>
 80052d6:	e033      	b.n	8005340 <_dtoa_r+0x8f0>
 80052d8:	f1b8 0f00 	cmp.w	r8, #0
 80052dc:	dc2a      	bgt.n	8005334 <_dtoa_r+0x8e4>
 80052de:	9b06      	ldr	r3, [sp, #24]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	dd27      	ble.n	8005334 <_dtoa_r+0x8e4>
 80052e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80052e8:	9b03      	ldr	r3, [sp, #12]
 80052ea:	b983      	cbnz	r3, 800530e <_dtoa_r+0x8be>
 80052ec:	4629      	mov	r1, r5
 80052ee:	2205      	movs	r2, #5
 80052f0:	4650      	mov	r0, sl
 80052f2:	f000 fe62 	bl	8005fba <__multadd>
 80052f6:	4601      	mov	r1, r0
 80052f8:	4605      	mov	r5, r0
 80052fa:	9802      	ldr	r0, [sp, #8]
 80052fc:	f001 f81f 	bl	800633e <__mcmp>
 8005300:	2800      	cmp	r0, #0
 8005302:	dc0d      	bgt.n	8005320 <_dtoa_r+0x8d0>
 8005304:	e003      	b.n	800530e <_dtoa_r+0x8be>
 8005306:	463d      	mov	r5, r7
 8005308:	e000      	b.n	800530c <_dtoa_r+0x8bc>
 800530a:	2500      	movs	r5, #0
 800530c:	462e      	mov	r6, r5
 800530e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005310:	9c04      	ldr	r4, [sp, #16]
 8005312:	ea6f 0b03 	mvn.w	fp, r3
 8005316:	e00a      	b.n	800532e <_dtoa_r+0x8de>
 8005318:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800531c:	463d      	mov	r5, r7
 800531e:	463e      	mov	r6, r7
 8005320:	9b04      	ldr	r3, [sp, #16]
 8005322:	9a04      	ldr	r2, [sp, #16]
 8005324:	1c5c      	adds	r4, r3, #1
 8005326:	2331      	movs	r3, #49	; 0x31
 8005328:	7013      	strb	r3, [r2, #0]
 800532a:	f10b 0b01 	add.w	fp, fp, #1
 800532e:	46b0      	mov	r8, r6
 8005330:	2600      	movs	r6, #0
 8005332:	e0f7      	b.n	8005524 <_dtoa_r+0xad4>
 8005334:	9b08      	ldr	r3, [sp, #32]
 8005336:	f8cd 800c 	str.w	r8, [sp, #12]
 800533a:	b923      	cbnz	r3, 8005346 <_dtoa_r+0x8f6>
 800533c:	9c04      	ldr	r4, [sp, #16]
 800533e:	e0b1      	b.n	80054a4 <_dtoa_r+0xa54>
 8005340:	9b06      	ldr	r3, [sp, #24]
 8005342:	2b02      	cmp	r3, #2
 8005344:	dcd0      	bgt.n	80052e8 <_dtoa_r+0x898>
 8005346:	2c00      	cmp	r4, #0
 8005348:	dd05      	ble.n	8005356 <_dtoa_r+0x906>
 800534a:	4631      	mov	r1, r6
 800534c:	4622      	mov	r2, r4
 800534e:	4650      	mov	r0, sl
 8005350:	f000 ffa4 	bl	800629c <__lshift>
 8005354:	4606      	mov	r6, r0
 8005356:	b19f      	cbz	r7, 8005380 <_dtoa_r+0x930>
 8005358:	6871      	ldr	r1, [r6, #4]
 800535a:	4650      	mov	r0, sl
 800535c:	f000 fde1 	bl	8005f22 <_Balloc>
 8005360:	6932      	ldr	r2, [r6, #16]
 8005362:	3202      	adds	r2, #2
 8005364:	4604      	mov	r4, r0
 8005366:	0092      	lsls	r2, r2, #2
 8005368:	f106 010c 	add.w	r1, r6, #12
 800536c:	300c      	adds	r0, #12
 800536e:	f7fe f9cd 	bl	800370c <memcpy>
 8005372:	2201      	movs	r2, #1
 8005374:	4621      	mov	r1, r4
 8005376:	4650      	mov	r0, sl
 8005378:	f000 ff90 	bl	800629c <__lshift>
 800537c:	4680      	mov	r8, r0
 800537e:	e000      	b.n	8005382 <_dtoa_r+0x932>
 8005380:	46b0      	mov	r8, r6
 8005382:	9b00      	ldr	r3, [sp, #0]
 8005384:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	9305      	str	r3, [sp, #20]
 800538e:	4629      	mov	r1, r5
 8005390:	9802      	ldr	r0, [sp, #8]
 8005392:	f7ff facb 	bl	800492c <quorem>
 8005396:	4631      	mov	r1, r6
 8005398:	4604      	mov	r4, r0
 800539a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800539e:	9802      	ldr	r0, [sp, #8]
 80053a0:	f000 ffcd 	bl	800633e <__mcmp>
 80053a4:	4642      	mov	r2, r8
 80053a6:	9000      	str	r0, [sp, #0]
 80053a8:	4629      	mov	r1, r5
 80053aa:	4650      	mov	r0, sl
 80053ac:	f000 ffe3 	bl	8006376 <__mdiff>
 80053b0:	68c3      	ldr	r3, [r0, #12]
 80053b2:	4602      	mov	r2, r0
 80053b4:	b93b      	cbnz	r3, 80053c6 <_dtoa_r+0x976>
 80053b6:	4601      	mov	r1, r0
 80053b8:	9007      	str	r0, [sp, #28]
 80053ba:	9802      	ldr	r0, [sp, #8]
 80053bc:	f000 ffbf 	bl	800633e <__mcmp>
 80053c0:	9a07      	ldr	r2, [sp, #28]
 80053c2:	4603      	mov	r3, r0
 80053c4:	e000      	b.n	80053c8 <_dtoa_r+0x978>
 80053c6:	2301      	movs	r3, #1
 80053c8:	4611      	mov	r1, r2
 80053ca:	4650      	mov	r0, sl
 80053cc:	9307      	str	r3, [sp, #28]
 80053ce:	f000 fddd 	bl	8005f8c <_Bfree>
 80053d2:	9b07      	ldr	r3, [sp, #28]
 80053d4:	b94b      	cbnz	r3, 80053ea <_dtoa_r+0x99a>
 80053d6:	9a06      	ldr	r2, [sp, #24]
 80053d8:	b93a      	cbnz	r2, 80053ea <_dtoa_r+0x99a>
 80053da:	9a05      	ldr	r2, [sp, #20]
 80053dc:	b92a      	cbnz	r2, 80053ea <_dtoa_r+0x99a>
 80053de:	2f39      	cmp	r7, #57	; 0x39
 80053e0:	d028      	beq.n	8005434 <_dtoa_r+0x9e4>
 80053e2:	9b00      	ldr	r3, [sp, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dc1a      	bgt.n	800541e <_dtoa_r+0x9ce>
 80053e8:	e01b      	b.n	8005422 <_dtoa_r+0x9d2>
 80053ea:	9a00      	ldr	r2, [sp, #0]
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	db04      	blt.n	80053fa <_dtoa_r+0x9aa>
 80053f0:	d11a      	bne.n	8005428 <_dtoa_r+0x9d8>
 80053f2:	9a06      	ldr	r2, [sp, #24]
 80053f4:	b9c2      	cbnz	r2, 8005428 <_dtoa_r+0x9d8>
 80053f6:	9a05      	ldr	r2, [sp, #20]
 80053f8:	b9b2      	cbnz	r2, 8005428 <_dtoa_r+0x9d8>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	dd11      	ble.n	8005422 <_dtoa_r+0x9d2>
 80053fe:	2201      	movs	r2, #1
 8005400:	9902      	ldr	r1, [sp, #8]
 8005402:	4650      	mov	r0, sl
 8005404:	f000 ff4a 	bl	800629c <__lshift>
 8005408:	4629      	mov	r1, r5
 800540a:	9002      	str	r0, [sp, #8]
 800540c:	f000 ff97 	bl	800633e <__mcmp>
 8005410:	2800      	cmp	r0, #0
 8005412:	dc02      	bgt.n	800541a <_dtoa_r+0x9ca>
 8005414:	d105      	bne.n	8005422 <_dtoa_r+0x9d2>
 8005416:	07fa      	lsls	r2, r7, #31
 8005418:	d503      	bpl.n	8005422 <_dtoa_r+0x9d2>
 800541a:	2f39      	cmp	r7, #57	; 0x39
 800541c:	d00a      	beq.n	8005434 <_dtoa_r+0x9e4>
 800541e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8005422:	f109 0401 	add.w	r4, r9, #1
 8005426:	e00c      	b.n	8005442 <_dtoa_r+0x9f2>
 8005428:	2b00      	cmp	r3, #0
 800542a:	f109 0401 	add.w	r4, r9, #1
 800542e:	dd0b      	ble.n	8005448 <_dtoa_r+0x9f8>
 8005430:	2f39      	cmp	r7, #57	; 0x39
 8005432:	d105      	bne.n	8005440 <_dtoa_r+0x9f0>
 8005434:	2339      	movs	r3, #57	; 0x39
 8005436:	f889 3000 	strb.w	r3, [r9]
 800543a:	f109 0901 	add.w	r9, r9, #1
 800543e:	e054      	b.n	80054ea <_dtoa_r+0xa9a>
 8005440:	3701      	adds	r7, #1
 8005442:	f889 7000 	strb.w	r7, [r9]
 8005446:	e06d      	b.n	8005524 <_dtoa_r+0xad4>
 8005448:	9b04      	ldr	r3, [sp, #16]
 800544a:	9a03      	ldr	r2, [sp, #12]
 800544c:	f804 7c01 	strb.w	r7, [r4, #-1]
 8005450:	1ae3      	subs	r3, r4, r3
 8005452:	4293      	cmp	r3, r2
 8005454:	46a1      	mov	r9, r4
 8005456:	d03a      	beq.n	80054ce <_dtoa_r+0xa7e>
 8005458:	2300      	movs	r3, #0
 800545a:	220a      	movs	r2, #10
 800545c:	9902      	ldr	r1, [sp, #8]
 800545e:	4650      	mov	r0, sl
 8005460:	f000 fdab 	bl	8005fba <__multadd>
 8005464:	4546      	cmp	r6, r8
 8005466:	9002      	str	r0, [sp, #8]
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	f04f 020a 	mov.w	r2, #10
 8005470:	4631      	mov	r1, r6
 8005472:	4650      	mov	r0, sl
 8005474:	d104      	bne.n	8005480 <_dtoa_r+0xa30>
 8005476:	f000 fda0 	bl	8005fba <__multadd>
 800547a:	4606      	mov	r6, r0
 800547c:	4680      	mov	r8, r0
 800547e:	e786      	b.n	800538e <_dtoa_r+0x93e>
 8005480:	f000 fd9b 	bl	8005fba <__multadd>
 8005484:	4641      	mov	r1, r8
 8005486:	4606      	mov	r6, r0
 8005488:	2300      	movs	r3, #0
 800548a:	220a      	movs	r2, #10
 800548c:	4650      	mov	r0, sl
 800548e:	f000 fd94 	bl	8005fba <__multadd>
 8005492:	4680      	mov	r8, r0
 8005494:	e77b      	b.n	800538e <_dtoa_r+0x93e>
 8005496:	2300      	movs	r3, #0
 8005498:	220a      	movs	r2, #10
 800549a:	9902      	ldr	r1, [sp, #8]
 800549c:	4650      	mov	r0, sl
 800549e:	f000 fd8c 	bl	8005fba <__multadd>
 80054a2:	9002      	str	r0, [sp, #8]
 80054a4:	4629      	mov	r1, r5
 80054a6:	9802      	ldr	r0, [sp, #8]
 80054a8:	f7ff fa40 	bl	800492c <quorem>
 80054ac:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80054b0:	f804 7b01 	strb.w	r7, [r4], #1
 80054b4:	9b04      	ldr	r3, [sp, #16]
 80054b6:	9a03      	ldr	r2, [sp, #12]
 80054b8:	1ae3      	subs	r3, r4, r3
 80054ba:	4293      	cmp	r3, r2
 80054bc:	dbeb      	blt.n	8005496 <_dtoa_r+0xa46>
 80054be:	9b04      	ldr	r3, [sp, #16]
 80054c0:	2a01      	cmp	r2, #1
 80054c2:	bfac      	ite	ge
 80054c4:	189b      	addge	r3, r3, r2
 80054c6:	3301      	addlt	r3, #1
 80054c8:	46b0      	mov	r8, r6
 80054ca:	4699      	mov	r9, r3
 80054cc:	2600      	movs	r6, #0
 80054ce:	2201      	movs	r2, #1
 80054d0:	9902      	ldr	r1, [sp, #8]
 80054d2:	4650      	mov	r0, sl
 80054d4:	f000 fee2 	bl	800629c <__lshift>
 80054d8:	4629      	mov	r1, r5
 80054da:	9002      	str	r0, [sp, #8]
 80054dc:	f000 ff2f 	bl	800633e <__mcmp>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	dc02      	bgt.n	80054ea <_dtoa_r+0xa9a>
 80054e4:	d115      	bne.n	8005512 <_dtoa_r+0xac2>
 80054e6:	07fb      	lsls	r3, r7, #31
 80054e8:	d513      	bpl.n	8005512 <_dtoa_r+0xac2>
 80054ea:	464c      	mov	r4, r9
 80054ec:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80054f0:	2b39      	cmp	r3, #57	; 0x39
 80054f2:	f104 32ff 	add.w	r2, r4, #4294967295
 80054f6:	d109      	bne.n	800550c <_dtoa_r+0xabc>
 80054f8:	9b04      	ldr	r3, [sp, #16]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d104      	bne.n	8005508 <_dtoa_r+0xab8>
 80054fe:	f10b 0b01 	add.w	fp, fp, #1
 8005502:	2331      	movs	r3, #49	; 0x31
 8005504:	9a04      	ldr	r2, [sp, #16]
 8005506:	e002      	b.n	800550e <_dtoa_r+0xabe>
 8005508:	4614      	mov	r4, r2
 800550a:	e7ef      	b.n	80054ec <_dtoa_r+0xa9c>
 800550c:	3301      	adds	r3, #1
 800550e:	7013      	strb	r3, [r2, #0]
 8005510:	e008      	b.n	8005524 <_dtoa_r+0xad4>
 8005512:	464c      	mov	r4, r9
 8005514:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005518:	2b30      	cmp	r3, #48	; 0x30
 800551a:	f104 32ff 	add.w	r2, r4, #4294967295
 800551e:	d101      	bne.n	8005524 <_dtoa_r+0xad4>
 8005520:	4614      	mov	r4, r2
 8005522:	e7f7      	b.n	8005514 <_dtoa_r+0xac4>
 8005524:	4629      	mov	r1, r5
 8005526:	4650      	mov	r0, sl
 8005528:	f000 fd30 	bl	8005f8c <_Bfree>
 800552c:	f1b8 0f00 	cmp.w	r8, #0
 8005530:	d00d      	beq.n	800554e <_dtoa_r+0xafe>
 8005532:	b12e      	cbz	r6, 8005540 <_dtoa_r+0xaf0>
 8005534:	4546      	cmp	r6, r8
 8005536:	d003      	beq.n	8005540 <_dtoa_r+0xaf0>
 8005538:	4631      	mov	r1, r6
 800553a:	4650      	mov	r0, sl
 800553c:	f000 fd26 	bl	8005f8c <_Bfree>
 8005540:	4641      	mov	r1, r8
 8005542:	4650      	mov	r0, sl
 8005544:	f000 fd22 	bl	8005f8c <_Bfree>
 8005548:	e001      	b.n	800554e <_dtoa_r+0xafe>
 800554a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800554e:	9902      	ldr	r1, [sp, #8]
 8005550:	4650      	mov	r0, sl
 8005552:	f000 fd1b 	bl	8005f8c <_Bfree>
 8005556:	2300      	movs	r3, #0
 8005558:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800555a:	7023      	strb	r3, [r4, #0]
 800555c:	f10b 0301 	add.w	r3, fp, #1
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005564:	b11b      	cbz	r3, 800556e <_dtoa_r+0xb1e>
 8005566:	601c      	str	r4, [r3, #0]
 8005568:	e001      	b.n	800556e <_dtoa_r+0xb1e>
 800556a:	4808      	ldr	r0, [pc, #32]	; (800558c <_dtoa_r+0xb3c>)
 800556c:	e00a      	b.n	8005584 <_dtoa_r+0xb34>
 800556e:	9804      	ldr	r0, [sp, #16]
 8005570:	e008      	b.n	8005584 <_dtoa_r+0xb34>
 8005572:	9b03      	ldr	r3, [sp, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f73f aee1 	bgt.w	800533c <_dtoa_r+0x8ec>
 800557a:	9b06      	ldr	r3, [sp, #24]
 800557c:	2b02      	cmp	r3, #2
 800557e:	f77f aedd 	ble.w	800533c <_dtoa_r+0x8ec>
 8005582:	e6b1      	b.n	80052e8 <_dtoa_r+0x898>
 8005584:	b017      	add	sp, #92	; 0x5c
 8005586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558a:	bf00      	nop
 800558c:	080070f2 	.word	0x080070f2

08005590 <__sflush_r>:
 8005590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005594:	b293      	uxth	r3, r2
 8005596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800559a:	4605      	mov	r5, r0
 800559c:	0718      	lsls	r0, r3, #28
 800559e:	460c      	mov	r4, r1
 80055a0:	d460      	bmi.n	8005664 <__sflush_r+0xd4>
 80055a2:	684b      	ldr	r3, [r1, #4]
 80055a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	818a      	strh	r2, [r1, #12]
 80055ac:	dc02      	bgt.n	80055b4 <__sflush_r+0x24>
 80055ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	dd17      	ble.n	80055e4 <__sflush_r+0x54>
 80055b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055b6:	b1ae      	cbz	r6, 80055e4 <__sflush_r+0x54>
 80055b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80055bc:	2300      	movs	r3, #0
 80055be:	b292      	uxth	r2, r2
 80055c0:	682f      	ldr	r7, [r5, #0]
 80055c2:	602b      	str	r3, [r5, #0]
 80055c4:	b10a      	cbz	r2, 80055ca <__sflush_r+0x3a>
 80055c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055c8:	e015      	b.n	80055f6 <__sflush_r+0x66>
 80055ca:	6a21      	ldr	r1, [r4, #32]
 80055cc:	2301      	movs	r3, #1
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b0      	blx	r6
 80055d2:	1c41      	adds	r1, r0, #1
 80055d4:	d10f      	bne.n	80055f6 <__sflush_r+0x66>
 80055d6:	682b      	ldr	r3, [r5, #0]
 80055d8:	b16b      	cbz	r3, 80055f6 <__sflush_r+0x66>
 80055da:	2b1d      	cmp	r3, #29
 80055dc:	d001      	beq.n	80055e2 <__sflush_r+0x52>
 80055de:	2b16      	cmp	r3, #22
 80055e0:	d103      	bne.n	80055ea <__sflush_r+0x5a>
 80055e2:	602f      	str	r7, [r5, #0]
 80055e4:	2000      	movs	r0, #0
 80055e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ea:	89a3      	ldrh	r3, [r4, #12]
 80055ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f0:	81a3      	strh	r3, [r4, #12]
 80055f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	075a      	lsls	r2, r3, #29
 80055fa:	d505      	bpl.n	8005608 <__sflush_r+0x78>
 80055fc:	6863      	ldr	r3, [r4, #4]
 80055fe:	1ac0      	subs	r0, r0, r3
 8005600:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005602:	b10b      	cbz	r3, 8005608 <__sflush_r+0x78>
 8005604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005606:	1ac0      	subs	r0, r0, r3
 8005608:	2300      	movs	r3, #0
 800560a:	4602      	mov	r2, r0
 800560c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800560e:	6a21      	ldr	r1, [r4, #32]
 8005610:	4628      	mov	r0, r5
 8005612:	47b0      	blx	r6
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	d106      	bne.n	8005628 <__sflush_r+0x98>
 800561a:	6829      	ldr	r1, [r5, #0]
 800561c:	291d      	cmp	r1, #29
 800561e:	d83e      	bhi.n	800569e <__sflush_r+0x10e>
 8005620:	4a22      	ldr	r2, [pc, #136]	; (80056ac <__sflush_r+0x11c>)
 8005622:	40ca      	lsrs	r2, r1
 8005624:	07d6      	lsls	r6, r2, #31
 8005626:	d53a      	bpl.n	800569e <__sflush_r+0x10e>
 8005628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800562c:	b21b      	sxth	r3, r3
 800562e:	2200      	movs	r2, #0
 8005630:	6062      	str	r2, [r4, #4]
 8005632:	04d9      	lsls	r1, r3, #19
 8005634:	6922      	ldr	r2, [r4, #16]
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	6022      	str	r2, [r4, #0]
 800563a:	d504      	bpl.n	8005646 <__sflush_r+0xb6>
 800563c:	1c42      	adds	r2, r0, #1
 800563e:	d101      	bne.n	8005644 <__sflush_r+0xb4>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	b903      	cbnz	r3, 8005646 <__sflush_r+0xb6>
 8005644:	6560      	str	r0, [r4, #84]	; 0x54
 8005646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005648:	602f      	str	r7, [r5, #0]
 800564a:	2900      	cmp	r1, #0
 800564c:	d0ca      	beq.n	80055e4 <__sflush_r+0x54>
 800564e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005652:	4299      	cmp	r1, r3
 8005654:	d002      	beq.n	800565c <__sflush_r+0xcc>
 8005656:	4628      	mov	r0, r5
 8005658:	f000 f9ac 	bl	80059b4 <_free_r>
 800565c:	2000      	movs	r0, #0
 800565e:	6360      	str	r0, [r4, #52]	; 0x34
 8005660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005664:	690f      	ldr	r7, [r1, #16]
 8005666:	2f00      	cmp	r7, #0
 8005668:	d0bc      	beq.n	80055e4 <__sflush_r+0x54>
 800566a:	079b      	lsls	r3, r3, #30
 800566c:	680e      	ldr	r6, [r1, #0]
 800566e:	bf08      	it	eq
 8005670:	694b      	ldreq	r3, [r1, #20]
 8005672:	600f      	str	r7, [r1, #0]
 8005674:	bf18      	it	ne
 8005676:	2300      	movne	r3, #0
 8005678:	ebc7 0806 	rsb	r8, r7, r6
 800567c:	608b      	str	r3, [r1, #8]
 800567e:	e002      	b.n	8005686 <__sflush_r+0xf6>
 8005680:	4407      	add	r7, r0
 8005682:	ebc0 0808 	rsb	r8, r0, r8
 8005686:	f1b8 0f00 	cmp.w	r8, #0
 800568a:	ddab      	ble.n	80055e4 <__sflush_r+0x54>
 800568c:	4643      	mov	r3, r8
 800568e:	463a      	mov	r2, r7
 8005690:	6a21      	ldr	r1, [r4, #32]
 8005692:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005694:	4628      	mov	r0, r5
 8005696:	47b0      	blx	r6
 8005698:	2800      	cmp	r0, #0
 800569a:	dcf1      	bgt.n	8005680 <__sflush_r+0xf0>
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a2:	81a3      	strh	r3, [r4, #12]
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ac:	20400001 	.word	0x20400001

080056b0 <_fflush_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	690b      	ldr	r3, [r1, #16]
 80056b4:	4605      	mov	r5, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	b1db      	cbz	r3, 80056f2 <_fflush_r+0x42>
 80056ba:	b118      	cbz	r0, 80056c4 <_fflush_r+0x14>
 80056bc:	6983      	ldr	r3, [r0, #24]
 80056be:	b90b      	cbnz	r3, 80056c4 <_fflush_r+0x14>
 80056c0:	f000 f860 	bl	8005784 <__sinit>
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <_fflush_r+0x48>)
 80056c6:	429c      	cmp	r4, r3
 80056c8:	d101      	bne.n	80056ce <_fflush_r+0x1e>
 80056ca:	686c      	ldr	r4, [r5, #4]
 80056cc:	e008      	b.n	80056e0 <_fflush_r+0x30>
 80056ce:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <_fflush_r+0x4c>)
 80056d0:	429c      	cmp	r4, r3
 80056d2:	d101      	bne.n	80056d8 <_fflush_r+0x28>
 80056d4:	68ac      	ldr	r4, [r5, #8]
 80056d6:	e003      	b.n	80056e0 <_fflush_r+0x30>
 80056d8:	4b09      	ldr	r3, [pc, #36]	; (8005700 <_fflush_r+0x50>)
 80056da:	429c      	cmp	r4, r3
 80056dc:	bf08      	it	eq
 80056de:	68ec      	ldreq	r4, [r5, #12]
 80056e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056e4:	b12b      	cbz	r3, 80056f2 <_fflush_r+0x42>
 80056e6:	4621      	mov	r1, r4
 80056e8:	4628      	mov	r0, r5
 80056ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056ee:	f7ff bf4f 	b.w	8005590 <__sflush_r>
 80056f2:	2000      	movs	r0, #0
 80056f4:	bd38      	pop	{r3, r4, r5, pc}
 80056f6:	bf00      	nop
 80056f8:	08007114 	.word	0x08007114
 80056fc:	08007134 	.word	0x08007134
 8005700:	08007154 	.word	0x08007154

08005704 <_cleanup_r>:
 8005704:	4901      	ldr	r1, [pc, #4]	; (800570c <_cleanup_r+0x8>)
 8005706:	f000 bb5d 	b.w	8005dc4 <_fwalk_reent>
 800570a:	bf00      	nop
 800570c:	08006a69 	.word	0x08006a69

08005710 <std.isra.0>:
 8005710:	2300      	movs	r3, #0
 8005712:	b510      	push	{r4, lr}
 8005714:	4604      	mov	r4, r0
 8005716:	6003      	str	r3, [r0, #0]
 8005718:	6043      	str	r3, [r0, #4]
 800571a:	6083      	str	r3, [r0, #8]
 800571c:	8181      	strh	r1, [r0, #12]
 800571e:	6643      	str	r3, [r0, #100]	; 0x64
 8005720:	81c2      	strh	r2, [r0, #14]
 8005722:	6103      	str	r3, [r0, #16]
 8005724:	6143      	str	r3, [r0, #20]
 8005726:	6183      	str	r3, [r0, #24]
 8005728:	4619      	mov	r1, r3
 800572a:	2208      	movs	r2, #8
 800572c:	305c      	adds	r0, #92	; 0x5c
 800572e:	f7fd fff8 	bl	8003722 <memset>
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <std.isra.0+0x38>)
 8005734:	6263      	str	r3, [r4, #36]	; 0x24
 8005736:	4b05      	ldr	r3, [pc, #20]	; (800574c <std.isra.0+0x3c>)
 8005738:	62a3      	str	r3, [r4, #40]	; 0x28
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <std.isra.0+0x40>)
 800573c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <std.isra.0+0x44>)
 8005740:	6224      	str	r4, [r4, #32]
 8005742:	6323      	str	r3, [r4, #48]	; 0x30
 8005744:	bd10      	pop	{r4, pc}
 8005746:	bf00      	nop
 8005748:	08006821 	.word	0x08006821
 800574c:	08006843 	.word	0x08006843
 8005750:	0800687b 	.word	0x0800687b
 8005754:	0800689f 	.word	0x0800689f

08005758 <__sfmoreglue>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	2368      	movs	r3, #104	; 0x68
 800575c:	1e4d      	subs	r5, r1, #1
 800575e:	435d      	muls	r5, r3
 8005760:	460e      	mov	r6, r1
 8005762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005766:	f7fd fdb1 	bl	80032cc <_malloc_r>
 800576a:	4604      	mov	r4, r0
 800576c:	b140      	cbz	r0, 8005780 <__sfmoreglue+0x28>
 800576e:	2100      	movs	r1, #0
 8005770:	e880 0042 	stmia.w	r0, {r1, r6}
 8005774:	300c      	adds	r0, #12
 8005776:	60a0      	str	r0, [r4, #8]
 8005778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800577c:	f7fd ffd1 	bl	8003722 <memset>
 8005780:	4620      	mov	r0, r4
 8005782:	bd70      	pop	{r4, r5, r6, pc}

08005784 <__sinit>:
 8005784:	6983      	ldr	r3, [r0, #24]
 8005786:	b510      	push	{r4, lr}
 8005788:	4604      	mov	r4, r0
 800578a:	bb4b      	cbnz	r3, 80057e0 <__sinit+0x5c>
 800578c:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8005790:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 8005794:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <__sinit+0x60>)
 800579a:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <__sinit+0x64>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6282      	str	r2, [r0, #40]	; 0x28
 80057a0:	4298      	cmp	r0, r3
 80057a2:	bf04      	itt	eq
 80057a4:	2301      	moveq	r3, #1
 80057a6:	6183      	streq	r3, [r0, #24]
 80057a8:	f000 f820 	bl	80057ec <__sfp>
 80057ac:	6060      	str	r0, [r4, #4]
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 f81c 	bl	80057ec <__sfp>
 80057b4:	60a0      	str	r0, [r4, #8]
 80057b6:	4620      	mov	r0, r4
 80057b8:	f000 f818 	bl	80057ec <__sfp>
 80057bc:	2200      	movs	r2, #0
 80057be:	60e0      	str	r0, [r4, #12]
 80057c0:	2104      	movs	r1, #4
 80057c2:	6860      	ldr	r0, [r4, #4]
 80057c4:	f7ff ffa4 	bl	8005710 <std.isra.0>
 80057c8:	2201      	movs	r2, #1
 80057ca:	2109      	movs	r1, #9
 80057cc:	68a0      	ldr	r0, [r4, #8]
 80057ce:	f7ff ff9f 	bl	8005710 <std.isra.0>
 80057d2:	2202      	movs	r2, #2
 80057d4:	2112      	movs	r1, #18
 80057d6:	68e0      	ldr	r0, [r4, #12]
 80057d8:	f7ff ff9a 	bl	8005710 <std.isra.0>
 80057dc:	2301      	movs	r3, #1
 80057de:	61a3      	str	r3, [r4, #24]
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	bf00      	nop
 80057e4:	080070ac 	.word	0x080070ac
 80057e8:	08005705 	.word	0x08005705

080057ec <__sfp>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	4b1c      	ldr	r3, [pc, #112]	; (8005860 <__sfp+0x74>)
 80057f0:	681e      	ldr	r6, [r3, #0]
 80057f2:	69b3      	ldr	r3, [r6, #24]
 80057f4:	4607      	mov	r7, r0
 80057f6:	b913      	cbnz	r3, 80057fe <__sfp+0x12>
 80057f8:	4630      	mov	r0, r6
 80057fa:	f7ff ffc3 	bl	8005784 <__sinit>
 80057fe:	36d8      	adds	r6, #216	; 0xd8
 8005800:	68b4      	ldr	r4, [r6, #8]
 8005802:	6873      	ldr	r3, [r6, #4]
 8005804:	3b01      	subs	r3, #1
 8005806:	d404      	bmi.n	8005812 <__sfp+0x26>
 8005808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800580c:	b17d      	cbz	r5, 800582e <__sfp+0x42>
 800580e:	3468      	adds	r4, #104	; 0x68
 8005810:	e7f8      	b.n	8005804 <__sfp+0x18>
 8005812:	6833      	ldr	r3, [r6, #0]
 8005814:	b10b      	cbz	r3, 800581a <__sfp+0x2e>
 8005816:	6836      	ldr	r6, [r6, #0]
 8005818:	e7f2      	b.n	8005800 <__sfp+0x14>
 800581a:	2104      	movs	r1, #4
 800581c:	4638      	mov	r0, r7
 800581e:	f7ff ff9b 	bl	8005758 <__sfmoreglue>
 8005822:	6030      	str	r0, [r6, #0]
 8005824:	2800      	cmp	r0, #0
 8005826:	d1f6      	bne.n	8005816 <__sfp+0x2a>
 8005828:	230c      	movs	r3, #12
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800582e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005832:	81e3      	strh	r3, [r4, #14]
 8005834:	2301      	movs	r3, #1
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	6665      	str	r5, [r4, #100]	; 0x64
 800583a:	6025      	str	r5, [r4, #0]
 800583c:	60a5      	str	r5, [r4, #8]
 800583e:	6065      	str	r5, [r4, #4]
 8005840:	6125      	str	r5, [r4, #16]
 8005842:	6165      	str	r5, [r4, #20]
 8005844:	61a5      	str	r5, [r4, #24]
 8005846:	2208      	movs	r2, #8
 8005848:	4629      	mov	r1, r5
 800584a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800584e:	f7fd ff68 	bl	8003722 <memset>
 8005852:	6365      	str	r5, [r4, #52]	; 0x34
 8005854:	63a5      	str	r5, [r4, #56]	; 0x38
 8005856:	64a5      	str	r5, [r4, #72]	; 0x48
 8005858:	64e5      	str	r5, [r4, #76]	; 0x4c
 800585a:	4620      	mov	r0, r4
 800585c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585e:	bf00      	nop
 8005860:	080070ac 	.word	0x080070ac

08005864 <__sfp_lock_acquire>:
 8005864:	4770      	bx	lr

08005866 <__sfp_lock_release>:
 8005866:	4770      	bx	lr

08005868 <__fputwc>:
 8005868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800586c:	4680      	mov	r8, r0
 800586e:	460e      	mov	r6, r1
 8005870:	4614      	mov	r4, r2
 8005872:	f000 fac9 	bl	8005e08 <__locale_mb_cur_max>
 8005876:	2801      	cmp	r0, #1
 8005878:	d106      	bne.n	8005888 <__fputwc+0x20>
 800587a:	1e73      	subs	r3, r6, #1
 800587c:	2bfe      	cmp	r3, #254	; 0xfe
 800587e:	d803      	bhi.n	8005888 <__fputwc+0x20>
 8005880:	f88d 6004 	strb.w	r6, [sp, #4]
 8005884:	4605      	mov	r5, r0
 8005886:	e00e      	b.n	80058a6 <__fputwc+0x3e>
 8005888:	4632      	mov	r2, r6
 800588a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800588e:	a901      	add	r1, sp, #4
 8005890:	4640      	mov	r0, r8
 8005892:	f001 f867 	bl	8006964 <_wcrtomb_r>
 8005896:	1c42      	adds	r2, r0, #1
 8005898:	4605      	mov	r5, r0
 800589a:	d104      	bne.n	80058a6 <__fputwc+0x3e>
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a2:	81a3      	strh	r3, [r4, #12]
 80058a4:	e01c      	b.n	80058e0 <__fputwc+0x78>
 80058a6:	2700      	movs	r7, #0
 80058a8:	42af      	cmp	r7, r5
 80058aa:	d018      	beq.n	80058de <__fputwc+0x76>
 80058ac:	ab01      	add	r3, sp, #4
 80058ae:	5cf9      	ldrb	r1, [r7, r3]
 80058b0:	68a3      	ldr	r3, [r4, #8]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	60a3      	str	r3, [r4, #8]
 80058b8:	da04      	bge.n	80058c4 <__fputwc+0x5c>
 80058ba:	69a2      	ldr	r2, [r4, #24]
 80058bc:	4293      	cmp	r3, r2
 80058be:	db06      	blt.n	80058ce <__fputwc+0x66>
 80058c0:	290a      	cmp	r1, #10
 80058c2:	d004      	beq.n	80058ce <__fputwc+0x66>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	6022      	str	r2, [r4, #0]
 80058ca:	7019      	strb	r1, [r3, #0]
 80058cc:	e005      	b.n	80058da <__fputwc+0x72>
 80058ce:	4622      	mov	r2, r4
 80058d0:	4640      	mov	r0, r8
 80058d2:	f000 ffe9 	bl	80068a8 <__swbuf_r>
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	d002      	beq.n	80058e0 <__fputwc+0x78>
 80058da:	3701      	adds	r7, #1
 80058dc:	e7e4      	b.n	80058a8 <__fputwc+0x40>
 80058de:	4630      	mov	r0, r6
 80058e0:	b002      	add	sp, #8
 80058e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080058e6 <_fputwc_r>:
 80058e6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80058ea:	b410      	push	{r4}
 80058ec:	049c      	lsls	r4, r3, #18
 80058ee:	d406      	bmi.n	80058fe <_fputwc_r+0x18>
 80058f0:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80058f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058f6:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80058fa:	8193      	strh	r3, [r2, #12]
 80058fc:	6654      	str	r4, [r2, #100]	; 0x64
 80058fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005902:	f7ff bfb1 	b.w	8005868 <__fputwc>
	...

08005908 <_malloc_trim_r>:
 8005908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800590c:	4f25      	ldr	r7, [pc, #148]	; (80059a4 <_malloc_trim_r+0x9c>)
 800590e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80059b0 <_malloc_trim_r+0xa8>
 8005912:	4689      	mov	r9, r1
 8005914:	4606      	mov	r6, r0
 8005916:	f7fd ff0c 	bl	8003732 <__malloc_lock>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	685d      	ldr	r5, [r3, #4]
 800591e:	f1a8 0411 	sub.w	r4, r8, #17
 8005922:	f025 0503 	bic.w	r5, r5, #3
 8005926:	442c      	add	r4, r5
 8005928:	ebc9 0404 	rsb	r4, r9, r4
 800592c:	fbb4 f4f8 	udiv	r4, r4, r8
 8005930:	3c01      	subs	r4, #1
 8005932:	fb08 f404 	mul.w	r4, r8, r4
 8005936:	4544      	cmp	r4, r8
 8005938:	da05      	bge.n	8005946 <_malloc_trim_r+0x3e>
 800593a:	4630      	mov	r0, r6
 800593c:	f7fd fefa 	bl	8003734 <__malloc_unlock>
 8005940:	2000      	movs	r0, #0
 8005942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005946:	2100      	movs	r1, #0
 8005948:	4630      	mov	r0, r6
 800594a:	f7fd ff0d 	bl	8003768 <_sbrk_r>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	442b      	add	r3, r5
 8005952:	4298      	cmp	r0, r3
 8005954:	d1f1      	bne.n	800593a <_malloc_trim_r+0x32>
 8005956:	4261      	negs	r1, r4
 8005958:	4630      	mov	r0, r6
 800595a:	f7fd ff05 	bl	8003768 <_sbrk_r>
 800595e:	3001      	adds	r0, #1
 8005960:	d110      	bne.n	8005984 <_malloc_trim_r+0x7c>
 8005962:	2100      	movs	r1, #0
 8005964:	4630      	mov	r0, r6
 8005966:	f7fd feff 	bl	8003768 <_sbrk_r>
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	1a83      	subs	r3, r0, r2
 800596e:	2b0f      	cmp	r3, #15
 8005970:	dde3      	ble.n	800593a <_malloc_trim_r+0x32>
 8005972:	490d      	ldr	r1, [pc, #52]	; (80059a8 <_malloc_trim_r+0xa0>)
 8005974:	6809      	ldr	r1, [r1, #0]
 8005976:	1a40      	subs	r0, r0, r1
 8005978:	490c      	ldr	r1, [pc, #48]	; (80059ac <_malloc_trim_r+0xa4>)
 800597a:	f043 0301 	orr.w	r3, r3, #1
 800597e:	6008      	str	r0, [r1, #0]
 8005980:	6053      	str	r3, [r2, #4]
 8005982:	e7da      	b.n	800593a <_malloc_trim_r+0x32>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4a09      	ldr	r2, [pc, #36]	; (80059ac <_malloc_trim_r+0xa4>)
 8005988:	1b2d      	subs	r5, r5, r4
 800598a:	f045 0501 	orr.w	r5, r5, #1
 800598e:	605d      	str	r5, [r3, #4]
 8005990:	6813      	ldr	r3, [r2, #0]
 8005992:	4630      	mov	r0, r6
 8005994:	1b1c      	subs	r4, r3, r4
 8005996:	6014      	str	r4, [r2, #0]
 8005998:	f7fd fecc 	bl	8003734 <__malloc_unlock>
 800599c:	2001      	movs	r0, #1
 800599e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a2:	bf00      	nop
 80059a4:	20000100 	.word	0x20000100
 80059a8:	2000050c 	.word	0x2000050c
 80059ac:	200005ac 	.word	0x200005ac
 80059b0:	00000080 	.word	0x00000080

080059b4 <_free_r>:
 80059b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b8:	4604      	mov	r4, r0
 80059ba:	4688      	mov	r8, r1
 80059bc:	2900      	cmp	r1, #0
 80059be:	f000 80ad 	beq.w	8005b1c <_free_r+0x168>
 80059c2:	f7fd feb6 	bl	8003732 <__malloc_lock>
 80059c6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80059ca:	4d55      	ldr	r5, [pc, #340]	; (8005b20 <_free_r+0x16c>)
 80059cc:	f022 0001 	bic.w	r0, r2, #1
 80059d0:	f1a8 0308 	sub.w	r3, r8, #8
 80059d4:	181f      	adds	r7, r3, r0
 80059d6:	68a9      	ldr	r1, [r5, #8]
 80059d8:	687e      	ldr	r6, [r7, #4]
 80059da:	428f      	cmp	r7, r1
 80059dc:	f026 0603 	bic.w	r6, r6, #3
 80059e0:	f002 0201 	and.w	r2, r2, #1
 80059e4:	d11b      	bne.n	8005a1e <_free_r+0x6a>
 80059e6:	4430      	add	r0, r6
 80059e8:	b93a      	cbnz	r2, 80059fa <_free_r+0x46>
 80059ea:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	4410      	add	r0, r2
 80059f2:	6899      	ldr	r1, [r3, #8]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	60ca      	str	r2, [r1, #12]
 80059f8:	6091      	str	r1, [r2, #8]
 80059fa:	f040 0201 	orr.w	r2, r0, #1
 80059fe:	605a      	str	r2, [r3, #4]
 8005a00:	60ab      	str	r3, [r5, #8]
 8005a02:	4b48      	ldr	r3, [pc, #288]	; (8005b24 <_free_r+0x170>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4298      	cmp	r0, r3
 8005a08:	d304      	bcc.n	8005a14 <_free_r+0x60>
 8005a0a:	4b47      	ldr	r3, [pc, #284]	; (8005b28 <_free_r+0x174>)
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	f7ff ff7a 	bl	8005908 <_malloc_trim_r>
 8005a14:	4620      	mov	r0, r4
 8005a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1a:	f7fd be8b 	b.w	8003734 <__malloc_unlock>
 8005a1e:	607e      	str	r6, [r7, #4]
 8005a20:	b97a      	cbnz	r2, 8005a42 <_free_r+0x8e>
 8005a22:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005a26:	1a5b      	subs	r3, r3, r1
 8005a28:	4408      	add	r0, r1
 8005a2a:	6899      	ldr	r1, [r3, #8]
 8005a2c:	f105 0e08 	add.w	lr, r5, #8
 8005a30:	4571      	cmp	r1, lr
 8005a32:	d008      	beq.n	8005a46 <_free_r+0x92>
 8005a34:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005a38:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005a3c:	f8ce 1008 	str.w	r1, [lr, #8]
 8005a40:	e002      	b.n	8005a48 <_free_r+0x94>
 8005a42:	2200      	movs	r2, #0
 8005a44:	e000      	b.n	8005a48 <_free_r+0x94>
 8005a46:	2201      	movs	r2, #1
 8005a48:	19b9      	adds	r1, r7, r6
 8005a4a:	6849      	ldr	r1, [r1, #4]
 8005a4c:	07c9      	lsls	r1, r1, #31
 8005a4e:	d40e      	bmi.n	8005a6e <_free_r+0xba>
 8005a50:	4430      	add	r0, r6
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	b942      	cbnz	r2, 8005a68 <_free_r+0xb4>
 8005a56:	4e35      	ldr	r6, [pc, #212]	; (8005b2c <_free_r+0x178>)
 8005a58:	42b1      	cmp	r1, r6
 8005a5a:	d105      	bne.n	8005a68 <_free_r+0xb4>
 8005a5c:	616b      	str	r3, [r5, #20]
 8005a5e:	612b      	str	r3, [r5, #16]
 8005a60:	2201      	movs	r2, #1
 8005a62:	60d9      	str	r1, [r3, #12]
 8005a64:	6099      	str	r1, [r3, #8]
 8005a66:	e002      	b.n	8005a6e <_free_r+0xba>
 8005a68:	68fe      	ldr	r6, [r7, #12]
 8005a6a:	60ce      	str	r6, [r1, #12]
 8005a6c:	60b1      	str	r1, [r6, #8]
 8005a6e:	f040 0101 	orr.w	r1, r0, #1
 8005a72:	6059      	str	r1, [r3, #4]
 8005a74:	5018      	str	r0, [r3, r0]
 8005a76:	2a00      	cmp	r2, #0
 8005a78:	d1cc      	bne.n	8005a14 <_free_r+0x60>
 8005a7a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005a7e:	d212      	bcs.n	8005aa6 <_free_r+0xf2>
 8005a80:	08c0      	lsrs	r0, r0, #3
 8005a82:	1081      	asrs	r1, r0, #2
 8005a84:	2201      	movs	r2, #1
 8005a86:	fa02 f101 	lsl.w	r1, r2, r1
 8005a8a:	686a      	ldr	r2, [r5, #4]
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	606a      	str	r2, [r5, #4]
 8005a92:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005a96:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005a9a:	6099      	str	r1, [r3, #8]
 8005a9c:	3a08      	subs	r2, #8
 8005a9e:	60da      	str	r2, [r3, #12]
 8005aa0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005aa4:	e038      	b.n	8005b18 <_free_r+0x164>
 8005aa6:	0a42      	lsrs	r2, r0, #9
 8005aa8:	2a04      	cmp	r2, #4
 8005aaa:	d802      	bhi.n	8005ab2 <_free_r+0xfe>
 8005aac:	0982      	lsrs	r2, r0, #6
 8005aae:	3238      	adds	r2, #56	; 0x38
 8005ab0:	e015      	b.n	8005ade <_free_r+0x12a>
 8005ab2:	2a14      	cmp	r2, #20
 8005ab4:	d801      	bhi.n	8005aba <_free_r+0x106>
 8005ab6:	325b      	adds	r2, #91	; 0x5b
 8005ab8:	e011      	b.n	8005ade <_free_r+0x12a>
 8005aba:	2a54      	cmp	r2, #84	; 0x54
 8005abc:	d802      	bhi.n	8005ac4 <_free_r+0x110>
 8005abe:	0b02      	lsrs	r2, r0, #12
 8005ac0:	326e      	adds	r2, #110	; 0x6e
 8005ac2:	e00c      	b.n	8005ade <_free_r+0x12a>
 8005ac4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005ac8:	d802      	bhi.n	8005ad0 <_free_r+0x11c>
 8005aca:	0bc2      	lsrs	r2, r0, #15
 8005acc:	3277      	adds	r2, #119	; 0x77
 8005ace:	e006      	b.n	8005ade <_free_r+0x12a>
 8005ad0:	f240 5154 	movw	r1, #1364	; 0x554
 8005ad4:	428a      	cmp	r2, r1
 8005ad6:	bf9a      	itte	ls
 8005ad8:	0c82      	lsrls	r2, r0, #18
 8005ada:	327c      	addls	r2, #124	; 0x7c
 8005adc:	227e      	movhi	r2, #126	; 0x7e
 8005ade:	1c51      	adds	r1, r2, #1
 8005ae0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005ae4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005ae8:	4f0d      	ldr	r7, [pc, #52]	; (8005b20 <_free_r+0x16c>)
 8005aea:	428e      	cmp	r6, r1
 8005aec:	d10b      	bne.n	8005b06 <_free_r+0x152>
 8005aee:	2101      	movs	r1, #1
 8005af0:	1092      	asrs	r2, r2, #2
 8005af2:	fa01 f202 	lsl.w	r2, r1, r2
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	4311      	orrs	r1, r2
 8005afa:	6079      	str	r1, [r7, #4]
 8005afc:	4631      	mov	r1, r6
 8005afe:	e008      	b.n	8005b12 <_free_r+0x15e>
 8005b00:	6889      	ldr	r1, [r1, #8]
 8005b02:	428e      	cmp	r6, r1
 8005b04:	d004      	beq.n	8005b10 <_free_r+0x15c>
 8005b06:	684a      	ldr	r2, [r1, #4]
 8005b08:	f022 0203 	bic.w	r2, r2, #3
 8005b0c:	4290      	cmp	r0, r2
 8005b0e:	d3f7      	bcc.n	8005b00 <_free_r+0x14c>
 8005b10:	68ce      	ldr	r6, [r1, #12]
 8005b12:	60de      	str	r6, [r3, #12]
 8005b14:	6099      	str	r1, [r3, #8]
 8005b16:	60b3      	str	r3, [r6, #8]
 8005b18:	60cb      	str	r3, [r1, #12]
 8005b1a:	e77b      	b.n	8005a14 <_free_r+0x60>
 8005b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b20:	20000100 	.word	0x20000100
 8005b24:	20000508 	.word	0x20000508
 8005b28:	200005a8 	.word	0x200005a8
 8005b2c:	20000108 	.word	0x20000108

08005b30 <__sfvwrite_r>:
 8005b30:	6893      	ldr	r3, [r2, #8]
 8005b32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b36:	4606      	mov	r6, r0
 8005b38:	460c      	mov	r4, r1
 8005b3a:	4690      	mov	r8, r2
 8005b3c:	b90b      	cbnz	r3, 8005b42 <__sfvwrite_r+0x12>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e13b      	b.n	8005dba <__sfvwrite_r+0x28a>
 8005b42:	898b      	ldrh	r3, [r1, #12]
 8005b44:	0718      	lsls	r0, r3, #28
 8005b46:	d50f      	bpl.n	8005b68 <__sfvwrite_r+0x38>
 8005b48:	690b      	ldr	r3, [r1, #16]
 8005b4a:	b16b      	cbz	r3, 8005b68 <__sfvwrite_r+0x38>
 8005b4c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 8005b50:	f8d8 b000 	ldr.w	fp, [r8]
 8005b54:	f009 0502 	and.w	r5, r9, #2
 8005b58:	b2ad      	uxth	r5, r5
 8005b5a:	b355      	cbz	r5, 8005bb2 <__sfvwrite_r+0x82>
 8005b5c:	f04f 0900 	mov.w	r9, #0
 8005b60:	464f      	mov	r7, r9
 8005b62:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8005dc0 <__sfvwrite_r+0x290>
 8005b66:	e01b      	b.n	8005ba0 <__sfvwrite_r+0x70>
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7fe fe70 	bl	8004850 <__swsetup_r>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d0eb      	beq.n	8005b4c <__sfvwrite_r+0x1c>
 8005b74:	e11f      	b.n	8005db6 <__sfvwrite_r+0x286>
 8005b76:	4557      	cmp	r7, sl
 8005b78:	463b      	mov	r3, r7
 8005b7a:	464a      	mov	r2, r9
 8005b7c:	bf28      	it	cs
 8005b7e:	4653      	movcs	r3, sl
 8005b80:	6a21      	ldr	r1, [r4, #32]
 8005b82:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005b84:	4630      	mov	r0, r6
 8005b86:	47a8      	blx	r5
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	f340 8110 	ble.w	8005dae <__sfvwrite_r+0x27e>
 8005b8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b92:	4481      	add	r9, r0
 8005b94:	1a3f      	subs	r7, r7, r0
 8005b96:	1a18      	subs	r0, r3, r0
 8005b98:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d0ce      	beq.n	8005b3e <__sfvwrite_r+0xe>
 8005ba0:	2f00      	cmp	r7, #0
 8005ba2:	d1e8      	bne.n	8005b76 <__sfvwrite_r+0x46>
 8005ba4:	f8db 9000 	ldr.w	r9, [fp]
 8005ba8:	f8db 7004 	ldr.w	r7, [fp, #4]
 8005bac:	f10b 0b08 	add.w	fp, fp, #8
 8005bb0:	e7f6      	b.n	8005ba0 <__sfvwrite_r+0x70>
 8005bb2:	f019 0901 	ands.w	r9, r9, #1
 8005bb6:	d003      	beq.n	8005bc0 <__sfvwrite_r+0x90>
 8005bb8:	9500      	str	r5, [sp, #0]
 8005bba:	46a9      	mov	r9, r5
 8005bbc:	46aa      	mov	sl, r5
 8005bbe:	e0bd      	b.n	8005d3c <__sfvwrite_r+0x20c>
 8005bc0:	464f      	mov	r7, r9
 8005bc2:	b937      	cbnz	r7, 8005bd2 <__sfvwrite_r+0xa2>
 8005bc4:	f8db 9000 	ldr.w	r9, [fp]
 8005bc8:	f8db 7004 	ldr.w	r7, [fp, #4]
 8005bcc:	f10b 0b08 	add.w	fp, fp, #8
 8005bd0:	e7f7      	b.n	8005bc2 <__sfvwrite_r+0x92>
 8005bd2:	89a2      	ldrh	r2, [r4, #12]
 8005bd4:	68a5      	ldr	r5, [r4, #8]
 8005bd6:	0591      	lsls	r1, r2, #22
 8005bd8:	d552      	bpl.n	8005c80 <__sfvwrite_r+0x150>
 8005bda:	42af      	cmp	r7, r5
 8005bdc:	d342      	bcc.n	8005c64 <__sfvwrite_r+0x134>
 8005bde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005be2:	d03d      	beq.n	8005c60 <__sfvwrite_r+0x130>
 8005be4:	6921      	ldr	r1, [r4, #16]
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	1a5b      	subs	r3, r3, r1
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	6963      	ldr	r3, [r4, #20]
 8005bee:	2002      	movs	r0, #2
 8005bf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005bf4:	fb93 faf0 	sdiv	sl, r3, r0
 8005bf8:	9b00      	ldr	r3, [sp, #0]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	443b      	add	r3, r7
 8005bfe:	459a      	cmp	sl, r3
 8005c00:	bf38      	it	cc
 8005c02:	469a      	movcc	sl, r3
 8005c04:	0553      	lsls	r3, r2, #21
 8005c06:	d510      	bpl.n	8005c2a <__sfvwrite_r+0xfa>
 8005c08:	4651      	mov	r1, sl
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f7fd fb5e 	bl	80032cc <_malloc_r>
 8005c10:	4605      	mov	r5, r0
 8005c12:	b1c0      	cbz	r0, 8005c46 <__sfvwrite_r+0x116>
 8005c14:	9a00      	ldr	r2, [sp, #0]
 8005c16:	6921      	ldr	r1, [r4, #16]
 8005c18:	f7fd fd78 	bl	800370c <memcpy>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	e010      	b.n	8005c4c <__sfvwrite_r+0x11c>
 8005c2a:	4652      	mov	r2, sl
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f000 fc4f 	bl	80064d0 <_realloc_r>
 8005c32:	4605      	mov	r5, r0
 8005c34:	b950      	cbnz	r0, 8005c4c <__sfvwrite_r+0x11c>
 8005c36:	6921      	ldr	r1, [r4, #16]
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f7ff febb 	bl	80059b4 <_free_r>
 8005c3e:	89a3      	ldrh	r3, [r4, #12]
 8005c40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c44:	81a3      	strh	r3, [r4, #12]
 8005c46:	230c      	movs	r3, #12
 8005c48:	6033      	str	r3, [r6, #0]
 8005c4a:	e0b0      	b.n	8005dae <__sfvwrite_r+0x27e>
 8005c4c:	9b00      	ldr	r3, [sp, #0]
 8005c4e:	6125      	str	r5, [r4, #16]
 8005c50:	441d      	add	r5, r3
 8005c52:	ebc3 030a 	rsb	r3, r3, sl
 8005c56:	6025      	str	r5, [r4, #0]
 8005c58:	f8c4 a014 	str.w	sl, [r4, #20]
 8005c5c:	463d      	mov	r5, r7
 8005c5e:	60a3      	str	r3, [r4, #8]
 8005c60:	42af      	cmp	r7, r5
 8005c62:	d200      	bcs.n	8005c66 <__sfvwrite_r+0x136>
 8005c64:	463d      	mov	r5, r7
 8005c66:	462a      	mov	r2, r5
 8005c68:	4649      	mov	r1, r9
 8005c6a:	6820      	ldr	r0, [r4, #0]
 8005c6c:	f000 f93e 	bl	8005eec <memmove>
 8005c70:	68a3      	ldr	r3, [r4, #8]
 8005c72:	1b5b      	subs	r3, r3, r5
 8005c74:	60a3      	str	r3, [r4, #8]
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	441d      	add	r5, r3
 8005c7a:	6025      	str	r5, [r4, #0]
 8005c7c:	463d      	mov	r5, r7
 8005c7e:	e029      	b.n	8005cd4 <__sfvwrite_r+0x1a4>
 8005c80:	6820      	ldr	r0, [r4, #0]
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	4298      	cmp	r0, r3
 8005c86:	d802      	bhi.n	8005c8e <__sfvwrite_r+0x15e>
 8005c88:	6962      	ldr	r2, [r4, #20]
 8005c8a:	4297      	cmp	r7, r2
 8005c8c:	d213      	bcs.n	8005cb6 <__sfvwrite_r+0x186>
 8005c8e:	42bd      	cmp	r5, r7
 8005c90:	bf28      	it	cs
 8005c92:	463d      	movcs	r5, r7
 8005c94:	462a      	mov	r2, r5
 8005c96:	4649      	mov	r1, r9
 8005c98:	f000 f928 	bl	8005eec <memmove>
 8005c9c:	68a3      	ldr	r3, [r4, #8]
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	1b5b      	subs	r3, r3, r5
 8005ca2:	442a      	add	r2, r5
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	6022      	str	r2, [r4, #0]
 8005ca8:	b9a3      	cbnz	r3, 8005cd4 <__sfvwrite_r+0x1a4>
 8005caa:	4621      	mov	r1, r4
 8005cac:	4630      	mov	r0, r6
 8005cae:	f7ff fcff 	bl	80056b0 <_fflush_r>
 8005cb2:	b178      	cbz	r0, 8005cd4 <__sfvwrite_r+0x1a4>
 8005cb4:	e07b      	b.n	8005dae <__sfvwrite_r+0x27e>
 8005cb6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005cba:	42bb      	cmp	r3, r7
 8005cbc:	bf28      	it	cs
 8005cbe:	463b      	movcs	r3, r7
 8005cc0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005cc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cc6:	6a21      	ldr	r1, [r4, #32]
 8005cc8:	4353      	muls	r3, r2
 8005cca:	4630      	mov	r0, r6
 8005ccc:	464a      	mov	r2, r9
 8005cce:	47a8      	blx	r5
 8005cd0:	1e05      	subs	r5, r0, #0
 8005cd2:	dd6c      	ble.n	8005dae <__sfvwrite_r+0x27e>
 8005cd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cd8:	44a9      	add	r9, r5
 8005cda:	1b7f      	subs	r7, r7, r5
 8005cdc:	1b5d      	subs	r5, r3, r5
 8005cde:	f8c8 5008 	str.w	r5, [r8, #8]
 8005ce2:	2d00      	cmp	r5, #0
 8005ce4:	f47f af6d 	bne.w	8005bc2 <__sfvwrite_r+0x92>
 8005ce8:	e729      	b.n	8005b3e <__sfvwrite_r+0xe>
 8005cea:	9b00      	ldr	r3, [sp, #0]
 8005cec:	b383      	cbz	r3, 8005d50 <__sfvwrite_r+0x220>
 8005cee:	6820      	ldr	r0, [r4, #0]
 8005cf0:	6921      	ldr	r1, [r4, #16]
 8005cf2:	6962      	ldr	r2, [r4, #20]
 8005cf4:	4555      	cmp	r5, sl
 8005cf6:	462b      	mov	r3, r5
 8005cf8:	bf28      	it	cs
 8005cfa:	4653      	movcs	r3, sl
 8005cfc:	4288      	cmp	r0, r1
 8005cfe:	d936      	bls.n	8005d6e <__sfvwrite_r+0x23e>
 8005d00:	68a7      	ldr	r7, [r4, #8]
 8005d02:	4417      	add	r7, r2
 8005d04:	42bb      	cmp	r3, r7
 8005d06:	dd32      	ble.n	8005d6e <__sfvwrite_r+0x23e>
 8005d08:	4649      	mov	r1, r9
 8005d0a:	463a      	mov	r2, r7
 8005d0c:	f000 f8ee 	bl	8005eec <memmove>
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	443b      	add	r3, r7
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	4621      	mov	r1, r4
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f7ff fcc9 	bl	80056b0 <_fflush_r>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d145      	bne.n	8005dae <__sfvwrite_r+0x27e>
 8005d22:	1bed      	subs	r5, r5, r7
 8005d24:	d03c      	beq.n	8005da0 <__sfvwrite_r+0x270>
 8005d26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d2a:	44b9      	add	r9, r7
 8005d2c:	ebc7 0a0a 	rsb	sl, r7, sl
 8005d30:	1bdf      	subs	r7, r3, r7
 8005d32:	f8c8 7008 	str.w	r7, [r8, #8]
 8005d36:	2f00      	cmp	r7, #0
 8005d38:	f43f af01 	beq.w	8005b3e <__sfvwrite_r+0xe>
 8005d3c:	f1ba 0f00 	cmp.w	sl, #0
 8005d40:	d1d3      	bne.n	8005cea <__sfvwrite_r+0x1ba>
 8005d42:	2300      	movs	r3, #0
 8005d44:	e89b 0600 	ldmia.w	fp, {r9, sl}
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	f10b 0b08 	add.w	fp, fp, #8
 8005d4e:	e7f5      	b.n	8005d3c <__sfvwrite_r+0x20c>
 8005d50:	4652      	mov	r2, sl
 8005d52:	210a      	movs	r1, #10
 8005d54:	4648      	mov	r0, r9
 8005d56:	f7fa fa3b 	bl	80001d0 <memchr>
 8005d5a:	b118      	cbz	r0, 8005d64 <__sfvwrite_r+0x234>
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	ebc9 0500 	rsb	r5, r9, r0
 8005d62:	e001      	b.n	8005d68 <__sfvwrite_r+0x238>
 8005d64:	f10a 0501 	add.w	r5, sl, #1
 8005d68:	2301      	movs	r3, #1
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	e7bf      	b.n	8005cee <__sfvwrite_r+0x1be>
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	db08      	blt.n	8005d84 <__sfvwrite_r+0x254>
 8005d72:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005d74:	6a21      	ldr	r1, [r4, #32]
 8005d76:	4613      	mov	r3, r2
 8005d78:	4630      	mov	r0, r6
 8005d7a:	464a      	mov	r2, r9
 8005d7c:	47b8      	blx	r7
 8005d7e:	1e07      	subs	r7, r0, #0
 8005d80:	dccf      	bgt.n	8005d22 <__sfvwrite_r+0x1f2>
 8005d82:	e014      	b.n	8005dae <__sfvwrite_r+0x27e>
 8005d84:	461a      	mov	r2, r3
 8005d86:	4649      	mov	r1, r9
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	f000 f8af 	bl	8005eec <memmove>
 8005d8e:	9b01      	ldr	r3, [sp, #4]
 8005d90:	68a2      	ldr	r2, [r4, #8]
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	60a2      	str	r2, [r4, #8]
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	441a      	add	r2, r3
 8005d9a:	6022      	str	r2, [r4, #0]
 8005d9c:	461f      	mov	r7, r3
 8005d9e:	e7c0      	b.n	8005d22 <__sfvwrite_r+0x1f2>
 8005da0:	4621      	mov	r1, r4
 8005da2:	4630      	mov	r0, r6
 8005da4:	f7ff fc84 	bl	80056b0 <_fflush_r>
 8005da8:	b908      	cbnz	r0, 8005dae <__sfvwrite_r+0x27e>
 8005daa:	9500      	str	r5, [sp, #0]
 8005dac:	e7bb      	b.n	8005d26 <__sfvwrite_r+0x1f6>
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dba:	b003      	add	sp, #12
 8005dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc0:	7ffffc00 	.word	0x7ffffc00

08005dc4 <_fwalk_reent>:
 8005dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc8:	4680      	mov	r8, r0
 8005dca:	4689      	mov	r9, r1
 8005dcc:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8005dd0:	2600      	movs	r6, #0
 8005dd2:	b194      	cbz	r4, 8005dfa <_fwalk_reent+0x36>
 8005dd4:	68a5      	ldr	r5, [r4, #8]
 8005dd6:	6867      	ldr	r7, [r4, #4]
 8005dd8:	3f01      	subs	r7, #1
 8005dda:	d40c      	bmi.n	8005df6 <_fwalk_reent+0x32>
 8005ddc:	89ab      	ldrh	r3, [r5, #12]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d907      	bls.n	8005df2 <_fwalk_reent+0x2e>
 8005de2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005de6:	3301      	adds	r3, #1
 8005de8:	d003      	beq.n	8005df2 <_fwalk_reent+0x2e>
 8005dea:	4629      	mov	r1, r5
 8005dec:	4640      	mov	r0, r8
 8005dee:	47c8      	blx	r9
 8005df0:	4306      	orrs	r6, r0
 8005df2:	3568      	adds	r5, #104	; 0x68
 8005df4:	e7f0      	b.n	8005dd8 <_fwalk_reent+0x14>
 8005df6:	6824      	ldr	r4, [r4, #0]
 8005df8:	e7eb      	b.n	8005dd2 <_fwalk_reent+0xe>
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005e00 <__locale_charset>:
 8005e00:	4800      	ldr	r0, [pc, #0]	; (8005e04 <__locale_charset+0x4>)
 8005e02:	4770      	bx	lr
 8005e04:	20000548 	.word	0x20000548

08005e08 <__locale_mb_cur_max>:
 8005e08:	4b01      	ldr	r3, [pc, #4]	; (8005e10 <__locale_mb_cur_max+0x8>)
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	20000568 	.word	0x20000568

08005e14 <_localeconv_r>:
 8005e14:	4800      	ldr	r0, [pc, #0]	; (8005e18 <_localeconv_r+0x4>)
 8005e16:	4770      	bx	lr
 8005e18:	20000510 	.word	0x20000510

08005e1c <__swhatbuf_r>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	460e      	mov	r6, r1
 8005e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e24:	2900      	cmp	r1, #0
 8005e26:	b090      	sub	sp, #64	; 0x40
 8005e28:	4614      	mov	r4, r2
 8005e2a:	461d      	mov	r5, r3
 8005e2c:	da0a      	bge.n	8005e44 <__swhatbuf_r+0x28>
 8005e2e:	89b3      	ldrh	r3, [r6, #12]
 8005e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e34:	2200      	movs	r2, #0
 8005e36:	b298      	uxth	r0, r3
 8005e38:	602a      	str	r2, [r5, #0]
 8005e3a:	b1b0      	cbz	r0, 8005e6a <__swhatbuf_r+0x4e>
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	4610      	mov	r0, r2
 8005e42:	e015      	b.n	8005e70 <__swhatbuf_r+0x54>
 8005e44:	aa01      	add	r2, sp, #4
 8005e46:	f000 fe61 	bl	8006b0c <_fstat_r>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	dbef      	blt.n	8005e2e <__swhatbuf_r+0x12>
 8005e4e:	9a02      	ldr	r2, [sp, #8]
 8005e50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e58:	425a      	negs	r2, r3
 8005e5a:	415a      	adcs	r2, r3
 8005e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e60:	602a      	str	r2, [r5, #0]
 8005e62:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e66:	6023      	str	r3, [r4, #0]
 8005e68:	e002      	b.n	8005e70 <__swhatbuf_r+0x54>
 8005e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	b010      	add	sp, #64	; 0x40
 8005e72:	bd70      	pop	{r4, r5, r6, pc}

08005e74 <__smakebuf_r>:
 8005e74:	898b      	ldrh	r3, [r1, #12]
 8005e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e78:	079e      	lsls	r6, r3, #30
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	d410      	bmi.n	8005ea2 <__smakebuf_r+0x2e>
 8005e80:	ab01      	add	r3, sp, #4
 8005e82:	466a      	mov	r2, sp
 8005e84:	f7ff ffca 	bl	8005e1c <__swhatbuf_r>
 8005e88:	9900      	ldr	r1, [sp, #0]
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f7fd fa1d 	bl	80032cc <_malloc_r>
 8005e92:	b968      	cbnz	r0, 8005eb0 <__smakebuf_r+0x3c>
 8005e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e98:	059a      	lsls	r2, r3, #22
 8005e9a:	d422      	bmi.n	8005ee2 <__smakebuf_r+0x6e>
 8005e9c:	f043 0302 	orr.w	r3, r3, #2
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	2301      	movs	r3, #1
 8005eac:	6163      	str	r3, [r4, #20]
 8005eae:	e018      	b.n	8005ee2 <__smakebuf_r+0x6e>
 8005eb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <__smakebuf_r+0x74>)
 8005eb2:	62ab      	str	r3, [r5, #40]	; 0x28
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	6020      	str	r0, [r4, #0]
 8005eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ebc:	81a3      	strh	r3, [r4, #12]
 8005ebe:	9b00      	ldr	r3, [sp, #0]
 8005ec0:	6163      	str	r3, [r4, #20]
 8005ec2:	9b01      	ldr	r3, [sp, #4]
 8005ec4:	6120      	str	r0, [r4, #16]
 8005ec6:	b14b      	cbz	r3, 8005edc <__smakebuf_r+0x68>
 8005ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f000 fe2f 	bl	8006b30 <_isatty_r>
 8005ed2:	b118      	cbz	r0, 8005edc <__smakebuf_r+0x68>
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	89a0      	ldrh	r0, [r4, #12]
 8005ede:	4330      	orrs	r0, r6
 8005ee0:	81a0      	strh	r0, [r4, #12]
 8005ee2:	b002      	add	sp, #8
 8005ee4:	bd70      	pop	{r4, r5, r6, pc}
 8005ee6:	bf00      	nop
 8005ee8:	08005705 	.word	0x08005705

08005eec <memmove>:
 8005eec:	4288      	cmp	r0, r1
 8005eee:	b510      	push	{r4, lr}
 8005ef0:	eb01 0302 	add.w	r3, r1, r2
 8005ef4:	d801      	bhi.n	8005efa <memmove+0xe>
 8005ef6:	1e42      	subs	r2, r0, #1
 8005ef8:	e00b      	b.n	8005f12 <memmove+0x26>
 8005efa:	4298      	cmp	r0, r3
 8005efc:	d2fb      	bcs.n	8005ef6 <memmove+0xa>
 8005efe:	1881      	adds	r1, r0, r2
 8005f00:	1ad2      	subs	r2, r2, r3
 8005f02:	42d3      	cmn	r3, r2
 8005f04:	d004      	beq.n	8005f10 <memmove+0x24>
 8005f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f0a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f0e:	e7f8      	b.n	8005f02 <memmove+0x16>
 8005f10:	bd10      	pop	{r4, pc}
 8005f12:	4299      	cmp	r1, r3
 8005f14:	d004      	beq.n	8005f20 <memmove+0x34>
 8005f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f1a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f1e:	e7f8      	b.n	8005f12 <memmove+0x26>
 8005f20:	bd10      	pop	{r4, pc}

08005f22 <_Balloc>:
 8005f22:	b570      	push	{r4, r5, r6, lr}
 8005f24:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f26:	4604      	mov	r4, r0
 8005f28:	460e      	mov	r6, r1
 8005f2a:	b93d      	cbnz	r5, 8005f3c <_Balloc+0x1a>
 8005f2c:	2010      	movs	r0, #16
 8005f2e:	f7fd f9c5 	bl	80032bc <malloc>
 8005f32:	6260      	str	r0, [r4, #36]	; 0x24
 8005f34:	6045      	str	r5, [r0, #4]
 8005f36:	6085      	str	r5, [r0, #8]
 8005f38:	6005      	str	r5, [r0, #0]
 8005f3a:	60c5      	str	r5, [r0, #12]
 8005f3c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f3e:	68eb      	ldr	r3, [r5, #12]
 8005f40:	b143      	cbz	r3, 8005f54 <_Balloc+0x32>
 8005f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f4a:	b178      	cbz	r0, 8005f6c <_Balloc+0x4a>
 8005f4c:	6802      	ldr	r2, [r0, #0]
 8005f4e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f52:	e017      	b.n	8005f84 <_Balloc+0x62>
 8005f54:	2221      	movs	r2, #33	; 0x21
 8005f56:	2104      	movs	r1, #4
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f000 fd47 	bl	80069ec <_calloc_r>
 8005f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f60:	60e8      	str	r0, [r5, #12]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1ec      	bne.n	8005f42 <_Balloc+0x20>
 8005f68:	2000      	movs	r0, #0
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f506 	lsl.w	r5, r1, r6
 8005f72:	1d6a      	adds	r2, r5, #5
 8005f74:	0092      	lsls	r2, r2, #2
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 fd38 	bl	80069ec <_calloc_r>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d0f3      	beq.n	8005f68 <_Balloc+0x46>
 8005f80:	6046      	str	r6, [r0, #4]
 8005f82:	6085      	str	r5, [r0, #8]
 8005f84:	2300      	movs	r3, #0
 8005f86:	6103      	str	r3, [r0, #16]
 8005f88:	60c3      	str	r3, [r0, #12]
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}

08005f8c <_Bfree>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f90:	4606      	mov	r6, r0
 8005f92:	460d      	mov	r5, r1
 8005f94:	b93c      	cbnz	r4, 8005fa6 <_Bfree+0x1a>
 8005f96:	2010      	movs	r0, #16
 8005f98:	f7fd f990 	bl	80032bc <malloc>
 8005f9c:	6270      	str	r0, [r6, #36]	; 0x24
 8005f9e:	6044      	str	r4, [r0, #4]
 8005fa0:	6084      	str	r4, [r0, #8]
 8005fa2:	6004      	str	r4, [r0, #0]
 8005fa4:	60c4      	str	r4, [r0, #12]
 8005fa6:	b13d      	cbz	r5, 8005fb8 <_Bfree+0x2c>
 8005fa8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005faa:	686a      	ldr	r2, [r5, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fb2:	6029      	str	r1, [r5, #0]
 8005fb4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}

08005fba <__multadd>:
 8005fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbe:	690d      	ldr	r5, [r1, #16]
 8005fc0:	461f      	mov	r7, r3
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	f101 0e14 	add.w	lr, r1, #20
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f8de 0000 	ldr.w	r0, [lr]
 8005fd0:	b281      	uxth	r1, r0
 8005fd2:	fb02 7101 	mla	r1, r2, r1, r7
 8005fd6:	0c0f      	lsrs	r7, r1, #16
 8005fd8:	0c00      	lsrs	r0, r0, #16
 8005fda:	fb02 7000 	mla	r0, r2, r0, r7
 8005fde:	b289      	uxth	r1, r1
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005fe6:	429d      	cmp	r5, r3
 8005fe8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fec:	f84e 1b04 	str.w	r1, [lr], #4
 8005ff0:	dcec      	bgt.n	8005fcc <__multadd+0x12>
 8005ff2:	b1d7      	cbz	r7, 800602a <__multadd+0x70>
 8005ff4:	68a3      	ldr	r3, [r4, #8]
 8005ff6:	429d      	cmp	r5, r3
 8005ff8:	db12      	blt.n	8006020 <__multadd+0x66>
 8005ffa:	6861      	ldr	r1, [r4, #4]
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	3101      	adds	r1, #1
 8006000:	f7ff ff8f 	bl	8005f22 <_Balloc>
 8006004:	6922      	ldr	r2, [r4, #16]
 8006006:	3202      	adds	r2, #2
 8006008:	f104 010c 	add.w	r1, r4, #12
 800600c:	4680      	mov	r8, r0
 800600e:	0092      	lsls	r2, r2, #2
 8006010:	300c      	adds	r0, #12
 8006012:	f7fd fb7b 	bl	800370c <memcpy>
 8006016:	4621      	mov	r1, r4
 8006018:	4630      	mov	r0, r6
 800601a:	f7ff ffb7 	bl	8005f8c <_Bfree>
 800601e:	4644      	mov	r4, r8
 8006020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006024:	3501      	adds	r5, #1
 8006026:	615f      	str	r7, [r3, #20]
 8006028:	6125      	str	r5, [r4, #16]
 800602a:	4620      	mov	r0, r4
 800602c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006030 <__hi0bits>:
 8006030:	0c03      	lsrs	r3, r0, #16
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	b913      	cbnz	r3, 800603c <__hi0bits+0xc>
 8006036:	0400      	lsls	r0, r0, #16
 8006038:	2310      	movs	r3, #16
 800603a:	e000      	b.n	800603e <__hi0bits+0xe>
 800603c:	2300      	movs	r3, #0
 800603e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006042:	bf04      	itt	eq
 8006044:	0200      	lsleq	r0, r0, #8
 8006046:	3308      	addeq	r3, #8
 8006048:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800604c:	bf04      	itt	eq
 800604e:	0100      	lsleq	r0, r0, #4
 8006050:	3304      	addeq	r3, #4
 8006052:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006056:	bf04      	itt	eq
 8006058:	0080      	lsleq	r0, r0, #2
 800605a:	3302      	addeq	r3, #2
 800605c:	2800      	cmp	r0, #0
 800605e:	db03      	blt.n	8006068 <__hi0bits+0x38>
 8006060:	0042      	lsls	r2, r0, #1
 8006062:	d503      	bpl.n	800606c <__hi0bits+0x3c>
 8006064:	1c58      	adds	r0, r3, #1
 8006066:	4770      	bx	lr
 8006068:	4618      	mov	r0, r3
 800606a:	4770      	bx	lr
 800606c:	2020      	movs	r0, #32
 800606e:	4770      	bx	lr

08006070 <__lo0bits>:
 8006070:	6803      	ldr	r3, [r0, #0]
 8006072:	f013 0207 	ands.w	r2, r3, #7
 8006076:	d00b      	beq.n	8006090 <__lo0bits+0x20>
 8006078:	07d9      	lsls	r1, r3, #31
 800607a:	d422      	bmi.n	80060c2 <__lo0bits+0x52>
 800607c:	079a      	lsls	r2, r3, #30
 800607e:	bf4b      	itete	mi
 8006080:	085b      	lsrmi	r3, r3, #1
 8006082:	089b      	lsrpl	r3, r3, #2
 8006084:	6003      	strmi	r3, [r0, #0]
 8006086:	6003      	strpl	r3, [r0, #0]
 8006088:	bf4c      	ite	mi
 800608a:	2001      	movmi	r0, #1
 800608c:	2002      	movpl	r0, #2
 800608e:	4770      	bx	lr
 8006090:	b299      	uxth	r1, r3
 8006092:	b909      	cbnz	r1, 8006098 <__lo0bits+0x28>
 8006094:	0c1b      	lsrs	r3, r3, #16
 8006096:	2210      	movs	r2, #16
 8006098:	f013 0fff 	tst.w	r3, #255	; 0xff
 800609c:	bf04      	itt	eq
 800609e:	0a1b      	lsreq	r3, r3, #8
 80060a0:	3208      	addeq	r2, #8
 80060a2:	0719      	lsls	r1, r3, #28
 80060a4:	bf04      	itt	eq
 80060a6:	091b      	lsreq	r3, r3, #4
 80060a8:	3204      	addeq	r2, #4
 80060aa:	0799      	lsls	r1, r3, #30
 80060ac:	bf04      	itt	eq
 80060ae:	089b      	lsreq	r3, r3, #2
 80060b0:	3202      	addeq	r2, #2
 80060b2:	07d9      	lsls	r1, r3, #31
 80060b4:	d402      	bmi.n	80060bc <__lo0bits+0x4c>
 80060b6:	085b      	lsrs	r3, r3, #1
 80060b8:	d005      	beq.n	80060c6 <__lo0bits+0x56>
 80060ba:	3201      	adds	r2, #1
 80060bc:	6003      	str	r3, [r0, #0]
 80060be:	4610      	mov	r0, r2
 80060c0:	4770      	bx	lr
 80060c2:	2000      	movs	r0, #0
 80060c4:	4770      	bx	lr
 80060c6:	2020      	movs	r0, #32
 80060c8:	4770      	bx	lr

080060ca <__i2b>:
 80060ca:	b510      	push	{r4, lr}
 80060cc:	460c      	mov	r4, r1
 80060ce:	2101      	movs	r1, #1
 80060d0:	f7ff ff27 	bl	8005f22 <_Balloc>
 80060d4:	2201      	movs	r2, #1
 80060d6:	6144      	str	r4, [r0, #20]
 80060d8:	6102      	str	r2, [r0, #16]
 80060da:	bd10      	pop	{r4, pc}

080060dc <__multiply>:
 80060dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e0:	4614      	mov	r4, r2
 80060e2:	690a      	ldr	r2, [r1, #16]
 80060e4:	6923      	ldr	r3, [r4, #16]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	bfb8      	it	lt
 80060ea:	460b      	movlt	r3, r1
 80060ec:	4688      	mov	r8, r1
 80060ee:	bfbc      	itt	lt
 80060f0:	46a0      	movlt	r8, r4
 80060f2:	461c      	movlt	r4, r3
 80060f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006100:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006104:	eb07 0609 	add.w	r6, r7, r9
 8006108:	429e      	cmp	r6, r3
 800610a:	bfc8      	it	gt
 800610c:	3101      	addgt	r1, #1
 800610e:	f7ff ff08 	bl	8005f22 <_Balloc>
 8006112:	f100 0514 	add.w	r5, r0, #20
 8006116:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800611a:	462b      	mov	r3, r5
 800611c:	2200      	movs	r2, #0
 800611e:	4563      	cmp	r3, ip
 8006120:	d202      	bcs.n	8006128 <__multiply+0x4c>
 8006122:	f843 2b04 	str.w	r2, [r3], #4
 8006126:	e7fa      	b.n	800611e <__multiply+0x42>
 8006128:	f104 0214 	add.w	r2, r4, #20
 800612c:	f108 0114 	add.w	r1, r8, #20
 8006130:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006134:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	9b00      	ldr	r3, [sp, #0]
 800613c:	9201      	str	r2, [sp, #4]
 800613e:	4293      	cmp	r3, r2
 8006140:	d957      	bls.n	80061f2 <__multiply+0x116>
 8006142:	f8b2 b000 	ldrh.w	fp, [r2]
 8006146:	f1bb 0f00 	cmp.w	fp, #0
 800614a:	d023      	beq.n	8006194 <__multiply+0xb8>
 800614c:	4689      	mov	r9, r1
 800614e:	46ae      	mov	lr, r5
 8006150:	f04f 0800 	mov.w	r8, #0
 8006154:	f859 4b04 	ldr.w	r4, [r9], #4
 8006158:	f8be a000 	ldrh.w	sl, [lr]
 800615c:	b2a3      	uxth	r3, r4
 800615e:	fb0b a303 	mla	r3, fp, r3, sl
 8006162:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006166:	f8de 4000 	ldr.w	r4, [lr]
 800616a:	4443      	add	r3, r8
 800616c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006170:	fb0b 840a 	mla	r4, fp, sl, r8
 8006174:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006178:	46f2      	mov	sl, lr
 800617a:	b29b      	uxth	r3, r3
 800617c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006180:	454f      	cmp	r7, r9
 8006182:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006186:	f84a 3b04 	str.w	r3, [sl], #4
 800618a:	d901      	bls.n	8006190 <__multiply+0xb4>
 800618c:	46d6      	mov	lr, sl
 800618e:	e7e1      	b.n	8006154 <__multiply+0x78>
 8006190:	f8ce 8004 	str.w	r8, [lr, #4]
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800619a:	3204      	adds	r2, #4
 800619c:	f1ba 0f00 	cmp.w	sl, #0
 80061a0:	d021      	beq.n	80061e6 <__multiply+0x10a>
 80061a2:	682b      	ldr	r3, [r5, #0]
 80061a4:	462c      	mov	r4, r5
 80061a6:	4689      	mov	r9, r1
 80061a8:	f04f 0800 	mov.w	r8, #0
 80061ac:	f8b9 e000 	ldrh.w	lr, [r9]
 80061b0:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80061b4:	fb0a be0e 	mla	lr, sl, lr, fp
 80061b8:	44f0      	add	r8, lr
 80061ba:	46a3      	mov	fp, r4
 80061bc:	b29b      	uxth	r3, r3
 80061be:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80061c2:	f84b 3b04 	str.w	r3, [fp], #4
 80061c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80061ca:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80061ce:	0c1b      	lsrs	r3, r3, #16
 80061d0:	fb0a e303 	mla	r3, sl, r3, lr
 80061d4:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80061d8:	454f      	cmp	r7, r9
 80061da:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80061de:	d901      	bls.n	80061e4 <__multiply+0x108>
 80061e0:	465c      	mov	r4, fp
 80061e2:	e7e3      	b.n	80061ac <__multiply+0xd0>
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	3504      	adds	r5, #4
 80061e8:	e7a7      	b.n	800613a <__multiply+0x5e>
 80061ea:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80061ee:	b913      	cbnz	r3, 80061f6 <__multiply+0x11a>
 80061f0:	3e01      	subs	r6, #1
 80061f2:	2e00      	cmp	r6, #0
 80061f4:	dcf9      	bgt.n	80061ea <__multiply+0x10e>
 80061f6:	6106      	str	r6, [r0, #16]
 80061f8:	b003      	add	sp, #12
 80061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006200 <__pow5mult>:
 8006200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006204:	4615      	mov	r5, r2
 8006206:	f012 0203 	ands.w	r2, r2, #3
 800620a:	4606      	mov	r6, r0
 800620c:	460f      	mov	r7, r1
 800620e:	d007      	beq.n	8006220 <__pow5mult+0x20>
 8006210:	3a01      	subs	r2, #1
 8006212:	4c21      	ldr	r4, [pc, #132]	; (8006298 <__pow5mult+0x98>)
 8006214:	2300      	movs	r3, #0
 8006216:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800621a:	f7ff fece 	bl	8005fba <__multadd>
 800621e:	4607      	mov	r7, r0
 8006220:	10ad      	asrs	r5, r5, #2
 8006222:	d036      	beq.n	8006292 <__pow5mult+0x92>
 8006224:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006226:	b93c      	cbnz	r4, 8006238 <__pow5mult+0x38>
 8006228:	2010      	movs	r0, #16
 800622a:	f7fd f847 	bl	80032bc <malloc>
 800622e:	6270      	str	r0, [r6, #36]	; 0x24
 8006230:	6044      	str	r4, [r0, #4]
 8006232:	6084      	str	r4, [r0, #8]
 8006234:	6004      	str	r4, [r0, #0]
 8006236:	60c4      	str	r4, [r0, #12]
 8006238:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800623c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006240:	b94c      	cbnz	r4, 8006256 <__pow5mult+0x56>
 8006242:	f240 2171 	movw	r1, #625	; 0x271
 8006246:	4630      	mov	r0, r6
 8006248:	f7ff ff3f 	bl	80060ca <__i2b>
 800624c:	2300      	movs	r3, #0
 800624e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006252:	4604      	mov	r4, r0
 8006254:	6003      	str	r3, [r0, #0]
 8006256:	f04f 0800 	mov.w	r8, #0
 800625a:	07eb      	lsls	r3, r5, #31
 800625c:	d50a      	bpl.n	8006274 <__pow5mult+0x74>
 800625e:	4639      	mov	r1, r7
 8006260:	4622      	mov	r2, r4
 8006262:	4630      	mov	r0, r6
 8006264:	f7ff ff3a 	bl	80060dc <__multiply>
 8006268:	4639      	mov	r1, r7
 800626a:	4681      	mov	r9, r0
 800626c:	4630      	mov	r0, r6
 800626e:	f7ff fe8d 	bl	8005f8c <_Bfree>
 8006272:	464f      	mov	r7, r9
 8006274:	106d      	asrs	r5, r5, #1
 8006276:	d00c      	beq.n	8006292 <__pow5mult+0x92>
 8006278:	6820      	ldr	r0, [r4, #0]
 800627a:	b108      	cbz	r0, 8006280 <__pow5mult+0x80>
 800627c:	4604      	mov	r4, r0
 800627e:	e7ec      	b.n	800625a <__pow5mult+0x5a>
 8006280:	4622      	mov	r2, r4
 8006282:	4621      	mov	r1, r4
 8006284:	4630      	mov	r0, r6
 8006286:	f7ff ff29 	bl	80060dc <__multiply>
 800628a:	6020      	str	r0, [r4, #0]
 800628c:	f8c0 8000 	str.w	r8, [r0]
 8006290:	e7f4      	b.n	800627c <__pow5mult+0x7c>
 8006292:	4638      	mov	r0, r7
 8006294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006298:	08007270 	.word	0x08007270

0800629c <__lshift>:
 800629c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	460c      	mov	r4, r1
 80062a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062a6:	6926      	ldr	r6, [r4, #16]
 80062a8:	6849      	ldr	r1, [r1, #4]
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	4456      	add	r6, sl
 80062ae:	4607      	mov	r7, r0
 80062b0:	4691      	mov	r9, r2
 80062b2:	1c75      	adds	r5, r6, #1
 80062b4:	42ab      	cmp	r3, r5
 80062b6:	da02      	bge.n	80062be <__lshift+0x22>
 80062b8:	3101      	adds	r1, #1
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	e7fa      	b.n	80062b4 <__lshift+0x18>
 80062be:	4638      	mov	r0, r7
 80062c0:	f7ff fe2f 	bl	8005f22 <_Balloc>
 80062c4:	2300      	movs	r3, #0
 80062c6:	4680      	mov	r8, r0
 80062c8:	f100 0114 	add.w	r1, r0, #20
 80062cc:	461a      	mov	r2, r3
 80062ce:	4553      	cmp	r3, sl
 80062d0:	da03      	bge.n	80062da <__lshift+0x3e>
 80062d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80062d6:	3301      	adds	r3, #1
 80062d8:	e7f9      	b.n	80062ce <__lshift+0x32>
 80062da:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80062de:	6920      	ldr	r0, [r4, #16]
 80062e0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80062e4:	f019 091f 	ands.w	r9, r9, #31
 80062e8:	f104 0114 	add.w	r1, r4, #20
 80062ec:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80062f0:	d014      	beq.n	800631c <__lshift+0x80>
 80062f2:	f1c9 0c20 	rsb	ip, r9, #32
 80062f6:	2200      	movs	r2, #0
 80062f8:	6808      	ldr	r0, [r1, #0]
 80062fa:	fa00 f009 	lsl.w	r0, r0, r9
 80062fe:	4302      	orrs	r2, r0
 8006300:	469a      	mov	sl, r3
 8006302:	f843 2b04 	str.w	r2, [r3], #4
 8006306:	f851 2b04 	ldr.w	r2, [r1], #4
 800630a:	458e      	cmp	lr, r1
 800630c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006310:	d8f2      	bhi.n	80062f8 <__lshift+0x5c>
 8006312:	f8ca 2004 	str.w	r2, [sl, #4]
 8006316:	b142      	cbz	r2, 800632a <__lshift+0x8e>
 8006318:	1cb5      	adds	r5, r6, #2
 800631a:	e006      	b.n	800632a <__lshift+0x8e>
 800631c:	3b04      	subs	r3, #4
 800631e:	f851 2b04 	ldr.w	r2, [r1], #4
 8006322:	f843 2f04 	str.w	r2, [r3, #4]!
 8006326:	458e      	cmp	lr, r1
 8006328:	d8f9      	bhi.n	800631e <__lshift+0x82>
 800632a:	3d01      	subs	r5, #1
 800632c:	4638      	mov	r0, r7
 800632e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006332:	4621      	mov	r1, r4
 8006334:	f7ff fe2a 	bl	8005f8c <_Bfree>
 8006338:	4640      	mov	r0, r8
 800633a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800633e <__mcmp>:
 800633e:	6903      	ldr	r3, [r0, #16]
 8006340:	690a      	ldr	r2, [r1, #16]
 8006342:	1a9b      	subs	r3, r3, r2
 8006344:	b510      	push	{r4, lr}
 8006346:	d111      	bne.n	800636c <__mcmp+0x2e>
 8006348:	0092      	lsls	r2, r2, #2
 800634a:	3014      	adds	r0, #20
 800634c:	3114      	adds	r1, #20
 800634e:	1883      	adds	r3, r0, r2
 8006350:	440a      	add	r2, r1
 8006352:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006356:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800635a:	428c      	cmp	r4, r1
 800635c:	d002      	beq.n	8006364 <__mcmp+0x26>
 800635e:	d307      	bcc.n	8006370 <__mcmp+0x32>
 8006360:	2001      	movs	r0, #1
 8006362:	bd10      	pop	{r4, pc}
 8006364:	4298      	cmp	r0, r3
 8006366:	d3f4      	bcc.n	8006352 <__mcmp+0x14>
 8006368:	2000      	movs	r0, #0
 800636a:	bd10      	pop	{r4, pc}
 800636c:	4618      	mov	r0, r3
 800636e:	bd10      	pop	{r4, pc}
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	bd10      	pop	{r4, pc}

08006376 <__mdiff>:
 8006376:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800637a:	460c      	mov	r4, r1
 800637c:	4607      	mov	r7, r0
 800637e:	4611      	mov	r1, r2
 8006380:	4620      	mov	r0, r4
 8006382:	4615      	mov	r5, r2
 8006384:	f7ff ffdb 	bl	800633e <__mcmp>
 8006388:	1e06      	subs	r6, r0, #0
 800638a:	d108      	bne.n	800639e <__mdiff+0x28>
 800638c:	4631      	mov	r1, r6
 800638e:	4638      	mov	r0, r7
 8006390:	f7ff fdc7 	bl	8005f22 <_Balloc>
 8006394:	2301      	movs	r3, #1
 8006396:	6103      	str	r3, [r0, #16]
 8006398:	6146      	str	r6, [r0, #20]
 800639a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800639e:	bfbc      	itt	lt
 80063a0:	4623      	movlt	r3, r4
 80063a2:	462c      	movlt	r4, r5
 80063a4:	4638      	mov	r0, r7
 80063a6:	6861      	ldr	r1, [r4, #4]
 80063a8:	bfba      	itte	lt
 80063aa:	461d      	movlt	r5, r3
 80063ac:	2601      	movlt	r6, #1
 80063ae:	2600      	movge	r6, #0
 80063b0:	f7ff fdb7 	bl	8005f22 <_Balloc>
 80063b4:	692b      	ldr	r3, [r5, #16]
 80063b6:	60c6      	str	r6, [r0, #12]
 80063b8:	6926      	ldr	r6, [r4, #16]
 80063ba:	f105 0914 	add.w	r9, r5, #20
 80063be:	3414      	adds	r4, #20
 80063c0:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 80063c4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80063c8:	f100 0514 	add.w	r5, r0, #20
 80063cc:	f04f 0c00 	mov.w	ip, #0
 80063d0:	f854 3b04 	ldr.w	r3, [r4], #4
 80063d4:	f859 2b04 	ldr.w	r2, [r9], #4
 80063d8:	fa1c f183 	uxtah	r1, ip, r3
 80063dc:	fa1f fe82 	uxth.w	lr, r2
 80063e0:	0c12      	lsrs	r2, r2, #16
 80063e2:	ebce 0101 	rsb	r1, lr, r1
 80063e6:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 80063ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063ee:	b289      	uxth	r1, r1
 80063f0:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80063f4:	45c8      	cmp	r8, r9
 80063f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063fa:	46a6      	mov	lr, r4
 80063fc:	f845 3b04 	str.w	r3, [r5], #4
 8006400:	d8e6      	bhi.n	80063d0 <__mdiff+0x5a>
 8006402:	45be      	cmp	lr, r7
 8006404:	d20e      	bcs.n	8006424 <__mdiff+0xae>
 8006406:	f85e 1b04 	ldr.w	r1, [lr], #4
 800640a:	fa1c f281 	uxtah	r2, ip, r1
 800640e:	1413      	asrs	r3, r2, #16
 8006410:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8006414:	b292      	uxth	r2, r2
 8006416:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800641a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800641e:	f845 2b04 	str.w	r2, [r5], #4
 8006422:	e7ee      	b.n	8006402 <__mdiff+0x8c>
 8006424:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006428:	b90b      	cbnz	r3, 800642e <__mdiff+0xb8>
 800642a:	3e01      	subs	r6, #1
 800642c:	e7fa      	b.n	8006424 <__mdiff+0xae>
 800642e:	6106      	str	r6, [r0, #16]
 8006430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006434 <__d2b>:
 8006434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006438:	460e      	mov	r6, r1
 800643a:	2101      	movs	r1, #1
 800643c:	ec59 8b10 	vmov	r8, r9, d0
 8006440:	4615      	mov	r5, r2
 8006442:	f7ff fd6e 	bl	8005f22 <_Balloc>
 8006446:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800644a:	4607      	mov	r7, r0
 800644c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006450:	b10c      	cbz	r4, 8006456 <__d2b+0x22>
 8006452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	d019      	beq.n	8006492 <__d2b+0x5e>
 800645e:	a802      	add	r0, sp, #8
 8006460:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006464:	f7ff fe04 	bl	8006070 <__lo0bits>
 8006468:	9b00      	ldr	r3, [sp, #0]
 800646a:	b148      	cbz	r0, 8006480 <__d2b+0x4c>
 800646c:	9a01      	ldr	r2, [sp, #4]
 800646e:	f1c0 0120 	rsb	r1, r0, #32
 8006472:	fa02 f101 	lsl.w	r1, r2, r1
 8006476:	430b      	orrs	r3, r1
 8006478:	40c2      	lsrs	r2, r0
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	9201      	str	r2, [sp, #4]
 800647e:	e000      	b.n	8006482 <__d2b+0x4e>
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	bf14      	ite	ne
 800648a:	2102      	movne	r1, #2
 800648c:	2101      	moveq	r1, #1
 800648e:	6139      	str	r1, [r7, #16]
 8006490:	e007      	b.n	80064a2 <__d2b+0x6e>
 8006492:	a801      	add	r0, sp, #4
 8006494:	f7ff fdec 	bl	8006070 <__lo0bits>
 8006498:	9b01      	ldr	r3, [sp, #4]
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	2101      	movs	r1, #1
 800649e:	6139      	str	r1, [r7, #16]
 80064a0:	3020      	adds	r0, #32
 80064a2:	b134      	cbz	r4, 80064b2 <__d2b+0x7e>
 80064a4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80064a8:	4404      	add	r4, r0
 80064aa:	6034      	str	r4, [r6, #0]
 80064ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80064b0:	e009      	b.n	80064c6 <__d2b+0x92>
 80064b2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80064b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064ba:	6030      	str	r0, [r6, #0]
 80064bc:	6918      	ldr	r0, [r3, #16]
 80064be:	f7ff fdb7 	bl	8006030 <__hi0bits>
 80064c2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064c6:	6028      	str	r0, [r5, #0]
 80064c8:	4638      	mov	r0, r7
 80064ca:	b003      	add	sp, #12
 80064cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080064d0 <_realloc_r>:
 80064d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	4681      	mov	r9, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	b929      	cbnz	r1, 80064e6 <_realloc_r+0x16>
 80064da:	4611      	mov	r1, r2
 80064dc:	b003      	add	sp, #12
 80064de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e2:	f7fc bef3 	b.w	80032cc <_malloc_r>
 80064e6:	9201      	str	r2, [sp, #4]
 80064e8:	f7fd f923 	bl	8003732 <__malloc_lock>
 80064ec:	9a01      	ldr	r2, [sp, #4]
 80064ee:	f854 ec04 	ldr.w	lr, [r4, #-4]
 80064f2:	f102 080b 	add.w	r8, r2, #11
 80064f6:	f1b8 0f16 	cmp.w	r8, #22
 80064fa:	f1a4 0b08 	sub.w	fp, r4, #8
 80064fe:	f02e 0503 	bic.w	r5, lr, #3
 8006502:	d903      	bls.n	800650c <_realloc_r+0x3c>
 8006504:	f038 0807 	bics.w	r8, r8, #7
 8006508:	d502      	bpl.n	8006510 <_realloc_r+0x40>
 800650a:	e003      	b.n	8006514 <_realloc_r+0x44>
 800650c:	f04f 0810 	mov.w	r8, #16
 8006510:	4590      	cmp	r8, r2
 8006512:	d204      	bcs.n	800651e <_realloc_r+0x4e>
 8006514:	230c      	movs	r3, #12
 8006516:	f8c9 3000 	str.w	r3, [r9]
 800651a:	2000      	movs	r0, #0
 800651c:	e17d      	b.n	800681a <_realloc_r+0x34a>
 800651e:	45a8      	cmp	r8, r5
 8006520:	f340 8150 	ble.w	80067c4 <_realloc_r+0x2f4>
 8006524:	4ba6      	ldr	r3, [pc, #664]	; (80067c0 <_realloc_r+0x2f0>)
 8006526:	6898      	ldr	r0, [r3, #8]
 8006528:	eb0b 0105 	add.w	r1, fp, r5
 800652c:	4281      	cmp	r1, r0
 800652e:	684f      	ldr	r7, [r1, #4]
 8006530:	d005      	beq.n	800653e <_realloc_r+0x6e>
 8006532:	f027 0601 	bic.w	r6, r7, #1
 8006536:	440e      	add	r6, r1
 8006538:	6876      	ldr	r6, [r6, #4]
 800653a:	07f6      	lsls	r6, r6, #31
 800653c:	d426      	bmi.n	800658c <_realloc_r+0xbc>
 800653e:	f027 0a03 	bic.w	sl, r7, #3
 8006542:	4281      	cmp	r1, r0
 8006544:	eb05 070a 	add.w	r7, r5, sl
 8006548:	d118      	bne.n	800657c <_realloc_r+0xac>
 800654a:	f108 0610 	add.w	r6, r8, #16
 800654e:	42b7      	cmp	r7, r6
 8006550:	db1f      	blt.n	8006592 <_realloc_r+0xc2>
 8006552:	eb0b 0008 	add.w	r0, fp, r8
 8006556:	ebc8 0707 	rsb	r7, r8, r7
 800655a:	f047 0701 	orr.w	r7, r7, #1
 800655e:	6098      	str	r0, [r3, #8]
 8006560:	6047      	str	r7, [r0, #4]
 8006562:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	ea43 0308 	orr.w	r3, r3, r8
 800656e:	4648      	mov	r0, r9
 8006570:	f844 3c04 	str.w	r3, [r4, #-4]
 8006574:	f7fd f8de 	bl	8003734 <__malloc_unlock>
 8006578:	4620      	mov	r0, r4
 800657a:	e14e      	b.n	800681a <_realloc_r+0x34a>
 800657c:	45b8      	cmp	r8, r7
 800657e:	dc08      	bgt.n	8006592 <_realloc_r+0xc2>
 8006580:	68cb      	ldr	r3, [r1, #12]
 8006582:	688a      	ldr	r2, [r1, #8]
 8006584:	463d      	mov	r5, r7
 8006586:	60d3      	str	r3, [r2, #12]
 8006588:	609a      	str	r2, [r3, #8]
 800658a:	e11b      	b.n	80067c4 <_realloc_r+0x2f4>
 800658c:	f04f 0a00 	mov.w	sl, #0
 8006590:	4651      	mov	r1, sl
 8006592:	f01e 0f01 	tst.w	lr, #1
 8006596:	f040 80c3 	bne.w	8006720 <_realloc_r+0x250>
 800659a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800659e:	ebc7 070b 	rsb	r7, r7, fp
 80065a2:	687e      	ldr	r6, [r7, #4]
 80065a4:	f026 0603 	bic.w	r6, r6, #3
 80065a8:	442e      	add	r6, r5
 80065aa:	2900      	cmp	r1, #0
 80065ac:	f000 8083 	beq.w	80066b6 <_realloc_r+0x1e6>
 80065b0:	4281      	cmp	r1, r0
 80065b2:	44b2      	add	sl, r6
 80065b4:	d147      	bne.n	8006646 <_realloc_r+0x176>
 80065b6:	f108 0110 	add.w	r1, r8, #16
 80065ba:	458a      	cmp	sl, r1
 80065bc:	db7b      	blt.n	80066b6 <_realloc_r+0x1e6>
 80065be:	463e      	mov	r6, r7
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	f856 1f08 	ldr.w	r1, [r6, #8]!
 80065c6:	60ca      	str	r2, [r1, #12]
 80065c8:	6091      	str	r1, [r2, #8]
 80065ca:	1f2a      	subs	r2, r5, #4
 80065cc:	2a24      	cmp	r2, #36	; 0x24
 80065ce:	d825      	bhi.n	800661c <_realloc_r+0x14c>
 80065d0:	2a13      	cmp	r2, #19
 80065d2:	d91b      	bls.n	800660c <_realloc_r+0x13c>
 80065d4:	6821      	ldr	r1, [r4, #0]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	6861      	ldr	r1, [r4, #4]
 80065da:	60f9      	str	r1, [r7, #12]
 80065dc:	2a1b      	cmp	r2, #27
 80065de:	d803      	bhi.n	80065e8 <_realloc_r+0x118>
 80065e0:	f107 0210 	add.w	r2, r7, #16
 80065e4:	3408      	adds	r4, #8
 80065e6:	e012      	b.n	800660e <_realloc_r+0x13e>
 80065e8:	68a1      	ldr	r1, [r4, #8]
 80065ea:	6139      	str	r1, [r7, #16]
 80065ec:	68e1      	ldr	r1, [r4, #12]
 80065ee:	6179      	str	r1, [r7, #20]
 80065f0:	2a24      	cmp	r2, #36	; 0x24
 80065f2:	bf01      	itttt	eq
 80065f4:	6922      	ldreq	r2, [r4, #16]
 80065f6:	61ba      	streq	r2, [r7, #24]
 80065f8:	6961      	ldreq	r1, [r4, #20]
 80065fa:	61f9      	streq	r1, [r7, #28]
 80065fc:	bf19      	ittee	ne
 80065fe:	f107 0218 	addne.w	r2, r7, #24
 8006602:	3410      	addne	r4, #16
 8006604:	f107 0220 	addeq.w	r2, r7, #32
 8006608:	3418      	addeq	r4, #24
 800660a:	e000      	b.n	800660e <_realloc_r+0x13e>
 800660c:	4632      	mov	r2, r6
 800660e:	6821      	ldr	r1, [r4, #0]
 8006610:	6011      	str	r1, [r2, #0]
 8006612:	6861      	ldr	r1, [r4, #4]
 8006614:	6051      	str	r1, [r2, #4]
 8006616:	68a1      	ldr	r1, [r4, #8]
 8006618:	6091      	str	r1, [r2, #8]
 800661a:	e005      	b.n	8006628 <_realloc_r+0x158>
 800661c:	4621      	mov	r1, r4
 800661e:	4630      	mov	r0, r6
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	f7ff fc63 	bl	8005eec <memmove>
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	eb07 0208 	add.w	r2, r7, r8
 800662c:	ebc8 0a0a 	rsb	sl, r8, sl
 8006630:	609a      	str	r2, [r3, #8]
 8006632:	f04a 0301 	orr.w	r3, sl, #1
 8006636:	6053      	str	r3, [r2, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	ea43 0308 	orr.w	r3, r3, r8
 8006642:	607b      	str	r3, [r7, #4]
 8006644:	e0b6      	b.n	80067b4 <_realloc_r+0x2e4>
 8006646:	45d0      	cmp	r8, sl
 8006648:	dc35      	bgt.n	80066b6 <_realloc_r+0x1e6>
 800664a:	68cb      	ldr	r3, [r1, #12]
 800664c:	688a      	ldr	r2, [r1, #8]
 800664e:	4638      	mov	r0, r7
 8006650:	60d3      	str	r3, [r2, #12]
 8006652:	609a      	str	r2, [r3, #8]
 8006654:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	60d3      	str	r3, [r2, #12]
 800665c:	609a      	str	r2, [r3, #8]
 800665e:	1f2a      	subs	r2, r5, #4
 8006660:	2a24      	cmp	r2, #36	; 0x24
 8006662:	d823      	bhi.n	80066ac <_realloc_r+0x1dc>
 8006664:	2a13      	cmp	r2, #19
 8006666:	d91a      	bls.n	800669e <_realloc_r+0x1ce>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	60bb      	str	r3, [r7, #8]
 800666c:	6863      	ldr	r3, [r4, #4]
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	2a1b      	cmp	r2, #27
 8006672:	d803      	bhi.n	800667c <_realloc_r+0x1ac>
 8006674:	f107 0010 	add.w	r0, r7, #16
 8006678:	3408      	adds	r4, #8
 800667a:	e010      	b.n	800669e <_realloc_r+0x1ce>
 800667c:	68a3      	ldr	r3, [r4, #8]
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	68e3      	ldr	r3, [r4, #12]
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	2a24      	cmp	r2, #36	; 0x24
 8006686:	bf01      	itttt	eq
 8006688:	6923      	ldreq	r3, [r4, #16]
 800668a:	61bb      	streq	r3, [r7, #24]
 800668c:	6963      	ldreq	r3, [r4, #20]
 800668e:	61fb      	streq	r3, [r7, #28]
 8006690:	bf19      	ittee	ne
 8006692:	f107 0018 	addne.w	r0, r7, #24
 8006696:	3410      	addne	r4, #16
 8006698:	f107 0020 	addeq.w	r0, r7, #32
 800669c:	3418      	addeq	r4, #24
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	6003      	str	r3, [r0, #0]
 80066a2:	6863      	ldr	r3, [r4, #4]
 80066a4:	6043      	str	r3, [r0, #4]
 80066a6:	68a3      	ldr	r3, [r4, #8]
 80066a8:	6083      	str	r3, [r0, #8]
 80066aa:	e002      	b.n	80066b2 <_realloc_r+0x1e2>
 80066ac:	4621      	mov	r1, r4
 80066ae:	f7ff fc1d 	bl	8005eec <memmove>
 80066b2:	4655      	mov	r5, sl
 80066b4:	e02e      	b.n	8006714 <_realloc_r+0x244>
 80066b6:	45b0      	cmp	r8, r6
 80066b8:	dc32      	bgt.n	8006720 <_realloc_r+0x250>
 80066ba:	4638      	mov	r0, r7
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80066c2:	60d3      	str	r3, [r2, #12]
 80066c4:	609a      	str	r2, [r3, #8]
 80066c6:	1f2a      	subs	r2, r5, #4
 80066c8:	2a24      	cmp	r2, #36	; 0x24
 80066ca:	d825      	bhi.n	8006718 <_realloc_r+0x248>
 80066cc:	2a13      	cmp	r2, #19
 80066ce:	d91a      	bls.n	8006706 <_realloc_r+0x236>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	60bb      	str	r3, [r7, #8]
 80066d4:	6863      	ldr	r3, [r4, #4]
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	2a1b      	cmp	r2, #27
 80066da:	d803      	bhi.n	80066e4 <_realloc_r+0x214>
 80066dc:	f107 0010 	add.w	r0, r7, #16
 80066e0:	3408      	adds	r4, #8
 80066e2:	e010      	b.n	8006706 <_realloc_r+0x236>
 80066e4:	68a3      	ldr	r3, [r4, #8]
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	68e3      	ldr	r3, [r4, #12]
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	2a24      	cmp	r2, #36	; 0x24
 80066ee:	bf01      	itttt	eq
 80066f0:	6923      	ldreq	r3, [r4, #16]
 80066f2:	61bb      	streq	r3, [r7, #24]
 80066f4:	6963      	ldreq	r3, [r4, #20]
 80066f6:	61fb      	streq	r3, [r7, #28]
 80066f8:	bf19      	ittee	ne
 80066fa:	f107 0018 	addne.w	r0, r7, #24
 80066fe:	3410      	addne	r4, #16
 8006700:	f107 0020 	addeq.w	r0, r7, #32
 8006704:	3418      	addeq	r4, #24
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	6003      	str	r3, [r0, #0]
 800670a:	6863      	ldr	r3, [r4, #4]
 800670c:	6043      	str	r3, [r0, #4]
 800670e:	68a3      	ldr	r3, [r4, #8]
 8006710:	6083      	str	r3, [r0, #8]
 8006712:	4635      	mov	r5, r6
 8006714:	46bb      	mov	fp, r7
 8006716:	e055      	b.n	80067c4 <_realloc_r+0x2f4>
 8006718:	4621      	mov	r1, r4
 800671a:	f7ff fbe7 	bl	8005eec <memmove>
 800671e:	e7f8      	b.n	8006712 <_realloc_r+0x242>
 8006720:	4611      	mov	r1, r2
 8006722:	4648      	mov	r0, r9
 8006724:	f7fc fdd2 	bl	80032cc <_malloc_r>
 8006728:	4606      	mov	r6, r0
 800672a:	2800      	cmp	r0, #0
 800672c:	d042      	beq.n	80067b4 <_realloc_r+0x2e4>
 800672e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	f1a0 0208 	sub.w	r2, r0, #8
 800673a:	445b      	add	r3, fp
 800673c:	429a      	cmp	r2, r3
 800673e:	d105      	bne.n	800674c <_realloc_r+0x27c>
 8006740:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006744:	f023 0303 	bic.w	r3, r3, #3
 8006748:	441d      	add	r5, r3
 800674a:	e03b      	b.n	80067c4 <_realloc_r+0x2f4>
 800674c:	1f2a      	subs	r2, r5, #4
 800674e:	2a24      	cmp	r2, #36	; 0x24
 8006750:	d829      	bhi.n	80067a6 <_realloc_r+0x2d6>
 8006752:	2a13      	cmp	r2, #19
 8006754:	d91e      	bls.n	8006794 <_realloc_r+0x2c4>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	6003      	str	r3, [r0, #0]
 800675a:	6863      	ldr	r3, [r4, #4]
 800675c:	6043      	str	r3, [r0, #4]
 800675e:	2a1b      	cmp	r2, #27
 8006760:	d804      	bhi.n	800676c <_realloc_r+0x29c>
 8006762:	f100 0308 	add.w	r3, r0, #8
 8006766:	f104 0208 	add.w	r2, r4, #8
 800676a:	e015      	b.n	8006798 <_realloc_r+0x2c8>
 800676c:	68a3      	ldr	r3, [r4, #8]
 800676e:	6083      	str	r3, [r0, #8]
 8006770:	68e3      	ldr	r3, [r4, #12]
 8006772:	60c3      	str	r3, [r0, #12]
 8006774:	2a24      	cmp	r2, #36	; 0x24
 8006776:	bf01      	itttt	eq
 8006778:	6923      	ldreq	r3, [r4, #16]
 800677a:	6103      	streq	r3, [r0, #16]
 800677c:	6961      	ldreq	r1, [r4, #20]
 800677e:	6141      	streq	r1, [r0, #20]
 8006780:	bf19      	ittee	ne
 8006782:	f100 0310 	addne.w	r3, r0, #16
 8006786:	f104 0210 	addne.w	r2, r4, #16
 800678a:	f100 0318 	addeq.w	r3, r0, #24
 800678e:	f104 0218 	addeq.w	r2, r4, #24
 8006792:	e001      	b.n	8006798 <_realloc_r+0x2c8>
 8006794:	4603      	mov	r3, r0
 8006796:	4622      	mov	r2, r4
 8006798:	6811      	ldr	r1, [r2, #0]
 800679a:	6019      	str	r1, [r3, #0]
 800679c:	6851      	ldr	r1, [r2, #4]
 800679e:	6059      	str	r1, [r3, #4]
 80067a0:	6892      	ldr	r2, [r2, #8]
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	e002      	b.n	80067ac <_realloc_r+0x2dc>
 80067a6:	4621      	mov	r1, r4
 80067a8:	f7ff fba0 	bl	8005eec <memmove>
 80067ac:	4621      	mov	r1, r4
 80067ae:	4648      	mov	r0, r9
 80067b0:	f7ff f900 	bl	80059b4 <_free_r>
 80067b4:	4648      	mov	r0, r9
 80067b6:	f7fc ffbd 	bl	8003734 <__malloc_unlock>
 80067ba:	4630      	mov	r0, r6
 80067bc:	e02d      	b.n	800681a <_realloc_r+0x34a>
 80067be:	bf00      	nop
 80067c0:	20000100 	.word	0x20000100
 80067c4:	ebc8 0205 	rsb	r2, r8, r5
 80067c8:	2a0f      	cmp	r2, #15
 80067ca:	f8db 3004 	ldr.w	r3, [fp, #4]
 80067ce:	d914      	bls.n	80067fa <_realloc_r+0x32a>
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	eb0b 0108 	add.w	r1, fp, r8
 80067d8:	ea43 0308 	orr.w	r3, r3, r8
 80067dc:	f8cb 3004 	str.w	r3, [fp, #4]
 80067e0:	f042 0301 	orr.w	r3, r2, #1
 80067e4:	440a      	add	r2, r1
 80067e6:	604b      	str	r3, [r1, #4]
 80067e8:	6853      	ldr	r3, [r2, #4]
 80067ea:	f043 0301 	orr.w	r3, r3, #1
 80067ee:	6053      	str	r3, [r2, #4]
 80067f0:	3108      	adds	r1, #8
 80067f2:	4648      	mov	r0, r9
 80067f4:	f7ff f8de 	bl	80059b4 <_free_r>
 80067f8:	e00a      	b.n	8006810 <_realloc_r+0x340>
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	432b      	orrs	r3, r5
 8006800:	eb0b 0205 	add.w	r2, fp, r5
 8006804:	f8cb 3004 	str.w	r3, [fp, #4]
 8006808:	6853      	ldr	r3, [r2, #4]
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	6053      	str	r3, [r2, #4]
 8006810:	4648      	mov	r0, r9
 8006812:	f7fc ff8f 	bl	8003734 <__malloc_unlock>
 8006816:	f10b 0008 	add.w	r0, fp, #8
 800681a:	b003      	add	sp, #12
 800681c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006820 <__sread>:
 8006820:	b510      	push	{r4, lr}
 8006822:	460c      	mov	r4, r1
 8006824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006828:	f000 f9a4 	bl	8006b74 <_read_r>
 800682c:	2800      	cmp	r0, #0
 800682e:	bfab      	itete	ge
 8006830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006832:	89a3      	ldrhlt	r3, [r4, #12]
 8006834:	181b      	addge	r3, r3, r0
 8006836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800683a:	bfac      	ite	ge
 800683c:	6563      	strge	r3, [r4, #84]	; 0x54
 800683e:	81a3      	strhlt	r3, [r4, #12]
 8006840:	bd10      	pop	{r4, pc}

08006842 <__swrite>:
 8006842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006846:	461f      	mov	r7, r3
 8006848:	898b      	ldrh	r3, [r1, #12]
 800684a:	05db      	lsls	r3, r3, #23
 800684c:	4605      	mov	r5, r0
 800684e:	460c      	mov	r4, r1
 8006850:	4616      	mov	r6, r2
 8006852:	d505      	bpl.n	8006860 <__swrite+0x1e>
 8006854:	2302      	movs	r3, #2
 8006856:	2200      	movs	r2, #0
 8006858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685c:	f000 f978 	bl	8006b50 <_lseek_r>
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800686a:	81a3      	strh	r3, [r4, #12]
 800686c:	4632      	mov	r2, r6
 800686e:	463b      	mov	r3, r7
 8006870:	4628      	mov	r0, r5
 8006872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006876:	f000 b8a7 	b.w	80069c8 <_write_r>

0800687a <__sseek>:
 800687a:	b510      	push	{r4, lr}
 800687c:	460c      	mov	r4, r1
 800687e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006882:	f000 f965 	bl	8006b50 <_lseek_r>
 8006886:	1c43      	adds	r3, r0, #1
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	bf15      	itete	ne
 800688c:	6560      	strne	r0, [r4, #84]	; 0x54
 800688e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006896:	81a3      	strheq	r3, [r4, #12]
 8006898:	bf18      	it	ne
 800689a:	81a3      	strhne	r3, [r4, #12]
 800689c:	bd10      	pop	{r4, pc}

0800689e <__sclose>:
 800689e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a2:	f000 b8d1 	b.w	8006a48 <_close_r>
	...

080068a8 <__swbuf_r>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	460f      	mov	r7, r1
 80068ac:	4614      	mov	r4, r2
 80068ae:	4606      	mov	r6, r0
 80068b0:	b118      	cbz	r0, 80068ba <__swbuf_r+0x12>
 80068b2:	6983      	ldr	r3, [r0, #24]
 80068b4:	b90b      	cbnz	r3, 80068ba <__swbuf_r+0x12>
 80068b6:	f7fe ff65 	bl	8005784 <__sinit>
 80068ba:	4b27      	ldr	r3, [pc, #156]	; (8006958 <__swbuf_r+0xb0>)
 80068bc:	429c      	cmp	r4, r3
 80068be:	d101      	bne.n	80068c4 <__swbuf_r+0x1c>
 80068c0:	6874      	ldr	r4, [r6, #4]
 80068c2:	e008      	b.n	80068d6 <__swbuf_r+0x2e>
 80068c4:	4b25      	ldr	r3, [pc, #148]	; (800695c <__swbuf_r+0xb4>)
 80068c6:	429c      	cmp	r4, r3
 80068c8:	d101      	bne.n	80068ce <__swbuf_r+0x26>
 80068ca:	68b4      	ldr	r4, [r6, #8]
 80068cc:	e003      	b.n	80068d6 <__swbuf_r+0x2e>
 80068ce:	4b24      	ldr	r3, [pc, #144]	; (8006960 <__swbuf_r+0xb8>)
 80068d0:	429c      	cmp	r4, r3
 80068d2:	bf08      	it	eq
 80068d4:	68f4      	ldreq	r4, [r6, #12]
 80068d6:	69a3      	ldr	r3, [r4, #24]
 80068d8:	60a3      	str	r3, [r4, #8]
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	0719      	lsls	r1, r3, #28
 80068de:	d50e      	bpl.n	80068fe <__swbuf_r+0x56>
 80068e0:	6923      	ldr	r3, [r4, #16]
 80068e2:	b163      	cbz	r3, 80068fe <__swbuf_r+0x56>
 80068e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e8:	049a      	lsls	r2, r3, #18
 80068ea:	b2fd      	uxtb	r5, r7
 80068ec:	d410      	bmi.n	8006910 <__swbuf_r+0x68>
 80068ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068f2:	81a3      	strh	r3, [r4, #12]
 80068f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068fa:	6663      	str	r3, [r4, #100]	; 0x64
 80068fc:	e008      	b.n	8006910 <__swbuf_r+0x68>
 80068fe:	4621      	mov	r1, r4
 8006900:	4630      	mov	r0, r6
 8006902:	f7fd ffa5 	bl	8004850 <__swsetup_r>
 8006906:	2800      	cmp	r0, #0
 8006908:	d0ec      	beq.n	80068e4 <__swbuf_r+0x3c>
 800690a:	f04f 30ff 	mov.w	r0, #4294967295
 800690e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	6920      	ldr	r0, [r4, #16]
 8006914:	1a18      	subs	r0, r3, r0
 8006916:	6963      	ldr	r3, [r4, #20]
 8006918:	4298      	cmp	r0, r3
 800691a:	db05      	blt.n	8006928 <__swbuf_r+0x80>
 800691c:	4621      	mov	r1, r4
 800691e:	4630      	mov	r0, r6
 8006920:	f7fe fec6 	bl	80056b0 <_fflush_r>
 8006924:	2800      	cmp	r0, #0
 8006926:	d1f0      	bne.n	800690a <__swbuf_r+0x62>
 8006928:	68a3      	ldr	r3, [r4, #8]
 800692a:	3b01      	subs	r3, #1
 800692c:	60a3      	str	r3, [r4, #8]
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	6022      	str	r2, [r4, #0]
 8006934:	701f      	strb	r7, [r3, #0]
 8006936:	6962      	ldr	r2, [r4, #20]
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <__swbuf_r+0xa0>
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	07db      	lsls	r3, r3, #31
 8006942:	d507      	bpl.n	8006954 <__swbuf_r+0xac>
 8006944:	2d0a      	cmp	r5, #10
 8006946:	d105      	bne.n	8006954 <__swbuf_r+0xac>
 8006948:	4621      	mov	r1, r4
 800694a:	4630      	mov	r0, r6
 800694c:	f7fe feb0 	bl	80056b0 <_fflush_r>
 8006950:	2800      	cmp	r0, #0
 8006952:	d1da      	bne.n	800690a <__swbuf_r+0x62>
 8006954:	4628      	mov	r0, r5
 8006956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006958:	08007114 	.word	0x08007114
 800695c:	08007134 	.word	0x08007134
 8006960:	08007154 	.word	0x08007154

08006964 <_wcrtomb_r>:
 8006964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006968:	461d      	mov	r5, r3
 800696a:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <_wcrtomb_r+0x44>)
 800696c:	b086      	sub	sp, #24
 800696e:	4604      	mov	r4, r0
 8006970:	4690      	mov	r8, r2
 8006972:	460e      	mov	r6, r1
 8006974:	681f      	ldr	r7, [r3, #0]
 8006976:	b931      	cbnz	r1, 8006986 <_wcrtomb_r+0x22>
 8006978:	f7ff fa42 	bl	8005e00 <__locale_charset>
 800697c:	9500      	str	r5, [sp, #0]
 800697e:	4603      	mov	r3, r0
 8006980:	4632      	mov	r2, r6
 8006982:	a903      	add	r1, sp, #12
 8006984:	e005      	b.n	8006992 <_wcrtomb_r+0x2e>
 8006986:	f7ff fa3b 	bl	8005e00 <__locale_charset>
 800698a:	9500      	str	r5, [sp, #0]
 800698c:	4603      	mov	r3, r0
 800698e:	4642      	mov	r2, r8
 8006990:	4631      	mov	r1, r6
 8006992:	4620      	mov	r0, r4
 8006994:	47b8      	blx	r7
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	bf01      	itttt	eq
 800699a:	2300      	moveq	r3, #0
 800699c:	602b      	streq	r3, [r5, #0]
 800699e:	238a      	moveq	r3, #138	; 0x8a
 80069a0:	6023      	streq	r3, [r4, #0]
 80069a2:	b006      	add	sp, #24
 80069a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a8:	2000056c 	.word	0x2000056c

080069ac <__ascii_wctomb>:
 80069ac:	b149      	cbz	r1, 80069c2 <__ascii_wctomb+0x16>
 80069ae:	2aff      	cmp	r2, #255	; 0xff
 80069b0:	bf85      	ittet	hi
 80069b2:	238a      	movhi	r3, #138	; 0x8a
 80069b4:	6003      	strhi	r3, [r0, #0]
 80069b6:	700a      	strbls	r2, [r1, #0]
 80069b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80069bc:	bf98      	it	ls
 80069be:	2001      	movls	r0, #1
 80069c0:	4770      	bx	lr
 80069c2:	4608      	mov	r0, r1
 80069c4:	4770      	bx	lr
	...

080069c8 <_write_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4c07      	ldr	r4, [pc, #28]	; (80069e8 <_write_r+0x20>)
 80069cc:	4605      	mov	r5, r0
 80069ce:	4608      	mov	r0, r1
 80069d0:	4611      	mov	r1, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	6022      	str	r2, [r4, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f7fc f868 	bl	8002aac <_write>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_write_r+0x1e>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_write_r+0x1e>
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	20000748 	.word	0x20000748

080069ec <_calloc_r>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	4351      	muls	r1, r2
 80069f0:	f7fc fc6c 	bl	80032cc <_malloc_r>
 80069f4:	4604      	mov	r4, r0
 80069f6:	b320      	cbz	r0, 8006a42 <_calloc_r+0x56>
 80069f8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80069fc:	f022 0203 	bic.w	r2, r2, #3
 8006a00:	3a04      	subs	r2, #4
 8006a02:	2a24      	cmp	r2, #36	; 0x24
 8006a04:	d81a      	bhi.n	8006a3c <_calloc_r+0x50>
 8006a06:	2a13      	cmp	r2, #19
 8006a08:	d912      	bls.n	8006a30 <_calloc_r+0x44>
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	2a1b      	cmp	r2, #27
 8006a0e:	6001      	str	r1, [r0, #0]
 8006a10:	6041      	str	r1, [r0, #4]
 8006a12:	d802      	bhi.n	8006a1a <_calloc_r+0x2e>
 8006a14:	f100 0308 	add.w	r3, r0, #8
 8006a18:	e00b      	b.n	8006a32 <_calloc_r+0x46>
 8006a1a:	2a24      	cmp	r2, #36	; 0x24
 8006a1c:	6081      	str	r1, [r0, #8]
 8006a1e:	60c1      	str	r1, [r0, #12]
 8006a20:	bf11      	iteee	ne
 8006a22:	f100 0310 	addne.w	r3, r0, #16
 8006a26:	6101      	streq	r1, [r0, #16]
 8006a28:	f100 0318 	addeq.w	r3, r0, #24
 8006a2c:	6141      	streq	r1, [r0, #20]
 8006a2e:	e000      	b.n	8006a32 <_calloc_r+0x46>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	605a      	str	r2, [r3, #4]
 8006a38:	609a      	str	r2, [r3, #8]
 8006a3a:	e002      	b.n	8006a42 <_calloc_r+0x56>
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	f7fc fe70 	bl	8003722 <memset>
 8006a42:	4620      	mov	r0, r4
 8006a44:	bd10      	pop	{r4, pc}
	...

08006a48 <_close_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4c06      	ldr	r4, [pc, #24]	; (8006a64 <_close_r+0x1c>)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4605      	mov	r5, r0
 8006a50:	4608      	mov	r0, r1
 8006a52:	6023      	str	r3, [r4, #0]
 8006a54:	f000 fa4c 	bl	8006ef0 <_close>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d102      	bne.n	8006a62 <_close_r+0x1a>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	b103      	cbz	r3, 8006a62 <_close_r+0x1a>
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	20000748 	.word	0x20000748

08006a68 <_fclose_r>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	b909      	cbnz	r1, 8006a74 <_fclose_r+0xc>
 8006a70:	2000      	movs	r0, #0
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
 8006a74:	b118      	cbz	r0, 8006a7e <_fclose_r+0x16>
 8006a76:	6983      	ldr	r3, [r0, #24]
 8006a78:	b90b      	cbnz	r3, 8006a7e <_fclose_r+0x16>
 8006a7a:	f7fe fe83 	bl	8005784 <__sinit>
 8006a7e:	4b20      	ldr	r3, [pc, #128]	; (8006b00 <_fclose_r+0x98>)
 8006a80:	429c      	cmp	r4, r3
 8006a82:	d101      	bne.n	8006a88 <_fclose_r+0x20>
 8006a84:	686c      	ldr	r4, [r5, #4]
 8006a86:	e008      	b.n	8006a9a <_fclose_r+0x32>
 8006a88:	4b1e      	ldr	r3, [pc, #120]	; (8006b04 <_fclose_r+0x9c>)
 8006a8a:	429c      	cmp	r4, r3
 8006a8c:	d101      	bne.n	8006a92 <_fclose_r+0x2a>
 8006a8e:	68ac      	ldr	r4, [r5, #8]
 8006a90:	e003      	b.n	8006a9a <_fclose_r+0x32>
 8006a92:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <_fclose_r+0xa0>)
 8006a94:	429c      	cmp	r4, r3
 8006a96:	bf08      	it	eq
 8006a98:	68ec      	ldreq	r4, [r5, #12]
 8006a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0e6      	beq.n	8006a70 <_fclose_r+0x8>
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f7fe fd73 	bl	8005590 <__sflush_r>
 8006aaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006aac:	4606      	mov	r6, r0
 8006aae:	b133      	cbz	r3, 8006abe <_fclose_r+0x56>
 8006ab0:	6a21      	ldr	r1, [r4, #32]
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	4798      	blx	r3
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	bfb8      	it	lt
 8006aba:	f04f 36ff 	movlt.w	r6, #4294967295
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	061b      	lsls	r3, r3, #24
 8006ac2:	d503      	bpl.n	8006acc <_fclose_r+0x64>
 8006ac4:	6921      	ldr	r1, [r4, #16]
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f7fe ff74 	bl	80059b4 <_free_r>
 8006acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ace:	b141      	cbz	r1, 8006ae2 <_fclose_r+0x7a>
 8006ad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad4:	4299      	cmp	r1, r3
 8006ad6:	d002      	beq.n	8006ade <_fclose_r+0x76>
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f7fe ff6b 	bl	80059b4 <_free_r>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6363      	str	r3, [r4, #52]	; 0x34
 8006ae2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006ae4:	b121      	cbz	r1, 8006af0 <_fclose_r+0x88>
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f7fe ff64 	bl	80059b4 <_free_r>
 8006aec:	2300      	movs	r3, #0
 8006aee:	64a3      	str	r3, [r4, #72]	; 0x48
 8006af0:	f7fe feb8 	bl	8005864 <__sfp_lock_acquire>
 8006af4:	2300      	movs	r3, #0
 8006af6:	81a3      	strh	r3, [r4, #12]
 8006af8:	f7fe feb5 	bl	8005866 <__sfp_lock_release>
 8006afc:	4630      	mov	r0, r6
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	08007114 	.word	0x08007114
 8006b04:	08007134 	.word	0x08007134
 8006b08:	08007154 	.word	0x08007154

08006b0c <_fstat_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4c07      	ldr	r4, [pc, #28]	; (8006b2c <_fstat_r+0x20>)
 8006b10:	2300      	movs	r3, #0
 8006b12:	4605      	mov	r5, r0
 8006b14:	4608      	mov	r0, r1
 8006b16:	4611      	mov	r1, r2
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	f000 f9f1 	bl	8006f00 <_fstat>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	d102      	bne.n	8006b28 <_fstat_r+0x1c>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	b103      	cbz	r3, 8006b28 <_fstat_r+0x1c>
 8006b26:	602b      	str	r3, [r5, #0]
 8006b28:	bd38      	pop	{r3, r4, r5, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000748 	.word	0x20000748

08006b30 <_isatty_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4c06      	ldr	r4, [pc, #24]	; (8006b4c <_isatty_r+0x1c>)
 8006b34:	2300      	movs	r3, #0
 8006b36:	4605      	mov	r5, r0
 8006b38:	4608      	mov	r0, r1
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	f000 f9e8 	bl	8006f10 <_isatty>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_isatty_r+0x1a>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_isatty_r+0x1a>
 8006b48:	602b      	str	r3, [r5, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	20000748 	.word	0x20000748

08006b50 <_lseek_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4c07      	ldr	r4, [pc, #28]	; (8006b70 <_lseek_r+0x20>)
 8006b54:	4605      	mov	r5, r0
 8006b56:	4608      	mov	r0, r1
 8006b58:	4611      	mov	r1, r2
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	6022      	str	r2, [r4, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f000 f9de 	bl	8006f20 <_lseek>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d102      	bne.n	8006b6e <_lseek_r+0x1e>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	b103      	cbz	r3, 8006b6e <_lseek_r+0x1e>
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	20000748 	.word	0x20000748

08006b74 <_read_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4c07      	ldr	r4, [pc, #28]	; (8006b94 <_read_r+0x20>)
 8006b78:	4605      	mov	r5, r0
 8006b7a:	4608      	mov	r0, r1
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	2200      	movs	r2, #0
 8006b80:	6022      	str	r2, [r4, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	f000 f9d4 	bl	8006f30 <_read>
 8006b88:	1c43      	adds	r3, r0, #1
 8006b8a:	d102      	bne.n	8006b92 <_read_r+0x1e>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	b103      	cbz	r3, 8006b92 <_read_r+0x1e>
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	bd38      	pop	{r3, r4, r5, pc}
 8006b94:	20000748 	.word	0x20000748

08006b98 <atan>:
 8006b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	ec55 4b10 	vmov	r4, r5, d0
 8006ba0:	4bc5      	ldr	r3, [pc, #788]	; (8006eb8 <atan+0x320>)
 8006ba2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006ba6:	429e      	cmp	r6, r3
 8006ba8:	46ab      	mov	fp, r5
 8006baa:	dd13      	ble.n	8006bd4 <atan+0x3c>
 8006bac:	4ac3      	ldr	r2, [pc, #780]	; (8006ebc <atan+0x324>)
 8006bae:	4296      	cmp	r6, r2
 8006bb0:	dc01      	bgt.n	8006bb6 <atan+0x1e>
 8006bb2:	d107      	bne.n	8006bc4 <atan+0x2c>
 8006bb4:	b134      	cbz	r4, 8006bc4 <atan+0x2c>
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	462b      	mov	r3, r5
 8006bba:	4620      	mov	r0, r4
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f7f9 fb65 	bl	800028c <__adddf3>
 8006bc2:	e13c      	b.n	8006e3e <atan+0x2a6>
 8006bc4:	f1bb 0f00 	cmp.w	fp, #0
 8006bc8:	f300 8133 	bgt.w	8006e32 <atan+0x29a>
 8006bcc:	a19e      	add	r1, pc, #632	; (adr r1, 8006e48 <atan+0x2b0>)
 8006bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd2:	e134      	b.n	8006e3e <atan+0x2a6>
 8006bd4:	4bba      	ldr	r3, [pc, #744]	; (8006ec0 <atan+0x328>)
 8006bd6:	429e      	cmp	r6, r3
 8006bd8:	dc14      	bgt.n	8006c04 <atan+0x6c>
 8006bda:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006bde:	429e      	cmp	r6, r3
 8006be0:	f300 8082 	bgt.w	8006ce8 <atan+0x150>
 8006be4:	a39a      	add	r3, pc, #616	; (adr r3, 8006e50 <atan+0x2b8>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	ee10 0a10 	vmov	r0, s0
 8006bee:	4629      	mov	r1, r5
 8006bf0:	f7f9 fb4c 	bl	800028c <__adddf3>
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	4bb3      	ldr	r3, [pc, #716]	; (8006ec4 <atan+0x32c>)
 8006bf8:	f7f9 ff8a 	bl	8000b10 <__aeabi_dcmpgt>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	f040 811c 	bne.w	8006e3a <atan+0x2a2>
 8006c02:	e071      	b.n	8006ce8 <atan+0x150>
 8006c04:	f000 f96c 	bl	8006ee0 <fabs>
 8006c08:	4baf      	ldr	r3, [pc, #700]	; (8006ec8 <atan+0x330>)
 8006c0a:	429e      	cmp	r6, r3
 8006c0c:	ec55 4b10 	vmov	r4, r5, d0
 8006c10:	dc3d      	bgt.n	8006c8e <atan+0xf6>
 8006c12:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006c16:	429e      	cmp	r6, r3
 8006c18:	dc1f      	bgt.n	8006c5a <atan+0xc2>
 8006c1a:	ee10 2a10 	vmov	r2, s0
 8006c1e:	ee10 0a10 	vmov	r0, s0
 8006c22:	462b      	mov	r3, r5
 8006c24:	4629      	mov	r1, r5
 8006c26:	f7f9 fb31 	bl	800028c <__adddf3>
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4ba5      	ldr	r3, [pc, #660]	; (8006ec4 <atan+0x32c>)
 8006c2e:	f7f9 fb2b 	bl	8000288 <__aeabi_dsub>
 8006c32:	2200      	movs	r2, #0
 8006c34:	4606      	mov	r6, r0
 8006c36:	460f      	mov	r7, r1
 8006c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f7f9 fb24 	bl	800028c <__adddf3>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 fdfa 	bl	8000844 <__aeabi_ddiv>
 8006c50:	f04f 0a00 	mov.w	sl, #0
 8006c54:	4604      	mov	r4, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	e048      	b.n	8006cec <atan+0x154>
 8006c5a:	ee10 0a10 	vmov	r0, s0
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4b98      	ldr	r3, [pc, #608]	; (8006ec4 <atan+0x32c>)
 8006c62:	4629      	mov	r1, r5
 8006c64:	f7f9 fb10 	bl	8000288 <__aeabi_dsub>
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	460f      	mov	r7, r1
 8006c6e:	4b95      	ldr	r3, [pc, #596]	; (8006ec4 <atan+0x32c>)
 8006c70:	4620      	mov	r0, r4
 8006c72:	4629      	mov	r1, r5
 8006c74:	f7f9 fb0a 	bl	800028c <__adddf3>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	4639      	mov	r1, r7
 8006c80:	f7f9 fde0 	bl	8000844 <__aeabi_ddiv>
 8006c84:	f04f 0a01 	mov.w	sl, #1
 8006c88:	4604      	mov	r4, r0
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	e02e      	b.n	8006cec <atan+0x154>
 8006c8e:	4b8f      	ldr	r3, [pc, #572]	; (8006ecc <atan+0x334>)
 8006c90:	429e      	cmp	r6, r3
 8006c92:	dc1d      	bgt.n	8006cd0 <atan+0x138>
 8006c94:	ee10 0a10 	vmov	r0, s0
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4b8d      	ldr	r3, [pc, #564]	; (8006ed0 <atan+0x338>)
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	f7f9 faf3 	bl	8000288 <__aeabi_dsub>
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	460f      	mov	r7, r1
 8006ca8:	4b89      	ldr	r3, [pc, #548]	; (8006ed0 <atan+0x338>)
 8006caa:	4620      	mov	r0, r4
 8006cac:	4629      	mov	r1, r5
 8006cae:	f7f9 fc9f 	bl	80005f0 <__aeabi_dmul>
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4b83      	ldr	r3, [pc, #524]	; (8006ec4 <atan+0x32c>)
 8006cb6:	f7f9 fae9 	bl	800028c <__adddf3>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	f7f9 fdbf 	bl	8000844 <__aeabi_ddiv>
 8006cc6:	f04f 0a02 	mov.w	sl, #2
 8006cca:	4604      	mov	r4, r0
 8006ccc:	460d      	mov	r5, r1
 8006cce:	e00d      	b.n	8006cec <atan+0x154>
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	ee10 2a10 	vmov	r2, s0
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	497e      	ldr	r1, [pc, #504]	; (8006ed4 <atan+0x33c>)
 8006cda:	f7f9 fdb3 	bl	8000844 <__aeabi_ddiv>
 8006cde:	f04f 0a03 	mov.w	sl, #3
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	460d      	mov	r5, r1
 8006ce6:	e001      	b.n	8006cec <atan+0x154>
 8006ce8:	f04f 3aff 	mov.w	sl, #4294967295
 8006cec:	4622      	mov	r2, r4
 8006cee:	462b      	mov	r3, r5
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	f7f9 fc7c 	bl	80005f0 <__aeabi_dmul>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4680      	mov	r8, r0
 8006cfe:	4689      	mov	r9, r1
 8006d00:	f7f9 fc76 	bl	80005f0 <__aeabi_dmul>
 8006d04:	a354      	add	r3, pc, #336	; (adr r3, 8006e58 <atan+0x2c0>)
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	460f      	mov	r7, r1
 8006d0e:	f7f9 fc6f 	bl	80005f0 <__aeabi_dmul>
 8006d12:	a353      	add	r3, pc, #332	; (adr r3, 8006e60 <atan+0x2c8>)
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f7f9 fab8 	bl	800028c <__adddf3>
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	463b      	mov	r3, r7
 8006d20:	f7f9 fc66 	bl	80005f0 <__aeabi_dmul>
 8006d24:	a350      	add	r3, pc, #320	; (adr r3, 8006e68 <atan+0x2d0>)
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	f7f9 faaf 	bl	800028c <__adddf3>
 8006d2e:	4632      	mov	r2, r6
 8006d30:	463b      	mov	r3, r7
 8006d32:	f7f9 fc5d 	bl	80005f0 <__aeabi_dmul>
 8006d36:	a34e      	add	r3, pc, #312	; (adr r3, 8006e70 <atan+0x2d8>)
 8006d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3c:	f7f9 faa6 	bl	800028c <__adddf3>
 8006d40:	4632      	mov	r2, r6
 8006d42:	463b      	mov	r3, r7
 8006d44:	f7f9 fc54 	bl	80005f0 <__aeabi_dmul>
 8006d48:	a34b      	add	r3, pc, #300	; (adr r3, 8006e78 <atan+0x2e0>)
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f7f9 fa9d 	bl	800028c <__adddf3>
 8006d52:	4632      	mov	r2, r6
 8006d54:	463b      	mov	r3, r7
 8006d56:	f7f9 fc4b 	bl	80005f0 <__aeabi_dmul>
 8006d5a:	a349      	add	r3, pc, #292	; (adr r3, 8006e80 <atan+0x2e8>)
 8006d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d60:	f7f9 fa94 	bl	800028c <__adddf3>
 8006d64:	4642      	mov	r2, r8
 8006d66:	464b      	mov	r3, r9
 8006d68:	f7f9 fc42 	bl	80005f0 <__aeabi_dmul>
 8006d6c:	a346      	add	r3, pc, #280	; (adr r3, 8006e88 <atan+0x2f0>)
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	4680      	mov	r8, r0
 8006d74:	4689      	mov	r9, r1
 8006d76:	4630      	mov	r0, r6
 8006d78:	4639      	mov	r1, r7
 8006d7a:	f7f9 fc39 	bl	80005f0 <__aeabi_dmul>
 8006d7e:	a344      	add	r3, pc, #272	; (adr r3, 8006e90 <atan+0x2f8>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	f7f9 fa80 	bl	8000288 <__aeabi_dsub>
 8006d88:	4632      	mov	r2, r6
 8006d8a:	463b      	mov	r3, r7
 8006d8c:	f7f9 fc30 	bl	80005f0 <__aeabi_dmul>
 8006d90:	a341      	add	r3, pc, #260	; (adr r3, 8006e98 <atan+0x300>)
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f7f9 fa77 	bl	8000288 <__aeabi_dsub>
 8006d9a:	4632      	mov	r2, r6
 8006d9c:	463b      	mov	r3, r7
 8006d9e:	f7f9 fc27 	bl	80005f0 <__aeabi_dmul>
 8006da2:	a33f      	add	r3, pc, #252	; (adr r3, 8006ea0 <atan+0x308>)
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f7f9 fa6e 	bl	8000288 <__aeabi_dsub>
 8006dac:	4632      	mov	r2, r6
 8006dae:	463b      	mov	r3, r7
 8006db0:	f7f9 fc1e 	bl	80005f0 <__aeabi_dmul>
 8006db4:	a33c      	add	r3, pc, #240	; (adr r3, 8006ea8 <atan+0x310>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	f7f9 fa65 	bl	8000288 <__aeabi_dsub>
 8006dbe:	4632      	mov	r2, r6
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	f7f9 fc15 	bl	80005f0 <__aeabi_dmul>
 8006dc6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	d10e      	bne.n	8006dee <atan+0x256>
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	f7f9 fa5a 	bl	800028c <__adddf3>
 8006dd8:	4622      	mov	r2, r4
 8006dda:	462b      	mov	r3, r5
 8006ddc:	f7f9 fc08 	bl	80005f0 <__aeabi_dmul>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4620      	mov	r0, r4
 8006de6:	4629      	mov	r1, r5
 8006de8:	f7f9 fa4e 	bl	8000288 <__aeabi_dsub>
 8006dec:	e027      	b.n	8006e3e <atan+0x2a6>
 8006dee:	4640      	mov	r0, r8
 8006df0:	4649      	mov	r1, r9
 8006df2:	f7f9 fa4b 	bl	800028c <__adddf3>
 8006df6:	4622      	mov	r2, r4
 8006df8:	462b      	mov	r3, r5
 8006dfa:	f7f9 fbf9 	bl	80005f0 <__aeabi_dmul>
 8006dfe:	4e36      	ldr	r6, [pc, #216]	; (8006ed8 <atan+0x340>)
 8006e00:	4b36      	ldr	r3, [pc, #216]	; (8006edc <atan+0x344>)
 8006e02:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006e06:	4456      	add	r6, sl
 8006e08:	449a      	add	sl, r3
 8006e0a:	e9da 2300 	ldrd	r2, r3, [sl]
 8006e0e:	f7f9 fa3b 	bl	8000288 <__aeabi_dsub>
 8006e12:	4622      	mov	r2, r4
 8006e14:	462b      	mov	r3, r5
 8006e16:	f7f9 fa37 	bl	8000288 <__aeabi_dsub>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006e22:	f7f9 fa31 	bl	8000288 <__aeabi_dsub>
 8006e26:	f1bb 0f00 	cmp.w	fp, #0
 8006e2a:	da08      	bge.n	8006e3e <atan+0x2a6>
 8006e2c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006e30:	e005      	b.n	8006e3e <atan+0x2a6>
 8006e32:	a11f      	add	r1, pc, #124	; (adr r1, 8006eb0 <atan+0x318>)
 8006e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e38:	e001      	b.n	8006e3e <atan+0x2a6>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	ec41 0b10 	vmov	d0, r0, r1
 8006e42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e46:	bf00      	nop
 8006e48:	54442d18 	.word	0x54442d18
 8006e4c:	bff921fb 	.word	0xbff921fb
 8006e50:	8800759c 	.word	0x8800759c
 8006e54:	7e37e43c 	.word	0x7e37e43c
 8006e58:	e322da11 	.word	0xe322da11
 8006e5c:	3f90ad3a 	.word	0x3f90ad3a
 8006e60:	24760deb 	.word	0x24760deb
 8006e64:	3fa97b4b 	.word	0x3fa97b4b
 8006e68:	a0d03d51 	.word	0xa0d03d51
 8006e6c:	3fb10d66 	.word	0x3fb10d66
 8006e70:	c54c206e 	.word	0xc54c206e
 8006e74:	3fb745cd 	.word	0x3fb745cd
 8006e78:	920083ff 	.word	0x920083ff
 8006e7c:	3fc24924 	.word	0x3fc24924
 8006e80:	5555550d 	.word	0x5555550d
 8006e84:	3fd55555 	.word	0x3fd55555
 8006e88:	2c6a6c2f 	.word	0x2c6a6c2f
 8006e8c:	bfa2b444 	.word	0xbfa2b444
 8006e90:	52defd9a 	.word	0x52defd9a
 8006e94:	3fadde2d 	.word	0x3fadde2d
 8006e98:	af749a6d 	.word	0xaf749a6d
 8006e9c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006ea0:	fe231671 	.word	0xfe231671
 8006ea4:	3fbc71c6 	.word	0x3fbc71c6
 8006ea8:	9998ebc4 	.word	0x9998ebc4
 8006eac:	3fc99999 	.word	0x3fc99999
 8006eb0:	54442d18 	.word	0x54442d18
 8006eb4:	3ff921fb 	.word	0x3ff921fb
 8006eb8:	440fffff 	.word	0x440fffff
 8006ebc:	7ff00000 	.word	0x7ff00000
 8006ec0:	3fdbffff 	.word	0x3fdbffff
 8006ec4:	3ff00000 	.word	0x3ff00000
 8006ec8:	3ff2ffff 	.word	0x3ff2ffff
 8006ecc:	40037fff 	.word	0x40037fff
 8006ed0:	3ff80000 	.word	0x3ff80000
 8006ed4:	bff00000 	.word	0xbff00000
 8006ed8:	080072a0 	.word	0x080072a0
 8006edc:	08007280 	.word	0x08007280

08006ee0 <fabs>:
 8006ee0:	ec53 2b10 	vmov	r2, r3, d0
 8006ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ee8:	ec43 2b10 	vmov	d0, r2, r3
 8006eec:	4770      	bx	lr
	...

08006ef0 <_close>:
 8006ef0:	4b02      	ldr	r3, [pc, #8]	; (8006efc <_close+0xc>)
 8006ef2:	2258      	movs	r2, #88	; 0x58
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8006efa:	4770      	bx	lr
 8006efc:	20000748 	.word	0x20000748

08006f00 <_fstat>:
 8006f00:	4b02      	ldr	r3, [pc, #8]	; (8006f0c <_fstat+0xc>)
 8006f02:	2258      	movs	r2, #88	; 0x58
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0a:	4770      	bx	lr
 8006f0c:	20000748 	.word	0x20000748

08006f10 <_isatty>:
 8006f10:	4b02      	ldr	r3, [pc, #8]	; (8006f1c <_isatty+0xc>)
 8006f12:	2258      	movs	r2, #88	; 0x58
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	2000      	movs	r0, #0
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000748 	.word	0x20000748

08006f20 <_lseek>:
 8006f20:	4b02      	ldr	r3, [pc, #8]	; (8006f2c <_lseek+0xc>)
 8006f22:	2258      	movs	r2, #88	; 0x58
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2a:	4770      	bx	lr
 8006f2c:	20000748 	.word	0x20000748

08006f30 <_read>:
 8006f30:	4b02      	ldr	r3, [pc, #8]	; (8006f3c <_read+0xc>)
 8006f32:	2258      	movs	r2, #88	; 0x58
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3a:	4770      	bx	lr
 8006f3c:	20000748 	.word	0x20000748

08006f40 <_sbrk>:
 8006f40:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <_sbrk+0x14>)
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	4602      	mov	r2, r0
 8006f46:	b909      	cbnz	r1, 8006f4c <_sbrk+0xc>
 8006f48:	4903      	ldr	r1, [pc, #12]	; (8006f58 <_sbrk+0x18>)
 8006f4a:	6019      	str	r1, [r3, #0]
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	4402      	add	r2, r0
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	4770      	bx	lr
 8006f54:	200005d4 	.word	0x200005d4
 8006f58:	2000074c 	.word	0x2000074c

08006f5c <_init>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	bf00      	nop
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr

08006f68 <_fini>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr
