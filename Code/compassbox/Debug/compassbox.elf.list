
compassbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa0  0800c668  0800c668  0001c668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d108  0800d108  0001d108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d110  0800d110  0001d110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d114  0800d114  0001d114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000594  20000000  0800d118  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  20000594  0800d6ac  00020594  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000770  0800d6ac  00020770  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020594  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000785a  00000000  00000000  000205c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00015ec5  00000000  00000000  00027e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003394  00000000  00000000  0003dce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dd8  00000000  00000000  00041078  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001108  00000000  00000000  00041e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000d30c  00000000  00000000  00042f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004711  00000000  00000000  00050264  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00054975  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000040fc  00000000  00000000  000549f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         000000cc  00000000  00000000  00058af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001c7  00000000  00000000  00058bbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000594 	.word	0x20000594
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c650 	.word	0x0800c650

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000598 	.word	0x20000598
 80001cc:	0800c650 	.word	0x0800c650

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b97e 	b.w	8000ef4 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460e      	mov	r6, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9d08      	ldr	r5, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d150      	bne.n	8000cc2 <__udivmoddi4+0xb2>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96c      	bls.n	8000d00 <__udivmoddi4+0xf0>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0420 	rsb	r4, lr, #32
 8000c34:	fa20 f404 	lsr.w	r4, r0, r4
 8000c38:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c3c:	ea44 0c06 	orr.w	ip, r4, r6
 8000c40:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c4c:	0c22      	lsrs	r2, r4, #16
 8000c4e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c52:	fa1f f887 	uxth.w	r8, r7
 8000c56:	fb09 c610 	mls	r6, r9, r0, ip
 8000c5a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c5e:	fb00 f308 	mul.w	r3, r0, r8
 8000c62:	42b3      	cmp	r3, r6
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x6a>
 8000c66:	19f6      	adds	r6, r6, r7
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	f080 8122 	bcs.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c70:	42b3      	cmp	r3, r6
 8000c72:	f240 811f 	bls.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443e      	add	r6, r7
 8000c7a:	1af6      	subs	r6, r6, r3
 8000c7c:	b2a2      	uxth	r2, r4
 8000c7e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c82:	fb09 6613 	mls	r6, r9, r3, r6
 8000c86:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c8a:	fb03 f808 	mul.w	r8, r3, r8
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x96>
 8000c92:	19e4      	adds	r4, r4, r7
 8000c94:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c98:	f080 810a 	bcs.w	8000eb0 <__udivmoddi4+0x2a0>
 8000c9c:	45a0      	cmp	r8, r4
 8000c9e:	f240 8107 	bls.w	8000eb0 <__udivmoddi4+0x2a0>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ebc8 0404 	rsb	r4, r8, r4
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d062      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb4:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb8:	2300      	movs	r3, #0
 8000cba:	602c      	str	r4, [r5, #0]
 8000cbc:	606b      	str	r3, [r5, #4]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0xc6>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d055      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e885 0041 	stmia.w	r5, {r0, r6}
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x1f0>
 8000ce0:	42b3      	cmp	r3, r6
 8000ce2:	d302      	bcc.n	8000cea <__udivmoddi4+0xda>
 8000ce4:	4282      	cmp	r2, r0
 8000ce6:	f200 80f8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000cea:	1a84      	subs	r4, r0, r2
 8000cec:	eb66 0603 	sbc.w	r6, r6, r3
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d040      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cf8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d00:	b912      	cbnz	r2, 8000d08 <__udivmoddi4+0xf8>
 8000d02:	2701      	movs	r7, #1
 8000d04:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d08:	fab7 fe87 	clz	lr, r7
 8000d0c:	f1be 0f00 	cmp.w	lr, #0
 8000d10:	d135      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d12:	1bf3      	subs	r3, r6, r7
 8000d14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb08 3610 	mls	r6, r8, r0, r3
 8000d28:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d2c:	fb0c f300 	mul.w	r3, ip, r0
 8000d30:	42b3      	cmp	r3, r6
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19f6      	adds	r6, r6, r7
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42b3      	cmp	r3, r6
 8000d3e:	f200 80ce 	bhi.w	8000ede <__udivmoddi4+0x2ce>
 8000d42:	4610      	mov	r0, r2
 8000d44:	1af6      	subs	r6, r6, r3
 8000d46:	b2a2      	uxth	r2, r4
 8000d48:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d4c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d50:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d54:	fb0c fc03 	mul.w	ip, ip, r3
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b5 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	ebcc 0404 	rsb	r4, ip, r4
 8000d70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d74:	e79c      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000d76:	4629      	mov	r1, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0120 	rsb	r1, lr, #32
 8000d82:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d92:	40ce      	lsrs	r6, r1
 8000d94:	ea49 0903 	orr.w	r9, r9, r3
 8000d98:	fbb6 faf8 	udiv	sl, r6, r8
 8000d9c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000da0:	fb08 661a 	mls	r6, r8, sl, r6
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000dac:	fb0a f20c 	mul.w	r2, sl, ip
 8000db0:	429a      	cmp	r2, r3
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1be>
 8000db8:	19db      	adds	r3, r3, r7
 8000dba:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000dbe:	f080 8087 	bcs.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	f240 8084 	bls.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	fa1f f989 	uxth.w	r9, r9
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000de0:	fb01 f60c 	mul.w	r6, r1, ip
 8000de4:	429e      	cmp	r6, r3
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0x1e8>
 8000de8:	19db      	adds	r3, r3, r7
 8000dea:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dee:	d26b      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df0:	429e      	cmp	r6, r3
 8000df2:	d969      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df4:	3902      	subs	r1, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dfe:	e78e      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000e00:	f1c1 0e20 	rsb	lr, r1, #32
 8000e04:	fa22 f40e 	lsr.w	r4, r2, lr
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	4323      	orrs	r3, r4
 8000e0c:	fa20 f70e 	lsr.w	r7, r0, lr
 8000e10:	fa06 f401 	lsl.w	r4, r6, r1
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	fa26 f60e 	lsr.w	r6, r6, lr
 8000e1c:	433c      	orrs	r4, r7
 8000e1e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000e22:	0c27      	lsrs	r7, r4, #16
 8000e24:	fb0c 6619 	mls	r6, ip, r9, r6
 8000e28:	fa1f f883 	uxth.w	r8, r3
 8000e2c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e30:	fb09 f708 	mul.w	r7, r9, r8
 8000e34:	42b7      	cmp	r7, r6
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x242>
 8000e40:	18f6      	adds	r6, r6, r3
 8000e42:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e46:	d241      	bcs.n	8000ecc <__udivmoddi4+0x2bc>
 8000e48:	42b7      	cmp	r7, r6
 8000e4a:	d93f      	bls.n	8000ecc <__udivmoddi4+0x2bc>
 8000e4c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e50:	441e      	add	r6, r3
 8000e52:	1bf6      	subs	r6, r6, r7
 8000e54:	b2a0      	uxth	r0, r4
 8000e56:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e5a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e5e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e62:	fb04 f808 	mul.w	r8, r4, r8
 8000e66:	45b8      	cmp	r8, r7
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x26a>
 8000e6a:	18ff      	adds	r7, r7, r3
 8000e6c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e70:	d228      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d926      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e76:	3c02      	subs	r4, #2
 8000e78:	441f      	add	r7, r3
 8000e7a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e7e:	ebc8 0707 	rsb	r7, r8, r7
 8000e82:	fba0 8902 	umull	r8, r9, r0, r2
 8000e86:	454f      	cmp	r7, r9
 8000e88:	4644      	mov	r4, r8
 8000e8a:	464e      	mov	r6, r9
 8000e8c:	d314      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	d029      	beq.n	8000ee4 <__udivmoddi4+0x2d4>
 8000e90:	b365      	cbz	r5, 8000eec <__udivmoddi4+0x2dc>
 8000e92:	ebba 0304 	subs.w	r3, sl, r4
 8000e96:	eb67 0706 	sbc.w	r7, r7, r6
 8000e9a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	40cf      	lsrs	r7, r1
 8000ea2:	ea4e 0303 	orr.w	r3, lr, r3
 8000ea6:	e885 0088 	stmia.w	r5, {r3, r7}
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	e6f8      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e6e0      	b.n	8000c7a <__udivmoddi4+0x6a>
 8000eb8:	ebb8 0402 	subs.w	r4, r8, r2
 8000ebc:	eb69 0603 	sbc.w	r6, r9, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e5      	b.n	8000e90 <__udivmoddi4+0x280>
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	e7d8      	b.n	8000e7a <__udivmoddi4+0x26a>
 8000ec8:	4611      	mov	r1, r2
 8000eca:	e795      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ecc:	4681      	mov	r9, r0
 8000ece:	e7c0      	b.n	8000e52 <__udivmoddi4+0x242>
 8000ed0:	468a      	mov	sl, r1
 8000ed2:	e77c      	b.n	8000dce <__udivmoddi4+0x1be>
 8000ed4:	3b02      	subs	r3, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e748      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e70a      	b.n	8000cf4 <__udivmoddi4+0xe4>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	443e      	add	r6, r7
 8000ee2:	e72f      	b.n	8000d44 <__udivmoddi4+0x134>
 8000ee4:	45c2      	cmp	sl, r8
 8000ee6:	d3e7      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000ee8:	463e      	mov	r6, r7
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x280>
 8000eec:	4629      	mov	r1, r5
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000efc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000efe:	e003      	b.n	8000f08 <LoopCopyDataInit>

08000f00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f06:	3104      	adds	r1, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f10:	d3f6      	bcc.n	8000f00 <CopyDataInit>
	ldr	r2, =_sbss
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f14:	e002      	b.n	8000f1c <LoopFillZerobss>

08000f16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f18:	f842 3b04 	str.w	r3, [r2], #4

08000f1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <LoopForever+0x16>)
	cmp	r2, r3
 8000f1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f20:	d3f9      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f22:	f000 f813 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f003 fb2d 	bl	8004584 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f2a:	f001 ff75 	bl	8002e18 <main>

08000f2e <LoopForever>:

LoopForever:
    b LoopForever
 8000f2e:	e7fe      	b.n	8000f2e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f30:	20004000 	.word	0x20004000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000f34:	0800d118 	.word	0x0800d118
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f3c:	20000594 	.word	0x20000594
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000f40:	20000594 	.word	0x20000594
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f44:	20000770 	.word	0x20000770

08000f48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC1_IRQHandler>
	...

08000f4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4915      	ldr	r1, [pc, #84]	; (8000fa4 <SystemInit+0x58>)
 8000f4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000f52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <SystemInit+0x5c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f042 0201 	orr.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000f64:	6858      	ldr	r0, [r3, #4]
 8000f66:	4a11      	ldr	r2, [pc, #68]	; (8000fac <SystemInit+0x60>)
 8000f68:	4002      	ands	r2, r0
 8000f6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000f72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f76:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f7e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000f86:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8a:	f022 020f 	bic.w	r2, r2, #15
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000f90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <SystemInit+0x64>)
 8000f94:	4002      	ands	r2, r0
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fa0:	608b      	str	r3, [r1, #8]
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	f87fc00c 	.word	0xf87fc00c
 8000fb0:	ff00fccc 	.word	0xff00fccc

08000fb4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_InitTick+0x24>)
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc4:	f000 f88a 	bl	80010dc <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4621      	mov	r1, r4
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f844 	bl	800105c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	bd10      	pop	{r4, pc}
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	6813      	ldr	r3, [r2, #0]
 8000fe2:	f043 0310 	orr.w	r3, r3, #16
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f825 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff ffe0 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff4:	f002 f9a8 	bl	8003348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	bd08      	pop	{r3, pc}
 8000ffc:	40022000 	.word	0x40022000

08001000 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001000:	4a02      	ldr	r2, [pc, #8]	; (800100c <HAL_IncTick+0xc>)
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200005fc 	.word	0x200005fc

08001010 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001010:	4b01      	ldr	r3, [pc, #4]	; (8001018 <HAL_GetTick+0x8>)
 8001012:	6818      	ldr	r0, [r3, #0]
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200005fc 	.word	0x200005fc

0800101c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800101c:	b513      	push	{r0, r1, r4, lr}
 800101e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff fff6 	bl	8001010 <HAL_GetTick>
 8001024:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001026:	f7ff fff3 	bl	8001010 <HAL_GetTick>
 800102a:	9b01      	ldr	r3, [sp, #4]
 800102c:	1b00      	subs	r0, r0, r4
 800102e:	4298      	cmp	r0, r3
 8001030:	d3f9      	bcc.n	8001026 <HAL_Delay+0xa>
  {
  }
}
 8001032:	b002      	add	sp, #8
 8001034:	bd10      	pop	{r4, pc}
	...

08001038 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800103a:	68d3      	ldr	r3, [r2, #12]
 800103c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001040:	041b      	lsls	r3, r3, #16
 8001042:	0c1b      	lsrs	r3, r3, #16
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001048:	0200      	lsls	r0, r0, #8
 800104a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001052:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001054:	60d3      	str	r3, [r2, #12]
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_NVIC_SetPriority+0x60>)
 800105e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001066:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	2c04      	cmp	r4, #4
 800106e:	bf28      	it	cs
 8001070:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	2d06      	cmp	r5, #6

  return (
 8001074:	f04f 0501 	mov.w	r5, #1
 8001078:	fa05 f404 	lsl.w	r4, r5, r4
 800107c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001080:	bf8c      	ite	hi
 8001082:	3b03      	subhi	r3, #3
 8001084:	2300      	movls	r3, #0

  return (
 8001086:	400c      	ands	r4, r1
 8001088:	409c      	lsls	r4, r3
 800108a:	fa05 f303 	lsl.w	r3, r5, r3
 800108e:	3b01      	subs	r3, #1
 8001090:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001092:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001094:	ea42 0204 	orr.w	r2, r2, r4
 8001098:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	bfaf      	iteee	ge
 800109e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	f000 000f 	andlt.w	r0, r0, #15
 80010a6:	4b06      	ldrlt	r3, [pc, #24]	; (80010c0 <HAL_NVIC_SetPriority+0x64>)
 80010a8:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	bfa5      	ittet	ge
 80010ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80010b0:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010b8:	bd30      	pop	{r4, r5, pc}
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	e000ed14 	.word	0xe000ed14

080010c4 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010c4:	0942      	lsrs	r2, r0, #5
 80010c6:	2301      	movs	r3, #1
 80010c8:	f000 001f 	and.w	r0, r0, #31
 80010cc:	fa03 f000 	lsl.w	r0, r3, r0
 80010d0:	4b01      	ldr	r3, [pc, #4]	; (80010d8 <HAL_NVIC_EnableIRQ+0x14>)
 80010d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100

080010dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	3801      	subs	r0, #1
 80010de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010e2:	d20a      	bcs.n	80010fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e8:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	21f0      	movs	r1, #240	; 0xf0
 80010ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800110a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800110c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800110e:	bf0c      	ite	eq
 8001110:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001114:	f022 0204 	bicne.w	r2, r2, #4
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	4770      	bx	lr
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001120:	4770      	bx	lr

08001122 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001122:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001124:	f7ff fffc 	bl	8001120 <HAL_SYSTICK_Callback>
 8001128:	bd08      	pop	{r3, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001130:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001132:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001134:	f8df c170 	ldr.w	ip, [pc, #368]	; 80012a8 <HAL_GPIO_Init+0x17c>
 8001138:	4c59      	ldr	r4, [pc, #356]	; (80012a0 <HAL_GPIO_Init+0x174>)
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800113a:	9301      	str	r3, [sp, #4]
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800113c:	f04f 080f 	mov.w	r8, #15
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8001140:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001142:	9a01      	ldr	r2, [sp, #4]
 8001144:	40da      	lsrs	r2, r3
 8001146:	f000 80a7 	beq.w	8001298 <HAL_GPIO_Init+0x16c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800114a:	2201      	movs	r2, #1
 800114c:	fa02 f903 	lsl.w	r9, r2, r3

    if(iocurrent)
 8001150:	9a01      	ldr	r2, [sp, #4]
 8001152:	ea12 0509 	ands.w	r5, r2, r9
 8001156:	f000 809d 	beq.w	8001294 <HAL_GPIO_Init+0x168>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115a:	684a      	ldr	r2, [r1, #4]
 800115c:	f022 0a10 	bic.w	sl, r2, #16
 8001160:	f1ba 0f02 	cmp.w	sl, #2
 8001164:	d113      	bne.n	800118e <HAL_GPIO_Init+0x62>
 8001166:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800116a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800116e:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001172:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001176:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800117a:	fa08 f60b 	lsl.w	r6, r8, fp
 800117e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001182:	690e      	ldr	r6, [r1, #16]
 8001184:	fa06 f60b 	lsl.w	r6, r6, fp
 8001188:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 800118a:	f8ce 6020 	str.w	r6, [lr, #32]
 800118e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001192:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001196:	fa06 f60e 	lsl.w	r6, r6, lr
 800119a:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800119c:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011a0:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011a2:	fa0b fb0e 	lsl.w	fp, fp, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a6:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011aa:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ae:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 80011b2:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b4:	d811      	bhi.n	80011da <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011b8:	ea06 0a07 	and.w	sl, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80011bc:	68cf      	ldr	r7, [r1, #12]
 80011be:	fa07 f70e 	lsl.w	r7, r7, lr
 80011c2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80011c6:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ca:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011ce:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80011d2:	409f      	lsls	r7, r3
 80011d4:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80011d8:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011da:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011dc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80011de:	688f      	ldr	r7, [r1, #8]
 80011e0:	fa07 f70e 	lsl.w	r7, r7, lr
 80011e4:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80011e6:	60c6      	str	r6, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e8:	00d6      	lsls	r6, r2, #3
 80011ea:	d553      	bpl.n	8001294 <HAL_GPIO_Init+0x168>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ec:	f8dc 6018 	ldr.w	r6, [ip, #24]
 80011f0:	f046 0601 	orr.w	r6, r6, #1
 80011f4:	f8cc 6018 	str.w	r6, [ip, #24]
 80011f8:	f8dc 6018 	ldr.w	r6, [ip, #24]
 80011fc:	f006 0601 	and.w	r6, r6, #1
 8001200:	9603      	str	r6, [sp, #12]
 8001202:	9e03      	ldr	r6, [sp, #12]
 8001204:	f023 0603 	bic.w	r6, r3, #3
 8001208:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800120c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001210:	f003 0903 	and.w	r9, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8001214:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001218:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800121c:	fa08 f709 	lsl.w	r7, r8, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001220:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001224:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x11a>
 800122a:	4f1e      	ldr	r7, [pc, #120]	; (80012a4 <HAL_GPIO_Init+0x178>)
 800122c:	42b8      	cmp	r0, r7
 800122e:	d00c      	beq.n	800124a <HAL_GPIO_Init+0x11e>
 8001230:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001234:	42b8      	cmp	r0, r7
 8001236:	d00a      	beq.n	800124e <HAL_GPIO_Init+0x122>
 8001238:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800123c:	42b8      	cmp	r0, r7
 800123e:	bf14      	ite	ne
 8001240:	2705      	movne	r7, #5
 8001242:	2703      	moveq	r7, #3
 8001244:	e004      	b.n	8001250 <HAL_GPIO_Init+0x124>
 8001246:	2700      	movs	r7, #0
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x124>
 800124a:	2701      	movs	r7, #1
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x124>
 800124e:	2702      	movs	r7, #2
 8001250:	fa07 f709 	lsl.w	r7, r7, r9
 8001254:	ea47 070e 	orr.w	r7, r7, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001258:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125a:	4e11      	ldr	r6, [pc, #68]	; (80012a0 <HAL_GPIO_Init+0x174>)
 800125c:	6836      	ldr	r6, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800125e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001260:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001264:	bf0c      	ite	eq
 8001266:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001268:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800126a:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800126c:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800126e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001272:	bf0c      	ite	eq
 8001274:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001276:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001278:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127a:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001280:	bf0c      	ite	eq
 8001282:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001284:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8001286:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001288:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128a:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800128c:	bf54      	ite	pl
 800128e:	403e      	andpl	r6, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001290:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8001292:	60e6      	str	r6, [r4, #12]
      }
    }
    
    position++;
 8001294:	3301      	adds	r3, #1
 8001296:	e754      	b.n	8001142 <HAL_GPIO_Init+0x16>
  }
}
 8001298:	b005      	add	sp, #20
 800129a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800129e:	bf00      	nop
 80012a0:	40010400 	.word	0x40010400
 80012a4:	48000400 	.word	0x48000400
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ac:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80012ae:	4219      	tst	r1, r3
}
 80012b0:	bf14      	ite	ne
 80012b2:	2001      	movne	r0, #1
 80012b4:	2000      	moveq	r0, #0
 80012b6:	4770      	bx	lr

080012b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b8:	b10a      	cbz	r2, 80012be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ba:	6181      	str	r1, [r0, #24]
 80012bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012be:	6281      	str	r1, [r0, #40]	; 0x28
 80012c0:	4770      	bx	lr

080012c2 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012c2:	6803      	ldr	r3, [r0, #0]
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	0791      	lsls	r1, r2, #30
  {
     hi2c->Instance->TXDR = 0x00U;
 80012c8:	bf44      	itt	mi
 80012ca:	2200      	movmi	r2, #0
 80012cc:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012d2:	bf5e      	ittt	pl
 80012d4:	699a      	ldrpl	r2, [r3, #24]
 80012d6:	f042 0201 	orrpl.w	r2, r2, #1
 80012da:	619a      	strpl	r2, [r3, #24]
 80012dc:	4770      	bx	lr
	...

080012e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80012e0:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80012e2:	6805      	ldr	r5, [r0, #0]
 80012e4:	4c06      	ldr	r4, [pc, #24]	; (8001300 <I2C_TransferConfig+0x20>)
 80012e6:	6868      	ldr	r0, [r5, #4]
 80012e8:	4004      	ands	r4, r0
 80012ea:	9803      	ldr	r0, [sp, #12]
 80012ec:	4320      	orrs	r0, r4
 80012ee:	4303      	orrs	r3, r0
 80012f0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80012f4:	430b      	orrs	r3, r1

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80012f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80012fa:	606a      	str	r2, [r5, #4]
 80012fc:	bd30      	pop	{r4, r5, pc}
 80012fe:	bf00      	nop
 8001300:	fc009800 	.word	0xfc009800

08001304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001308:	9f06      	ldr	r7, [sp, #24]
 800130a:	4604      	mov	r4, r0
 800130c:	4688      	mov	r8, r1
 800130e:	4616      	mov	r6, r2
 8001310:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001312:	6822      	ldr	r2, [r4, #0]
 8001314:	6993      	ldr	r3, [r2, #24]
 8001316:	ea38 0303 	bics.w	r3, r8, r3
 800131a:	bf0c      	ite	eq
 800131c:	2301      	moveq	r3, #1
 800131e:	2300      	movne	r3, #0
 8001320:	42b3      	cmp	r3, r6
 8001322:	d113      	bne.n	800134c <I2C_WaitOnFlagUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001324:	1c6b      	adds	r3, r5, #1
 8001326:	d0f5      	beq.n	8001314 <I2C_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001328:	b955      	cbnz	r5, 8001340 <I2C_WaitOnFlagUntilTimeout+0x3c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 800132a:	2320      	movs	r3, #32
 800132c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001336:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800133a:	2003      	movs	r0, #3
 800133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001340:	f7ff fe66 	bl	8001010 <HAL_GetTick>
 8001344:	1bc0      	subs	r0, r0, r7
 8001346:	4285      	cmp	r5, r0
 8001348:	d2e3      	bcs.n	8001312 <I2C_WaitOnFlagUntilTimeout+0xe>
 800134a:	e7ee      	b.n	800132a <I2C_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800134c:	2000      	movs	r0, #0
}
 800134e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001354 <I2C_IsAcknowledgeFailed>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001354:	6803      	ldr	r3, [r0, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001356:	b570      	push	{r4, r5, r6, lr}
 8001358:	4604      	mov	r4, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800135a:	6998      	ldr	r0, [r3, #24]
 800135c:	f010 0010 	ands.w	r0, r0, #16
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001360:	460d      	mov	r5, r1
 8001362:	4616      	mov	r6, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001364:	d10b      	bne.n	800137e <I2C_IsAcknowledgeFailed+0x2a>
 8001366:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001368:	6999      	ldr	r1, [r3, #24]
 800136a:	068a      	lsls	r2, r1, #26
 800136c:	d413      	bmi.n	8001396 <I2C_IsAcknowledgeFailed+0x42>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800136e:	1c69      	adds	r1, r5, #1
 8001370:	d0fa      	beq.n	8001368 <I2C_IsAcknowledgeFailed+0x14>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001372:	b135      	cbz	r5, 8001382 <I2C_IsAcknowledgeFailed+0x2e>
 8001374:	f7ff fe4c 	bl	8001010 <HAL_GetTick>
 8001378:	1b80      	subs	r0, r0, r6
 800137a:	4285      	cmp	r5, r0
 800137c:	d301      	bcc.n	8001382 <I2C_IsAcknowledgeFailed+0x2e>
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	e7f2      	b.n	8001368 <I2C_IsAcknowledgeFailed+0x14>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8001382:	2320      	movs	r3, #32
 8001384:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	2300      	movs	r3, #0
 800138a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800138e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8001392:	2003      	movs	r0, #3
 8001394:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001396:	2210      	movs	r2, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001398:	2520      	movs	r5, #32
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800139a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800139c:	4620      	mov	r0, r4

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800139e:	61dd      	str	r5, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80013a0:	f7ff ff8f 	bl	80012c2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013a4:	6822      	ldr	r2, [r4, #0]
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <I2C_IsAcknowledgeFailed+0x70>)
 80013a8:	6851      	ldr	r1, [r2, #4]
 80013aa:	400b      	ands	r3, r1
 80013ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80013ae:	2304      	movs	r3, #4
 80013b0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b2:	2300      	movs	r3, #0

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 80013b4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
 80013c0:	2001      	movs	r0, #1
  }
  return HAL_OK;
}
 80013c2:	bd70      	pop	{r4, r5, r6, pc}
 80013c4:	fe00e800 	.word	0xfe00e800

080013c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	4604      	mov	r4, r0
 80013cc:	460d      	mov	r5, r1
 80013ce:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	079b      	lsls	r3, r3, #30
 80013d6:	d41c      	bmi.n	8001412 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013d8:	4632      	mov	r2, r6
 80013da:	4629      	mov	r1, r5
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff ffb9 	bl	8001354 <I2C_IsAcknowledgeFailed>
 80013e2:	b9c0      	cbnz	r0, 8001416 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80013e4:	1c6a      	adds	r2, r5, #1
 80013e6:	d0f3      	beq.n	80013d0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80013e8:	b96d      	cbnz	r5, 8001406 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80013f2:	2320      	movs	r3, #32
 80013f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001402:	2003      	movs	r0, #3
 8001404:	bd70      	pop	{r4, r5, r6, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001406:	f7ff fe03 	bl	8001010 <HAL_GetTick>
 800140a:	1b80      	subs	r0, r0, r6
 800140c:	4285      	cmp	r5, r0
 800140e:	d2df      	bcs.n	80013d0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8001410:	e7eb      	b.n	80013ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001412:	2000      	movs	r0, #0
 8001414:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 8001416:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001418:	bd70      	pop	{r4, r5, r6, pc}

0800141a <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800141a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800141c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800141e:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001424:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001426:	9300      	str	r3, [sp, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001428:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800142a:	2300      	movs	r3, #0
 800142c:	b2fa      	uxtb	r2, r7
 800142e:	f7ff ff57 	bl	80012e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001432:	4632      	mov	r2, r6
 8001434:	9908      	ldr	r1, [sp, #32]
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff ffc6 	bl	80013c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800143c:	b120      	cbz	r0, 8001448 <I2C_RequestMemoryRead+0x2e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800143e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001440:	2b04      	cmp	r3, #4
 8001442:	d10e      	bne.n	8001462 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 8001444:	2001      	movs	r0, #1
 8001446:	e019      	b.n	800147c <I2C_RequestMemoryRead+0x62>
      return HAL_TIMEOUT;
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001448:	2f01      	cmp	r7, #1
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	d10b      	bne.n	8001466 <I2C_RequestMemoryRead+0x4c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800144e:	b2ed      	uxtb	r5, r5
 8001450:	629d      	str	r5, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001452:	9b08      	ldr	r3, [sp, #32]
 8001454:	9600      	str	r6, [sp, #0]
 8001456:	2200      	movs	r2, #0
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	4620      	mov	r0, r4
 800145c:	f7ff ff52 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001460:	b160      	cbz	r0, 800147c <I2C_RequestMemoryRead+0x62>
    {
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 8001462:	2003      	movs	r0, #3
 8001464:	e00a      	b.n	800147c <I2C_RequestMemoryRead+0x62>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001466:	0a2a      	lsrs	r2, r5, #8
 8001468:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800146a:	9908      	ldr	r1, [sp, #32]
 800146c:	4632      	mov	r2, r6
 800146e:	4620      	mov	r0, r4
 8001470:	f7ff ffaa 	bl	80013c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001474:	2800      	cmp	r0, #0
 8001476:	d1e2      	bne.n	800143e <I2C_RequestMemoryRead+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	e7e8      	b.n	800144e <I2C_RequestMemoryRead+0x34>
  {
    return HAL_TIMEOUT;
  }
  
  return HAL_OK;
}
 800147c:	b003      	add	sp, #12
 800147e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	4604      	mov	r4, r0
 8001484:	460d      	mov	r5, r1
 8001486:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	069b      	lsls	r3, r3, #26
 800148e:	d41a      	bmi.n	80014c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001490:	4632      	mov	r2, r6
 8001492:	4629      	mov	r1, r5
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff ff5d 	bl	8001354 <I2C_IsAcknowledgeFailed>
 800149a:	b9b0      	cbnz	r0, 80014ca <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800149c:	b96d      	cbnz	r5, 80014ba <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800149e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80014a6:	2320      	movs	r3, #32
 80014a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80014b6:	2003      	movs	r0, #3
 80014b8:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80014ba:	f7ff fda9 	bl	8001010 <HAL_GetTick>
 80014be:	1b80      	subs	r0, r0, r6
 80014c0:	4285      	cmp	r5, r0
 80014c2:	d2e1      	bcs.n	8001488 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 80014c4:	e7eb      	b.n	800149e <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80014c6:	2000      	movs	r0, #0
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 80014ca:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 80014cc:	bd70      	pop	{r4, r5, r6, pc}

080014ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014ce:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80014d0:	4604      	mov	r4, r0
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d047      	beq.n	8001566 <HAL_I2C_Init+0x98>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80014d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014de:	b91b      	cbnz	r3, 80014e8 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014e4:	f001 ff6e 	bl	80033c4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e8:	2324      	movs	r3, #36	; 0x24
 80014ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	68e1      	ldr	r1, [r4, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014fa:	6862      	ldr	r2, [r4, #4]
 80014fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001500:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001508:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0U)
 800150a:	68a2      	ldr	r2, [r4, #8]
 800150c:	b142      	cbz	r2, 8001520 <HAL_I2C_Init+0x52>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800150e:	2901      	cmp	r1, #1
 8001510:	d103      	bne.n	800151a <HAL_I2C_Init+0x4c>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	e007      	b.n	800152a <HAL_I2C_Init+0x5c>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800151a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800151e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001520:	2902      	cmp	r1, #2
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001522:	bf04      	itt	eq
 8001524:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001528:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800152a:	685a      	ldr	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800152c:	6921      	ldr	r1, [r4, #16]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800152e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001536:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001538:	6962      	ldr	r2, [r4, #20]
 800153a:	430a      	orrs	r2, r1
 800153c:	69a1      	ldr	r1, [r4, #24]
 800153e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001542:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001544:	69e1      	ldr	r1, [r4, #28]
 8001546:	6a22      	ldr	r2, [r4, #32]
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001554:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001556:	2320      	movs	r3, #32
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001558:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800155a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800155e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001560:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001564:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8001566:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8001568:	bd10      	pop	{r4, pc}
	...

0800156c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800156c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001570:	4698      	mov	r8, r3
  uint32_t tickstart = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001572:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001576:	2b20      	cmp	r3, #32
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001578:	4604      	mov	r4, r0
 800157a:	460e      	mov	r6, r1
 800157c:	4691      	mov	r9, r2
  uint32_t tickstart = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 800157e:	f040 8086 	bne.w	800168e <HAL_I2C_Master_Transmit+0x122>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001582:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001586:	2b01      	cmp	r3, #1
 8001588:	f000 8081 	beq.w	800168e <HAL_I2C_Master_Transmit+0x122>
 800158c:	2701      	movs	r7, #1
 800158e:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001592:	f7ff fd3d 	bl	8001010 <HAL_GetTick>

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001596:	2319      	movs	r3, #25
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001598:	4605      	mov	r5, r0

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800159a:	9000      	str	r0, [sp, #0]
 800159c:	463a      	mov	r2, r7
 800159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff feae 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d14f      	bne.n	800164c <HAL_I2C_Master_Transmit+0xe0>
    {
      return HAL_TIMEOUT;
    }

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 80015ac:	2321      	movs	r3, #33	; 0x21
 80015ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_MASTER;
 80015b2:	2310      	movs	r3, #16
 80015b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015b8:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
 80015ba:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80015be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015c0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	2bff      	cmp	r3, #255	; 0xff
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 80015c8:	6360      	str	r0, [r4, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ca:	d905      	bls.n	80015d8 <HAL_I2C_Master_Transmit+0x6c>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015cc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015d2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	e00d      	b.n	80015f4 <HAL_I2C_Master_Transmit+0x88>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80015da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015de:	b292      	uxth	r2, r2
 80015e0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	e038      	b.n	8001658 <HAL_I2C_Master_Transmit+0xec>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
        {
          return HAL_TIMEOUT;
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	d930      	bls.n	8001650 <HAL_I2C_Master_Transmit+0xe4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ee:	22ff      	movs	r2, #255	; 0xff
 80015f0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015f2:	9000      	str	r0, [sp, #0]
 80015f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015f8:	4631      	mov	r1, r6
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fe70 	bl	80012e0 <I2C_TransferConfig>
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
    }

    while(hi2c->XferCount > 0U)
 8001600:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001602:	990a      	ldr	r1, [sp, #40]	; 0x28
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
    }

    while(hi2c->XferCount > 0U)
 8001604:	b29b      	uxth	r3, r3
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001606:	462a      	mov	r2, r5
 8001608:	4620      	mov	r0, r4
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
    }

    while(hi2c->XferCount > 0U)
 800160a:	2b00      	cmp	r3, #0
 800160c:	d02d      	beq.n	800166a <HAL_I2C_Master_Transmit+0xfe>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160e:	f7ff fedb 	bl	80013c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001612:	bb28      	cbnz	r0, 8001660 <HAL_I2C_Master_Transmit+0xf4>
        {
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001616:	6822      	ldr	r2, [r4, #0]
 8001618:	1c59      	adds	r1, r3, #1
 800161a:	6261      	str	r1, [r4, #36]	; 0x24
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001620:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001622:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8001624:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001626:	3a01      	subs	r2, #1
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8001628:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800162a:	b292      	uxth	r2, r2
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 800162c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800162e:	8522      	strh	r2, [r4, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8001630:	2a00      	cmp	r2, #0
 8001632:	d1e5      	bne.n	8001600 <HAL_I2C_Master_Transmit+0x94>
 8001634:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0e1      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x94>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800163c:	9500      	str	r5, [sp, #0]
 800163e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	4620      	mov	r0, r4
 8001644:	f7ff fe5e 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 8001648:	2800      	cmp	r0, #0
 800164a:	d0cc      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x7a>
        {
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 800164c:	2003      	movs	r0, #3
 800164e:	e01f      	b.n	8001690 <HAL_I2C_Master_Transmit+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001650:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001652:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001654:	b292      	uxth	r2, r2
 8001656:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001658:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	e7cb      	b.n	80015f8 <HAL_I2C_Master_Transmit+0x8c>
    while(hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001660:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001662:	2b04      	cmp	r3, #4
 8001664:	d1f2      	bne.n	800164c <HAL_I2C_Master_Transmit+0xe0>
        {
          return HAL_ERROR;
 8001666:	2001      	movs	r0, #1
 8001668:	e012      	b.n	8001690 <HAL_I2C_Master_Transmit+0x124>
      }
    }
  
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800166a:	f7ff ff09 	bl	8001480 <I2C_WaitOnSTOPFlagUntilTimeout>
 800166e:	2800      	cmp	r0, #0
 8001670:	d1f6      	bne.n	8001660 <HAL_I2C_Master_Transmit+0xf4>
        return HAL_TIMEOUT;
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001672:	6823      	ldr	r3, [r4, #0]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001674:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_I2C_Master_Transmit+0x12c>)
        return HAL_TIMEOUT;
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001676:	2120      	movs	r1, #32
 8001678:	61d9      	str	r1, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800167a:	685d      	ldr	r5, [r3, #4]
 800167c:	402a      	ands	r2, r5
 800167e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001680:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001684:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001688:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 800168c:	e000      	b.n	8001690 <HAL_I2C_Master_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800168e:	2002      	movs	r0, #2
  }
}
 8001690:	b003      	add	sp, #12
 8001692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001696:	bf00      	nop
 8001698:	fe00e800 	.word	0xfe00e800

0800169c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800169c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a0:	469b      	mov	fp, r3
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80016a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016a6:	b085      	sub	sp, #20
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80016a8:	2b20      	cmp	r3, #32
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016aa:	4604      	mov	r4, r0
 80016ac:	460f      	mov	r7, r1
 80016ae:	9203      	str	r2, [sp, #12]
 80016b0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80016b4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80016b8:	f040 80a5 	bne.w	8001806 <HAL_I2C_Mem_Read+0x16a>
  {
    if((pData == NULL) || (Size == 0U))
 80016bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80016be:	b90b      	cbnz	r3, 80016c4 <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;
 80016c0:	2001      	movs	r0, #1
 80016c2:	e0a1      	b.n	8001808 <HAL_I2C_Mem_Read+0x16c>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
 80016c4:	f1ba 0f00 	cmp.w	sl, #0
 80016c8:	d0fa      	beq.n	80016c0 <HAL_I2C_Mem_Read+0x24>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	f000 8099 	beq.w	8001806 <HAL_I2C_Mem_Read+0x16a>
 80016d4:	2501      	movs	r5, #1
 80016d6:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016da:	f7ff fc99 	bl	8001010 <HAL_GetTick>

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016de:	2319      	movs	r3, #25
 80016e0:	9000      	str	r0, [sp, #0]

    /* Process Locked */
    __HAL_LOCK(hi2c);

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016e2:	4606      	mov	r6, r0

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016e4:	462a      	mov	r2, r5
 80016e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff fe0a 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 80016f0:	4680      	mov	r8, r0
 80016f2:	2800      	cmp	r0, #0
 80016f4:	d177      	bne.n	80017e6 <HAL_I2C_Mem_Read+0x14a>
    {
      return HAL_TIMEOUT;
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016f6:	2322      	movs	r3, #34	; 0x22
 80016f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016fc:	2340      	movs	r3, #64	; 0x40
 80016fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      return HAL_TIMEOUT;
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001704:	6460      	str	r0, [r4, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001706:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 8001708:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
 800170a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800170e:	9601      	str	r6, [sp, #4]
 8001710:	f8cd 9000 	str.w	r9, [sp]
 8001714:	465b      	mov	r3, fp
 8001716:	9a03      	ldr	r2, [sp, #12]
 8001718:	4639      	mov	r1, r7
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff fe7d 	bl	800141a <I2C_RequestMemoryRead>
 8001720:	b118      	cbz	r0, 800172a <HAL_I2C_Mem_Read+0x8e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001722:	6c63      	ldr	r3, [r4, #68]	; 0x44
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001724:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
 8001728:	e05a      	b.n	80017e0 <HAL_I2C_Mem_Read+0x144>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800172a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800172c:	b29b      	uxth	r3, r3
 800172e:	2bff      	cmp	r3, #255	; 0xff
 8001730:	d907      	bls.n	8001742 <HAL_I2C_Mem_Read+0xa6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001732:	f44f 5310 	mov.w	r3, #9216	; 0x2400

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001736:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001738:	9300      	str	r3, [sp, #0]

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800173a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800173c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001740:	e008      	b.n	8001754 <HAL_I2C_Mem_Read+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001742:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001744:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001748:	b292      	uxth	r2, r2
 800174a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001754:	4639      	mov	r1, r7
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff fdc2 	bl	80012e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800175c:	9600      	str	r6, [sp, #0]
 800175e:	464b      	mov	r3, r9
 8001760:	2200      	movs	r2, #0
 8001762:	2104      	movs	r1, #4
 8001764:	4620      	mov	r0, r4
 8001766:	f7ff fdcd 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 800176a:	2800      	cmp	r0, #0
 800176c:	d13b      	bne.n	80017e6 <HAL_I2C_Mem_Read+0x14a>
      {
        return HAL_TIMEOUT;
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800176e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	6262      	str	r2, [r4, #36]	; 0x24
 8001774:	6822      	ldr	r2, [r4, #0]
 8001776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001778:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800177a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800177c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        return HAL_TIMEOUT;
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 800177e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001780:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8001782:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001784:	b29b      	uxth	r3, r3
        return HAL_TIMEOUT;
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8001786:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001788:	8563      	strh	r3, [r4, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800178a:	b9f2      	cbnz	r2, 80017ca <HAL_I2C_Mem_Read+0x12e>
 800178c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800178e:	b29b      	uxth	r3, r3
 8001790:	b1db      	cbz	r3, 80017ca <HAL_I2C_Mem_Read+0x12e>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001792:	9600      	str	r6, [sp, #0]
 8001794:	464b      	mov	r3, r9
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	4620      	mov	r0, r4
 800179a:	f7ff fdb3 	bl	8001304 <I2C_WaitOnFlagUntilTimeout>
 800179e:	bb10      	cbnz	r0, 80017e6 <HAL_I2C_Mem_Read+0x14a>
        {
          return HAL_TIMEOUT;
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2bff      	cmp	r3, #255	; 0xff
 80017a6:	d905      	bls.n	80017b4 <HAL_I2C_Mem_Read+0x118>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017a8:	22ff      	movs	r2, #255	; 0xff
 80017aa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017ac:	9000      	str	r0, [sp, #0]
 80017ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b2:	e006      	b.n	80017c2 <HAL_I2C_Mem_Read+0x126>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017b6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017b8:	b292      	uxth	r2, r2
 80017ba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	4639      	mov	r1, r7
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff fd8b 	bl	80012e0 <I2C_TransferConfig>
        }
      }
    }while(hi2c->XferCount > 0U);
 80017ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1c4      	bne.n	800175c <HAL_I2C_Mem_Read+0xc0>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d2:	4632      	mov	r2, r6
 80017d4:	4649      	mov	r1, r9
 80017d6:	4620      	mov	r0, r4
 80017d8:	f7ff fe52 	bl	8001480 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017dc:	b128      	cbz	r0, 80017ea <HAL_I2C_Mem_Read+0x14e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	f43f af6d 	beq.w	80016c0 <HAL_I2C_Mem_Read+0x24>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 80017e6:	2003      	movs	r0, #3
 80017e8:	e00e      	b.n	8001808 <HAL_I2C_Mem_Read+0x16c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ea:	6823      	ldr	r3, [r4, #0]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ec:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_I2C_Mem_Read+0x174>)
        return HAL_TIMEOUT;
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ee:	2120      	movs	r1, #32
 80017f0:	61d9      	str	r1, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f2:	685d      	ldr	r5, [r3, #4]
 80017f4:	402a      	ands	r2, r5
 80017f6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001800:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 8001804:	e000      	b.n	8001808 <HAL_I2C_Mem_Read+0x16c>
  }
  else
  {
    return HAL_BUSY;
 8001806:	2002      	movs	r0, #2
  }
}
 8001808:	b005      	add	sp, #20
 800180a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	fe00e800 	.word	0xfe00e800

08001814 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001814:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	2a20      	cmp	r2, #32
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800181c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800181e:	d11d      	bne.n	800185c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  { 
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001820:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001824:	2b01      	cmp	r3, #1
 8001826:	d019      	beq.n	800185c <HAL_I2CEx_ConfigAnalogFilter+0x48>
    
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001828:	2324      	movs	r3, #36	; 0x24
 800182a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 800182e:	6803      	ldr	r3, [r0, #0]
 8001830:	681c      	ldr	r4, [r3, #0]
 8001832:	f024 0401 	bic.w	r4, r4, #1
 8001836:	601c      	str	r4, [r3, #0]
    
    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 8001838:	681c      	ldr	r4, [r3, #0]
 800183a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800183e:	601c      	str	r4, [r3, #0]
    
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001840:	681c      	ldr	r4, [r3, #0]
 8001842:	4321      	orrs	r1, r4
 8001844:	6019      	str	r1, [r3, #0]
    
    __HAL_I2C_ENABLE(hi2c); 
 8001846:	6819      	ldr	r1, [r3, #0]
 8001848:	f041 0101 	orr.w	r1, r1, #1
 800184c:	6019      	str	r1, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800184e:	2300      	movs	r3, #0
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
    
    __HAL_I2C_ENABLE(hi2c); 
    
    hi2c->State = HAL_I2C_STATE_READY;
 8001850:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001854:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    
    return HAL_OK; 
 8001858:	4618      	mov	r0, r3
 800185a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800185c:	2002      	movs	r0, #2
  }
}
 800185e:	bd10      	pop	{r4, pc}

08001860 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001860:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001862:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	07de      	lsls	r6, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	d403      	bmi.n	8001874 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	079c      	lsls	r4, r3, #30
 8001870:	d471      	bmi.n	8001956 <HAL_RCC_OscConfig+0xf6>
 8001872:	e0f0      	b.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001874:	4cb3      	ldr	r4, [pc, #716]	; (8001b44 <HAL_RCC_OscConfig+0x2e4>)
 8001876:	6863      	ldr	r3, [r4, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b04      	cmp	r3, #4
 800187e:	d007      	beq.n	8001890 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001880:	6863      	ldr	r3, [r4, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b08      	cmp	r3, #8
 8001888:	d116      	bne.n	80018b8 <HAL_RCC_OscConfig+0x58>
 800188a:	6863      	ldr	r3, [r4, #4]
 800188c:	03d8      	lsls	r0, r3, #15
 800188e:	d513      	bpl.n	80018b8 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001894:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	6822      	ldr	r2, [r4, #0]
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	fa22 f303 	lsr.w	r3, r2, r3
 80018aa:	07d9      	lsls	r1, r3, #31
 80018ac:	d5de      	bpl.n	800186c <HAL_RCC_OscConfig+0xc>
 80018ae:	686b      	ldr	r3, [r5, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1db      	bne.n	800186c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80018b4:	2001      	movs	r0, #1
 80018b6:	e233      	b.n	8001d20 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b8:	686b      	ldr	r3, [r5, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d007      	beq.n	80018d0 <HAL_RCC_OscConfig+0x70>
 80018c0:	6822      	ldr	r2, [r4, #0]
 80018c2:	b14b      	cbz	r3, 80018d8 <HAL_RCC_OscConfig+0x78>
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c8:	d106      	bne.n	80018d8 <HAL_RCC_OscConfig+0x78>
 80018ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018ce:	6022      	str	r2, [r4, #0]
 80018d0:	6822      	ldr	r2, [r4, #0]
 80018d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018d6:	e005      	b.n	80018e4 <HAL_RCC_OscConfig+0x84>
 80018d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018dc:	6022      	str	r2, [r4, #0]
 80018de:	6822      	ldr	r2, [r4, #0]
 80018e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018e4:	6022      	str	r2, [r4, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018e8:	f022 010f 	bic.w	r1, r2, #15
 80018ec:	68aa      	ldr	r2, [r5, #8]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	62e2      	str	r2, [r4, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f2:	b1c3      	cbz	r3, 8001926 <HAL_RCC_OscConfig+0xc6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb8c 	bl	8001010 <HAL_GetTick>
 80018f8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80018fc:	4607      	mov	r7, r0
 80018fe:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	6822      	ldr	r2, [r4, #0]
 8001904:	fa96 f3a6 	rbit	r3, r6
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	07da      	lsls	r2, r3, #31
 8001916:	d4a9      	bmi.n	800186c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fb7a 	bl	8001010 <HAL_GetTick>
 800191c:	1bc0      	subs	r0, r0, r7
 800191e:	2864      	cmp	r0, #100	; 0x64
 8001920:	d9ed      	bls.n	80018fe <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001922:	2003      	movs	r0, #3
 8001924:	e1fc      	b.n	8001d20 <HAL_RCC_OscConfig+0x4c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fb73 	bl	8001010 <HAL_GetTick>
 800192a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800192e:	4607      	mov	r7, r0
 8001930:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	fa96 f3a6 	rbit	r3, r6
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	07db      	lsls	r3, r3, #31
 8001948:	d590      	bpl.n	800186c <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194a:	f7ff fb61 	bl	8001010 <HAL_GetTick>
 800194e:	1bc0      	subs	r0, r0, r7
 8001950:	2864      	cmp	r0, #100	; 0x64
 8001952:	d9ed      	bls.n	8001930 <HAL_RCC_OscConfig+0xd0>
 8001954:	e7e5      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001956:	4c7b      	ldr	r4, [pc, #492]	; (8001b44 <HAL_RCC_OscConfig+0x2e4>)
 8001958:	6863      	ldr	r3, [r4, #4]
 800195a:	f013 0f0c 	tst.w	r3, #12
 800195e:	d007      	beq.n	8001970 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001960:	6863      	ldr	r3, [r4, #4]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b08      	cmp	r3, #8
 8001968:	d121      	bne.n	80019ae <HAL_RCC_OscConfig+0x14e>
 800196a:	6863      	ldr	r3, [r4, #4]
 800196c:	03d8      	lsls	r0, r3, #15
 800196e:	d41e      	bmi.n	80019ae <HAL_RCC_OscConfig+0x14e>
 8001970:	2302      	movs	r3, #2
 8001972:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	6822      	ldr	r2, [r4, #0]
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	07d9      	lsls	r1, r3, #31
 800198a:	d502      	bpl.n	8001992 <HAL_RCC_OscConfig+0x132>
 800198c:	692b      	ldr	r3, [r5, #16]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d190      	bne.n	80018b4 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	22f8      	movs	r2, #248	; 0xf8
 8001996:	fa92 f2a2 	rbit	r2, r2
 800199a:	6969      	ldr	r1, [r5, #20]
 800199c:	fab2 f282 	clz	r2, r2
 80019a0:	fa01 f202 	lsl.w	r2, r1, r2
 80019a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019a8:	4313      	orrs	r3, r2
 80019aa:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ac:	e053      	b.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ae:	692a      	ldr	r2, [r5, #16]
 80019b0:	2301      	movs	r3, #1
 80019b2:	b37a      	cbz	r2, 8001a14 <HAL_RCC_OscConfig+0x1b4>
 80019b4:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b8:	fab2 f282 	clz	r2, r2
 80019bc:	0092      	lsls	r2, r2, #2
 80019be:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 80019c2:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 80019c6:	2602      	movs	r6, #2
 80019c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fb21 	bl	8001010 <HAL_GetTick>
 80019ce:	4607      	mov	r7, r0
 80019d0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	485b      	ldr	r0, [pc, #364]	; (8001b44 <HAL_RCC_OscConfig+0x2e4>)
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	fa96 f3a6 	rbit	r3, r6
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	07da      	lsls	r2, r3, #31
 80019ea:	d405      	bmi.n	80019f8 <HAL_RCC_OscConfig+0x198>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fb10 	bl	8001010 <HAL_GetTick>
 80019f0:	1bc0      	subs	r0, r0, r7
 80019f2:	2802      	cmp	r0, #2
 80019f4:	d9ec      	bls.n	80019d0 <HAL_RCC_OscConfig+0x170>
 80019f6:	e794      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	6803      	ldr	r3, [r0, #0]
 80019fa:	22f8      	movs	r2, #248	; 0xf8
 80019fc:	fa92 f2a2 	rbit	r2, r2
 8001a00:	6969      	ldr	r1, [r5, #20]
 8001a02:	fab2 f282 	clz	r2, r2
 8001a06:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	6003      	str	r3, [r0, #0]
 8001a12:	e020      	b.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
 8001a14:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001a22:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001a26:	2602      	movs	r6, #2
 8001a28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff faf1 	bl	8001010 <HAL_GetTick>
 8001a2e:	4607      	mov	r7, r0
 8001a30:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	fa96 f3a6 	rbit	r3, r6
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	07db      	lsls	r3, r3, #31
 8001a48:	d505      	bpl.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fae1 	bl	8001010 <HAL_GetTick>
 8001a4e:	1bc0      	subs	r0, r0, r7
 8001a50:	2802      	cmp	r0, #2
 8001a52:	d9ed      	bls.n	8001a30 <HAL_RCC_OscConfig+0x1d0>
 8001a54:	e765      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	682b      	ldr	r3, [r5, #0]
 8001a58:	0718      	lsls	r0, r3, #28
 8001a5a:	d403      	bmi.n	8001a64 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	0759      	lsls	r1, r3, #29
 8001a60:	d447      	bmi.n	8001af2 <HAL_RCC_OscConfig+0x292>
 8001a62:	e0da      	b.n	8001c1a <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a64:	69aa      	ldr	r2, [r5, #24]
 8001a66:	4c37      	ldr	r4, [pc, #220]	; (8001b44 <HAL_RCC_OscConfig+0x2e4>)
 8001a68:	4937      	ldr	r1, [pc, #220]	; (8001b48 <HAL_RCC_OscConfig+0x2e8>)
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	b302      	cbz	r2, 8001ab0 <HAL_RCC_OscConfig+0x250>
 8001a6e:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a72:	fab2 f282 	clz	r2, r2
 8001a76:	2602      	movs	r6, #2
 8001a78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fac8 	bl	8001010 <HAL_GetTick>
 8001a80:	4607      	mov	r7, r0
 8001a82:	fa96 f3a6 	rbit	r3, r6
 8001a86:	fa96 f3a6 	rbit	r3, r6
 8001a8a:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a90:	fa96 f3a6 	rbit	r3, r6
 8001a94:	fab3 f383 	clz	r3, r3
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	07da      	lsls	r2, r3, #31
 8001aa2:	d4db      	bmi.n	8001a5c <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fab4 	bl	8001010 <HAL_GetTick>
 8001aa8:	1bc0      	subs	r0, r0, r7
 8001aaa:	2802      	cmp	r0, #2
 8001aac:	d9e9      	bls.n	8001a82 <HAL_RCC_OscConfig+0x222>
 8001aae:	e738      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
 8001ab0:	fa93 f3a3 	rbit	r3, r3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	2602      	movs	r6, #2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff faa7 	bl	8001010 <HAL_GetTick>
 8001ac2:	4607      	mov	r7, r0
 8001ac4:	fa96 f3a6 	rbit	r3, r6
 8001ac8:	fa96 f3a6 	rbit	r3, r6
 8001acc:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ad2:	fa96 f3a6 	rbit	r3, r6
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	07db      	lsls	r3, r3, #31
 8001ae4:	d5ba      	bpl.n	8001a5c <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fa93 	bl	8001010 <HAL_GetTick>
 8001aea:	1bc0      	subs	r0, r0, r7
 8001aec:	2802      	cmp	r0, #2
 8001aee:	d9e9      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x264>
 8001af0:	e717      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af2:	4c14      	ldr	r4, [pc, #80]	; (8001b44 <HAL_RCC_OscConfig+0x2e4>)
 8001af4:	69e3      	ldr	r3, [r4, #28]
 8001af6:	00de      	lsls	r6, r3, #3
 8001af8:	d40a      	bmi.n	8001b10 <HAL_RCC_OscConfig+0x2b0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	69e3      	ldr	r3, [r4, #28]
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61e3      	str	r3, [r4, #28]
 8001b02:	69e3      	ldr	r3, [r4, #28]
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b0c:	2701      	movs	r7, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x2b2>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b10:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4e0e      	ldr	r6, [pc, #56]	; (8001b4c <HAL_RCC_OscConfig+0x2ec>)
 8001b14:	6833      	ldr	r3, [r6, #0]
 8001b16:	05d8      	lsls	r0, r3, #23
 8001b18:	d503      	bpl.n	8001b22 <HAL_RCC_OscConfig+0x2c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1a:	68eb      	ldr	r3, [r5, #12]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d117      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
 8001b20:	e02d      	b.n	8001b7e <HAL_RCC_OscConfig+0x31e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	6833      	ldr	r3, [r6, #0]
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fa71 	bl	8001010 <HAL_GetTick>
 8001b2e:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	6833      	ldr	r3, [r6, #0]
 8001b32:	05d9      	lsls	r1, r3, #23
 8001b34:	d4f1      	bmi.n	8001b1a <HAL_RCC_OscConfig+0x2ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff fa6b 	bl	8001010 <HAL_GetTick>
 8001b3a:	ebc8 0000 	rsb	r0, r8, r0
 8001b3e:	2864      	cmp	r0, #100	; 0x64
 8001b40:	d9f6      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2d0>
 8001b42:	e6ee      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
 8001b44:	40021000 	.word	0x40021000
 8001b48:	42420480 	.word	0x42420480
 8001b4c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	b97b      	cbnz	r3, 8001b72 <HAL_RCC_OscConfig+0x312>
 8001b52:	6a23      	ldr	r3, [r4, #32]
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6223      	str	r3, [r4, #32]
 8001b5a:	6a23      	ldr	r3, [r4, #32]
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fa55 	bl	8001010 <HAL_GetTick>
 8001b66:	2602      	movs	r6, #2
 8001b68:	4681      	mov	r9, r0
 8001b6a:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f241 3a88 	movw	sl, #5000	; 0x1388
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b70:	e039      	b.n	8001be6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	6a23      	ldr	r3, [r4, #32]
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x326>
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6223      	str	r3, [r4, #32]
 8001b7e:	6a23      	ldr	r3, [r4, #32]
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	e005      	b.n	8001b92 <HAL_RCC_OscConfig+0x332>
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	6223      	str	r3, [r4, #32]
 8001b8c:	6a23      	ldr	r3, [r4, #32]
 8001b8e:	f023 0304 	bic.w	r3, r3, #4
 8001b92:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7ff fa3c 	bl	8001010 <HAL_GetTick>
 8001b98:	2602      	movs	r6, #2
 8001b9a:	4682      	mov	sl, r0
 8001b9c:	46b1      	mov	r9, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f241 3888 	movw	r8, #5000	; 0x1388
 8001ba2:	fa96 f3a6 	rbit	r3, r6
 8001ba6:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	b10b      	cbz	r3, 8001bb0 <HAL_RCC_OscConfig+0x350>
 8001bac:	6a22      	ldr	r2, [r4, #32]
 8001bae:	e002      	b.n	8001bb6 <HAL_RCC_OscConfig+0x356>
 8001bb0:	fa96 f3a6 	rbit	r3, r6
 8001bb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bb6:	fa99 f3a9 	rbit	r3, r9
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	07da      	lsls	r2, r3, #31
 8001bc8:	d41d      	bmi.n	8001c06 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff fa21 	bl	8001010 <HAL_GetTick>
 8001bce:	ebca 0000 	rsb	r0, sl, r0
 8001bd2:	4540      	cmp	r0, r8
 8001bd4:	d9e5      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x342>
 8001bd6:	e6a4      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fa1a 	bl	8001010 <HAL_GetTick>
 8001bdc:	ebc9 0000 	rsb	r0, r9, r0
 8001be0:	4550      	cmp	r0, sl
 8001be2:	f63f ae9e 	bhi.w	8001922 <HAL_RCC_OscConfig+0xc2>
 8001be6:	fa96 f3a6 	rbit	r3, r6
 8001bea:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bee:	b183      	cbz	r3, 8001c12 <HAL_RCC_OscConfig+0x3b2>
 8001bf0:	6a22      	ldr	r2, [r4, #32]
 8001bf2:	fa98 f3a8 	rbit	r3, r8
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	07db      	lsls	r3, r3, #31
 8001c04:	d4e8      	bmi.n	8001bd8 <HAL_RCC_OscConfig+0x378>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c06:	b147      	cbz	r7, 8001c1a <HAL_RCC_OscConfig+0x3ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c08:	69e3      	ldr	r3, [r4, #28]
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	61e3      	str	r3, [r4, #28]
 8001c10:	e003      	b.n	8001c1a <HAL_RCC_OscConfig+0x3ba>
 8001c12:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c18:	e7eb      	b.n	8001bf2 <HAL_RCC_OscConfig+0x392>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1a:	69ea      	ldr	r2, [r5, #28]
 8001c1c:	b90a      	cbnz	r2, 8001c22 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001c1e:	2000      	movs	r0, #0
 8001c20:	e07e      	b.n	8001d20 <HAL_RCC_OscConfig+0x4c0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c22:	4c41      	ldr	r4, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001c24:	6863      	ldr	r3, [r4, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	f43f ae42 	beq.w	80018b4 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c30:	2a02      	cmp	r2, #2
 8001c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c36:	d150      	bne.n	8001cda <HAL_RCC_OscConfig+0x47a>
 8001c38:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001c46:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff f9df 	bl	8001010 <HAL_GetTick>
 8001c52:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001c56:	4607      	mov	r7, r0
 8001c58:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	4932      	ldr	r1, [pc, #200]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	fa96 f3a6 	rbit	r3, r6
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	07d8      	lsls	r0, r3, #31
 8001c72:	d505      	bpl.n	8001c80 <HAL_RCC_OscConfig+0x420>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff f9cc 	bl	8001010 <HAL_GetTick>
 8001c78:	1bc0      	subs	r0, r0, r7
 8001c7a:	2802      	cmp	r0, #2
 8001c7c:	d9ec      	bls.n	8001c58 <HAL_RCC_OscConfig+0x3f8>
 8001c7e:	e650      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c80:	684b      	ldr	r3, [r1, #4]
 8001c82:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001c84:	6a2a      	ldr	r2, [r5, #32]
 8001c86:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001c8a:	4302      	orrs	r2, r0
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
 8001c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c94:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001ca2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff f9b1 	bl	8001010 <HAL_GetTick>
 8001cae:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001cb2:	4606      	mov	r6, r0
 8001cb4:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb8:	6822      	ldr	r2, [r4, #0]
 8001cba:	fa95 f3a5 	rbit	r3, r5
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cca:	07da      	lsls	r2, r3, #31
 8001ccc:	d4a7      	bmi.n	8001c1e <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff f99f 	bl	8001010 <HAL_GetTick>
 8001cd2:	1b80      	subs	r0, r0, r6
 8001cd4:	2802      	cmp	r0, #2
 8001cd6:	d9ed      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x454>
 8001cd8:	e623      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
 8001cda:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001ce8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f98e 	bl	8001010 <HAL_GetTick>
 8001cf4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001cf8:	4606      	mov	r6, r0
 8001cfa:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	6822      	ldr	r2, [r4, #0]
 8001d00:	fa95 f3a5 	rbit	r3, r5
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d10:	07db      	lsls	r3, r3, #31
 8001d12:	d584      	bpl.n	8001c1e <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff f97c 	bl	8001010 <HAL_GetTick>
 8001d18:	1b80      	subs	r0, r0, r6
 8001d1a:	2802      	cmp	r0, #2
 8001d1c:	d9ed      	bls.n	8001cfa <HAL_RCC_OscConfig+0x49a>
 8001d1e:	e600      	b.n	8001922 <HAL_RCC_OscConfig+0xc2>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001d20:	b002      	add	sp, #8
 8001d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8001d2c:	4913      	ldr	r1, [pc, #76]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x50>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d2e:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8001d30:	684c      	ldr	r4, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d32:	f004 030c 	and.w	r3, r4, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d11e      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0x4c>
 8001d3a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001d3e:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d42:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x54>)
 8001d50:	5cd3      	ldrb	r3, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001d54:	210f      	movs	r1, #15
 8001d56:	fa91 f1a1 	rbit	r1, r1
 8001d5a:	fab1 f181 	clz	r1, r1
 8001d5e:	f002 020f 	and.w	r2, r2, #15
 8001d62:	40ca      	lsrs	r2, r1
 8001d64:	4907      	ldr	r1, [pc, #28]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x58>)
 8001d66:	5c88      	ldrb	r0, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d68:	03e2      	lsls	r2, r4, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8001d6a:	bf52      	itee	pl
 8001d6c:	4806      	ldrpl	r0, [pc, #24]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x5c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001d6e:	4a07      	ldrmi	r2, [pc, #28]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x60>)
 8001d70:	fbb2 f0f0 	udivmi	r0, r2, r0
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8001d74:	4358      	muls	r0, r3
 8001d76:	bd10      	pop	{r4, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d7a:	bd10      	pop	{r4, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	0800c690 	.word	0x0800c690
 8001d84:	0800c680 	.word	0x0800c680
 8001d88:	003d0900 	.word	0x003d0900
 8001d8c:	007a1200 	.word	0x007a1200

08001d90 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d90:	4a54      	ldr	r2, [pc, #336]	; (8001ee4 <HAL_RCC_ClockConfig+0x154>)
 8001d92:	6813      	ldr	r3, [r2, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d9e:	4606      	mov	r6, r0
 8001da0:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001da2:	d30a      	bcc.n	8001dba <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da4:	6831      	ldr	r1, [r6, #0]
 8001da6:	078c      	lsls	r4, r1, #30
 8001da8:	d514      	bpl.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001daa:	484f      	ldr	r0, [pc, #316]	; (8001ee8 <HAL_RCC_ClockConfig+0x158>)
 8001dac:	6843      	ldr	r3, [r0, #4]
 8001dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db2:	68b3      	ldr	r3, [r6, #8]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	6043      	str	r3, [r0, #4]
 8001db8:	e00c      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	f023 0307 	bic.w	r3, r3, #7
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dc4:	6813      	ldr	r3, [r2, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	4299      	cmp	r1, r3
 8001dcc:	d0ea      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001dce:	2001      	movs	r0, #1
 8001dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd4:	07c8      	lsls	r0, r1, #31
 8001dd6:	d406      	bmi.n	8001de6 <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dd8:	4a42      	ldr	r2, [pc, #264]	; (8001ee4 <HAL_RCC_ClockConfig+0x154>)
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	429d      	cmp	r5, r3
 8001de2:	d34a      	bcc.n	8001e7a <HAL_RCC_ClockConfig+0xea>
 8001de4:	e053      	b.n	8001e8e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	6872      	ldr	r2, [r6, #4]
 8001de8:	4c3f      	ldr	r4, [pc, #252]	; (8001ee8 <HAL_RCC_ClockConfig+0x158>)
 8001dea:	2a01      	cmp	r2, #1
 8001dec:	d102      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x64>
 8001dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df2:	e004      	b.n	8001dfe <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df4:	2a02      	cmp	r2, #2
 8001df6:	bf0c      	ite	eq
 8001df8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001dfc:	2302      	movne	r3, #2
 8001dfe:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	6821      	ldr	r1, [r4, #0]
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa21 f303 	lsr.w	r3, r1, r3
 8001e14:	07d9      	lsls	r1, r3, #31
 8001e16:	d5da      	bpl.n	8001dce <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e18:	6863      	ldr	r3, [r4, #4]
 8001e1a:	f023 0303 	bic.w	r3, r3, #3
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e22:	f7ff f8f5 	bl	8001010 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	6873      	ldr	r3, [r6, #4]
 8001e28:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e2a:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e32:	6863      	ldr	r3, [r4, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d0cd      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7ff f8e8 	bl	8001010 <HAL_GetTick>
 8001e40:	1bc0      	subs	r0, r0, r7
 8001e42:	4540      	cmp	r0, r8
 8001e44:	d9f5      	bls.n	8001e32 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8001e46:	2003      	movs	r0, #3
 8001e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d10f      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e50:	6863      	ldr	r3, [r4, #4]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d0be      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5a:	f7ff f8d9 	bl	8001010 <HAL_GetTick>
 8001e5e:	1bc0      	subs	r0, r0, r7
 8001e60:	4540      	cmp	r0, r8
 8001e62:	d9f5      	bls.n	8001e50 <HAL_RCC_ClockConfig+0xc0>
 8001e64:	e7ef      	b.n	8001e46 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e66:	f7ff f8d3 	bl	8001010 <HAL_GetTick>
 8001e6a:	1bc0      	subs	r0, r0, r7
 8001e6c:	4540      	cmp	r0, r8
 8001e6e:	d8ea      	bhi.n	8001e46 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e70:	6863      	ldr	r3, [r4, #4]
 8001e72:	f013 0f0c 	tst.w	r3, #12
 8001e76:	d1f6      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xd6>
 8001e78:	e7ae      	b.n	8001dd8 <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	6813      	ldr	r3, [r2, #0]
 8001e7c:	f023 0307 	bic.w	r3, r3, #7
 8001e80:	432b      	orrs	r3, r5
 8001e82:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e84:	6813      	ldr	r3, [r2, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	429d      	cmp	r5, r3
 8001e8c:	d19f      	bne.n	8001dce <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8e:	6831      	ldr	r1, [r6, #0]
 8001e90:	4c15      	ldr	r4, [pc, #84]	; (8001ee8 <HAL_RCC_ClockConfig+0x158>)
 8001e92:	f011 0f04 	tst.w	r1, #4
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e98:	6863      	ldr	r3, [r4, #4]
 8001e9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e9e:	68f3      	ldr	r3, [r6, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	070b      	lsls	r3, r1, #28
 8001ea6:	d506      	bpl.n	8001eb6 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ea8:	6863      	ldr	r3, [r4, #4]
 8001eaa:	6932      	ldr	r2, [r6, #16]
 8001eac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001eb0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001eb4:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001eb6:	f7ff ff39 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001eba:	6863      	ldr	r3, [r4, #4]
 8001ebc:	22f0      	movs	r2, #240	; 0xf0
 8001ebe:	fa92 f2a2 	rbit	r2, r2
 8001ec2:	fab2 f282 	clz	r2, r2
 8001ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eca:	40d3      	lsrs	r3, r2
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_RCC_ClockConfig+0x15c>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	40d8      	lsrs	r0, r3
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_RCC_ClockConfig+0x160>)
 8001ed4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff f86c 	bl	8000fb4 <HAL_InitTick>
  
  return HAL_OK;
 8001edc:	2000      	movs	r0, #0
}
 8001ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	0800c668 	.word	0x0800c668
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001ef4:	4b01      	ldr	r3, [pc, #4]	; (8001efc <HAL_RCC_GetHCLKFreq+0x8>)
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	fa92 f2a2 	rbit	r2, r2
 8001f0c:	fab2 f282 	clz	r2, r2
 8001f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f14:	40d3      	lsrs	r3, r2
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001f1c:	6810      	ldr	r0, [r2, #0]
}    
 8001f1e:	40d8      	lsrs	r0, r3
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	0800c678 	.word	0x0800c678
 8001f2c:	20000000 	.word	0x20000000

08001f30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f32:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	fa92 f2a2 	rbit	r2, r2
 8001f3c:	fab2 f282 	clz	r2, r2
 8001f40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f44:	40d3      	lsrs	r3, r2
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001f4c:	6810      	ldr	r0, [r2, #0]
} 
 8001f4e:	40d8      	lsrs	r0, r3
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	0800c678 	.word	0x0800c678
 8001f5c:	20000000 	.word	0x20000000

08001f60 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f60:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f62:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f66:	03df      	lsls	r7, r3, #15
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f68:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f6a:	d579      	bpl.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x100>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6c:	4d71      	ldr	r5, [pc, #452]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f6e:	69eb      	ldr	r3, [r5, #28]
 8001f70:	00de      	lsls	r6, r3, #3
 8001f72:	d40a      	bmi.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x2a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	69eb      	ldr	r3, [r5, #28]
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	61eb      	str	r3, [r5, #28]
 8001f7c:	69eb      	ldr	r3, [r5, #28]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f86:	2701      	movs	r7, #1
 8001f88:	e000      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001f8a:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4e6a      	ldr	r6, [pc, #424]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f8e:	6833      	ldr	r3, [r6, #0]
 8001f90:	05d8      	lsls	r0, r3, #23
 8001f92:	d505      	bpl.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x40>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f94:	6a2b      	ldr	r3, [r5, #32]
 8001f96:	4867      	ldr	r0, [pc, #412]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f98:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f9c:	d112      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f9e:	e016      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x6e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa0:	6833      	ldr	r3, [r6, #0]
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f832 	bl	8001010 <HAL_GetTick>
 8001fac:	4680      	mov	r8, r0
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	6833      	ldr	r3, [r6, #0]
 8001fb0:	05d9      	lsls	r1, r3, #23
 8001fb2:	d4ef      	bmi.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x34>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb4:	f7ff f82c 	bl	8001010 <HAL_GetTick>
 8001fb8:	ebc8 0000 	rsb	r0, r8, r0
 8001fbc:	2864      	cmp	r0, #100	; 0x64
 8001fbe:	d9f6      	bls.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	e0b3      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fc4:	6862      	ldr	r2, [r4, #4]
 8001fc6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10d      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x8a>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001fce:	6a2b      	ldr	r3, [r5, #32]
 8001fd0:	4958      	ldr	r1, [pc, #352]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fd6:	6863      	ldr	r3, [r4, #4]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fdc:	2f00      	cmp	r7, #0
 8001fde:	d03f      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	69cb      	ldr	r3, [r1, #28]
 8001fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	61cb      	str	r3, [r1, #28]
 8001fe8:	e03a      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x100>
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fea:	6a01      	ldr	r1, [r0, #32]
 8001fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff0:	f421 7e40 	bic.w	lr, r1, #768	; 0x300
 8001ff4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ff8:	4e50      	ldr	r6, [pc, #320]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	f04f 0c01 	mov.w	ip, #1
 8002002:	f846 c022 	str.w	ip, [r6, r2, lsl #2]
 8002006:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	2200      	movs	r2, #0
 8002010:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002014:	07ca      	lsls	r2, r1, #31
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002016:	f8c0 e020 	str.w	lr, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800201a:	d5d8      	bpl.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe fff8 	bl	8001010 <HAL_GetTick>
 8002020:	2602      	movs	r6, #2
 8002022:	4681      	mov	r9, r0
 8002024:	46b0      	mov	r8, r6
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f241 3a88 	movw	sl, #5000	; 0x1388
 800202a:	fa96 f3a6 	rbit	r3, r6
 800202e:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	b10b      	cbz	r3, 8002038 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8002034:	6a2a      	ldr	r2, [r5, #32]
 8002036:	e002      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002038:	fa96 f3a6 	rbit	r3, r6
 800203c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800203e:	fa98 f3a8 	rbit	r3, r8
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	07db      	lsls	r3, r3, #31
 8002050:	d4bd      	bmi.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe ffdd 	bl	8001010 <HAL_GetTick>
 8002056:	ebc9 0000 	rsb	r0, r9, r0
 800205a:	4550      	cmp	r0, sl
 800205c:	d9e5      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xca>
 800205e:	e7af      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002060:	6820      	ldr	r0, [r4, #0]
 8002062:	07c5      	lsls	r5, r0, #31
 8002064:	d506      	bpl.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002066:	4933      	ldr	r1, [pc, #204]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002068:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	68a3      	ldr	r3, [r4, #8]
 8002070:	4313      	orrs	r3, r2
 8002072:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002074:	0681      	lsls	r1, r0, #26
 8002076:	d506      	bpl.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002078:	492e      	ldr	r1, [pc, #184]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800207a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800207c:	f023 0210 	bic.w	r2, r3, #16
 8002080:	68e3      	ldr	r3, [r4, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002086:	0382      	lsls	r2, r0, #14
 8002088:	d506      	bpl.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800208a:	492a      	ldr	r1, [pc, #168]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800208c:	684b      	ldr	r3, [r1, #4]
 800208e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002092:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002098:	0643      	lsls	r3, r0, #25
 800209a:	d506      	bpl.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800209c:	4925      	ldr	r1, [pc, #148]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800209e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80020a0:	f023 0220 	bic.w	r2, r3, #32
 80020a4:	6923      	ldr	r3, [r4, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020aa:	0407      	lsls	r7, r0, #16
 80020ac:	d506      	bpl.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ae:	4921      	ldr	r1, [pc, #132]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80020b2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020b6:	6963      	ldr	r3, [r4, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020bc:	0586      	lsls	r6, r0, #22
 80020be:	d506      	bpl.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020c0:	491c      	ldr	r1, [pc, #112]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020c2:	684b      	ldr	r3, [r1, #4]
 80020c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020c8:	69e3      	ldr	r3, [r4, #28]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80020ce:	0605      	lsls	r5, r0, #24
 80020d0:	d506      	bpl.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80020d2:	4918      	ldr	r1, [pc, #96]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020d4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80020d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80020da:	69a3      	ldr	r3, [r4, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020e0:	04c1      	lsls	r1, r0, #19
 80020e2:	d506      	bpl.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80020e4:	4913      	ldr	r1, [pc, #76]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80020e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ec:	6a23      	ldr	r3, [r4, #32]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80020f2:	0342      	lsls	r2, r0, #13
 80020f4:	d506      	bpl.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80020f6:	490f      	ldr	r1, [pc, #60]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80020fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80020fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002100:	4313      	orrs	r3, r2
 8002102:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002104:	0303      	lsls	r3, r0, #12
 8002106:	d506      	bpl.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002108:	490a      	ldr	r1, [pc, #40]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800210a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800210c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002112:	4313      	orrs	r3, r2
 8002114:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002116:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800211a:	d007      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800211c:	4905      	ldr	r1, [pc, #20]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800211e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002120:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002124:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002126:	4313      	orrs	r3, r2
 8002128:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800212a:	2000      	movs	r0, #0
}
 800212c:	b002      	add	sp, #8
 800212e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	42420400 	.word	0x42420400

08002140 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002140:	6803      	ldr	r3, [r0, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002152:	2000      	movs	r0, #0
 8002154:	4770      	bx	lr

08002156 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002156:	6803      	ldr	r3, [r0, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002160:	6a19      	ldr	r1, [r3, #32]
 8002162:	f241 1211 	movw	r2, #4369	; 0x1111
 8002166:	400a      	ands	r2, r1
 8002168:	b942      	cbnz	r2, 800217c <HAL_TIM_Base_Stop_IT+0x26>
 800216a:	6a19      	ldr	r1, [r3, #32]
 800216c:	f240 4244 	movw	r2, #1092	; 0x444
 8002170:	400a      	ands	r2, r1
 8002172:	b91a      	cbnz	r2, 800217c <HAL_TIM_Base_Stop_IT+0x26>
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 800217c:	2000      	movs	r0, #0
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_OC_DelayElapsedCallback>:
 8002180:	4770      	bx	lr

08002182 <HAL_TIM_IC_CaptureCallback>:
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002184:	4770      	bx	lr

08002186 <HAL_TIM_TriggerCallback>:
 8002186:	4770      	bx	lr

08002188 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002188:	6803      	ldr	r3, [r0, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800218e:	b510      	push	{r4, lr}
 8002190:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002192:	d514      	bpl.n	80021be <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	0792      	lsls	r2, r2, #30
 8002198:	d511      	bpl.n	80021be <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800219a:	f06f 0202 	mvn.w	r2, #2
 800219e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80021a0:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a2:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80021a4:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a6:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80021a8:	d002      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	f7ff ffea 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
 80021ae:	e004      	b.n	80021ba <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b0:	f7ff ffe6 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	4620      	mov	r0, r4
 80021b6:	f7ff ffe5 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	2300      	movs	r3, #0
 80021bc:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	0750      	lsls	r0, r2, #29
 80021c4:	d516      	bpl.n	80021f4 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	0751      	lsls	r1, r2, #29
 80021ca:	d513      	bpl.n	80021f4 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021cc:	f06f 0204 	mvn.w	r2, #4
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80021d2:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021d4:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80021d6:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021da:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021dc:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80021de:	d002      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80021e0:	f7ff ffcf 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
 80021e4:	e004      	b.n	80021f0 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	f7ff ffcb 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff ffca 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f0:	2300      	movs	r3, #0
 80021f2:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	0712      	lsls	r2, r2, #28
 80021fa:	d515      	bpl.n	8002228 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	0710      	lsls	r0, r2, #28
 8002200:	d512      	bpl.n	8002228 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002202:	f06f 0208 	mvn.w	r2, #8
 8002206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002208:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220a:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800220c:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002210:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002212:	d002      	beq.n	800221a <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002214:	f7ff ffb5 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
 8002218:	e004      	b.n	8002224 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	f7ff ffb1 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800221e:	4620      	mov	r0, r4
 8002220:	f7ff ffb0 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002224:	2300      	movs	r3, #0
 8002226:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	06d2      	lsls	r2, r2, #27
 800222e:	d516      	bpl.n	800225e <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	06d0      	lsls	r0, r2, #27
 8002234:	d513      	bpl.n	800225e <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002236:	f06f 0210 	mvn.w	r2, #16
 800223a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800223c:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800223e:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002240:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002244:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002248:	d002      	beq.n	8002250 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800224a:	f7ff ff9a 	bl	8002182 <HAL_TIM_IC_CaptureCallback>
 800224e:	e004      	b.n	800225a <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002250:	f7ff ff96 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	4620      	mov	r0, r4
 8002256:	f7ff ff95 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	2300      	movs	r3, #0
 800225c:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	07d1      	lsls	r1, r2, #31
 8002264:	d508      	bpl.n	8002278 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	07d2      	lsls	r2, r2, #31
 800226a:	d505      	bpl.n	8002278 <HAL_TIM_IRQHandler+0xf0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800226c:	f06f 0201 	mvn.w	r2, #1
 8002270:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002272:	4620      	mov	r0, r4
 8002274:	f000 ffbc 	bl	80031f0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	0610      	lsls	r0, r2, #24
 800227e:	d508      	bpl.n	8002292 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	0611      	lsls	r1, r2, #24
 8002284:	d505      	bpl.n	8002292 <HAL_TIM_IRQHandler+0x10a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002286:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800228a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800228c:	4620      	mov	r0, r4
 800228e:	f000 f898 	bl	80023c2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	0652      	lsls	r2, r2, #25
 8002298:	d508      	bpl.n	80022ac <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	0650      	lsls	r0, r2, #25
 800229e:	d505      	bpl.n	80022ac <HAL_TIM_IRQHandler+0x124>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7ff ff6d 	bl	8002186 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	0691      	lsls	r1, r2, #26
 80022b2:	d50a      	bpl.n	80022ca <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	0692      	lsls	r2, r2, #26
 80022b8:	d507      	bpl.n	80022ca <HAL_TIM_IRQHandler+0x142>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80022be:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 80022c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 80022c6:	f000 b87b 	b.w	80023c0 <HAL_TIMEx_CommutationCallback>
 80022ca:	bd10      	pop	{r4, pc}

080022cc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <TIM_Base_SetConfig+0x74>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80022ce:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d0:	4290      	cmp	r0, r2
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022d2:	b510      	push	{r4, lr}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d4:	d002      	beq.n	80022dc <TIM_Base_SetConfig+0x10>
 80022d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022da:	d109      	bne.n	80022f0 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80022dc:	684c      	ldr	r4, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e2:	4290      	cmp	r0, r2
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80022e4:	ea43 0304 	orr.w	r3, r3, r4
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e8:	d00d      	beq.n	8002306 <TIM_Base_SetConfig+0x3a>
 80022ea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022ee:	d00a      	beq.n	8002306 <TIM_Base_SetConfig+0x3a>
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <TIM_Base_SetConfig+0x78>)
 80022f2:	4290      	cmp	r0, r2
 80022f4:	d007      	beq.n	8002306 <TIM_Base_SetConfig+0x3a>
 80022f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022fa:	4290      	cmp	r0, r2
 80022fc:	d003      	beq.n	8002306 <TIM_Base_SetConfig+0x3a>
 80022fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002302:	4290      	cmp	r0, r2
 8002304:	d103      	bne.n	800230e <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002306:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800230c:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 800230e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002310:	688b      	ldr	r3, [r1, #8]
 8002312:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002314:	680b      	ldr	r3, [r1, #0]
 8002316:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <TIM_Base_SetConfig+0x74>)
 800231a:	4298      	cmp	r0, r3
 800231c:	d00b      	beq.n	8002336 <TIM_Base_SetConfig+0x6a>
 800231e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002322:	4298      	cmp	r0, r3
 8002324:	d007      	beq.n	8002336 <TIM_Base_SetConfig+0x6a>
 8002326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232a:	4298      	cmp	r0, r3
 800232c:	d003      	beq.n	8002336 <TIM_Base_SetConfig+0x6a>
 800232e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002332:	4298      	cmp	r0, r3
 8002334:	d101      	bne.n	800233a <TIM_Base_SetConfig+0x6e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002336:	690b      	ldr	r3, [r1, #16]
 8002338:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800233a:	2301      	movs	r3, #1
 800233c:	6143      	str	r3, [r0, #20]
 800233e:	bd10      	pop	{r4, pc}
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40014000 	.word	0x40014000

08002348 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002348:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800234a:	4604      	mov	r4, r0
 800234c:	b1a0      	cbz	r0, 8002378 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800234e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002352:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002356:	b91b      	cbnz	r3, 8002360 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002358:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800235c:	f001 f85a 	bl	8003414 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002360:	2302      	movs	r3, #2
 8002362:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002366:	6820      	ldr	r0, [r4, #0]
 8002368:	1d21      	adds	r1, r4, #4
 800236a:	f7ff ffaf 	bl	80022cc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800236e:	2301      	movs	r3, #1
 8002370:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002374:	2000      	movs	r0, #0
 8002376:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002378:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 800237a:	bd10      	pop	{r4, pc}

0800237c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800237c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002380:	2b01      	cmp	r3, #1
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002382:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002384:	d018      	beq.n	80023b8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002386:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002388:	4c0c      	ldr	r4, [pc, #48]	; (80023bc <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800238a:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800238c:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800238e:	42a2      	cmp	r2, r4
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002390:	bf02      	ittt	eq
 8002392:	684c      	ldreq	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002394:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002398:	4323      	orreq	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800239a:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800239c:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023a2:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80023a4:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023a8:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023aa:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80023ac:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023ae:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 80023b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80023b8:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 80023ba:	bd30      	pop	{r4, r5, pc}
 80023bc:	40012c00 	.word	0x40012c00

080023c0 <HAL_TIMEx_CommutationCallback>:
 80023c0:	4770      	bx	lr

080023c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c2:	4770      	bx	lr

080023c4 <HAL_UART_TxCpltCallback>:
 80023c4:	4770      	bx	lr

080023c6 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023c6:	4770      	bx	lr

080023c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c8:	b538      	push	{r3, r4, r5, lr}
 80023ca:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023cc:	6805      	ldr	r5, [r0, #0]
 80023ce:	6923      	ldr	r3, [r4, #16]
 80023d0:	68a2      	ldr	r2, [r4, #8]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023d2:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023d4:	6828      	ldr	r0, [r5, #0]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	6963      	ldr	r3, [r4, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	ea43 0201 	orr.w	r2, r3, r1
 80023e0:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <UART_SetConfig+0x148>)
 80023e2:	4003      	ands	r3, r0
 80023e4:	4313      	orrs	r3, r2
 80023e6:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e8:	686b      	ldr	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023ea:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023f0:	68e3      	ldr	r3, [r4, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023f6:	68ab      	ldr	r3, [r5, #8]
 80023f8:	6a22      	ldr	r2, [r4, #32]
 80023fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80023fe:	4302      	orrs	r2, r0
 8002400:	4313      	orrs	r3, r2
 8002402:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <UART_SetConfig+0x14c>)
 8002406:	429d      	cmp	r5, r3
 8002408:	d10a      	bne.n	8002420 <UART_SetConfig+0x58>
 800240a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800240e:	4a42      	ldr	r2, [pc, #264]	; (8002518 <UART_SetConfig+0x150>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0303 	and.w	r3, r3, #3
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002416:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	d008      	beq.n	8002430 <UART_SetConfig+0x68>
 800241e:	e03f      	b.n	80024a0 <UART_SetConfig+0xd8>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002420:	4b3e      	ldr	r3, [pc, #248]	; (800251c <UART_SetConfig+0x154>)
 8002422:	429d      	cmp	r5, r3
 8002424:	d00d      	beq.n	8002442 <UART_SetConfig+0x7a>
 8002426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800242a:	429d      	cmp	r5, r3
 800242c:	d12b      	bne.n	8002486 <UART_SetConfig+0xbe>
 800242e:	e008      	b.n	8002442 <UART_SetConfig+0x7a>
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002430:	2b08      	cmp	r3, #8
 8002432:	d82b      	bhi.n	800248c <UART_SetConfig+0xc4>
 8002434:	e8df f003 	tbb	[pc, r3]
 8002438:	2a0e0b08 	.word	0x2a0e0b08
 800243c:	2a2a2a15 	.word	0x2a2a2a15
 8002440:	1e          	.byte	0x1e
 8002441:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002442:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002446:	d134      	bne.n	80024b2 <UART_SetConfig+0xea>
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002448:	f7ff fd5a 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 800244c:	e00b      	b.n	8002466 <UART_SetConfig+0x9e>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800244e:	f7ff fd6f 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 8002452:	e008      	b.n	8002466 <UART_SetConfig+0x9e>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002454:	6860      	ldr	r0, [r4, #4]
 8002456:	0842      	lsrs	r2, r0, #1
 8002458:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 800245c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002460:	e00c      	b.n	800247c <UART_SetConfig+0xb4>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002462:	f7ff fc63 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8002466:	6863      	ldr	r3, [r4, #4]
 8002468:	085a      	lsrs	r2, r3, #1
 800246a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	e005      	b.n	8002480 <UART_SetConfig+0xb8>
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002474:	6860      	ldr	r0, [r4, #4]
 8002476:	0843      	lsrs	r3, r0, #1
 8002478:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800247c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002480:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002482:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
        break;
 8002484:	e004      	b.n	8002490 <UART_SetConfig+0xc8>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002486:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800248a:	d13e      	bne.n	800250a <UART_SetConfig+0x142>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800248c:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 800248e:	2300      	movs	r3, #0
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002490:	f3c3 0142 	ubfx	r1, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002494:	6822      	ldr	r2, [r4, #0]
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002496:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 800249a:	430b      	orrs	r3, r1
 800249c:	60d3      	str	r3, [r2, #12]
 800249e:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d832      	bhi.n	800250a <UART_SetConfig+0x142>
 80024a4:	e8df f003 	tbb	[pc, r3]
 80024a8:	31120f05 	.word	0x31120f05
 80024ac:	3131311b 	.word	0x3131311b
 80024b0:	26          	.byte	0x26
 80024b1:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024b2:	f7ff fd25 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 80024b6:	6863      	ldr	r3, [r4, #4]
 80024b8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80024bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80024c0:	b280      	uxth	r0, r0
 80024c2:	60e8      	str	r0, [r5, #12]
 80024c4:	e01f      	b.n	8002506 <UART_SetConfig+0x13e>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024c6:	f7ff fd33 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 80024ca:	e00a      	b.n	80024e2 <UART_SetConfig+0x11a>
        break;
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80024cc:	6861      	ldr	r1, [r4, #4]
 80024ce:	084a      	lsrs	r2, r1, #1
 80024d0:	f502 03f4 	add.w	r3, r2, #7995392	; 0x7a0000
 80024d4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80024d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80024dc:	e010      	b.n	8002500 <UART_SetConfig+0x138>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024de:	f7ff fc25 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 80024e2:	6863      	ldr	r3, [r4, #4]
 80024e4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80024e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <UART_SetConfig+0x14c>)
 80024ee:	b280      	uxth	r0, r0
 80024f0:	60d8      	str	r0, [r3, #12]
 80024f2:	e008      	b.n	8002506 <UART_SetConfig+0x13e>
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80024f4:	6862      	ldr	r2, [r4, #4]
 80024f6:	0853      	lsrs	r3, r2, #1
 80024f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <UART_SetConfig+0x14c>)
 8002502:	b29b      	uxth	r3, r3
 8002504:	60d3      	str	r3, [r2, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002506:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
        break;
 8002508:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800250a:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800250c:	bd38      	pop	{r3, r4, r5, pc}
 800250e:	bf00      	nop
 8002510:	efff69f3 	.word	0xefff69f3
 8002514:	40013800 	.word	0x40013800
 8002518:	0800c6a0 	.word	0x0800c6a0
 800251c:	40004400 	.word	0x40004400

08002520 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002520:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002522:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002524:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002526:	d506      	bpl.n	8002536 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002528:	6804      	ldr	r4, [r0, #0]
 800252a:	6862      	ldr	r2, [r4, #4]
 800252c:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002530:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002532:	430a      	orrs	r2, r1
 8002534:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002536:	079c      	lsls	r4, r3, #30
 8002538:	d506      	bpl.n	8002548 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800253a:	6804      	ldr	r4, [r0, #0]
 800253c:	6862      	ldr	r2, [r4, #4]
 800253e:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002542:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002544:	430a      	orrs	r2, r1
 8002546:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002548:	0759      	lsls	r1, r3, #29
 800254a:	d506      	bpl.n	800255a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800254c:	6804      	ldr	r4, [r0, #0]
 800254e:	6862      	ldr	r2, [r4, #4]
 8002550:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002554:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002556:	430a      	orrs	r2, r1
 8002558:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800255a:	071a      	lsls	r2, r3, #28
 800255c:	d506      	bpl.n	800256c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800255e:	6804      	ldr	r4, [r0, #0]
 8002560:	6862      	ldr	r2, [r4, #4]
 8002562:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002566:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002568:	430a      	orrs	r2, r1
 800256a:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800256c:	06dc      	lsls	r4, r3, #27
 800256e:	d506      	bpl.n	800257e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002570:	6804      	ldr	r4, [r0, #0]
 8002572:	68a2      	ldr	r2, [r4, #8]
 8002574:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002578:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800257a:	430a      	orrs	r2, r1
 800257c:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800257e:	0699      	lsls	r1, r3, #26
 8002580:	d506      	bpl.n	8002590 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002582:	6804      	ldr	r4, [r0, #0]
 8002584:	68a2      	ldr	r2, [r4, #8]
 8002586:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800258a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800258c:	430a      	orrs	r2, r1
 800258e:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002590:	065a      	lsls	r2, r3, #25
 8002592:	d50f      	bpl.n	80025b4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002594:	6801      	ldr	r1, [r0, #0]
 8002596:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002598:	684a      	ldr	r2, [r1, #4]
 800259a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800259e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025a0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025a4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025a6:	d105      	bne.n	80025b4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025a8:	684a      	ldr	r2, [r1, #4]
 80025aa:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 80025ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80025b0:	4322      	orrs	r2, r4
 80025b2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	d506      	bpl.n	80025c6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025b8:	6801      	ldr	r1, [r0, #0]
 80025ba:	684b      	ldr	r3, [r1, #4]
 80025bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80025c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
 80025c6:	bd10      	pop	{r4, pc}

080025c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80025c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025cc:	4604      	mov	r4, r0
 80025ce:	460e      	mov	r6, r1
 80025d0:	4690      	mov	r8, r2
 80025d2:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7fe fd1c 	bl	8001010 <HAL_GetTick>
 80025d8:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 80025da:	f1b8 0f00 	cmp.w	r8, #0
 80025de:	d138      	bne.n	8002652 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80025e0:	6822      	ldr	r2, [r4, #0]
 80025e2:	69d3      	ldr	r3, [r2, #28]
 80025e4:	ea36 0303 	bics.w	r3, r6, r3
 80025e8:	d00e      	beq.n	8002608 <UART_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80025ea:	1c69      	adds	r1, r5, #1
 80025ec:	d0f9      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80025ee:	b17d      	cbz	r5, 8002610 <UART_WaitOnFlagUntilTimeout+0x48>
 80025f0:	f7fe fd0e 	bl	8001010 <HAL_GetTick>
 80025f4:	1bc0      	subs	r0, r0, r7
 80025f6:	4285      	cmp	r5, r0
 80025f8:	d2f2      	bcs.n	80025e0 <UART_WaitOnFlagUntilTimeout+0x18>
 80025fa:	e009      	b.n	8002610 <UART_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80025fc:	1c6b      	adds	r3, r5, #1
 80025fe:	d106      	bne.n	800260e <UART_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8002600:	69d3      	ldr	r3, [r2, #28]
 8002602:	ea36 0303 	bics.w	r3, r6, r3
 8002606:	d0f9      	beq.n	80025fc <UART_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002608:	2000      	movs	r0, #0
 800260a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800260e:	b9dd      	cbnz	r5, 8002648 <UART_WaitOnFlagUntilTimeout+0x80>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002618:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	f022 0220 	bic.w	r2, r2, #32
 8002620:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002628:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002632:	2320      	movs	r3, #32
 8002634:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
          huart->RxState = HAL_UART_STATE_READY;
 8002638:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800263c:	2300      	movs	r3, #0
 800263e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

          return HAL_TIMEOUT;
 8002642:	2003      	movs	r0, #3
 8002644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002648:	f7fe fce2 	bl	8001010 <HAL_GetTick>
 800264c:	1bc0      	subs	r0, r0, r7
 800264e:	4285      	cmp	r5, r0
 8002650:	d3de      	bcc.n	8002610 <UART_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8002652:	6822      	ldr	r2, [r4, #0]
 8002654:	e7d4      	b.n	8002600 <UART_WaitOnFlagUntilTimeout+0x38>

08002656 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002656:	b570      	push	{r4, r5, r6, lr}
 8002658:	461e      	mov	r6, r3
   uint16_t* tmp;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800265a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800265e:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002660:	4604      	mov	r4, r0
 8002662:	460d      	mov	r5, r1
   uint16_t* tmp;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002664:	d142      	bne.n	80026ec <HAL_UART_Transmit+0x96>
  {
    if((pData == NULL ) || (Size == 0))
 8002666:	2900      	cmp	r1, #0
 8002668:	d03e      	beq.n	80026e8 <HAL_UART_Transmit+0x92>
 800266a:	2a00      	cmp	r2, #0
 800266c:	d03c      	beq.n	80026e8 <HAL_UART_Transmit+0x92>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800266e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002672:	2b01      	cmp	r3, #1
 8002674:	d03a      	beq.n	80026ec <HAL_UART_Transmit+0x96>
 8002676:	2301      	movs	r3, #1
 8002678:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267c:	2300      	movs	r3, #0
 800267e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002680:	2321      	movs	r3, #33	; 0x21
 8002682:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    huart->TxXferSize = Size;
 8002686:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800268a:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    while(huart->TxXferCount > 0)
 800268e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002692:	b1e2      	cbz	r2, 80026ce <HAL_UART_Transmit+0x78>
    {
      huart->TxXferCount--;
 8002694:	3a01      	subs	r2, #1
 8002696:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800269a:	4633      	mov	r3, r6
 800269c:	2200      	movs	r2, #0
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff ff91 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 80026a6:	b108      	cbz	r0, 80026ac <HAL_UART_Transmit+0x56>
      {
        return HAL_TIMEOUT;
 80026a8:	2003      	movs	r0, #3
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ac:	68a3      	ldr	r3, [r4, #8]
 80026ae:	6822      	ldr	r2, [r4, #0]
 80026b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b4:	d107      	bne.n	80026c6 <HAL_UART_Transmit+0x70>
 80026b6:	6923      	ldr	r3, [r4, #16]
 80026b8:	b92b      	cbnz	r3, 80026c6 <HAL_UART_Transmit+0x70>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80026ba:	f835 3b02 	ldrh.w	r3, [r5], #2
 80026be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c2:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80026c4:	e7e3      	b.n	800268e <HAL_UART_Transmit+0x38>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80026c6:	782b      	ldrb	r3, [r5, #0]
 80026c8:	8513      	strh	r3, [r2, #40]	; 0x28
 80026ca:	3501      	adds	r5, #1
 80026cc:	e7df      	b.n	800268e <HAL_UART_Transmit+0x38>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80026ce:	4633      	mov	r3, r6
 80026d0:	2140      	movs	r1, #64	; 0x40
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff ff78 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 80026d8:	2800      	cmp	r0, #0
 80026da:	d1e5      	bne.n	80026a8 <HAL_UART_Transmit+0x52>
    {
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026dc:	2320      	movs	r3, #32
 80026de:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026e2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80026e6:	bd70      	pop	{r4, r5, r6, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 80026e8:	2001      	movs	r0, #1
 80026ea:	bd70      	pop	{r4, r5, r6, pc}

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80026ec:	2002      	movs	r0, #2
  }
}
 80026ee:	bd70      	pop	{r4, r5, r6, pc}

080026f0 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f2:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint16_t uhMask;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80026f4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80026f8:	2b20      	cmp	r3, #32
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fa:	4604      	mov	r4, r0
 80026fc:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint16_t uhMask;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80026fe:	d154      	bne.n	80027aa <HAL_UART_Receive+0xba>
  {
    if((pData == NULL ) || (Size == 0))
 8002700:	2900      	cmp	r1, #0
 8002702:	d050      	beq.n	80027a6 <HAL_UART_Receive+0xb6>
 8002704:	2a00      	cmp	r2, #0
 8002706:	d04e      	beq.n	80027a6 <HAL_UART_Receive+0xb6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002708:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800270c:	2b01      	cmp	r3, #1
 800270e:	d04c      	beq.n	80027aa <HAL_UART_Receive+0xba>
 8002710:	2301      	movs	r3, #1
 8002712:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002716:	2300      	movs	r3, #0
 8002718:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800271a:	2322      	movs	r3, #34	; 0x22
 800271c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002720:	6883      	ldr	r3, [r0, #8]
    __HAL_LOCK(huart);

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    huart->RxXferSize = Size;
 8002722:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
 800272a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800272e:	d104      	bne.n	800273a <HAL_UART_Receive+0x4a>
 8002730:	6903      	ldr	r3, [r0, #16]
 8002732:	b92b      	cbnz	r3, 8002740 <HAL_UART_Receive+0x50>
 8002734:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002738:	e00d      	b.n	8002756 <HAL_UART_Receive+0x66>
 800273a:	b92b      	cbnz	r3, 8002748 <HAL_UART_Receive+0x58>
 800273c:	6903      	ldr	r3, [r0, #16]
 800273e:	b90b      	cbnz	r3, 8002744 <HAL_UART_Receive+0x54>
 8002740:	23ff      	movs	r3, #255	; 0xff
 8002742:	e008      	b.n	8002756 <HAL_UART_Receive+0x66>
 8002744:	237f      	movs	r3, #127	; 0x7f
 8002746:	e006      	b.n	8002756 <HAL_UART_Receive+0x66>
 8002748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800274c:	d105      	bne.n	800275a <HAL_UART_Receive+0x6a>
 800274e:	6903      	ldr	r3, [r0, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f7      	beq.n	8002744 <HAL_UART_Receive+0x54>
 8002754:	233f      	movs	r3, #63	; 0x3f
 8002756:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800275a:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
 800275e:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002762:	b1d0      	cbz	r0, 800279a <HAL_UART_Receive+0xaa>
    {
      huart->RxXferCount--;
 8002764:	3801      	subs	r0, #1
 8002766:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800276a:	463b      	mov	r3, r7
 800276c:	2200      	movs	r2, #0
 800276e:	2120      	movs	r1, #32
 8002770:	4620      	mov	r0, r4
 8002772:	f7ff ff29 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 8002776:	b9d0      	cbnz	r0, 80027ae <HAL_UART_Receive+0xbe>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002778:	68a3      	ldr	r3, [r4, #8]
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	d106      	bne.n	8002790 <HAL_UART_Receive+0xa0>
 8002782:	6922      	ldr	r2, [r4, #16]
 8002784:	b922      	cbnz	r2, 8002790 <HAL_UART_Receive+0xa0>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002786:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002788:	4033      	ands	r3, r6
 800278a:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2;
 800278e:	e7e6      	b.n	800275e <HAL_UART_Receive+0x6e>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002790:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002792:	4033      	ands	r3, r6
 8002794:	702b      	strb	r3, [r5, #0]
 8002796:	3501      	adds	r5, #1
 8002798:	e7e1      	b.n	800275e <HAL_UART_Receive+0x6e>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800279a:	2320      	movs	r3, #32
 800279c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027a0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80027a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 80027a6:	2001      	movs	r0, #1
 80027a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80027aa:	2002      	movs	r0, #2
 80027ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 80027ae:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80027b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027b2 <UART_CheckIdleState>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b2:	2200      	movs	r2, #0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027b4:	6803      	ldr	r3, [r0, #0]
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027b6:	b510      	push	{r4, lr}
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b8:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0719      	lsls	r1, r3, #28
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027be:	4604      	mov	r4, r0
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027c0:	d404      	bmi.n	80027cc <UART_CheckIdleState+0x1a>
      /* Timeout Occured */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	075b      	lsls	r3, r3, #29
 80027c8:	d514      	bpl.n	80027f4 <UART_CheckIdleState+0x42>
 80027ca:	e009      	b.n	80027e0 <UART_CheckIdleState+0x2e>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80027cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027d4:	f7ff fef8 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 80027d8:	2800      	cmp	r0, #0
 80027da:	d0f2      	beq.n	80027c2 <UART_CheckIdleState+0x10>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80027dc:	2003      	movs	r0, #3
 80027de:	bd10      	pop	{r4, pc}
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80027e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e4:	2200      	movs	r2, #0
 80027e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027ea:	4620      	mov	r0, r4
 80027ec:	f7ff feec 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d1f3      	bne.n	80027dc <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80027f4:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027f6:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80027f8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027fc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 8002800:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8002804:	bd10      	pop	{r4, pc}

08002806 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002806:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002808:	4604      	mov	r4, r0
 800280a:	b360      	cbz	r0, 8002866 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800280c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002810:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002814:	b91b      	cbnz	r3, 800281e <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002816:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800281a:	f000 fe19 	bl	8003450 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800281e:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002820:	2324      	movs	r3, #36	; 0x24
 8002822:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002826:	6813      	ldr	r3, [r2, #0]
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff fdca 	bl	80023c8 <UART_SetConfig>
 8002834:	2801      	cmp	r0, #1
 8002836:	d016      	beq.n	8002866 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800283a:	b113      	cbz	r3, 8002842 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 800283c:	4620      	mov	r0, r4
 800283e:	f7ff fe6f 	bl	8002520 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800284a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002852:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800285a:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800285c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 800285e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002862:	f7ff bfa6 	b.w	80027b2 <UART_CheckIdleState>
}
 8002866:	2001      	movs	r0, #1
 8002868:	bd10      	pop	{r4, pc}

0800286a <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800286a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800286e:	2b21      	cmp	r3, #33	; 0x21
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002870:	b510      	push	{r4, lr}
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002872:	d123      	bne.n	80028bc <UART_Transmit_IT+0x52>
  {

    if(huart->TxXferCount == 0)
 8002874:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002878:	6801      	ldr	r1, [r0, #0]
 800287a:	b943      	cbnz	r3, 800288e <UART_Transmit_IT+0x24>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800287c:	680a      	ldr	r2, [r1, #0]
 800287e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002882:	600a      	str	r2, [r1, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002884:	680a      	ldr	r2, [r1, #0]
 8002886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800288a:	600a      	str	r2, [r1, #0]
 800288c:	e014      	b.n	80028b8 <UART_Transmit_IT+0x4e>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288e:	6882      	ldr	r2, [r0, #8]
 8002890:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002894:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002896:	d108      	bne.n	80028aa <UART_Transmit_IT+0x40>
 8002898:	6904      	ldr	r4, [r0, #16]
 800289a:	b934      	cbnz	r4, 80028aa <UART_Transmit_IT+0x40>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800289c:	f832 4b02 	ldrh.w	r4, [r2], #2
 80028a0:	f3c4 0408 	ubfx	r4, r4, #0, #9
 80028a4:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80028a6:	64c2      	str	r2, [r0, #76]	; 0x4c
 80028a8:	e003      	b.n	80028b2 <UART_Transmit_IT+0x48>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80028aa:	1c54      	adds	r4, r2, #1
 80028ac:	64c4      	str	r4, [r0, #76]	; 0x4c
 80028ae:	7812      	ldrb	r2, [r2, #0]
 80028b0:	850a      	strh	r2, [r1, #40]	; 0x28
      }

      huart->TxXferCount--;
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

      return HAL_OK;
 80028b8:	2000      	movs	r0, #0
 80028ba:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    return HAL_BUSY;
 80028bc:	2002      	movs	r0, #2
  }
}
 80028be:	bd10      	pop	{r4, pc}

080028c0 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028c0:	6801      	ldr	r1, [r0, #0]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028c2:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028c4:	680b      	ldr	r3, [r1, #0]
 80028c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ca:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028cc:	2320      	movs	r3, #32
 80028ce:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80028d2:	f7ff fd77 	bl	80023c4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80028d6:	2000      	movs	r0, #0
 80028d8:	bd08      	pop	{r3, pc}

080028da <UART_Receive_IT>:
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028da:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80028de:	6802      	ldr	r2, [r0, #0]
 80028e0:	2b22      	cmp	r3, #34	; 0x22
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028e2:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028e4:	d12f      	bne.n	8002946 <UART_Receive_IT+0x6c>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e6:	6883      	ldr	r3, [r0, #8]
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 80028e8:	f8b0 405c 	ldrh.w	r4, [r0, #92]	; 0x5c

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028f2:	d108      	bne.n	8002906 <UART_Receive_IT+0x2c>
 80028f4:	6901      	ldr	r1, [r0, #16]
 80028f6:	b931      	cbnz	r1, 8002906 <UART_Receive_IT+0x2c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80028f8:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 80028fa:	ea04 0201 	and.w	r2, r4, r1
 80028fe:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2;
 8002902:	6543      	str	r3, [r0, #84]	; 0x54
 8002904:	e004      	b.n	8002910 <UART_Receive_IT+0x36>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002906:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002908:	1c59      	adds	r1, r3, #1
 800290a:	4022      	ands	r2, r4
 800290c:	6541      	str	r1, [r0, #84]	; 0x54
 800290e:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 8002910:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002914:	3c01      	subs	r4, #1
 8002916:	b2a4      	uxth	r4, r4
 8002918:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 800291c:	b9cc      	cbnz	r4, 8002952 <UART_Receive_IT+0x78>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800291e:	6803      	ldr	r3, [r0, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	f022 0220 	bic.w	r2, r2, #32
 8002926:	601a      	str	r2, [r3, #0]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800292e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002938:	2320      	movs	r3, #32
 800293a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800293e:	f000 f961 	bl	8002c04 <HAL_UART_RxCpltCallback>
 8002942:	4620      	mov	r0, r4
 8002944:	bd10      	pop	{r4, pc}
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002946:	6993      	ldr	r3, [r2, #24]
 8002948:	f043 0308 	orr.w	r3, r3, #8
 800294c:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 800294e:	2002      	movs	r0, #2
 8002950:	bd10      	pop	{r4, pc}
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8002952:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8002954:	bd10      	pop	{r4, pc}

08002956 <HAL_UART_IRQHandler>:
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  /* UART parity error interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8002956:	6803      	ldr	r3, [r0, #0]
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	07d1      	lsls	r1, r2, #31
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800295c:	b510      	push	{r4, lr}
 800295e:	4604      	mov	r4, r0
  /* UART parity error interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8002960:	d508      	bpl.n	8002974 <HAL_UART_IRQHandler+0x1e>
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	05d2      	lsls	r2, r2, #23
 8002966:	d505      	bpl.n	8002974 <HAL_UART_IRQHandler+0x1e>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002968:	2201      	movs	r2, #1
 800296a:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800296c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	66c2      	str	r2, [r0, #108]	; 0x6c
  }

  /* UART frame error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	0790      	lsls	r0, r2, #30
 8002978:	d508      	bpl.n	800298c <HAL_UART_IRQHandler+0x36>
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	07d1      	lsls	r1, r2, #31
 800297e:	d505      	bpl.n	800298c <HAL_UART_IRQHandler+0x36>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002980:	2202      	movs	r2, #2
 8002982:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002984:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002986:	f042 0204 	orr.w	r2, r2, #4
 800298a:	66e2      	str	r2, [r4, #108]	; 0x6c
  }

  /* UART noise error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	0752      	lsls	r2, r2, #29
 8002990:	d508      	bpl.n	80029a4 <HAL_UART_IRQHandler+0x4e>
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	07d0      	lsls	r0, r2, #31
 8002996:	d505      	bpl.n	80029a4 <HAL_UART_IRQHandler+0x4e>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002998:	2204      	movs	r2, #4
 800299a:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_NE;
 800299c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800299e:	f042 0202 	orr.w	r2, r2, #2
 80029a2:	66e2      	str	r2, [r4, #108]	; 0x6c
  }

  /* UART Over-Run interrupt occurred -----------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	0711      	lsls	r1, r2, #28
 80029a8:	d508      	bpl.n	80029bc <HAL_UART_IRQHandler+0x66>
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	07d2      	lsls	r2, r2, #31
 80029ae:	d505      	bpl.n	80029bc <HAL_UART_IRQHandler+0x66>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80029b0:	2208      	movs	r2, #8
 80029b2:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029b4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80029b6:	f042 0208 	orr.w	r2, r2, #8
 80029ba:	66e2      	str	r2, [r4, #108]	; 0x6c
  }

  /* UART wakeup from Stop mode interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	02d0      	lsls	r0, r2, #11
 80029c0:	d50d      	bpl.n	80029de <HAL_UART_IRQHandler+0x88>
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	0251      	lsls	r1, r2, #9
 80029c6:	d50a      	bpl.n	80029de <HAL_UART_IRQHandler+0x88>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80029c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029cc:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
 80029ce:	2320      	movs	r3, #32
 80029d0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;

    HAL_UARTEx_WakeupCallback(huart);
 80029d4:	4620      	mov	r0, r4
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
    huart->RxState = HAL_UART_STATE_READY;
 80029d6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    HAL_UARTEx_WakeupCallback(huart);
 80029da:	f000 f829 	bl	8002a30 <HAL_UARTEx_WakeupCallback>
  }

  /* UART in mode Receiver ---------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	0692      	lsls	r2, r2, #26
 80029e4:	d505      	bpl.n	80029f2 <HAL_UART_IRQHandler+0x9c>
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	069b      	lsls	r3, r3, #26
 80029ea:	d502      	bpl.n	80029f2 <HAL_UART_IRQHandler+0x9c>
  {
    UART_Receive_IT(huart);
 80029ec:	4620      	mov	r0, r4
 80029ee:	f7ff ff74 	bl	80028da <UART_Receive_IT>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	0610      	lsls	r0, r2, #24
 80029f8:	d505      	bpl.n	8002a06 <HAL_UART_IRQHandler+0xb0>
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0619      	lsls	r1, r3, #24
 80029fe:	d502      	bpl.n	8002a06 <HAL_UART_IRQHandler+0xb0>
  {
    UART_Transmit_IT(huart);
 8002a00:	4620      	mov	r0, r4
 8002a02:	f7ff ff32 	bl	800286a <UART_Transmit_IT>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	0652      	lsls	r2, r2, #25
 8002a0c:	d505      	bpl.n	8002a1a <HAL_UART_IRQHandler+0xc4>
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	065b      	lsls	r3, r3, #25
 8002a12:	d502      	bpl.n	8002a1a <HAL_UART_IRQHandler+0xc4>
  {
    UART_EndTransmit_IT(huart);
 8002a14:	4620      	mov	r0, r4
 8002a16:	f7ff ff53 	bl	80028c0 <UART_EndTransmit_IT>
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a1a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002a1c:	b13b      	cbz	r3, 8002a2e <HAL_UART_IRQHandler+0xd8>
  {
    /* Set the UART state ready to be able to start again the Tx/Rx process */
    huart->gState = HAL_UART_STATE_READY;
 8002a1e:	2320      	movs	r3, #32
 8002a20:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;

    HAL_UART_ErrorCallback(huart);
 8002a24:	4620      	mov	r0, r4

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Set the UART state ready to be able to start again the Tx/Rx process */
    huart->gState = HAL_UART_STATE_READY;
    huart->RxState = HAL_UART_STATE_READY;
 8002a26:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    HAL_UART_ErrorCallback(huart);
 8002a2a:	f7ff fccc 	bl	80023c6 <HAL_UART_ErrorCallback>
 8002a2e:	bd10      	pop	{r4, pc}

08002a30 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback
  * @param  huart: UART handle
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002a30:	4770      	bx	lr
	...

08002a34 <compass_init>:
#endif

I2C_HandleTypeDef *_i2c = 0;

bool compass_init(I2C_HandleTypeDef *i2c)
{
 8002a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a36:	b089      	sub	sp, #36	; 0x24
	uint8_t data[16] = {0};
 8002a38:	ac04      	add	r4, sp, #16
#endif

I2C_HandleTypeDef *_i2c = 0;

bool compass_init(I2C_HandleTypeDef *i2c)
{
 8002a3a:	4607      	mov	r7, r0
	uint8_t data[16] = {0};
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4620      	mov	r0, r4
 8002a42:	f002 f80f 	bl	8004a64 <memset>
	bool success = false;
	//store our handle
	_i2c = i2c;
 8002a46:	4d17      	ldr	r5, [pc, #92]	; (8002aa4 <compass_init+0x70>)

	HAL_I2C_Mem_Read(_i2c, HMC5883L_ADDRESS, HMC5883L_REG_IDENT_A, 1, data, 3, 100);
 8002a48:	9400      	str	r4, [sp, #0]
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	2664      	movs	r6, #100	; 0x64
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	9602      	str	r6, [sp, #8]
 8002a52:	2301      	movs	r3, #1
 8002a54:	220a      	movs	r2, #10
 8002a56:	213c      	movs	r1, #60	; 0x3c
 8002a58:	4638      	mov	r0, r7
bool compass_init(I2C_HandleTypeDef *i2c)
{
	uint8_t data[16] = {0};
	bool success = false;
	//store our handle
	_i2c = i2c;
 8002a5a:	602f      	str	r7, [r5, #0]

	HAL_I2C_Mem_Read(_i2c, HMC5883L_ADDRESS, HMC5883L_REG_IDENT_A, 1, data, 3, 100);
 8002a5c:	f7fe fe1e 	bl	800169c <HAL_I2C_Mem_Read>
	PRINT("ID = %02x, %02x, %02x\n\r", data[0], data[1], data[2]);
	if((data[0] == HMC5883L_REG_IDENT_A_VAL) &&
 8002a60:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002a64:	2b48      	cmp	r3, #72	; 0x48
 8002a66:	d119      	bne.n	8002a9c <compass_init+0x68>
 8002a68:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002a6c:	2b34      	cmp	r3, #52	; 0x34
 8002a6e:	d115      	bne.n	8002a9c <compass_init+0x68>
	  (data[1] == HMC5883L_REG_IDENT_B_VAL) &&
 8002a70:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8002a74:	2b33      	cmp	r3, #51	; 0x33
 8002a76:	d111      	bne.n	8002a9c <compass_init+0x68>
	  (data[2] == HMC5883L_REG_IDENT_C_VAL))
	{
		PRINT("Compass Found\n\r");
		//configure the compass
		data[0] = HMC5883L_REG_CONFIG_A;
		data[1] = (HMC5883L_SAMPLES_8 << HMC5883L_CRA_MA_Offset) | (HMC5883L_DATARATE_15HZ << HMC5883L_CRA_DO_Offset);
 8002a78:	2270      	movs	r2, #112	; 0x70
	  (data[1] == HMC5883L_REG_IDENT_B_VAL) &&
	  (data[2] == HMC5883L_REG_IDENT_C_VAL))
	{
		PRINT("Compass Found\n\r");
		//configure the compass
		data[0] = HMC5883L_REG_CONFIG_A;
 8002a7a:	2300      	movs	r3, #0
		data[1] = (HMC5883L_SAMPLES_8 << HMC5883L_CRA_MA_Offset) | (HMC5883L_DATARATE_15HZ << HMC5883L_CRA_DO_Offset);
 8002a7c:	f88d 2011 	strb.w	r2, [sp, #17]
		data[2] = HMC5883L_RANGE_1_3GA << HMC5883L_CRB_GN_Offset;
 8002a80:	2220      	movs	r2, #32
	  (data[1] == HMC5883L_REG_IDENT_B_VAL) &&
	  (data[2] == HMC5883L_REG_IDENT_C_VAL))
	{
		PRINT("Compass Found\n\r");
		//configure the compass
		data[0] = HMC5883L_REG_CONFIG_A;
 8002a82:	f88d 3010 	strb.w	r3, [sp, #16]
		data[1] = (HMC5883L_SAMPLES_8 << HMC5883L_CRA_MA_Offset) | (HMC5883L_DATARATE_15HZ << HMC5883L_CRA_DO_Offset);
		data[2] = HMC5883L_RANGE_1_3GA << HMC5883L_CRB_GN_Offset;
 8002a86:	f88d 2012 	strb.w	r2, [sp, #18]
		data[3] = HMC5883L_CONTINOUS;
 8002a8a:	f88d 3013 	strb.w	r3, [sp, #19]
		HAL_I2C_Master_Transmit(_i2c, HMC5883L_ADDRESS,data, 4, 100);
 8002a8e:	9600      	str	r6, [sp, #0]
 8002a90:	2304      	movs	r3, #4
 8002a92:	4622      	mov	r2, r4
 8002a94:	213c      	movs	r1, #60	; 0x3c
 8002a96:	6828      	ldr	r0, [r5, #0]
 8002a98:	f7fe fd68 	bl	800156c <HAL_I2C_Master_Transmit>
	}
	return success;
}
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	b009      	add	sp, #36	; 0x24
 8002aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200005b0 	.word	0x200005b0

08002aa8 <compass_get_heading>:


int16_t compass_get_heading()
{
 8002aa8:	b5d0      	push	{r4, r6, r7, lr}
 8002aaa:	b086      	sub	sp, #24
		int16_t x;
		int16_t z;
		int16_t y;
	} data_t;

	data_t mag_data = {0};
 8002aac:	2200      	movs	r2, #0
 8002aae:	9204      	str	r2, [sp, #16]
 8002ab0:	f8ad 2014 	strh.w	r2, [sp, #20]

	if(HAL_OK == HAL_I2C_Mem_Read(_i2c, HMC5883L_ADDRESS,HMC5883L_REG_OUT_X_M, 1, (uint8_t *)&mag_data, 6,100))
 8002ab4:	2264      	movs	r2, #100	; 0x64
		int16_t x;
		int16_t z;
		int16_t y;
	} data_t;

	data_t mag_data = {0};
 8002ab6:	ab04      	add	r3, sp, #16

	if(HAL_OK == HAL_I2C_Mem_Read(_i2c, HMC5883L_ADDRESS,HMC5883L_REG_OUT_X_M, 1, (uint8_t *)&mag_data, 6,100))
 8002ab8:	9202      	str	r2, [sp, #8]
 8002aba:	4829      	ldr	r0, [pc, #164]	; (8002b60 <compass_get_heading+0xb8>)
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	2206      	movs	r2, #6
 8002ac0:	9201      	str	r2, [sp, #4]
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	213c      	movs	r1, #60	; 0x3c
 8002ac8:	6800      	ldr	r0, [r0, #0]
 8002aca:	f7fe fde7 	bl	800169c <HAL_I2C_Mem_Read>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d13a      	bne.n	8002b48 <compass_get_heading+0xa0>
 8002ad2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8002ad6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8002ada:	bae4      	revsh	r4, r4
 8002adc:	bac0      	revsh	r0, r0
		mag_data.z = ((mag_data.z >> 8)&0x00FF) | ((mag_data.z << 8) & 0xFF00);
		PRINT("X=%d ; Y=%d ; Z=%d\n\r", mag_data.x, mag_data.y, mag_data.z);

		double xy = 0.0;
		double heading = 0.0;
		if(mag_data.y != 0)
 8002ade:	b344      	cbz	r4, 8002b32 <compass_get_heading+0x8a>
		{
			xy = (double)mag_data.x / (double)mag_data.y;
			xy = atan(xy) * 180.0 / 3.14;
 8002ae0:	f7fd fd20 	bl	8000524 <__aeabi_i2d>
 8002ae4:	4606      	mov	r6, r0
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	460f      	mov	r7, r1
 8002aea:	f7fd fd1b 	bl	8000524 <__aeabi_i2d>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4630      	mov	r0, r6
 8002af4:	4639      	mov	r1, r7
 8002af6:	f7fd fea5 	bl	8000844 <__aeabi_ddiv>
 8002afa:	ec41 0b10 	vmov	d0, r0, r1
 8002afe:	f008 fa3b 	bl	800af78 <atan>
 8002b02:	2200      	movs	r2, #0
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <compass_get_heading+0xbc>)
 8002b06:	ec51 0b10 	vmov	r0, r1, d0
 8002b0a:	f7fd fd71 	bl	80005f0 <__aeabi_dmul>
 8002b0e:	a310      	add	r3, pc, #64	; (adr r3, 8002b50 <compass_get_heading+0xa8>)
 8002b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b14:	f7fd fe96 	bl	8000844 <__aeabi_ddiv>
			if(mag_data.y < 0)
 8002b18:	2c00      	cmp	r4, #0
		double xy = 0.0;
		double heading = 0.0;
		if(mag_data.y != 0)
		{
			xy = (double)mag_data.x / (double)mag_data.y;
			xy = atan(xy) * 180.0 / 3.14;
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
			if(mag_data.y < 0)
 8002b1e:	da03      	bge.n	8002b28 <compass_get_heading+0x80>
			{
				heading = 270 - xy;
 8002b20:	a10d      	add	r1, pc, #52	; (adr r1, 8002b58 <compass_get_heading+0xb0>)
 8002b22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b26:	e001      	b.n	8002b2c <compass_get_heading+0x84>
			}
			else
			{
				heading = 90 - xy;
 8002b28:	490f      	ldr	r1, [pc, #60]	; (8002b68 <compass_get_heading+0xc0>)
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fd fbac 	bl	8000288 <__aeabi_dsub>
 8002b30:	e006      	b.n	8002b40 <compass_get_heading+0x98>
			}
		}
		else
		{
			if(mag_data.x < 0)
 8002b32:	2800      	cmp	r0, #0
				heading = 180.0;
 8002b34:	bfb8      	it	lt
 8002b36:	490b      	ldrlt	r1, [pc, #44]	; (8002b64 <compass_get_heading+0xbc>)
 8002b38:	f04f 0000 	mov.w	r0, #0
			else
				heading = 0.0;
 8002b3c:	bfa8      	it	ge
 8002b3e:	2100      	movge	r1, #0
		}
		PRINT("%d degrees \n\r", (uint16_t)heading);
		return (uint16_t)heading;
 8002b40:	f7fe f82e 	bl	8000ba0 <__aeabi_d2uiz>
 8002b44:	b200      	sxth	r0, r0
 8002b46:	e001      	b.n	8002b4c <compass_get_heading+0xa4>
	}//if hal ok
	return -1;
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bdd0      	pop	{r4, r6, r7, pc}
 8002b50:	51eb851f 	.word	0x51eb851f
 8002b54:	40091eb8 	.word	0x40091eb8
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	4070e000 	.word	0x4070e000
 8002b60:	200005b0 	.word	0x200005b0
 8002b64:	40668000 	.word	0x40668000
 8002b68:	40568000 	.word	0x40568000

08002b6c <_write>:
	GET_FIX,
	ACTIVE,
	COMPASS_ERROR = -1
} state_t;

int _write(int file, char *data, int len) {   // arbitrary timeout 1000
 8002b6c:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8002b6e:	2301      	movs	r3, #1
	GET_FIX,
	ACTIVE,
	COMPASS_ERROR = -1
} state_t;

int _write(int file, char *data, int len) {   // arbitrary timeout 1000
 8002b70:	4614      	mov	r4, r2
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8002b72:	4804      	ldr	r0, [pc, #16]	; (8002b84 <_write+0x18>)
 8002b74:	b292      	uxth	r2, r2
 8002b76:	f7ff fd6e 	bl	8002656 <HAL_UART_Transmit>
			1);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8002b7a:	2800      	cmp	r0, #0
}
 8002b7c:	bf0c      	ite	eq
 8002b7e:	4620      	moveq	r0, r4
 8002b80:	2000      	movne	r0, #0
 8002b82:	bd10      	pop	{r4, pc}
 8002b84:	200006fc 	.word	0x200006fc

08002b88 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002b88:	b510      	push	{r4, lr}
 8002b8a:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002b90:	2310      	movs	r3, #16
 8002b92:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b94:	2300      	movs	r3, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b96:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b98:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b9a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002b9c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ba0:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ba2:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002ba4:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ba6:	f7fe fe5b 	bl	8001860 <HAL_RCC_OscConfig>
 8002baa:	b100      	cbz	r0, 8002bae <SystemClock_Config+0x26>
 8002bac:	e7fe      	b.n	8002bac <SystemClock_Config+0x24>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bae:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bb0:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bb4:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bba:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	4668      	mov	r0, sp

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bc0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bc2:	f7ff f8e5 	bl	8001d90 <HAL_RCC_ClockConfig>
 8002bc6:	b100      	cbz	r0, 8002bca <SystemClock_Config+0x42>
 8002bc8:	e7fe      	b.n	8002bc8 <SystemClock_Config+0x40>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002bca:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002bcc:	9011      	str	r0, [sp, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002bce:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bd0:	a80f      	add	r0, sp, #60	; 0x3c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002bd2:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bd4:	f7ff f9c4 	bl	8001f60 <HAL_RCCEx_PeriphCLKConfig>
 8002bd8:	4604      	mov	r4, r0
 8002bda:	b100      	cbz	r0, 8002bde <SystemClock_Config+0x56>
 8002bdc:	e7fe      	b.n	8002bdc <SystemClock_Config+0x54>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002bde:	f7ff f989 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8002be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bea:	f7fe fa77 	bl	80010dc <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002bee:	2004      	movs	r0, #4
 8002bf0:	f7fe fa8a 	bl	8001108 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002bf4:	4622      	mov	r2, r4
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7fe fa2e 	bl	800105c <HAL_NVIC_SetPriority>
}
 8002c00:	b01c      	add	sp, #112	; 0x70
 8002c02:	bd10      	pop	{r4, pc}

08002c04 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	_cmd_rcvd = true;
 8002c04:	4b01      	ldr	r3, [pc, #4]	; (8002c0c <HAL_UART_RxCpltCallback+0x8>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	4770      	bx	lr
 8002c0c:	20000600 	.word	0x20000600

08002c10 <angleFromCoordinate>:
}

int16_t angleFromCoordinate(nmeaPOS *from, nmeaPOS *to)
{
 8002c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c14:	ed2d 8b06 	vpush	{d8-d10}
	//convert to rads
	double long1, long2, lat1, lat2;
	long1 = nmea_degree2radian(from->lon);
 8002c18:	ed90 0b02 	vldr	d0, [r0, #8]
{
	_cmd_rcvd = true;
}

int16_t angleFromCoordinate(nmeaPOS *from, nmeaPOS *to)
{
 8002c1c:	b087      	sub	sp, #28
 8002c1e:	460c      	mov	r4, r1
 8002c20:	4605      	mov	r5, r0
	//convert to rads
	double long1, long2, lat1, lat2;
	long1 = nmea_degree2radian(from->lon);
 8002c22:	f000 fcb5 	bl	8003590 <nmea_degree2radian>
 8002c26:	ec53 2b10 	vmov	r2, r3, d0
	lat1 = nmea_degree2radian(from->lat);
 8002c2a:	ed95 0b00 	vldr	d0, [r5]

int16_t angleFromCoordinate(nmeaPOS *from, nmeaPOS *to)
{
	//convert to rads
	double long1, long2, lat1, lat2;
	long1 = nmea_degree2radian(from->lon);
 8002c2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	lat1 = nmea_degree2radian(from->lat);
 8002c32:	f000 fcad 	bl	8003590 <nmea_degree2radian>
 8002c36:	eeb0 9a40 	vmov.f32	s18, s0
 8002c3a:	eef0 9a60 	vmov.f32	s19, s1
	long2 = nmea_degree2radian(to->lon);
 8002c3e:	ed94 0b02 	vldr	d0, [r4, #8]
 8002c42:	f000 fca5 	bl	8003590 <nmea_degree2radian>
 8002c46:	ec51 0b10 	vmov	r0, r1, d0
	lat2 = nmea_degree2radian(to->lat);
 8002c4a:	ed94 0b00 	vldr	d0, [r4]
{
	//convert to rads
	double long1, long2, lat1, lat2;
	long1 = nmea_degree2radian(from->lon);
	lat1 = nmea_degree2radian(from->lat);
	long2 = nmea_degree2radian(to->lon);
 8002c4e:	e9cd 0100 	strd	r0, r1, [sp]
	lat2 = nmea_degree2radian(to->lat);
 8002c52:	f000 fc9d 	bl	8003590 <nmea_degree2radian>
	double dLon = (long2 - long1);
 8002c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	//convert to rads
	double long1, long2, lat1, lat2;
	long1 = nmea_degree2radian(from->lon);
	lat1 = nmea_degree2radian(from->lat);
	long2 = nmea_degree2radian(to->lon);
	lat2 = nmea_degree2radian(to->lat);
 8002c5a:	eeb0 aa40 	vmov.f32	s20, s0
 8002c5e:	eef0 aa60 	vmov.f32	s21, s1
	double dLon = (long2 - long1);
 8002c62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002c66:	f7fd fb0f 	bl	8000288 <__aeabi_dsub>

	double y = sin(dLon) * cos(lat2);
 8002c6a:	ec41 0b10 	vmov	d0, r0, r1
	double long1, long2, lat1, lat2;
	long1 = nmea_degree2radian(from->lon);
	lat1 = nmea_degree2radian(from->lat);
	long2 = nmea_degree2radian(to->lon);
	lat2 = nmea_degree2radian(to->lat);
	double dLon = (long2 - long1);
 8002c6e:	ec41 0b18 	vmov	d8, r0, r1

	double y = sin(dLon) * cos(lat2);
 8002c72:	f008 fb71 	bl	800b358 <sin>
 8002c76:	ec57 6b10 	vmov	r6, r7, d0
 8002c7a:	eeb0 0a4a 	vmov.f32	s0, s20
 8002c7e:	eef0 0a6a 	vmov.f32	s1, s21
 8002c82:	f008 fb1d 	bl	800b2c0 <cos>
 8002c86:	ec55 4b10 	vmov	r4, r5, d0
	double x = cos(lat1) * sin(lat2) - sin(lat1)* cos(lat2) * cos(dLon);
 8002c8a:	eeb0 0a49 	vmov.f32	s0, s18
 8002c8e:	eef0 0a69 	vmov.f32	s1, s19
 8002c92:	f008 fb15 	bl	800b2c0 <cos>
 8002c96:	ec51 0b10 	vmov	r0, r1, d0
 8002c9a:	eeb0 0a4a 	vmov.f32	s0, s20
 8002c9e:	eef0 0a6a 	vmov.f32	s1, s21
 8002ca2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ca6:	f008 fb57 	bl	800b358 <sin>
 8002caa:	ec53 2b10 	vmov	r2, r3, d0
 8002cae:	eeb0 0a49 	vmov.f32	s0, s18
 8002cb2:	eef0 0a69 	vmov.f32	s1, s19
 8002cb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cba:	f008 fb4d 	bl	800b358 <sin>
 8002cbe:	ec5b ab10 	vmov	sl, fp, d0
 8002cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8002cc6:	eef0 0a68 	vmov.f32	s1, s17
 8002cca:	f008 faf9 	bl	800b2c0 <cos>

	double brng = atan2(y, x);
 8002cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002cd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
	long2 = nmea_degree2radian(to->lon);
	lat2 = nmea_degree2radian(to->lat);
	double dLon = (long2 - long1);

	double y = sin(dLon) * cos(lat2);
	double x = cos(lat1) * sin(lat2) - sin(lat1)* cos(lat2) * cos(dLon);
 8002cd6:	ed8d 0b00 	vstr	d0, [sp]

	double brng = atan2(y, x);
 8002cda:	f7fd fc89 	bl	80005f0 <__aeabi_dmul>
 8002cde:	4652      	mov	r2, sl
 8002ce0:	4680      	mov	r8, r0
 8002ce2:	4689      	mov	r9, r1
 8002ce4:	465b      	mov	r3, fp
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	4629      	mov	r1, r5
 8002cea:	f7fd fc81 	bl	80005f0 <__aeabi_dmul>
 8002cee:	ed9d 0b00 	vldr	d0, [sp]
 8002cf2:	ec53 2b10 	vmov	r2, r3, d0
 8002cf6:	f7fd fc7b 	bl	80005f0 <__aeabi_dmul>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4640      	mov	r0, r8
 8002d00:	4649      	mov	r1, r9
 8002d02:	f7fd fac1 	bl	8000288 <__aeabi_dsub>
 8002d06:	4622      	mov	r2, r4
 8002d08:	462b      	mov	r3, r5
 8002d0a:	e9cd 0100 	strd	r0, r1, [sp]
 8002d0e:	4630      	mov	r0, r6
 8002d10:	4639      	mov	r1, r7
 8002d12:	f7fd fc6d 	bl	80005f0 <__aeabi_dmul>
 8002d16:	ed9d 1b00 	vldr	d1, [sp]
 8002d1a:	ec41 0b10 	vmov	d0, r0, r1
 8002d1e:	f008 fb63 	bl	800b3e8 <atan2>

	brng = nmea_radian2degree(brng);
 8002d22:	f000 fc45 	bl	80035b0 <nmea_radian2degree>
	int16_t result = (((int16_t)brng + 360) % 360);
	//brng = 360 - brng; // count degrees counter-clockwise - remove to make clockwise

	return result;
 8002d26:	ec51 0b10 	vmov	r0, r1, d0
 8002d2a:	f7fd ff11 	bl	8000b50 <__aeabi_d2iz>
 8002d2e:	b200      	sxth	r0, r0
 8002d30:	f500 73b4 	add.w	r3, r0, #360	; 0x168
 8002d34:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8002d38:	fb93 f2f0 	sdiv	r2, r3, r0
 8002d3c:	fb00 3012 	mls	r0, r0, r2, r3
}
 8002d40:	b200      	sxth	r0, r0
 8002d42:	b007      	add	sp, #28
 8002d44:	ecbd 8b06 	vpop	{d8-d10}
 8002d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d4c <get_location>:

bool get_location(nmeaPOS *pos)
{
 8002d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4e:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 8002d52:	4607      	mov	r7, r0
	nmeaINFO info;
	nmeaPARSER parser;
	bool has_lock = false;
	nmea_zero_INFO(&info);
 8002d54:	a84c      	add	r0, sp, #304	; 0x130
 8002d56:	f000 fc67 	bl	8003628 <nmea_zero_INFO>
	nmea_parser_init(&parser);
	uint8_t data[GPS_BUFFSIZE] = { 0 };
	uint8_t ptr = 0;
	uint8_t data_b = 0;
 8002d5a:	2500      	movs	r5, #0
{
	nmeaINFO info;
	nmeaPARSER parser;
	bool has_lock = false;
	nmea_zero_INFO(&info);
	nmea_parser_init(&parser);
 8002d5c:	a807      	add	r0, sp, #28
	uint8_t ptr = 0;
	uint8_t data_b = 0;

	//get a command from GPS
	data_b = 0;
	memset(data, 0, GPS_BUFFSIZE);
 8002d5e:	ac0c      	add	r4, sp, #48	; 0x30
{
	nmeaINFO info;
	nmeaPARSER parser;
	bool has_lock = false;
	nmea_zero_INFO(&info);
	nmea_parser_init(&parser);
 8002d60:	f001 f886 	bl	8003e70 <nmea_parser_init>
	uint8_t ptr = 0;
	uint8_t data_b = 0;

	//get a command from GPS
	data_b = 0;
	memset(data, 0, GPS_BUFFSIZE);
 8002d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d68:	4629      	mov	r1, r5
 8002d6a:	4620      	mov	r0, r4
	bool has_lock = false;
	nmea_zero_INFO(&info);
	nmea_parser_init(&parser);
	uint8_t data[GPS_BUFFSIZE] = { 0 };
	uint8_t ptr = 0;
	uint8_t data_b = 0;
 8002d6c:	f88d 501b 	strb.w	r5, [sp, #27]

	//get a command from GPS
	data_b = 0;
	memset(data, 0, GPS_BUFFSIZE);
 8002d70:	f001 fe78 	bl	8004a64 <memset>
	ptr = 0;
	//wait for a $
	while(data_b != '$')
 8002d74:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002d78:	2b24      	cmp	r3, #36	; 0x24
 8002d7a:	d00a      	beq.n	8002d92 <get_location+0x46>
	{
		data_b = 0;
		HAL_UART_Receive(&huart1, &data_b, 1, 10000);
 8002d7c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002d80:	2201      	movs	r2, #1
 8002d82:	f10d 011b 	add.w	r1, sp, #27
 8002d86:	4822      	ldr	r0, [pc, #136]	; (8002e10 <get_location+0xc4>)
	memset(data, 0, GPS_BUFFSIZE);
	ptr = 0;
	//wait for a $
	while(data_b != '$')
	{
		data_b = 0;
 8002d88:	f88d 501b 	strb.w	r5, [sp, #27]
		HAL_UART_Receive(&huart1, &data_b, 1, 10000);
 8002d8c:	f7ff fcb0 	bl	80026f0 <HAL_UART_Receive>
 8002d90:	e7f0      	b.n	8002d74 <get_location+0x28>
	}
	data[ptr++] = data_b;
 8002d92:	7023      	strb	r3, [r4, #0]
 8002d94:	2501      	movs	r5, #1
	while(!has_lock)
	{
		//put all data in a buffer
		if(HAL_OK == HAL_UART_Receive(&huart1, &data_b, 1, 1))
 8002d96:	2301      	movs	r3, #1
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f10d 011b 	add.w	r1, sp, #27
 8002d9e:	481c      	ldr	r0, [pc, #112]	; (8002e10 <get_location+0xc4>)
 8002da0:	f7ff fca6 	bl	80026f0 <HAL_UART_Receive>
 8002da4:	b990      	cbnz	r0, 8002dcc <get_location+0x80>
		{
			data[ptr++] = data_b;
 8002da6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002daa:	5563      	strb	r3, [r4, r5]
 8002dac:	1c6e      	adds	r6, r5, #1
			// until received a \n
			if((data_b == '\n') || (data_b == '\r'))
 8002dae:	2b0a      	cmp	r3, #10
	while(!has_lock)
	{
		//put all data in a buffer
		if(HAL_OK == HAL_UART_Receive(&huart1, &data_b, 1, 1))
		{
			data[ptr++] = data_b;
 8002db0:	b2f6      	uxtb	r6, r6
			// until received a \n
			if((data_b == '\n') || (data_b == '\r'))
 8002db2:	d001      	beq.n	8002db8 <get_location+0x6c>
 8002db4:	2b0d      	cmp	r3, #13
 8002db6:	d108      	bne.n	8002dca <get_location+0x7e>
			{
				nmea_parse(&parser, (char *)data, (int)strlen((char *)data), &info);
 8002db8:	4620      	mov	r0, r4
 8002dba:	f7fd fa59 	bl	8000270 <strlen>
 8002dbe:	ab4c      	add	r3, sp, #304	; 0x130
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	a807      	add	r0, sp, #28
 8002dc6:	f001 f98f 	bl	80040e8 <nmea_parse>
	while(!has_lock)
	{
		//put all data in a buffer
		if(HAL_OK == HAL_UART_Receive(&huart1, &data_b, 1, 1))
		{
			data[ptr++] = data_b;
 8002dca:	4635      	mov	r5, r6
	{
		data_b = 0;
		HAL_UART_Receive(&huart1, &data_b, 1, 10000);
	}
	data[ptr++] = data_b;
	while(!has_lock)
 8002dcc:	9e54      	ldr	r6, [sp, #336]	; 0x150
 8002dce:	2e01      	cmp	r6, #1
 8002dd0:	d1e1      	bne.n	8002d96 <get_location+0x4a>
		{
			has_lock = true;
		}
	}
	//fix got!
	pos->lat = nmea_ndeg2degree(info.lat);
 8002dd2:	ed9d 0b5c 	vldr	d0, [sp, #368]	; 0x170
 8002dd6:	f000 fbfb 	bl	80035d0 <nmea_ndeg2degree>
 8002dda:	ed87 0b00 	vstr	d0, [r7]
	pos->lon = nmea_ndeg2degree(info.lon);
 8002dde:	ed9d 0b5e 	vldr	d0, [sp, #376]	; 0x178
 8002de2:	f000 fbf5 	bl	80035d0 <nmea_ndeg2degree>
	printf("Fix obtained: LAT:%f, LON:%f, UTC:%d:%d, dec:%f\n\r", pos->lat, pos->lon, info.utc.hour, info.utc.min, info.declination);
 8002de6:	e9dd 2366 	ldrd	r2, r3, [sp, #408]	; 0x198
			has_lock = true;
		}
	}
	//fix got!
	pos->lat = nmea_ndeg2degree(info.lat);
	pos->lon = nmea_ndeg2degree(info.lon);
 8002dea:	ed87 0b02 	vstr	d0, [r7, #8]
	printf("Fix obtained: LAT:%f, LON:%f, UTC:%d:%d, dec:%f\n\r", pos->lat, pos->lon, info.utc.hour, info.utc.min, info.declination);
 8002dee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002df2:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8002df4:	9303      	str	r3, [sp, #12]
 8002df6:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8002df8:	9302      	str	r3, [sp, #8]
 8002dfa:	ed8d 0b00 	vstr	d0, [sp]
 8002dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e02:	4804      	ldr	r0, [pc, #16]	; (8002e14 <get_location+0xc8>)
 8002e04:	f001 fe38 	bl	8004a78 <printf>
	return true;
}
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
 8002e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e10:	20000650 	.word	0x20000650
 8002e14:	0800c6a4 	.word	0x0800c6a4

08002e18 <main>:
bool _cmd_rcvd;
//#define TEST
/* USER CODE END 0 */

int main(void)
{
 8002e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* USER CODE BEGIN 1 */
	_cmd_rcvd = false;
 8002e1c:	4b90      	ldr	r3, [pc, #576]	; (8003060 <main+0x248>)
 8002e1e:	2400      	movs	r4, #0
bool _cmd_rcvd;
//#define TEST
/* USER CODE END 0 */

int main(void)
{
 8002e20:	b08e      	sub	sp, #56	; 0x38

  /* USER CODE BEGIN 1 */
	_cmd_rcvd = false;
	nmeaPOS gps_pos = {0.0,0.0};
 8002e22:	2200      	movs	r2, #0

int main(void)
{

  /* USER CODE BEGIN 1 */
	_cmd_rcvd = false;
 8002e24:	701c      	strb	r4, [r3, #0]
	nmeaPOS gps_pos = {0.0,0.0};
 8002e26:	2300      	movs	r3, #0
 8002e28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e30:	f7fe f8d4 	bl	8000fdc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002e34:	f7ff fea8 	bl	8002b88 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e38:	4b8a      	ldr	r3, [pc, #552]	; (8003064 <main+0x24c>)

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e3a:	488b      	ldr	r0, [pc, #556]	; (8003068 <main+0x250>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002e42:	615a      	str	r2, [r3, #20]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002e4a:	9200      	str	r2, [sp, #0]
 8002e4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002e54:	615a      	str	r2, [r3, #20]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002e5c:	9201      	str	r2, [sp, #4]
 8002e5e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002e66:	615a      	str	r2, [r3, #20]
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002e6e:	9202      	str	r2, [sp, #8]
 8002e70:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e72:	695a      	ldr	r2, [r3, #20]
 8002e74:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e78:	615a      	str	r2, [r3, #20]
 8002e7a:	695b      	ldr	r3, [r3, #20]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e82:	9303      	str	r3, [sp, #12]
 8002e84:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e8a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e8c:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e8e:	4b77      	ldr	r3, [pc, #476]	; (800306c <main+0x254>)
 8002e90:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : MOTOR_1_Pin MOTOR_2_Pin testpin_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin|testpin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e92:	2601      	movs	r6, #1

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e94:	f7fe f94a 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_1_Pin MOTOR_2_Pin testpin_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin|testpin_Pin;
 8002e98:	f04f 0813 	mov.w	r8, #19
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e9c:	a909      	add	r1, sp, #36	; 0x24
 8002e9e:	4872      	ldr	r0, [pc, #456]	; (8003068 <main+0x250>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : MOTOR_1_Pin MOTOR_2_Pin testpin_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin|testpin_Pin;
 8002ea0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea4:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eaa:	f7fe f93f 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : COMPASS_ZERO_Pin */
  GPIO_InitStruct.Pin = COMPASS_ZERO_Pin;
 8002eae:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(COMPASS_ZERO_GPIO_Port, &GPIO_InitStruct);
 8002eb0:	a909      	add	r1, sp, #36	; 0x24
 8002eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : COMPASS_ZERO_Pin */
  GPIO_InitStruct.Pin = COMPASS_ZERO_Pin;
 8002eb6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(COMPASS_ZERO_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MOTOR_4_Pin */
  GPIO_InitStruct.Pin = MOTOR_4_Pin;
 8002eb8:	2710      	movs	r7, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : COMPASS_ZERO_Pin */
  GPIO_InitStruct.Pin = COMPASS_ZERO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eba:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(COMPASS_ZERO_GPIO_Port, &GPIO_InitStruct);
 8002ebe:	f7fe f935 	bl	800112c <HAL_GPIO_Init>
  /*Configure GPIO pin : MOTOR_4_Pin */
  GPIO_InitStruct.Pin = MOTOR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 8002ec2:	a909      	add	r1, sp, #36	; 0x24
 8002ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pins : MOTOR_3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = MOTOR_3_Pin|LD2_Pin;
 8002ec8:	f242 0501 	movw	r5, #8193	; 0x2001
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(COMPASS_ZERO_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MOTOR_4_Pin */
  GPIO_InitStruct.Pin = MOTOR_4_Pin;
 8002ecc:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ece:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(MOTOR_4_GPIO_Port, &GPIO_InitStruct);
 8002ed4:	f7fe f92a 	bl	800112c <HAL_GPIO_Init>
  /*Configure GPIO pins : MOTOR_3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = MOTOR_3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed8:	a909      	add	r1, sp, #36	; 0x24
 8002eda:	4865      	ldr	r0, [pc, #404]	; (8003070 <main+0x258>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOTOR_4_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : MOTOR_3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = MOTOR_3_Pin|LD2_Pin;
 8002edc:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ede:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee4:	f7fe f922 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 ZERO_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|ZERO_Pin;
 8002ee8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eec:	a909      	add	r1, sp, #36	; 0x24
 8002eee:	4860      	ldr	r0, [pc, #384]	; (8003070 <main+0x258>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB14 ZERO_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|ZERO_Pin;
 8002ef0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef6:	f7fe f919 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_1_Pin|MOTOR_2_Pin|testpin_Pin, GPIO_PIN_RESET);
 8002efa:	4622      	mov	r2, r4
 8002efc:	4641      	mov	r1, r8
 8002efe:	485a      	ldr	r0, [pc, #360]	; (8003068 <main+0x250>)
 8002f00:	f7fe f9da 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_4_GPIO_Port, MOTOR_4_Pin, GPIO_PIN_RESET);
 8002f04:	4639      	mov	r1, r7
 8002f06:	4622      	mov	r2, r4
 8002f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f0c:	f7fe f9d4 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002f10:	4629      	mov	r1, r5
 8002f12:	4622      	mov	r2, r4

/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
 8002f14:	4d57      	ldr	r5, [pc, #348]	; (8003074 <main+0x25c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_4_GPIO_Port, MOTOR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002f16:	4856      	ldr	r0, [pc, #344]	; (8003070 <main+0x258>)
/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
 8002f18:	4f57      	ldr	r7, [pc, #348]	; (8003078 <main+0x260>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_4_GPIO_Port, MOTOR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002f1a:	f7fe f9cd 	bl	80012b8 <HAL_GPIO_WritePin>
/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
 8002f1e:	4b57      	ldr	r3, [pc, #348]	; (800307c <main+0x264>)
  hi2c1.Init.OwnAddress1 = 0;
 8002f20:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f22:	4628      	mov	r0, r5
/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
 8002f24:	e885 0088 	stmia.w	r5, {r3, r7}
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f28:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f2a:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f2c:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f2e:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f30:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f32:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f34:	f7fe facb 	bl	80014ce <HAL_I2C_Init>
 8002f38:	4601      	mov	r1, r0
 8002f3a:	b100      	cbz	r0, 8002f3e <main+0x126>
 8002f3c:	e7fe      	b.n	8002f3c <main+0x124>
    Error_Handler();
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f7fe fc68 	bl	8001814 <HAL_I2CEx_ConfigAnalogFilter>
 8002f44:	b100      	cbz	r0, 8002f48 <main+0x130>
 8002f46:	e7fe      	b.n	8002f46 <main+0x12e>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8002f48:	4b4d      	ldr	r3, [pc, #308]	; (8003080 <main+0x268>)
  huart1.Init.BaudRate = 9600;
 8002f4a:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <main+0x26c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f4c:	6098      	str	r0, [r3, #8]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8002f4e:	f44f 5416 	mov.w	r4, #9600	; 0x2580
 8002f52:	e883 0014 	stmia.w	r3, {r2, r4}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f56:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f58:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f5a:	240c      	movs	r4, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5c:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f5e:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f60:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f62:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f64:	4618      	mov	r0, r3
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f66:	615c      	str	r4, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f68:	f7ff fc4d 	bl	8002806 <HAL_UART_Init>
 8002f6c:	b100      	cbz	r0, 8002f70 <main+0x158>
 8002f6e:	e7fe      	b.n	8002f6e <main+0x156>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8002f70:	4b45      	ldr	r3, [pc, #276]	; (8003088 <main+0x270>)
  huart2.Init.BaudRate = 115200;
 8002f72:	4946      	ldr	r1, [pc, #280]	; (800308c <main+0x274>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f74:	6098      	str	r0, [r3, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8002f76:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f7a:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f7c:	6118      	str	r0, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7e:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f80:	61d8      	str	r0, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f82:	6218      	str	r0, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f84:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f86:	4618      	mov	r0, r3
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8002f88:	e883 0006 	stmia.w	r3, {r1, r2}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f8c:	615c      	str	r4, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f8e:	f7ff fc3a 	bl	8002806 <HAL_UART_Init>
 8002f92:	b100      	cbz	r0, 8002f96 <main+0x17e>
 8002f94:	e7fe      	b.n	8002f94 <main+0x17c>
static void MX_TIM6_Init(void)
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8002f96:	4c3e      	ldr	r4, [pc, #248]	; (8003090 <main+0x278>)
 8002f98:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <main+0x27c>)
  htim6.Init.Prescaler = 1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9a:	60a0      	str	r0, [r4, #8]
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 1;
 8002f9c:	e884 0048 	stmia.w	r4, {r3, r6}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 255;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fa0:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 255;
 8002fa2:	23ff      	movs	r3, #255	; 0xff
 8002fa4:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fa6:	f7ff f9cf 	bl	8002348 <HAL_TIM_Base_Init>
 8002faa:	b100      	cbz	r0, 8002fae <main+0x196>
 8002fac:	e7fe      	b.n	8002fac <main+0x194>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fae:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb0:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002fb2:	a909      	add	r1, sp, #36	; 0x24
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f7ff f9e1 	bl	800237c <HAL_TIMEx_MasterConfigSynchronization>
 8002fba:	4604      	mov	r4, r0
 8002fbc:	b100      	cbz	r0, 8002fc0 <main+0x1a8>
 8002fbe:	e7fe      	b.n	8002fbe <main+0x1a6>
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM6_Init();

  /* USER CODE BEGIN 2 */
	printf("Compass\n\r");
 8002fc0:	4835      	ldr	r0, [pc, #212]	; (8003098 <main+0x280>)
 8002fc2:	f001 fd59 	bl	8004a78 <printf>
//	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	get_location(&gps_pos);//i think it is reasonable that the unit isn't going to move in this situation, at least not by enough we'll care
 8002fc6:	a804      	add	r0, sp, #16
 8002fc8:	f7ff fec0 	bl	8002d4c <get_location>
{

  /* USER CODE BEGIN 1 */
	_cmd_rcvd = false;
	nmeaPOS gps_pos = {0.0,0.0};
	state_t state = STARTUP;
 8002fcc:	4625      	mov	r5, r4

	int16_t current_bearing = 0;
	int16_t resolved_angle = 0;
	while (1)
	{
		switch(state)
 8002fce:	2d03      	cmp	r5, #3
 8002fd0:	d83c      	bhi.n	800304c <main+0x234>
 8002fd2:	e8df f005 	tbb	[pc, r5]
 8002fd6:	0a02      	.short	0x0a02
 8002fd8:	2315      	.short	0x2315
		{
		case STARTUP:
			printf("Start up\n\r");
 8002fda:	4830      	ldr	r0, [pc, #192]	; (800309c <main+0x284>)
 8002fdc:	f001 fd4c 	bl	8004a78 <printf>
			compass_init(&hi2c1);
 8002fe0:	4824      	ldr	r0, [pc, #144]	; (8003074 <main+0x25c>)
 8002fe2:	f7ff fd27 	bl	8002a34 <compass_init>
			state = ZERO_MOTORS;
 8002fe6:	2501      	movs	r5, #1
			break;
 8002fe8:	e034      	b.n	8003054 <main+0x23c>
		case ZERO_MOTORS:
			printf("Zeroing motors\n\r");
 8002fea:	482d      	ldr	r0, [pc, #180]	; (80030a0 <main+0x288>)
 8002fec:	f001 fd44 	bl	8004a78 <printf>
			if(zero_motor())
 8002ff0:	f000 f924 	bl	800323c <zero_motor>
				state = ACTIVE;
#endif
			}
			else
			{
				state = COMPASS_ERROR;
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	bf14      	ite	ne
 8002ff8:	2502      	movne	r5, #2
 8002ffa:	f04f 35ff 	moveq.w	r5, #4294967295
 8002ffe:	e029      	b.n	8003054 <main+0x23c>
			}
			break;
		case GET_FIX:
			printf("Get fix\n\r");
 8003000:	4828      	ldr	r0, [pc, #160]	; (80030a4 <main+0x28c>)
 8003002:	f001 fd39 	bl	8004a78 <printf>
//			get_location(&gps_pos);//i think it is reasonable that the unit isn't going to move in this situation, at least not by enough we'll care
			resolved_angle = angleFromCoordinate(&gps_pos, &dest_pos);
 8003006:	4928      	ldr	r1, [pc, #160]	; (80030a8 <main+0x290>)
 8003008:	a804      	add	r0, sp, #16
 800300a:	f7ff fe01 	bl	8002c10 <angleFromCoordinate>
			printf("A= %d\n\r", resolved_angle);
 800300e:	4601      	mov	r1, r0
			}
			break;
		case GET_FIX:
			printf("Get fix\n\r");
//			get_location(&gps_pos);//i think it is reasonable that the unit isn't going to move in this situation, at least not by enough we'll care
			resolved_angle = angleFromCoordinate(&gps_pos, &dest_pos);
 8003010:	4604      	mov	r4, r0
			printf("A= %d\n\r", resolved_angle);
 8003012:	4826      	ldr	r0, [pc, #152]	; (80030ac <main+0x294>)
 8003014:	f001 fd30 	bl	8004a78 <printf>

			//@todo implement a timeout
			state = ACTIVE;
 8003018:	2503      	movs	r5, #3
			break;
 800301a:	e01b      	b.n	8003054 <main+0x23c>
		case ACTIVE:
			printf("Active!!\n\r");
 800301c:	4824      	ldr	r0, [pc, #144]	; (80030b0 <main+0x298>)
 800301e:	f001 fd2b 	bl	8004a78 <printf>
			current_bearing = compass_get_heading() - 180;
 8003022:	f7ff fd41 	bl	8002aa8 <compass_get_heading>
//			for now, we'll assume there is 0 fudge factor between the compass and box
			printf("C = %d,p = %d\n\r", current_bearing, resolved_angle - current_bearing);
 8003026:	38b4      	subs	r0, #180	; 0xb4
 8003028:	b201      	sxth	r1, r0
 800302a:	1a66      	subs	r6, r4, r1
 800302c:	4632      	mov	r2, r6
 800302e:	4821      	ldr	r0, [pc, #132]	; (80030b4 <main+0x29c>)
 8003030:	f001 fd22 	bl	8004a78 <printf>
			set_target((resolved_angle - current_bearing + 360)%360);
 8003034:	f506 76b4 	add.w	r6, r6, #360	; 0x168
 8003038:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800303c:	fb96 f3f0 	sdiv	r3, r6, r0
 8003040:	fb00 6013 	mls	r0, r0, r3, r6
 8003044:	b200      	sxth	r0, r0
 8003046:	f000 f92f 	bl	80032a8 <set_target>
			break;
 800304a:	e003      	b.n	8003054 <main+0x23c>

		default:
			printf("Error occurred...\n\r");
 800304c:	481a      	ldr	r0, [pc, #104]	; (80030b8 <main+0x2a0>)
 800304e:	f001 fd13 	bl	8004a78 <printf>
 8003052:	e7fe      	b.n	8003052 <main+0x23a>
			while(1);
			return 1;
		}
		HAL_Delay(500);
 8003054:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003058:	f7fd ffe0 	bl	800101c <HAL_Delay>
//	  HAL_Delay(1000);
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

	}
 800305c:	e7b7      	b.n	8002fce <main+0x1b6>
 800305e:	bf00      	nop
 8003060:	20000600 	.word	0x20000600
 8003064:	40021000 	.word	0x40021000
 8003068:	48000800 	.word	0x48000800
 800306c:	10120000 	.word	0x10120000
 8003070:	48000400 	.word	0x48000400
 8003074:	20000604 	.word	0x20000604
 8003078:	2000090e 	.word	0x2000090e
 800307c:	40005400 	.word	0x40005400
 8003080:	20000650 	.word	0x20000650
 8003084:	40013800 	.word	0x40013800
 8003088:	200006fc 	.word	0x200006fc
 800308c:	40004400 	.word	0x40004400
 8003090:	200006c0 	.word	0x200006c0
 8003094:	40001000 	.word	0x40001000
 8003098:	0800c6d6 	.word	0x0800c6d6
 800309c:	0800c6e0 	.word	0x0800c6e0
 80030a0:	0800c6eb 	.word	0x0800c6eb
 80030a4:	0800c6fc 	.word	0x0800c6fc
 80030a8:	20000008 	.word	0x20000008
 80030ac:	0800c706 	.word	0x0800c706
 80030b0:	0800c70e 	.word	0x0800c70e
 80030b4:	0800c719 	.word	0x0800c719
 80030b8:	0800c729 	.word	0x0800c729

080030bc <get_zero_state>:
		}
	}
}

bool get_zero_state()
{
 80030bc:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ZERO_GPIO_Port, ZERO_Pin) == GPIO_PIN_RESET);
 80030be:	2180      	movs	r1, #128	; 0x80
 80030c0:	4803      	ldr	r0, [pc, #12]	; (80030d0 <get_zero_state+0x14>)
 80030c2:	f7fe f8f3 	bl	80012ac <HAL_GPIO_ReadPin>
}
 80030c6:	fab0 f080 	clz	r0, r0
 80030ca:	0940      	lsrs	r0, r0, #5
 80030cc:	bd08      	pop	{r3, pc}
 80030ce:	bf00      	nop
 80030d0:	48000400 	.word	0x48000400

080030d4 <motors_off>:

void motors_off()
{
 80030d4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(MOTOR_1_GPIO_Port,MOTOR_1_Pin, GPIO_PIN_RESET);
 80030d6:	4c0c      	ldr	r4, [pc, #48]	; (8003108 <motors_off+0x34>)
 80030d8:	2200      	movs	r2, #0
 80030da:	4620      	mov	r0, r4
 80030dc:	2101      	movs	r1, #1
 80030de:	f7fe f8eb 	bl	80012b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_2_GPIO_Port,MOTOR_2_Pin, GPIO_PIN_RESET);
 80030e2:	4620      	mov	r0, r4
 80030e4:	2200      	movs	r2, #0
 80030e6:	2102      	movs	r1, #2
 80030e8:	f7fe f8e6 	bl	80012b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_RESET);
 80030ec:	2200      	movs	r2, #0
 80030ee:	2101      	movs	r1, #1
 80030f0:	4806      	ldr	r0, [pc, #24]	; (800310c <motors_off+0x38>)
 80030f2:	f7fe f8e1 	bl	80012b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_RESET);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2110      	movs	r1, #16
 80030fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 80030fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void motors_off()
{
	HAL_GPIO_WritePin(MOTOR_1_GPIO_Port,MOTOR_1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_2_GPIO_Port,MOTOR_2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_RESET);
 8003102:	f7fe b8d9 	b.w	80012b8 <HAL_GPIO_WritePin>
 8003106:	bf00      	nop
 8003108:	48000800 	.word	0x48000800
 800310c:	48000400 	.word	0x48000400

08003110 <set_speed>:
	return motor_running;
}
//@param speed 0-255 (0 being off) linear scale between off and full speed
//@param clockwise - direction to rotate
void set_speed(uint8_t speed, bool cw_nacw)
{
 8003110:	b538      	push	{r3, r4, r5, lr}
	direction = cw_nacw;
 8003112:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <set_speed+0x34>)
 8003114:	4c0c      	ldr	r4, [pc, #48]	; (8003148 <set_speed+0x38>)
 8003116:	7019      	strb	r1, [r3, #0]
	if(0 == speed)
 8003118:	4605      	mov	r5, r0
 800311a:	b938      	cbnz	r0, 800312c <set_speed+0x1c>
	{
		motors_off();
 800311c:	f7ff ffda 	bl	80030d4 <motors_off>
		motor_running = false;
 8003120:	7025      	strb	r5, [r4, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 8003122:	480a      	ldr	r0, [pc, #40]	; (800314c <set_speed+0x3c>)
		{
			HAL_TIM_Base_Start_IT(&htim6);
			motor_running = true;
		}
	}
}
 8003124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	direction = cw_nacw;
	if(0 == speed)
	{
		motors_off();
		motor_running = false;
		HAL_TIM_Base_Stop_IT(&htim6);
 8003128:	f7ff b815 	b.w	8002156 <HAL_TIM_Base_Stop_IT>
	}
	else
	{
		htim6.Instance->ARR = MIN_SPEED;
 800312c:	4807      	ldr	r0, [pc, #28]	; (800314c <set_speed+0x3c>)
 800312e:	6803      	ldr	r3, [r0, #0]
 8003130:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c
//		htim6.Instance->ARR = (MIN_SPEED - ((MIN_SPEED - MAX_SPEED) / (256 - (uint32_t)speed)));
		if(!motor_running)
 8003136:	7823      	ldrb	r3, [r4, #0]
 8003138:	b91b      	cbnz	r3, 8003142 <set_speed+0x32>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 800313a:	f7ff f801 	bl	8002140 <HAL_TIM_Base_Start_IT>
			motor_running = true;
 800313e:	2301      	movs	r3, #1
 8003140:	7023      	strb	r3, [r4, #0]
 8003142:	bd38      	pop	{r3, r4, r5, pc}
 8003144:	200005bd 	.word	0x200005bd
 8003148:	200005bc 	.word	0x200005bc
 800314c:	200006c0 	.word	0x200006c0

08003150 <write_motors>:
	HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_RESET);
}

void write_motors(uint8_t state)
{
 8003150:	b510      	push	{r4, lr}
 8003152:	4604      	mov	r4, r0
	motors_off();
 8003154:	f7ff ffbe 	bl	80030d4 <motors_off>
	if(state & 0x01)
 8003158:	07e0      	lsls	r0, r4, #31
 800315a:	d504      	bpl.n	8003166 <write_motors+0x16>
	{
		HAL_GPIO_WritePin(MOTOR_1_GPIO_Port,MOTOR_1_Pin, GPIO_PIN_SET);
 800315c:	2201      	movs	r2, #1
 800315e:	4611      	mov	r1, r2
 8003160:	480d      	ldr	r0, [pc, #52]	; (8003198 <write_motors+0x48>)
 8003162:	f7fe f8a9 	bl	80012b8 <HAL_GPIO_WritePin>
//	else
//	{
//		HAL_GPIO_WritePin(MOTOR_1_GPIO_Port,MOTOR_1_Pin, GPIO_PIN_RESET);
//	}

	if(state & 0x02)
 8003166:	07a1      	lsls	r1, r4, #30
 8003168:	d504      	bpl.n	8003174 <write_motors+0x24>
	{
		HAL_GPIO_WritePin(MOTOR_2_GPIO_Port,MOTOR_2_Pin, GPIO_PIN_SET);
 800316a:	2201      	movs	r2, #1
 800316c:	2102      	movs	r1, #2
 800316e:	480a      	ldr	r0, [pc, #40]	; (8003198 <write_motors+0x48>)
 8003170:	f7fe f8a2 	bl	80012b8 <HAL_GPIO_WritePin>
//	else
//	{
//		HAL_GPIO_WritePin(MOTOR_2_GPIO_Port,MOTOR_2_Pin, GPIO_PIN_RESET);
//	}

	if(state & 0x04)
 8003174:	0762      	lsls	r2, r4, #29
 8003176:	d504      	bpl.n	8003182 <write_motors+0x32>
	{
		HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_SET);
 8003178:	2201      	movs	r2, #1
 800317a:	4611      	mov	r1, r2
 800317c:	4807      	ldr	r0, [pc, #28]	; (800319c <write_motors+0x4c>)
 800317e:	f7fe f89b 	bl	80012b8 <HAL_GPIO_WritePin>
//	else
//	{
//		HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_RESET);
//	}

	if(state & 0x08)
 8003182:	0723      	lsls	r3, r4, #28
 8003184:	d507      	bpl.n	8003196 <write_motors+0x46>
	{
		HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_SET);
 8003186:	2201      	movs	r2, #1
 8003188:	2110      	movs	r1, #16
 800318a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	}
//	else
//	{
//		HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_RESET);
//	}
}
 800318e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//		HAL_GPIO_WritePin(MOTOR_3_GPIO_Port,MOTOR_3_Pin, GPIO_PIN_RESET);
//	}

	if(state & 0x08)
	{
		HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_SET);
 8003192:	f7fe b891 	b.w	80012b8 <HAL_GPIO_WritePin>
 8003196:	bd10      	pop	{r4, pc}
 8003198:	48000800 	.word	0x48000800
 800319c:	48000400 	.word	0x48000400

080031a0 <step_acw>:
//		HAL_GPIO_WritePin(MOTOR_4_GPIO_Port,MOTOR_4_Pin, GPIO_PIN_RESET);
//	}
}

void step_acw()
{
 80031a0:	b510      	push	{r4, lr}
	uint8_t i = --step_count%8; //0-7 val
 80031a2:	4c07      	ldr	r4, [pc, #28]	; (80031c0 <step_acw+0x20>)
	write_motors(motor_movement_cw[i]);
 80031a4:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <step_acw+0x24>)
//	}
}

void step_acw()
{
	uint8_t i = --step_count%8; //0-7 val
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	6023      	str	r3, [r4, #0]
	write_motors(motor_movement_cw[i]);
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	5cd0      	ldrb	r0, [r2, r3]
 80031b2:	f7ff ffcd 	bl	8003150 <write_motors>
	step_count %= STEPS_PER_ROTATION;
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	bd10      	pop	{r4, pc}
 80031c0:	200005c0 	.word	0x200005c0
 80031c4:	20000018 	.word	0x20000018

080031c8 <step_cw>:
}

void step_cw()
{
 80031c8:	b510      	push	{r4, lr}
	write_motors(motor_movement_cw[step_count++%8]);
 80031ca:	4c07      	ldr	r4, [pc, #28]	; (80031e8 <step_cw+0x20>)
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	6022      	str	r2, [r4, #0]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <step_cw+0x24>)
 80031d8:	5cd0      	ldrb	r0, [r2, r3]
 80031da:	f7ff ffb9 	bl	8003150 <write_motors>
	step_count %= STEPS_PER_ROTATION;
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	bd10      	pop	{r4, pc}
 80031e8:	200005c0 	.word	0x200005c0
 80031ec:	20000018 	.word	0x20000018

080031f0 <HAL_TIM_PeriodElapsedCallback>:
						   };



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b508      	push	{r3, lr}
//	HAL_GPIO_TogglePin(testpin_GPIO_Port, testpin_Pin);
	if(target_step_count == step_count)
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d109      	bne.n	8003212 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		motors_off();
 80031fe:	f7ff ff69 	bl	80030d4 <motors_off>
		motor_running = false;
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x40>)
		HAL_TIM_Base_Stop_IT(&htim6);
 8003204:	480b      	ldr	r0, [pc, #44]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x44>)
{
//	HAL_GPIO_TogglePin(testpin_GPIO_Port, testpin_Pin);
	if(target_step_count == step_count)
	{
		motors_off();
		motor_running = false;
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
	if(direction)
		step_cw();
	else
		step_acw();
	}
}
 800320a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//	HAL_GPIO_TogglePin(testpin_GPIO_Port, testpin_Pin);
	if(target_step_count == step_count)
	{
		motors_off();
		motor_running = false;
		HAL_TIM_Base_Stop_IT(&htim6);
 800320e:	f7fe bfa2 	b.w	8002156 <HAL_TIM_Base_Stop_IT>
	}
	else{

	if(direction)
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	b11b      	cbz	r3, 8003220 <HAL_TIM_PeriodElapsedCallback+0x30>
		step_cw();
	else
		step_acw();
	}
}
 8003218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop_IT(&htim6);
	}
	else{

	if(direction)
		step_cw();
 800321c:	f7ff bfd4 	b.w	80031c8 <step_cw>
	else
		step_acw();
	}
}
 8003220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	else{

	if(direction)
		step_cw();
	else
		step_acw();
 8003224:	f7ff bfbc 	b.w	80031a0 <step_acw>
 8003228:	200005b8 	.word	0x200005b8
 800322c:	200005c0 	.word	0x200005c0
 8003230:	200005bc 	.word	0x200005bc
 8003234:	200006c0 	.word	0x200006c0
 8003238:	200005bd 	.word	0x200005bd

0800323c <zero_motor>:
	step_count %= STEPS_PER_ROTATION;
}


bool zero_motor()
{
 800323c:	b508      	push	{r3, lr}
	//get us to zero location
	//if we are already at 0, move 10degrees acw first
	while(get_zero_state())
 800323e:	f7ff ff3d 	bl	80030bc <get_zero_state>
 8003242:	b128      	cbz	r0, 8003250 <zero_motor+0x14>
	{
		step_acw();
 8003244:	f7ff ffac 	bl	80031a0 <step_acw>
		HAL_Delay(1);
 8003248:	2001      	movs	r0, #1
 800324a:	f7fd fee7 	bl	800101c <HAL_Delay>
 800324e:	e7f6      	b.n	800323e <zero_motor+0x2>
	}

	//rotate clockwise until the zero location is triggered
	while(!get_zero_state())
 8003250:	f7ff ff34 	bl	80030bc <get_zero_state>
 8003254:	b928      	cbnz	r0, 8003262 <zero_motor+0x26>
	{
		step_cw();
 8003256:	f7ff ffb7 	bl	80031c8 <step_cw>
		HAL_Delay(1);
 800325a:	2001      	movs	r0, #1
 800325c:	f7fd fede 	bl	800101c <HAL_Delay>
 8003260:	e7f6      	b.n	8003250 <zero_motor+0x14>
	}
	 motors_off();
 8003262:	f7ff ff37 	bl	80030d4 <motors_off>
	 current_angle_deg = 0;
 8003266:	4a03      	ldr	r2, [pc, #12]	; (8003274 <zero_motor+0x38>)
 8003268:	2300      	movs	r3, #0
 800326a:	8013      	strh	r3, [r2, #0]
	 step_count = 0;
 800326c:	4a02      	ldr	r2, [pc, #8]	; (8003278 <zero_motor+0x3c>)

	return true;
}
 800326e:	2001      	movs	r0, #1
		step_cw();
		HAL_Delay(1);
	}
	 motors_off();
	 current_angle_deg = 0;
	 step_count = 0;
 8003270:	6013      	str	r3, [r2, #0]

	return true;
}
 8003272:	bd08      	pop	{r3, pc}
 8003274:	200005b6 	.word	0x200005b6
 8003278:	200005c0 	.word	0x200005c0

0800327c <angle_difference>:


int16_t angle_difference(int16_t b1, int16_t b2) {
    int16_t r = (b2 - b1) % 360;
 800327c:	1a09      	subs	r1, r1, r0
 800327e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003282:	fb91 f3f2 	sdiv	r3, r1, r2
 8003286:	fb02 1113 	mls	r1, r2, r3, r1
    if (r < -180) {
 800328a:	f111 0fb4 	cmn.w	r1, #180	; 0xb4
 800328e:	db03      	blt.n	8003298 <angle_difference+0x1c>
	return true;
}


int16_t angle_difference(int16_t b1, int16_t b2) {
    int16_t r = (b2 - b1) % 360;
 8003290:	b208      	sxth	r0, r1
    if (r < -180) {
      r += 360;
    }
    if (r >= 180) {
 8003292:	28b3      	cmp	r0, #179	; 0xb3
 8003294:	dc03      	bgt.n	800329e <angle_difference+0x22>
 8003296:	4770      	bx	lr


int16_t angle_difference(int16_t b1, int16_t b2) {
    int16_t r = (b2 - b1) % 360;
    if (r < -180) {
      r += 360;
 8003298:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800329c:	e001      	b.n	80032a2 <angle_difference+0x26>
    }
    if (r >= 180) {
      r -= 360;
 800329e:	f5a1 71b4 	sub.w	r1, r1, #360	; 0x168
 80032a2:	b208      	sxth	r0, r1
    }
    return r;
}
 80032a4:	4770      	bx	lr
	...

080032a8 <set_target>:
}


void set_target(int16_t target_deg)
{
	target_angle_deg = target_deg;
 80032a8:	4b1f      	ldr	r3, [pc, #124]	; (8003328 <set_target+0x80>)
	}
}


void set_target(int16_t target_deg)
{
 80032aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	target_angle_deg = target_deg;
 80032ae:	8018      	strh	r0, [r3, #0]
	}
}


void set_target(int16_t target_deg)
{
 80032b0:	4604      	mov	r4, r0
	target_angle_deg = target_deg;
	target_step_count = (uint32_t)((double)target_angle_deg / STEP_ANGLE);
 80032b2:	f7fd f937 	bl	8000524 <__aeabi_i2d>
 80032b6:	2200      	movs	r2, #0
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <set_target+0x84>)
 80032ba:	f7fd fac3 	bl	8000844 <__aeabi_ddiv>
 80032be:	f7fd fc6f 	bl	8000ba0 <__aeabi_d2uiz>
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <set_target+0x88>)
 80032c4:	6018      	str	r0, [r3, #0]
	current_angle_deg = step_count * STEP_ANGLE;
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <set_target+0x8c>)
 80032c8:	f8d3 8000 	ldr.w	r8, [r3]


void set_target(int16_t target_deg)
{
	target_angle_deg = target_deg;
	target_step_count = (uint32_t)((double)target_angle_deg / STEP_ANGLE);
 80032cc:	4607      	mov	r7, r0
	current_angle_deg = step_count * STEP_ANGLE;
 80032ce:	4640      	mov	r0, r8
 80032d0:	f7fd f918 	bl	8000504 <__aeabi_ui2d>
 80032d4:	2200      	movs	r2, #0
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <set_target+0x84>)
 80032d8:	f7fd f98a 	bl	80005f0 <__aeabi_dmul>
 80032dc:	f7fd fc38 	bl	8000b50 <__aeabi_d2iz>
 80032e0:	4b15      	ldr	r3, [pc, #84]	; (8003338 <set_target+0x90>)
 80032e2:	b205      	sxth	r5, r0
	bool dir = (angle_difference(current_angle_deg, target_angle_deg) > 0);
 80032e4:	4621      	mov	r1, r4
 80032e6:	4628      	mov	r0, r5

void set_target(int16_t target_deg)
{
	target_angle_deg = target_deg;
	target_step_count = (uint32_t)((double)target_angle_deg / STEP_ANGLE);
	current_angle_deg = step_count * STEP_ANGLE;
 80032e8:	801d      	strh	r5, [r3, #0]
	bool dir = (angle_difference(current_angle_deg, target_angle_deg) > 0);
 80032ea:	f7ff ffc7 	bl	800327c <angle_difference>
	printf("t=%d:%d, c=%d:%d\n\r", target_angle_deg, target_step_count, current_angle_deg, step_count);
 80032ee:	4621      	mov	r1, r4
void set_target(int16_t target_deg)
{
	target_angle_deg = target_deg;
	target_step_count = (uint32_t)((double)target_angle_deg / STEP_ANGLE);
	current_angle_deg = step_count * STEP_ANGLE;
	bool dir = (angle_difference(current_angle_deg, target_angle_deg) > 0);
 80032f0:	2800      	cmp	r0, #0
 80032f2:	4606      	mov	r6, r0
	printf("t=%d:%d, c=%d:%d\n\r", target_angle_deg, target_step_count, current_angle_deg, step_count);
 80032f4:	462b      	mov	r3, r5
 80032f6:	463a      	mov	r2, r7
 80032f8:	f8cd 8000 	str.w	r8, [sp]
 80032fc:	480f      	ldr	r0, [pc, #60]	; (800333c <set_target+0x94>)
void set_target(int16_t target_deg)
{
	target_angle_deg = target_deg;
	target_step_count = (uint32_t)((double)target_angle_deg / STEP_ANGLE);
	current_angle_deg = step_count * STEP_ANGLE;
	bool dir = (angle_difference(current_angle_deg, target_angle_deg) > 0);
 80032fe:	bfd4      	ite	le
 8003300:	f04f 0900 	movle.w	r9, #0
 8003304:	f04f 0901 	movgt.w	r9, #1
	printf("t=%d:%d, c=%d:%d\n\r", target_angle_deg, target_step_count, current_angle_deg, step_count);
 8003308:	f001 fbb6 	bl	8004a78 <printf>
	if(dir)
 800330c:	2e00      	cmp	r6, #0
	printf("cw\n\r");
 800330e:	bfcc      	ite	gt
 8003310:	480b      	ldrgt	r0, [pc, #44]	; (8003340 <set_target+0x98>)
	else
		printf("acw\n\r");
 8003312:	480c      	ldrle	r0, [pc, #48]	; (8003344 <set_target+0x9c>)
 8003314:	f001 fbb0 	bl	8004a78 <printf>
	set_speed(100, dir);
 8003318:	4649      	mov	r1, r9
 800331a:	2064      	movs	r0, #100	; 0x64
}
 800331c:	b003      	add	sp, #12
 800331e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("t=%d:%d, c=%d:%d\n\r", target_angle_deg, target_step_count, current_angle_deg, step_count);
	if(dir)
	printf("cw\n\r");
	else
		printf("acw\n\r");
	set_speed(100, dir);
 8003322:	f7ff bef5 	b.w	8003110 <set_speed>
 8003326:	bf00      	nop
 8003328:	200005b4 	.word	0x200005b4
 800332c:	3fa68000 	.word	0x3fa68000
 8003330:	200005b8 	.word	0x200005b8
 8003334:	200005c0 	.word	0x200005c0
 8003338:	200005b6 	.word	0x200005b6
 800333c:	0800c73d 	.word	0x0800c73d
 8003340:	0800c751 	.word	0x0800c751
 8003344:	0800c750 	.word	0x0800c750

08003348 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_MspInit+0x78>)

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800334a:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	619a      	str	r2, [r3, #24]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800335c:	2007      	movs	r0, #7
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003360:	f7fd fe6a 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003364:	2200      	movs	r2, #0
 8003366:	4611      	mov	r1, r2
 8003368:	f06f 000b 	mvn.w	r0, #11
 800336c:	f7fd fe76 	bl	800105c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003370:	2200      	movs	r2, #0
 8003372:	4611      	mov	r1, r2
 8003374:	f06f 000a 	mvn.w	r0, #10
 8003378:	f7fd fe70 	bl	800105c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800337c:	2200      	movs	r2, #0
 800337e:	4611      	mov	r1, r2
 8003380:	f06f 0009 	mvn.w	r0, #9
 8003384:	f7fd fe6a 	bl	800105c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003388:	2200      	movs	r2, #0
 800338a:	4611      	mov	r1, r2
 800338c:	f06f 0004 	mvn.w	r0, #4
 8003390:	f7fd fe64 	bl	800105c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003394:	2200      	movs	r2, #0
 8003396:	4611      	mov	r1, r2
 8003398:	f06f 0003 	mvn.w	r0, #3
 800339c:	f7fd fe5e 	bl	800105c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80033a0:	2200      	movs	r2, #0
 80033a2:	4611      	mov	r1, r2
 80033a4:	f06f 0001 	mvn.w	r0, #1
 80033a8:	f7fd fe58 	bl	800105c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80033ac:	2200      	movs	r2, #0
 80033ae:	4611      	mov	r1, r2
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	f7fd fe52 	bl	800105c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b8:	b003      	add	sp, #12
 80033ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000

080033c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80033c6:	6802      	ldr	r2, [r0, #0]
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <HAL_I2C_MspInit+0x44>)
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d119      	bne.n	8003402 <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SCA_Pin;
 80033ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033d4:	2312      	movs	r3, #18
 80033d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033d8:	2301      	movs	r3, #1
 80033da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033e0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e2:	eb0d 0103 	add.w	r1, sp, r3
 80033e6:	4809      	ldr	r0, [pc, #36]	; (800340c <HAL_I2C_MspInit+0x48>)
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SCA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ea:	f7fd fe9f 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <HAL_I2C_MspInit+0x4c>)
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80033f6:	61da      	str	r2, [r3, #28]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003402:	b007      	add	sp, #28
 8003404:	f85d fb04 	ldr.w	pc, [sp], #4
 8003408:	40005400 	.word	0x40005400
 800340c:	48000400 	.word	0x48000400
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_TIM_Base_MspInit>:
  /* USER CODE END I2C1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003414:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_TIM_Base_MspInit+0x38>)
 8003418:	6802      	ldr	r2, [r0, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d112      	bne.n	8003444 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800341e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003422:	2036      	movs	r0, #54	; 0x36
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	f042 0210 	orr.w	r2, r2, #16
 800342a:	61da      	str	r2, [r3, #28]
 800342c:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800342e:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003436:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003438:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800343a:	f7fd fe0f 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800343e:	2036      	movs	r0, #54	; 0x36
 8003440:	f7fd fe40 	bl	80010c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003444:	b003      	add	sp, #12
 8003446:	f85d fb04 	ldr.w	pc, [sp], #4
 800344a:	bf00      	nop
 800344c:	40001000 	.word	0x40001000

08003450 <HAL_UART_MspInit>:
  /* USER CODE END TIM6_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003452:	6803      	ldr	r3, [r0, #0]
 8003454:	4a26      	ldr	r2, [pc, #152]	; (80034f0 <HAL_UART_MspInit+0xa0>)
 8003456:	4293      	cmp	r3, r2
  /* USER CODE END TIM6_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003458:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800345a:	d12c      	bne.n	80034b6 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <HAL_UART_MspInit+0xa4>)
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003464:	619a      	str	r2, [r3, #24]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	9b01      	ldr	r3, [sp, #4]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	2702      	movs	r7, #2
  
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8003472:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003476:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003478:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800347a:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 800347c:	a903      	add	r1, sp, #12
 800347e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8003482:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003486:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003488:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800348a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 800348c:	f7fd fe4e 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8003490:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8003492:	a903      	add	r1, sp, #12
 8003494:	4818      	ldr	r0, [pc, #96]	; (80034f8 <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8003496:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800349a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800349c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800349e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80034a0:	f7fd fe44 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034a4:	2200      	movs	r2, #0
 80034a6:	4611      	mov	r1, r2
 80034a8:	2025      	movs	r0, #37	; 0x25
 80034aa:	f7fd fdd7 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034ae:	2025      	movs	r0, #37	; 0x25
 80034b0:	f7fd fe08 	bl	80010c4 <HAL_NVIC_EnableIRQ>
 80034b4:	e01a      	b.n	80034ec <HAL_UART_MspInit+0x9c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80034b6:	4a11      	ldr	r2, [pc, #68]	; (80034fc <HAL_UART_MspInit+0xac>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d117      	bne.n	80034ec <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_UART_MspInit+0xa4>)
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034c4:	61da      	str	r2, [r3, #28]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034cc:	9302      	str	r3, [sp, #8]
 80034ce:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80034d0:	230c      	movs	r3, #12
 80034d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034dc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034e0:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e8:	f7fd fe20 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034ec:	b009      	add	sp, #36	; 0x24
 80034ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f0:	40013800 	.word	0x40013800
 80034f4:	40021000 	.word	0x40021000
 80034f8:	48000400 	.word	0x48000400
 80034fc:	40004400 	.word	0x40004400

08003500 <NMI_Handler>:
 8003500:	4770      	bx	lr

08003502 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003502:	e7fe      	b.n	8003502 <HardFault_Handler>

08003504 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003504:	e7fe      	b.n	8003504 <MemManage_Handler>

08003506 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003506:	e7fe      	b.n	8003506 <BusFault_Handler>

08003508 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003508:	e7fe      	b.n	8003508 <UsageFault_Handler>

0800350a <SVC_Handler>:
 800350a:	4770      	bx	lr

0800350c <DebugMon_Handler>:
 800350c:	4770      	bx	lr

0800350e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800350e:	4770      	bx	lr

08003510 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003510:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003512:	f7fd fd75 	bl	8001000 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800351a:	f7fd be02 	b.w	8001122 <HAL_SYSTICK_IRQHandler>
	...

08003520 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003520:	4801      	ldr	r0, [pc, #4]	; (8003528 <USART1_IRQHandler+0x8>)
 8003522:	f7ff ba18 	b.w	8002956 <HAL_UART_IRQHandler>
 8003526:	bf00      	nop
 8003528:	20000650 	.word	0x20000650

0800352c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <TIM6_DAC_IRQHandler+0x8>)
 800352e:	f7fe be2b 	b.w	8002188 <HAL_TIM_IRQHandler>
 8003532:	bf00      	nop
 8003534:	200006c0 	.word	0x200006c0

08003538 <nmea_property>:
    static nmeaPROPERTY prop = {
        0, 0, NMEA_DEF_PARSEBUFF
        };

    return &prop;
}
 8003538:	4800      	ldr	r0, [pc, #0]	; (800353c <nmea_property+0x4>)
 800353a:	4770      	bx	lr
 800353c:	20000020 	.word	0x20000020

08003540 <nmea_trace_buff>:
    }
}

void nmea_trace_buff(const char *buff, int buff_size)
{
    nmeaTraceFunc func = nmea_property()->trace_func;
 8003540:	4b02      	ldr	r3, [pc, #8]	; (800354c <nmea_trace_buff+0xc>)
 8003542:	681b      	ldr	r3, [r3, #0]
    if(func && buff_size)
 8003544:	b10b      	cbz	r3, 800354a <nmea_trace_buff+0xa>
 8003546:	b101      	cbz	r1, 800354a <nmea_trace_buff+0xa>
        (*func)(buff, buff_size);
 8003548:	4718      	bx	r3
 800354a:	4770      	bx	lr
 800354c:	20000020 	.word	0x20000020

08003550 <nmea_error>:
}

void nmea_error(const char *str, ...)
{
 8003550:	b40f      	push	{r0, r1, r2, r3}
 8003552:	b510      	push	{r4, lr}
    int size;
    va_list arg_list;
    char buff[NMEA_DEF_PARSEBUFF];
    nmeaErrorFunc func = nmea_property()->error_func;
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <nmea_error+0x38>)
 8003556:	685c      	ldr	r4, [r3, #4]
    if(func && buff_size)
        (*func)(buff, buff_size);
}

void nmea_error(const char *str, ...)
{
 8003558:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
    int size;
    va_list arg_list;
    char buff[NMEA_DEF_PARSEBUFF];
    nmeaErrorFunc func = nmea_property()->error_func;

    if(func)
 800355c:	b16c      	cbz	r4, 800357a <nmea_error+0x2a>
    {
        va_start(arg_list, str);
 800355e:	f20d 4314 	addw	r3, sp, #1044	; 0x414
        size = NMEA_POSIX(vsnprintf)(&buff[0], NMEA_DEF_PARSEBUFF - 1, str, arg_list);
 8003562:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003566:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    char buff[NMEA_DEF_PARSEBUFF];
    nmeaErrorFunc func = nmea_property()->error_func;

    if(func)
    {
        va_start(arg_list, str);
 800356a:	9301      	str	r3, [sp, #4]
        size = NMEA_POSIX(vsnprintf)(&buff[0], NMEA_DEF_PARSEBUFF - 1, str, arg_list);
 800356c:	a802      	add	r0, sp, #8
 800356e:	f004 fe27 	bl	80081c0 <vsnprintf>
        va_end(arg_list);

        if(size > 0)
 8003572:	1e01      	subs	r1, r0, #0
 8003574:	dd01      	ble.n	800357a <nmea_error+0x2a>
            (*func)(&buff[0], size);
 8003576:	a802      	add	r0, sp, #8
 8003578:	47a0      	blx	r4
    }
}
 800357a:	f50d 6d81 	add.w	sp, sp, #1032	; 0x408
 800357e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003582:	b004      	add	sp, #16
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000020 	.word	0x20000020
 800358c:	00000000 	.word	0x00000000

08003590 <nmea_degree2radian>:
/**
 * \fn nmea_degree2radian
 * \brief Convert degree to radian
 */
double nmea_degree2radian(double val)
{ return (val * NMEA_PI180); }
 8003590:	b508      	push	{r3, lr}
 8003592:	ec51 0b10 	vmov	r0, r1, d0
 8003596:	a304      	add	r3, pc, #16	; (adr r3, 80035a8 <nmea_degree2radian+0x18>)
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f7fd f828 	bl	80005f0 <__aeabi_dmul>
 80035a0:	ec41 0b10 	vmov	d0, r0, r1
 80035a4:	bd08      	pop	{r3, pc}
 80035a6:	bf00      	nop
 80035a8:	a2529d39 	.word	0xa2529d39
 80035ac:	3f91df46 	.word	0x3f91df46

080035b0 <nmea_radian2degree>:
/**
 * \fn nmea_radian2degree
 * \brief Convert radian to degree
 */
double nmea_radian2degree(double val)
{ return (val / NMEA_PI180); }
 80035b0:	b508      	push	{r3, lr}
 80035b2:	ec51 0b10 	vmov	r0, r1, d0
 80035b6:	a304      	add	r3, pc, #16	; (adr r3, 80035c8 <nmea_radian2degree+0x18>)
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f7fd f942 	bl	8000844 <__aeabi_ddiv>
 80035c0:	ec41 0b10 	vmov	d0, r0, r1
 80035c4:	bd08      	pop	{r3, pc}
 80035c6:	bf00      	nop
 80035c8:	a2529d39 	.word	0xa2529d39
 80035cc:	3f91df46 	.word	0x3f91df46

080035d0 <nmea_ndeg2degree>:

/**
 * \brief Convert NDEG (NMEA degree) to fractional degree
 */
double nmea_ndeg2degree(double val)
{
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	ec55 4b10 	vmov	r4, r5, d0
    double deg = ((int)(val / 100));
 80035d6:	ee10 0a10 	vmov	r0, s0
 80035da:	2200      	movs	r2, #0
 80035dc:	4b10      	ldr	r3, [pc, #64]	; (8003620 <nmea_ndeg2degree+0x50>)
 80035de:	4629      	mov	r1, r5
 80035e0:	f7fd f930 	bl	8000844 <__aeabi_ddiv>
 80035e4:	f7fd fab4 	bl	8000b50 <__aeabi_d2iz>
 80035e8:	f7fc ff9c 	bl	8000524 <__aeabi_i2d>
    val = deg + (val - deg * 100) / 60;
 80035ec:	2200      	movs	r2, #0
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <nmea_ndeg2degree+0x50>)
/**
 * \brief Convert NDEG (NMEA degree) to fractional degree
 */
double nmea_ndeg2degree(double val)
{
    double deg = ((int)(val / 100));
 80035f0:	4606      	mov	r6, r0
 80035f2:	460f      	mov	r7, r1
    val = deg + (val - deg * 100) / 60;
 80035f4:	f7fc fffc 	bl	80005f0 <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4620      	mov	r0, r4
 80035fe:	4629      	mov	r1, r5
 8003600:	f7fc fe42 	bl	8000288 <__aeabi_dsub>
 8003604:	2200      	movs	r2, #0
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <nmea_ndeg2degree+0x54>)
 8003608:	f7fd f91c 	bl	8000844 <__aeabi_ddiv>
    return val;
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4630      	mov	r0, r6
 8003612:	4639      	mov	r1, r7
 8003614:	f7fc fe3a 	bl	800028c <__adddf3>
}
 8003618:	ec41 0b10 	vmov	d0, r0, r1
 800361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800361e:	bf00      	nop
 8003620:	40590000 	.word	0x40590000
 8003624:	404e0000 	.word	0x404e0000

08003628 <nmea_zero_INFO>:
#include <string.h>

#include "nmea/info.h"

void nmea_zero_INFO(nmeaINFO *info)
{
 8003628:	b510      	push	{r4, lr}
    memset(info, 0, sizeof(nmeaINFO));
 800362a:	f44f 72b4 	mov.w	r2, #360	; 0x168
#include <string.h>

#include "nmea/info.h"

void nmea_zero_INFO(nmeaINFO *info)
{
 800362e:	4604      	mov	r4, r0
    memset(info, 0, sizeof(nmeaINFO));
 8003630:	2100      	movs	r1, #0
 8003632:	f001 fa17 	bl	8004a64 <memset>
    nmea_time_now(&info->utc);
 8003636:	1d20      	adds	r0, r4, #4
 8003638:	f000 fd9e 	bl	8004178 <nmea_time_now>
    info->sig = NMEA_SIG_BAD;
 800363c:	2300      	movs	r3, #0
 800363e:	6223      	str	r3, [r4, #32]
    info->fix = NMEA_FIX_BAD;
 8003640:	2301      	movs	r3, #1
 8003642:	6263      	str	r3, [r4, #36]	; 0x24
 8003644:	bd10      	pop	{r4, pc}
	...

08003648 <_nmea_parse_time>:

int _nmea_parse_time(const char *buff, int buff_sz, nmeaTIME *res)
{
    int success = 0;

    switch(buff_sz)
 8003648:	2906      	cmp	r1, #6

#include <string.h>
#include <stdio.h>

int _nmea_parse_time(const char *buff, int buff_sz, nmeaTIME *res)
{
 800364a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int success = 0;

    switch(buff_sz)
 800364c:	d014      	beq.n	8003678 <_nmea_parse_time+0x30>
 800364e:	db26      	blt.n	800369e <_nmea_parse_time+0x56>
 8003650:	f1a1 0308 	sub.w	r3, r1, #8
 8003654:	2b02      	cmp	r3, #2
 8003656:	d822      	bhi.n	800369e <_nmea_parse_time+0x56>
            ));
        break;
    case sizeof("hhmmss.s") - 1:
    case sizeof("hhmmss.ss") - 1:
    case sizeof("hhmmss.sss") - 1:
        success = (4 == nmea_scanf(buff, buff_sz,
 8003658:	f102 0318 	add.w	r3, r2, #24
 800365c:	9302      	str	r3, [sp, #8]
 800365e:	f102 0314 	add.w	r3, r2, #20
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	f102 0310 	add.w	r3, r2, #16
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	f102 030c 	add.w	r3, r2, #12
 800366e:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <_nmea_parse_time+0x68>)
 8003670:	f000 fdd0 	bl	8004214 <nmea_scanf>
 8003674:	2804      	cmp	r0, #4
 8003676:	e00b      	b.n	8003690 <_nmea_parse_time+0x48>
    int success = 0;

    switch(buff_sz)
    {
    case sizeof("hhmmss") - 1:
        success = (3 == nmea_scanf(buff, buff_sz,
 8003678:	f102 0314 	add.w	r3, r2, #20
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	f102 0310 	add.w	r3, r2, #16
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	f102 030c 	add.w	r3, r2, #12
 8003688:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <_nmea_parse_time+0x6c>)
 800368a:	f000 fdc3 	bl	8004214 <nmea_scanf>
 800368e:	2803      	cmp	r0, #3
            ));
        break;
    case sizeof("hhmmss.s") - 1:
    case sizeof("hhmmss.ss") - 1:
    case sizeof("hhmmss.sss") - 1:
        success = (4 == nmea_scanf(buff, buff_sz,
 8003690:	bf14      	ite	ne
 8003692:	2000      	movne	r0, #0
 8003694:	2001      	moveq	r0, #1
        nmea_error("Parse of time error (format error)!");
        success = 0;
        break;
    }

    return (success?0:-1);        
 8003696:	f080 0001 	eor.w	r0, r0, #1
 800369a:	4240      	negs	r0, r0
 800369c:	e004      	b.n	80036a8 <_nmea_parse_time+0x60>
        success = (4 == nmea_scanf(buff, buff_sz,
            "%2d%2d%2d.%d", &(res->hour), &(res->min), &(res->sec), &(res->hsec)
            ));
        break;
    default:
        nmea_error("Parse of time error (format error)!");
 800369e:	4806      	ldr	r0, [pc, #24]	; (80036b8 <_nmea_parse_time+0x70>)
 80036a0:	f7ff ff56 	bl	8003550 <nmea_error>
        success = 0;
        break;
    }

    return (success?0:-1);        
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80036a8:	b005      	add	sp, #20
 80036aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80036ae:	bf00      	nop
 80036b0:	0800c7fa 	.word	0x0800c7fa
 80036b4:	0800c7f0 	.word	0x0800c7f0
 80036b8:	0800c807 	.word	0x0800c807

080036bc <nmea_pack_type>:
 * @param buff_sz buffer size.
 * @return The defined packet type
 * @see nmeaPACKTYPE
 */
int nmea_pack_type(const char *buff, int buff_sz)
{
 80036bc:	b510      	push	{r4, lr}
        "GPGSV",
        "GPRMC",
        "GPVTG",
    };

    NMEA_ASSERT(buff);
 80036be:	4604      	mov	r4, r0
 80036c0:	b928      	cbnz	r0, 80036ce <nmea_pack_type+0x12>
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <nmea_pack_type+0x6c>)
 80036c4:	4a19      	ldr	r2, [pc, #100]	; (800372c <nmea_pack_type+0x70>)
 80036c6:	481a      	ldr	r0, [pc, #104]	; (8003730 <nmea_pack_type+0x74>)
 80036c8:	216e      	movs	r1, #110	; 0x6e
 80036ca:	f000 fe81 	bl	80043d0 <__assert_func>

    if(buff_sz < 5)
 80036ce:	2904      	cmp	r1, #4
 80036d0:	dd20      	ble.n	8003714 <nmea_pack_type+0x58>
        return GPNON;
    else if(0 == memcmp(buff, pheads[0], 5))
 80036d2:	2205      	movs	r2, #5
 80036d4:	4917      	ldr	r1, [pc, #92]	; (8003734 <nmea_pack_type+0x78>)
 80036d6:	f001 f9ab 	bl	8004a30 <memcmp>
 80036da:	b1e8      	cbz	r0, 8003718 <nmea_pack_type+0x5c>
        return GPGGA;
    else if(0 == memcmp(buff, pheads[1], 5))
 80036dc:	2205      	movs	r2, #5
 80036de:	4916      	ldr	r1, [pc, #88]	; (8003738 <nmea_pack_type+0x7c>)
 80036e0:	4620      	mov	r0, r4
 80036e2:	f001 f9a5 	bl	8004a30 <memcmp>
 80036e6:	b1c8      	cbz	r0, 800371c <nmea_pack_type+0x60>
        return GPGSA;
    else if(0 == memcmp(buff, pheads[2], 5))
 80036e8:	2205      	movs	r2, #5
 80036ea:	4914      	ldr	r1, [pc, #80]	; (800373c <nmea_pack_type+0x80>)
 80036ec:	4620      	mov	r0, r4
 80036ee:	f001 f99f 	bl	8004a30 <memcmp>
 80036f2:	b1a8      	cbz	r0, 8003720 <nmea_pack_type+0x64>
        return GPGSV;
    else if(0 == memcmp(buff, pheads[3], 5))
 80036f4:	2205      	movs	r2, #5
 80036f6:	4912      	ldr	r1, [pc, #72]	; (8003740 <nmea_pack_type+0x84>)
 80036f8:	4620      	mov	r0, r4
 80036fa:	f001 f999 	bl	8004a30 <memcmp>
 80036fe:	b188      	cbz	r0, 8003724 <nmea_pack_type+0x68>
        return GPRMC;
    else if(0 == memcmp(buff, pheads[4], 5))
 8003700:	2205      	movs	r2, #5
 8003702:	4910      	ldr	r1, [pc, #64]	; (8003744 <nmea_pack_type+0x88>)
 8003704:	4620      	mov	r0, r4
 8003706:	f001 f993 	bl	8004a30 <memcmp>
 800370a:	2800      	cmp	r0, #0
        return GPVTG;
 800370c:	bf14      	ite	ne
 800370e:	2000      	movne	r0, #0
 8003710:	2010      	moveq	r0, #16
 8003712:	bd10      	pop	{r4, pc}

    return GPNON;
 8003714:	2000      	movs	r0, #0
 8003716:	bd10      	pop	{r4, pc}
    NMEA_ASSERT(buff);

    if(buff_sz < 5)
        return GPNON;
    else if(0 == memcmp(buff, pheads[0], 5))
        return GPGGA;
 8003718:	2001      	movs	r0, #1
 800371a:	bd10      	pop	{r4, pc}
    else if(0 == memcmp(buff, pheads[1], 5))
        return GPGSA;
 800371c:	2002      	movs	r0, #2
 800371e:	bd10      	pop	{r4, pc}
    else if(0 == memcmp(buff, pheads[2], 5))
        return GPGSV;
 8003720:	2004      	movs	r0, #4
 8003722:	bd10      	pop	{r4, pc}
    else if(0 == memcmp(buff, pheads[3], 5))
        return GPRMC;
 8003724:	2008      	movs	r0, #8
    else if(0 == memcmp(buff, pheads[4], 5))
        return GPVTG;

    return GPNON;
}
 8003726:	bd10      	pop	{r4, pc}
 8003728:	0800c82b 	.word	0x0800c82b
 800372c:	0800c7e1 	.word	0x0800c7e1
 8003730:	0800c830 	.word	0x0800c830
 8003734:	0800c84a 	.word	0x0800c84a
 8003738:	0800c850 	.word	0x0800c850
 800373c:	0800c856 	.word	0x0800c856
 8003740:	0800c85c 	.word	0x0800c85c
 8003744:	0800c862 	.word	0x0800c862

08003748 <nmea_find_tail>:
 * @param buff_sz buffer size.
 * @param res_crc a integer pointer for return CRC of packet (must be defined).
 * @return Number of bytes to packet tail.
 */
int nmea_find_tail(const char *buff, int buff_sz, int *res_crc)
{
 8003748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800374c:	4688      	mov	r8, r1
 800374e:	4615      	mov	r5, r2
    static const int tail_sz = 3 /* *[CRC] */ + 2 /* \r\n */;

    const char *end_buff = buff + buff_sz;
 8003750:	eb00 0901 	add.w	r9, r0, r1
    int nread = 0;
    int crc = 0;

    NMEA_ASSERT(buff && res_crc);
 8003754:	b100      	cbz	r0, 8003758 <nmea_find_tail+0x10>
 8003756:	b92a      	cbnz	r2, 8003764 <nmea_find_tail+0x1c>
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <nmea_find_tail+0x8c>)
 800375a:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <nmea_find_tail+0x90>)
 800375c:	481f      	ldr	r0, [pc, #124]	; (80037dc <nmea_find_tail+0x94>)
 800375e:	218f      	movs	r1, #143	; 0x8f
 8003760:	f000 fe36 	bl	80043d0 <__assert_func>

    *res_crc = -1;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
{
    static const int tail_sz = 3 /* *[CRC] */ + 2 /* \r\n */;

    const char *end_buff = buff + buff_sz;
    int nread = 0;
    int crc = 0;
 8003768:	2600      	movs	r6, #0

    NMEA_ASSERT(buff && res_crc);

    *res_crc = -1;
 800376a:	6013      	str	r3, [r2, #0]
int nmea_find_tail(const char *buff, int buff_sz, int *res_crc)
{
    static const int tail_sz = 3 /* *[CRC] */ + 2 /* \r\n */;

    const char *end_buff = buff + buff_sz;
    int nread = 0;
 800376c:	4633      	mov	r3, r6

    NMEA_ASSERT(buff && res_crc);

    *res_crc = -1;

    for(;buff < end_buff; ++buff, ++nread)
 800376e:	4548      	cmp	r0, r9
 8003770:	4604      	mov	r4, r0
 8003772:	d226      	bcs.n	80037c2 <nmea_find_tail+0x7a>
    {
        if(('$' == *buff) && nread)
 8003774:	7802      	ldrb	r2, [r0, #0]
 8003776:	2a24      	cmp	r2, #36	; 0x24
 8003778:	f104 0001 	add.w	r0, r4, #1
 800377c:	d101      	bne.n	8003782 <nmea_find_tail+0x3a>
 800377e:	b9fb      	cbnz	r3, 80037c0 <nmea_find_tail+0x78>
 8003780:	e01c      	b.n	80037bc <nmea_find_tail+0x74>
        {
            buff = 0;
            break;
        }
        else if('*' == *buff)
 8003782:	2a2a      	cmp	r2, #42	; 0x2a
 8003784:	d118      	bne.n	80037b8 <nmea_find_tail+0x70>
        {
            if(buff + tail_sz <= end_buff && '\r' == buff[3] && '\n' == buff[4])
 8003786:	1d67      	adds	r7, r4, #5
 8003788:	45b9      	cmp	r9, r7
 800378a:	d31a      	bcc.n	80037c2 <nmea_find_tail+0x7a>
 800378c:	78e2      	ldrb	r2, [r4, #3]
 800378e:	2a0d      	cmp	r2, #13
 8003790:	d117      	bne.n	80037c2 <nmea_find_tail+0x7a>
 8003792:	7922      	ldrb	r2, [r4, #4]
 8003794:	2a0a      	cmp	r2, #10
 8003796:	d114      	bne.n	80037c2 <nmea_find_tail+0x7a>
            {
                *res_crc = nmea_atoi(buff + 1, 2, 16);
 8003798:	2210      	movs	r2, #16
 800379a:	2102      	movs	r1, #2
 800379c:	f000 fd28 	bl	80041f0 <nmea_atoi>
                nread = buff_sz - (int)(end_buff - (buff + tail_sz));
 80037a0:	ebc7 0309 	rsb	r3, r7, r9
                if(*res_crc != crc)
 80037a4:	4286      	cmp	r6, r0
        else if('*' == *buff)
        {
            if(buff + tail_sz <= end_buff && '\r' == buff[3] && '\n' == buff[4])
            {
                *res_crc = nmea_atoi(buff + 1, 2, 16);
                nread = buff_sz - (int)(end_buff - (buff + tail_sz));
 80037a6:	ebc3 0308 	rsb	r3, r3, r8
                if(*res_crc != crc)
 80037aa:	d101      	bne.n	80037b0 <nmea_find_tail+0x68>
        }
        else if('*' == *buff)
        {
            if(buff + tail_sz <= end_buff && '\r' == buff[3] && '\n' == buff[4])
            {
                *res_crc = nmea_atoi(buff + 1, 2, 16);
 80037ac:	602e      	str	r6, [r5, #0]
 80037ae:	e008      	b.n	80037c2 <nmea_find_tail+0x7a>
                nread = buff_sz - (int)(end_buff - (buff + tail_sz));
                if(*res_crc != crc)
                {
                    *res_crc = -1;
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	602a      	str	r2, [r5, #0]
 80037b6:	e003      	b.n	80037c0 <nmea_find_tail+0x78>
                }
            }

            break;
        }
        else if(nread)
 80037b8:	b103      	cbz	r3, 80037bc <nmea_find_tail+0x74>
            crc ^= (int)*buff;
 80037ba:	4056      	eors	r6, r2

    NMEA_ASSERT(buff && res_crc);

    *res_crc = -1;

    for(;buff < end_buff; ++buff, ++nread)
 80037bc:	3301      	adds	r3, #1
 80037be:	e7d6      	b.n	800376e <nmea_find_tail+0x26>
    {
        if(('$' == *buff) && nread)
        {
            buff = 0;
 80037c0:	2400      	movs	r4, #0
        }
        else if(nread)
            crc ^= (int)*buff;
    }

    if(*res_crc < 0 && buff)
 80037c2:	682a      	ldr	r2, [r5, #0]
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	da02      	bge.n	80037ce <nmea_find_tail+0x86>
        nread = 0;
 80037c8:	2c00      	cmp	r4, #0
 80037ca:	bf18      	it	ne
 80037cc:	2300      	movne	r3, #0

    return nread;
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037d4:	0800c868 	.word	0x0800c868
 80037d8:	0800ca54 	.word	0x0800ca54
 80037dc:	0800c830 	.word	0x0800c830

080037e0 <nmea_parse_GPGGA>:
 * @param buff_sz buffer size.
 * @param pack a pointer of packet which will filled by function.
 * @return 1 (true) - if parsed successfully or 0 (false) - if fail.
 */
int nmea_parse_GPGGA(const char *buff, int buff_sz, nmeaGPGGA *pack)
{
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	460e      	mov	r6, r1
 80037e4:	b0ce      	sub	sp, #312	; 0x138
 80037e6:	4614      	mov	r4, r2
    char time_buff[NMEA_TIMEPARSE_BUF];

    NMEA_ASSERT(buff && pack);
 80037e8:	4605      	mov	r5, r0
 80037ea:	b100      	cbz	r0, 80037ee <nmea_parse_GPGGA+0xe>
 80037ec:	b92a      	cbnz	r2, 80037fa <nmea_parse_GPGGA+0x1a>
 80037ee:	4b28      	ldr	r3, [pc, #160]	; (8003890 <nmea_parse_GPGGA+0xb0>)
 80037f0:	4a28      	ldr	r2, [pc, #160]	; (8003894 <nmea_parse_GPGGA+0xb4>)
 80037f2:	4829      	ldr	r0, [pc, #164]	; (8003898 <nmea_parse_GPGGA+0xb8>)
 80037f4:	21be      	movs	r1, #190	; 0xbe
 80037f6:	f000 fdeb 	bl	80043d0 <__assert_func>

    memset(pack, 0, sizeof(nmeaGPGGA));
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	2100      	movs	r1, #0
 80037fe:	4620      	mov	r0, r4
 8003800:	f001 f930 	bl	8004a64 <memset>

    nmea_trace_buff(buff, buff_sz);
 8003804:	4631      	mov	r1, r6
 8003806:	4628      	mov	r0, r5
 8003808:	f7ff fe9a 	bl	8003540 <nmea_trace_buff>

    if(14 != nmea_scanf(buff, buff_sz,
 800380c:	f104 0378 	add.w	r3, r4, #120	; 0x78
 8003810:	930c      	str	r3, [sp, #48]	; 0x30
 8003812:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8003816:	930b      	str	r3, [sp, #44]	; 0x2c
 8003818:	f104 0368 	add.w	r3, r4, #104	; 0x68
 800381c:	930a      	str	r3, [sp, #40]	; 0x28
 800381e:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8003822:	9309      	str	r3, [sp, #36]	; 0x24
 8003824:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8003828:	9308      	str	r3, [sp, #32]
 800382a:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800382e:	9307      	str	r3, [sp, #28]
 8003830:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8003834:	9306      	str	r3, [sp, #24]
 8003836:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800383a:	9305      	str	r3, [sp, #20]
 800383c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8003840:	9304      	str	r3, [sp, #16]
 8003842:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003846:	9303      	str	r3, [sp, #12]
 8003848:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800384c:	9302      	str	r3, [sp, #8]
 800384e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	f104 0320 	add.w	r3, r4, #32
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	4a10      	ldr	r2, [pc, #64]	; (800389c <nmea_parse_GPGGA+0xbc>)
 800385c:	ab0e      	add	r3, sp, #56	; 0x38
 800385e:	4631      	mov	r1, r6
 8003860:	4628      	mov	r0, r5
 8003862:	f000 fcd7 	bl	8004214 <nmea_scanf>
 8003866:	280e      	cmp	r0, #14
 8003868:	d001      	beq.n	800386e <nmea_parse_GPGGA+0x8e>
        &(time_buff[0]),
        &(pack->lat), &(pack->ns), &(pack->lon), &(pack->ew),
        &(pack->sig), &(pack->satinuse), &(pack->HDOP), &(pack->elv), &(pack->elv_units),
        &(pack->diff), &(pack->diff_units), &(pack->dgps_age), &(pack->dgps_sid)))
    {
        nmea_error("GPGGA parse error!");
 800386a:	480d      	ldr	r0, [pc, #52]	; (80038a0 <nmea_parse_GPGGA+0xc0>)
 800386c:	e009      	b.n	8003882 <nmea_parse_GPGGA+0xa2>
        return 0;
    }

    if(0 != _nmea_parse_time(&time_buff[0], (int)strlen(&time_buff[0]), &(pack->utc)))
 800386e:	a80e      	add	r0, sp, #56	; 0x38
 8003870:	f7fc fcfe 	bl	8000270 <strlen>
 8003874:	4622      	mov	r2, r4
 8003876:	4601      	mov	r1, r0
 8003878:	a80e      	add	r0, sp, #56	; 0x38
 800387a:	f7ff fee5 	bl	8003648 <_nmea_parse_time>
 800387e:	b120      	cbz	r0, 800388a <nmea_parse_GPGGA+0xaa>
    {
        nmea_error("GPGGA time parse error!");
 8003880:	4808      	ldr	r0, [pc, #32]	; (80038a4 <nmea_parse_GPGGA+0xc4>)
 8003882:	f7ff fe65 	bl	8003550 <nmea_error>
        return 0;
 8003886:	2000      	movs	r0, #0
 8003888:	e000      	b.n	800388c <nmea_parse_GPGGA+0xac>
    }

    return 1;
 800388a:	2001      	movs	r0, #1
}
 800388c:	b04e      	add	sp, #312	; 0x138
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	0800c878 	.word	0x0800c878
 8003894:	0800ca83 	.word	0x0800ca83
 8003898:	0800c830 	.word	0x0800c830
 800389c:	0800c885 	.word	0x0800c885
 80038a0:	0800c8b7 	.word	0x0800c8b7
 80038a4:	0800c8ca 	.word	0x0800c8ca

080038a8 <nmea_parse_GPGSA>:
 * @param buff_sz buffer size.
 * @param pack a pointer of packet which will filled by function.
 * @return 1 (true) - if parsed successfully or 0 (false) - if fail.
 */
int nmea_parse_GPGSA(const char *buff, int buff_sz, nmeaGPGSA *pack)
{
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	460e      	mov	r6, r1
 80038ac:	b090      	sub	sp, #64	; 0x40
 80038ae:	4614      	mov	r4, r2
    NMEA_ASSERT(buff && pack);
 80038b0:	4605      	mov	r5, r0
 80038b2:	b100      	cbz	r0, 80038b6 <nmea_parse_GPGSA+0xe>
 80038b4:	b92a      	cbnz	r2, 80038c2 <nmea_parse_GPGSA+0x1a>
 80038b6:	4b27      	ldr	r3, [pc, #156]	; (8003954 <nmea_parse_GPGSA+0xac>)
 80038b8:	4a27      	ldr	r2, [pc, #156]	; (8003958 <nmea_parse_GPGSA+0xb0>)
 80038ba:	4828      	ldr	r0, [pc, #160]	; (800395c <nmea_parse_GPGSA+0xb4>)
 80038bc:	21e1      	movs	r1, #225	; 0xe1
 80038be:	f000 fd87 	bl	80043d0 <__assert_func>

    memset(pack, 0, sizeof(nmeaGPGSA));
 80038c2:	2250      	movs	r2, #80	; 0x50
 80038c4:	2100      	movs	r1, #0
 80038c6:	4620      	mov	r0, r4
 80038c8:	f001 f8cc 	bl	8004a64 <memset>

    nmea_trace_buff(buff, buff_sz);
 80038cc:	4631      	mov	r1, r6
 80038ce:	4628      	mov	r0, r5
 80038d0:	f7ff fe36 	bl	8003540 <nmea_trace_buff>

    if(17 != nmea_scanf(buff, buff_sz,
 80038d4:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80038d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80038da:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80038de:	930e      	str	r3, [sp, #56]	; 0x38
 80038e0:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80038e4:	930d      	str	r3, [sp, #52]	; 0x34
 80038e6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80038ea:	930c      	str	r3, [sp, #48]	; 0x30
 80038ec:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80038f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80038f2:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 80038f6:	930a      	str	r3, [sp, #40]	; 0x28
 80038f8:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80038fc:	9309      	str	r3, [sp, #36]	; 0x24
 80038fe:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8003902:	9308      	str	r3, [sp, #32]
 8003904:	f104 0320 	add.w	r3, r4, #32
 8003908:	9307      	str	r3, [sp, #28]
 800390a:	f104 031c 	add.w	r3, r4, #28
 800390e:	9306      	str	r3, [sp, #24]
 8003910:	f104 0318 	add.w	r3, r4, #24
 8003914:	9305      	str	r3, [sp, #20]
 8003916:	f104 0314 	add.w	r3, r4, #20
 800391a:	9304      	str	r3, [sp, #16]
 800391c:	f104 0310 	add.w	r3, r4, #16
 8003920:	9303      	str	r3, [sp, #12]
 8003922:	f104 030c 	add.w	r3, r4, #12
 8003926:	9302      	str	r3, [sp, #8]
 8003928:	f104 0308 	add.w	r3, r4, #8
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	1d23      	adds	r3, r4, #4
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <nmea_parse_GPGSA+0xb8>)
 8003934:	4623      	mov	r3, r4
 8003936:	4631      	mov	r1, r6
 8003938:	4628      	mov	r0, r5
 800393a:	f000 fc6b 	bl	8004214 <nmea_scanf>
 800393e:	2811      	cmp	r0, #17
 8003940:	d004      	beq.n	800394c <nmea_parse_GPGSA+0xa4>
        &(pack->fix_mode), &(pack->fix_type),
        &(pack->sat_prn[0]), &(pack->sat_prn[1]), &(pack->sat_prn[2]), &(pack->sat_prn[3]), &(pack->sat_prn[4]), &(pack->sat_prn[5]),
        &(pack->sat_prn[6]), &(pack->sat_prn[7]), &(pack->sat_prn[8]), &(pack->sat_prn[9]), &(pack->sat_prn[10]), &(pack->sat_prn[11]),
        &(pack->PDOP), &(pack->HDOP), &(pack->VDOP)))
    {
        nmea_error("GPGSA parse error!");
 8003942:	4808      	ldr	r0, [pc, #32]	; (8003964 <nmea_parse_GPGSA+0xbc>)
 8003944:	f7ff fe04 	bl	8003550 <nmea_error>
        return 0;
 8003948:	2000      	movs	r0, #0
 800394a:	e000      	b.n	800394e <nmea_parse_GPGSA+0xa6>
    }

    return 1;
 800394c:	2001      	movs	r0, #1
}
 800394e:	b010      	add	sp, #64	; 0x40
 8003950:	bd70      	pop	{r4, r5, r6, pc}
 8003952:	bf00      	nop
 8003954:	0800c878 	.word	0x0800c878
 8003958:	0800ca94 	.word	0x0800ca94
 800395c:	0800c830 	.word	0x0800c830
 8003960:	0800c8e2 	.word	0x0800c8e2
 8003964:	0800c91d 	.word	0x0800c91d

08003968 <nmea_parse_GPGSV>:
 * @param buff_sz buffer size.
 * @param pack a pointer of packet which will filled by function.
 * @return 1 (true) - if parsed successfully or 0 (false) - if fail.
 */
int nmea_parse_GPGSV(const char *buff, int buff_sz, nmeaGPGSV *pack)
{
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	460e      	mov	r6, r1
 800396c:	b092      	sub	sp, #72	; 0x48
 800396e:	4614      	mov	r4, r2
    int nsen, nsat;

    NMEA_ASSERT(buff && pack);
 8003970:	4605      	mov	r5, r0
 8003972:	b100      	cbz	r0, 8003976 <nmea_parse_GPGSV+0xe>
 8003974:	b932      	cbnz	r2, 8003984 <nmea_parse_GPGSV+0x1c>
 8003976:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <nmea_parse_GPGSV+0xd4>)
 8003978:	4a31      	ldr	r2, [pc, #196]	; (8003a40 <nmea_parse_GPGSV+0xd8>)
 800397a:	4832      	ldr	r0, [pc, #200]	; (8003a44 <nmea_parse_GPGSV+0xdc>)
 800397c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003980:	f000 fd26 	bl	80043d0 <__assert_func>

    memset(pack, 0, sizeof(nmeaGPGSV));
 8003984:	225c      	movs	r2, #92	; 0x5c
 8003986:	2100      	movs	r1, #0
 8003988:	4620      	mov	r0, r4
 800398a:	f001 f86b 	bl	8004a64 <memset>

    nmea_trace_buff(buff, buff_sz);
 800398e:	4631      	mov	r1, r6
 8003990:	4628      	mov	r0, r5
 8003992:	f7ff fdd5 	bl	8003540 <nmea_trace_buff>

    nsen = nmea_scanf(buff, buff_sz,
 8003996:	f104 0358 	add.w	r3, r4, #88	; 0x58
 800399a:	9311      	str	r3, [sp, #68]	; 0x44
 800399c:	f104 0354 	add.w	r3, r4, #84	; 0x54
 80039a0:	9310      	str	r3, [sp, #64]	; 0x40
 80039a2:	f104 0350 	add.w	r3, r4, #80	; 0x50
 80039a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80039a8:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80039ac:	930e      	str	r3, [sp, #56]	; 0x38
 80039ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039b2:	930d      	str	r3, [sp, #52]	; 0x34
 80039b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80039b8:	930c      	str	r3, [sp, #48]	; 0x30
 80039ba:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80039be:	930b      	str	r3, [sp, #44]	; 0x2c
 80039c0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80039c4:	930a      	str	r3, [sp, #40]	; 0x28
 80039c6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80039ca:	9309      	str	r3, [sp, #36]	; 0x24
 80039cc:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 80039d0:	9308      	str	r3, [sp, #32]
 80039d2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80039d6:	9307      	str	r3, [sp, #28]
 80039d8:	f104 0320 	add.w	r3, r4, #32
 80039dc:	9306      	str	r3, [sp, #24]
 80039de:	f104 031c 	add.w	r3, r4, #28
 80039e2:	9305      	str	r3, [sp, #20]
 80039e4:	f104 0318 	add.w	r3, r4, #24
 80039e8:	9304      	str	r3, [sp, #16]
 80039ea:	f104 0314 	add.w	r3, r4, #20
 80039ee:	9303      	str	r3, [sp, #12]
 80039f0:	f104 030c 	add.w	r3, r4, #12
 80039f4:	9302      	str	r3, [sp, #8]
 80039f6:	f104 0308 	add.w	r3, r4, #8
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	1d23      	adds	r3, r4, #4
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	4a11      	ldr	r2, [pc, #68]	; (8003a48 <nmea_parse_GPGSV+0xe0>)
 8003a02:	4623      	mov	r3, r4
 8003a04:	4631      	mov	r1, r6
 8003a06:	4628      	mov	r0, r5
 8003a08:	f000 fc04 	bl	8004214 <nmea_scanf>
        &(pack->sat_data[0].id), &(pack->sat_data[0].elv), &(pack->sat_data[0].azimuth), &(pack->sat_data[0].sig),
        &(pack->sat_data[1].id), &(pack->sat_data[1].elv), &(pack->sat_data[1].azimuth), &(pack->sat_data[1].sig),
        &(pack->sat_data[2].id), &(pack->sat_data[2].elv), &(pack->sat_data[2].azimuth), &(pack->sat_data[2].sig),
        &(pack->sat_data[3].id), &(pack->sat_data[3].elv), &(pack->sat_data[3].azimuth), &(pack->sat_data[3].sig));

    nsat = (pack->pack_index - 1) * NMEA_SATINPACK;
 8003a0c:	6863      	ldr	r3, [r4, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	009a      	lsls	r2, r3, #2
    nsat = (nsat + NMEA_SATINPACK > pack->sat_count)?pack->sat_count - nsat:NMEA_SATINPACK;
 8003a12:	68a3      	ldr	r3, [r4, #8]
 8003a14:	1cd1      	adds	r1, r2, #3
 8003a16:	4299      	cmp	r1, r3
 8003a18:	bfac      	ite	ge
 8003a1a:	1a9b      	subge	r3, r3, r2
 8003a1c:	2304      	movlt	r3, #4
    nsat = nsat * 4 + 3 /* first three sentence`s */;
 8003a1e:	009b      	lsls	r3, r3, #2

    if(nsen < nsat || nsen > (NMEA_SATINPACK * 4 + 3))
 8003a20:	3303      	adds	r3, #3
 8003a22:	4298      	cmp	r0, r3
 8003a24:	db01      	blt.n	8003a2a <nmea_parse_GPGSV+0xc2>
 8003a26:	2813      	cmp	r0, #19
 8003a28:	dd04      	ble.n	8003a34 <nmea_parse_GPGSV+0xcc>
    {
        nmea_error("GPGSV parse error!");
 8003a2a:	4808      	ldr	r0, [pc, #32]	; (8003a4c <nmea_parse_GPGSV+0xe4>)
 8003a2c:	f7ff fd90 	bl	8003550 <nmea_error>
        return 0;
 8003a30:	2000      	movs	r0, #0
 8003a32:	e000      	b.n	8003a36 <nmea_parse_GPGSV+0xce>
    }

    return 1;
 8003a34:	2001      	movs	r0, #1
}
 8003a36:	b012      	add	sp, #72	; 0x48
 8003a38:	bd70      	pop	{r4, r5, r6, pc}
 8003a3a:	bf00      	nop
 8003a3c:	0800c878 	.word	0x0800c878
 8003a40:	0800c79e 	.word	0x0800c79e
 8003a44:	0800c830 	.word	0x0800c830
 8003a48:	0800c930 	.word	0x0800c930
 8003a4c:	0800c971 	.word	0x0800c971

08003a50 <nmea_parse_GPRMC>:
 * @param buff_sz buffer size.
 * @param pack a pointer of packet which will filled by function.
 * @return 1 (true) - if parsed successfully or 0 (false) - if fail.
 */
int nmea_parse_GPRMC(const char *buff, int buff_sz, nmeaGPRMC *pack)
{
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	460e      	mov	r6, r1
 8003a54:	b0ce      	sub	sp, #312	; 0x138
 8003a56:	4614      	mov	r4, r2
    int nsen;
    char time_buff[NMEA_TIMEPARSE_BUF];

    NMEA_ASSERT(buff && pack);
 8003a58:	4605      	mov	r5, r0
 8003a5a:	b100      	cbz	r0, 8003a5e <nmea_parse_GPRMC+0xe>
 8003a5c:	b932      	cbnz	r2, 8003a6c <nmea_parse_GPRMC+0x1c>
 8003a5e:	4b2c      	ldr	r3, [pc, #176]	; (8003b10 <nmea_parse_GPRMC+0xc0>)
 8003a60:	4a2c      	ldr	r2, [pc, #176]	; (8003b14 <nmea_parse_GPRMC+0xc4>)
 8003a62:	482d      	ldr	r0, [pc, #180]	; (8003b18 <nmea_parse_GPRMC+0xc8>)
 8003a64:	f240 112b 	movw	r1, #299	; 0x12b
 8003a68:	f000 fcb2 	bl	80043d0 <__assert_func>

    memset(pack, 0, sizeof(nmeaGPRMC));
 8003a6c:	2260      	movs	r2, #96	; 0x60
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4620      	mov	r0, r4
 8003a72:	f000 fff7 	bl	8004a64 <memset>

    nmea_trace_buff(buff, buff_sz);
 8003a76:	4631      	mov	r1, r6
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f7ff fd61 	bl	8003540 <nmea_trace_buff>

    nsen = nmea_scanf(buff, buff_sz,
 8003a7e:	f104 0359 	add.w	r3, r4, #89	; 0x59
 8003a82:	930c      	str	r3, [sp, #48]	; 0x30
 8003a84:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8003a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a8a:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8003a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8003a90:	1d23      	adds	r3, r4, #4
 8003a92:	9308      	str	r3, [sp, #32]
 8003a94:	f104 0308 	add.w	r3, r4, #8
 8003a98:	9307      	str	r3, [sp, #28]
 8003a9a:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8003a9e:	9306      	str	r3, [sp, #24]
 8003aa0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003aa4:	9305      	str	r3, [sp, #20]
 8003aa6:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003aaa:	9304      	str	r3, [sp, #16]
 8003aac:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8003ab0:	9303      	str	r3, [sp, #12]
 8003ab2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8003ab6:	9302      	str	r3, [sp, #8]
 8003ab8:	f104 0320 	add.w	r3, r4, #32
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	f104 031c 	add.w	r3, r4, #28
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	9409      	str	r4, [sp, #36]	; 0x24
 8003ac6:	ab0e      	add	r3, sp, #56	; 0x38
 8003ac8:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <nmea_parse_GPRMC+0xcc>)
 8003aca:	4631      	mov	r1, r6
 8003acc:	4628      	mov	r0, r5
 8003ace:	f000 fba1 	bl	8004214 <nmea_scanf>
        &(pack->status), &(pack->lat), &(pack->ns), &(pack->lon), &(pack->ew),
        &(pack->speed), &(pack->direction),
        &(pack->utc.day), &(pack->utc.mon), &(pack->utc.year),
        &(pack->declination), &(pack->declin_ew), &(pack->mode));

    if(nsen != 13 && nsen != 14)
 8003ad2:	380d      	subs	r0, #13
 8003ad4:	2801      	cmp	r0, #1
 8003ad6:	d901      	bls.n	8003adc <nmea_parse_GPRMC+0x8c>
    {
        nmea_error("GPRMC parse error!");
 8003ad8:	4811      	ldr	r0, [pc, #68]	; (8003b20 <nmea_parse_GPRMC+0xd0>)
 8003ada:	e009      	b.n	8003af0 <nmea_parse_GPRMC+0xa0>
        return 0;
    }

    if(0 != _nmea_parse_time(&time_buff[0], (int)strlen(&time_buff[0]), &(pack->utc)))
 8003adc:	a80e      	add	r0, sp, #56	; 0x38
 8003ade:	f7fc fbc7 	bl	8000270 <strlen>
 8003ae2:	4622      	mov	r2, r4
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	a80e      	add	r0, sp, #56	; 0x38
 8003ae8:	f7ff fdae 	bl	8003648 <_nmea_parse_time>
 8003aec:	b120      	cbz	r0, 8003af8 <nmea_parse_GPRMC+0xa8>
    {
        nmea_error("GPRMC time parse error!");
 8003aee:	480d      	ldr	r0, [pc, #52]	; (8003b24 <nmea_parse_GPRMC+0xd4>)
 8003af0:	f7ff fd2e 	bl	8003550 <nmea_error>
        return 0;
 8003af4:	2000      	movs	r0, #0
 8003af6:	e008      	b.n	8003b0a <nmea_parse_GPRMC+0xba>
    }

    if(pack->utc.year < 90)
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	2b59      	cmp	r3, #89	; 0x59
        pack->utc.year += 100;
 8003afc:	bfdc      	itt	le
 8003afe:	3364      	addle	r3, #100	; 0x64
 8003b00:	6023      	strle	r3, [r4, #0]
    pack->utc.mon -= 1;
 8003b02:	6863      	ldr	r3, [r4, #4]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	6063      	str	r3, [r4, #4]

    return 1;
 8003b08:	2001      	movs	r0, #1
}
 8003b0a:	b04e      	add	sp, #312	; 0x138
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	bf00      	nop
 8003b10:	0800c878 	.word	0x0800c878
 8003b14:	0800c7af 	.word	0x0800c7af
 8003b18:	0800c830 	.word	0x0800c830
 8003b1c:	0800c984 	.word	0x0800c984
 8003b20:	0800c9b7 	.word	0x0800c9b7
 8003b24:	0800c9ca 	.word	0x0800c9ca

08003b28 <nmea_parse_GPVTG>:
 * @param buff_sz buffer size.
 * @param pack a pointer of packet which will filled by function.
 * @return 1 (true) - if parsed successfully or 0 (false) - if fail.
 */
int nmea_parse_GPVTG(const char *buff, int buff_sz, nmeaGPVTG *pack)
{
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	460e      	mov	r6, r1
 8003b2c:	b088      	sub	sp, #32
 8003b2e:	4614      	mov	r4, r2
    NMEA_ASSERT(buff && pack);
 8003b30:	4605      	mov	r5, r0
 8003b32:	b100      	cbz	r0, 8003b36 <nmea_parse_GPVTG+0xe>
 8003b34:	b932      	cbnz	r2, 8003b44 <nmea_parse_GPVTG+0x1c>
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <nmea_parse_GPVTG+0x98>)
 8003b38:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <nmea_parse_GPVTG+0x9c>)
 8003b3a:	4823      	ldr	r0, [pc, #140]	; (8003bc8 <nmea_parse_GPVTG+0xa0>)
 8003b3c:	f240 1155 	movw	r1, #341	; 0x155
 8003b40:	f000 fc46 	bl	80043d0 <__assert_func>

    memset(pack, 0, sizeof(nmeaGPVTG));
 8003b44:	2240      	movs	r2, #64	; 0x40
 8003b46:	2100      	movs	r1, #0
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f000 ff8b 	bl	8004a64 <memset>

    nmea_trace_buff(buff, buff_sz);
 8003b4e:	4631      	mov	r1, r6
 8003b50:	4628      	mov	r0, r5
 8003b52:	f7ff fcf5 	bl	8003540 <nmea_trace_buff>

    if(8 != nmea_scanf(buff, buff_sz,
 8003b56:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003b5a:	9306      	str	r3, [sp, #24]
 8003b5c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8003b60:	9305      	str	r3, [sp, #20]
 8003b62:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8003b66:	9304      	str	r3, [sp, #16]
 8003b68:	f104 0320 	add.w	r3, r4, #32
 8003b6c:	9303      	str	r3, [sp, #12]
 8003b6e:	f104 0318 	add.w	r3, r4, #24
 8003b72:	9302      	str	r3, [sp, #8]
 8003b74:	f104 0310 	add.w	r3, r4, #16
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	f104 0308 	add.w	r3, r4, #8
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <nmea_parse_GPVTG+0xa4>)
 8003b82:	4623      	mov	r3, r4
 8003b84:	4631      	mov	r1, r6
 8003b86:	4628      	mov	r0, r5
 8003b88:	f000 fb44 	bl	8004214 <nmea_scanf>
 8003b8c:	2808      	cmp	r0, #8
 8003b8e:	d001      	beq.n	8003b94 <nmea_parse_GPVTG+0x6c>
        &(pack->dir), &(pack->dir_t),
        &(pack->dec), &(pack->dec_m),
        &(pack->spn), &(pack->spn_n),
        &(pack->spk), &(pack->spk_k)))
    {
        nmea_error("GPVTG parse error!");
 8003b90:	480f      	ldr	r0, [pc, #60]	; (8003bd0 <nmea_parse_GPVTG+0xa8>)
 8003b92:	e00e      	b.n	8003bb2 <nmea_parse_GPVTG+0x8a>
        return 0;
    }

    if( pack->dir_t != 'T' ||
 8003b94:	7a23      	ldrb	r3, [r4, #8]
 8003b96:	2b54      	cmp	r3, #84	; 0x54
 8003b98:	d10a      	bne.n	8003bb0 <nmea_parse_GPVTG+0x88>
 8003b9a:	7e23      	ldrb	r3, [r4, #24]
 8003b9c:	2b4d      	cmp	r3, #77	; 0x4d
 8003b9e:	d107      	bne.n	8003bb0 <nmea_parse_GPVTG+0x88>
        pack->dec_m != 'M' ||
 8003ba0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003ba4:	2b4e      	cmp	r3, #78	; 0x4e
 8003ba6:	d103      	bne.n	8003bb0 <nmea_parse_GPVTG+0x88>
        pack->spn_n != 'N' ||
 8003ba8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003bac:	2b4b      	cmp	r3, #75	; 0x4b
 8003bae:	d004      	beq.n	8003bba <nmea_parse_GPVTG+0x92>
        pack->spk_k != 'K')
    {
        nmea_error("GPVTG parse error (format error)!");
 8003bb0:	4808      	ldr	r0, [pc, #32]	; (8003bd4 <nmea_parse_GPVTG+0xac>)
 8003bb2:	f7ff fccd 	bl	8003550 <nmea_error>
        return 0;
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	e000      	b.n	8003bbc <nmea_parse_GPVTG+0x94>
    }

    return 1;
 8003bba:	2001      	movs	r0, #1
}
 8003bbc:	b008      	add	sp, #32
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	0800c878 	.word	0x0800c878
 8003bc4:	0800c7c0 	.word	0x0800c7c0
 8003bc8:	0800c830 	.word	0x0800c830
 8003bcc:	0800c9e2 	.word	0x0800c9e2
 8003bd0:	0800ca02 	.word	0x0800ca02
 8003bd4:	0800ca15 	.word	0x0800ca15

08003bd8 <nmea_GPGGA2info>:
 * \brief Fill nmeaINFO structure by GGA packet data.
 * @param pack a pointer of packet structure.
 * @param info a pointer of summary information structure.
 */
void nmea_GPGGA2info(nmeaGPGGA *pack, nmeaINFO *info)
{
 8003bd8:	b510      	push	{r4, lr}
    NMEA_ASSERT(pack && info);
 8003bda:	b100      	cbz	r0, 8003bde <nmea_GPGGA2info+0x6>
 8003bdc:	b931      	cbnz	r1, 8003bec <nmea_GPGGA2info+0x14>
 8003bde:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <nmea_GPGGA2info+0x78>)
 8003be0:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <nmea_GPGGA2info+0x7c>)
 8003be2:	481d      	ldr	r0, [pc, #116]	; (8003c58 <nmea_GPGGA2info+0x80>)
 8003be4:	f240 1179 	movw	r1, #377	; 0x179
 8003be8:	f000 fbf2 	bl	80043d0 <__assert_func>

    info->utc.hour = pack->utc.hour;
 8003bec:	68c3      	ldr	r3, [r0, #12]
 8003bee:	610b      	str	r3, [r1, #16]
    info->utc.min = pack->utc.min;
 8003bf0:	6903      	ldr	r3, [r0, #16]
 8003bf2:	614b      	str	r3, [r1, #20]
    info->utc.sec = pack->utc.sec;
 8003bf4:	6943      	ldr	r3, [r0, #20]
 8003bf6:	618b      	str	r3, [r1, #24]
    info->utc.hsec = pack->utc.hsec;
 8003bf8:	6983      	ldr	r3, [r0, #24]
 8003bfa:	61cb      	str	r3, [r1, #28]
    info->sig = pack->sig;
 8003bfc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003bfe:	620b      	str	r3, [r1, #32]
    info->HDOP = pack->HDOP;
 8003c00:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8003c04:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    info->elv = pack->elv;
 8003c08:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
 8003c0c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    info->lat = ((pack->ns == 'N')?pack->lat:-(pack->lat));
 8003c10:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8003c14:	2b4e      	cmp	r3, #78	; 0x4e
 8003c16:	d102      	bne.n	8003c1e <nmea_GPGGA2info+0x46>
 8003c18:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8003c1c:	e003      	b.n	8003c26 <nmea_GPGGA2info+0x4e>
 8003c1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003c20:	6a02      	ldr	r2, [r0, #32]
 8003c22:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003c26:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    info->lon = ((pack->ew == 'E')?pack->lon:-(pack->lon));
 8003c2a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003c2e:	2b45      	cmp	r3, #69	; 0x45
 8003c30:	d102      	bne.n	8003c38 <nmea_GPGGA2info+0x60>
 8003c32:	e9d0 230c 	ldrd	r2, r3, [r0, #48]	; 0x30
 8003c36:	e003      	b.n	8003c40 <nmea_GPGGA2info+0x68>
 8003c38:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003c3a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003c3c:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8003c40:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    info->smask |= GPGGA;
 8003c44:	680b      	ldr	r3, [r1, #0]
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	600b      	str	r3, [r1, #0]
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	bf00      	nop
 8003c50:	0800ca37 	.word	0x0800ca37
 8003c54:	0800ca44 	.word	0x0800ca44
 8003c58:	0800c830 	.word	0x0800c830

08003c5c <nmea_GPGSA2info>:
 * \brief Fill nmeaINFO structure by GSA packet data.
 * @param pack a pointer of packet structure.
 * @param info a pointer of summary information structure.
 */
void nmea_GPGSA2info(nmeaGPGSA *pack, nmeaINFO *info)
{
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i, j, nuse = 0;

    NMEA_ASSERT(pack && info);
 8003c5e:	b100      	cbz	r0, 8003c62 <nmea_GPGSA2info+0x6>
 8003c60:	b931      	cbnz	r1, 8003c70 <nmea_GPGSA2info+0x14>
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <nmea_GPGSA2info+0x70>)
 8003c64:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <nmea_GPGSA2info+0x74>)
 8003c66:	481b      	ldr	r0, [pc, #108]	; (8003cd4 <nmea_GPGSA2info+0x78>)
 8003c68:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003c6c:	f000 fbb0 	bl	80043d0 <__assert_func>

    info->fix = pack->fix_type;
 8003c70:	6843      	ldr	r3, [r0, #4]
 8003c72:	624b      	str	r3, [r1, #36]	; 0x24
    info->PDOP = pack->PDOP;
 8003c74:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
 8003c78:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    info->HDOP = pack->HDOP;
 8003c7c:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 8003c80:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    info->VDOP = pack->VDOP;
 8003c84:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48

    for(i = 0; i < NMEA_MAXSAT; ++i)
    {
        for(j = 0; j < info->satinfo.inview; ++j)
 8003c88:	6f4f      	ldr	r7, [r1, #116]	; 0x74
    NMEA_ASSERT(pack && info);

    info->fix = pack->fix_type;
    info->PDOP = pack->PDOP;
    info->HDOP = pack->HDOP;
    info->VDOP = pack->VDOP;
 8003c8a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003c8e:	f100 0e38 	add.w	lr, r0, #56	; 0x38
 8003c92:	f100 0208 	add.w	r2, r0, #8
 * @param pack a pointer of packet structure.
 * @param info a pointer of summary information structure.
 */
void nmea_GPGSA2info(nmeaGPGSA *pack, nmeaINFO *info)
{
    int i, j, nuse = 0;
 8003c96:	2400      	movs	r4, #0
    {
        for(j = 0; j < info->satinfo.inview; ++j)
        {
            if(pack->sat_prn[i] && pack->sat_prn[i] == info->satinfo.sat[j].id)
            {
                info->satinfo.sat[j].in_use = 1;
 8003c98:	f04f 0c01 	mov.w	ip, #1
 8003c9c:	460b      	mov	r3, r1
 * \brief Fill nmeaINFO structure by GSA packet data.
 * @param pack a pointer of packet structure.
 * @param info a pointer of summary information structure.
 */
void nmea_GPGSA2info(nmeaGPGSA *pack, nmeaINFO *info)
{
 8003c9e:	2500      	movs	r5, #0
    info->HDOP = pack->HDOP;
    info->VDOP = pack->VDOP;

    for(i = 0; i < NMEA_MAXSAT; ++i)
    {
        for(j = 0; j < info->satinfo.inview; ++j)
 8003ca0:	42bd      	cmp	r5, r7
 8003ca2:	da0a      	bge.n	8003cba <nmea_GPGSA2info+0x5e>
        {
            if(pack->sat_prn[i] && pack->sat_prn[i] == info->satinfo.sat[j].id)
 8003ca4:	6816      	ldr	r6, [r2, #0]
 8003ca6:	b12e      	cbz	r6, 8003cb4 <nmea_GPGSA2info+0x58>
 8003ca8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003caa:	4286      	cmp	r6, r0
            {
                info->satinfo.sat[j].in_use = 1;
 8003cac:	bf04      	itt	eq
 8003cae:	f8c3 c07c 	streq.w	ip, [r3, #124]	; 0x7c
                nuse++;
 8003cb2:	3401      	addeq	r4, #1
    info->HDOP = pack->HDOP;
    info->VDOP = pack->VDOP;

    for(i = 0; i < NMEA_MAXSAT; ++i)
    {
        for(j = 0; j < info->satinfo.inview; ++j)
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	e7f2      	b.n	8003ca0 <nmea_GPGSA2info+0x44>
 8003cba:	3204      	adds	r2, #4
    info->fix = pack->fix_type;
    info->PDOP = pack->PDOP;
    info->HDOP = pack->HDOP;
    info->VDOP = pack->VDOP;

    for(i = 0; i < NMEA_MAXSAT; ++i)
 8003cbc:	4572      	cmp	r2, lr
 8003cbe:	d1ed      	bne.n	8003c9c <nmea_GPGSA2info+0x40>
            }
        }
    }

    info->satinfo.inuse = nuse;
    info->smask |= GPGSA;
 8003cc0:	680b      	ldr	r3, [r1, #0]
                nuse++;
            }
        }
    }

    info->satinfo.inuse = nuse;
 8003cc2:	670c      	str	r4, [r1, #112]	; 0x70
    info->smask |= GPGSA;
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	600b      	str	r3, [r1, #0]
 8003cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ccc:	0800ca37 	.word	0x0800ca37
 8003cd0:	0800ca63 	.word	0x0800ca63
 8003cd4:	0800c830 	.word	0x0800c830

08003cd8 <nmea_GPGSV2info>:
 * \brief Fill nmeaINFO structure by GSV packet data.
 * @param pack a pointer of packet structure.
 * @param info a pointer of summary information structure.
 */
void nmea_GPGSV2info(nmeaGPGSV *pack, nmeaINFO *info)
{
 8003cd8:	b538      	push	{r3, r4, r5, lr}
    int isat, isi, nsat;

    NMEA_ASSERT(pack && info);
 8003cda:	b100      	cbz	r0, 8003cde <nmea_GPGSV2info+0x6>
 8003cdc:	b931      	cbnz	r1, 8003cec <nmea_GPGSV2info+0x14>
 8003cde:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <nmea_GPGSV2info+0x88>)
 8003ce0:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <nmea_GPGSV2info+0x8c>)
 8003ce2:	4821      	ldr	r0, [pc, #132]	; (8003d68 <nmea_GPGSV2info+0x90>)
 8003ce4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8003ce8:	f000 fb72 	bl	80043d0 <__assert_func>

    if(pack->pack_index > pack->pack_count ||
 8003cec:	e890 000c 	ldmia.w	r0, {r2, r3}
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	dc34      	bgt.n	8003d5e <nmea_GPGSV2info+0x86>
 8003cf4:	009a      	lsls	r2, r3, #2
 8003cf6:	2a0c      	cmp	r2, #12
 8003cf8:	dc31      	bgt.n	8003d5e <nmea_GPGSV2info+0x86>
        pack->pack_index * NMEA_SATINPACK > NMEA_MAXSAT)
        return;

    if(pack->pack_index < 1)
 8003cfa:	2b00      	cmp	r3, #0
        pack->pack_index = 1;
 8003cfc:	bfdc      	itt	le
 8003cfe:	2301      	movle	r3, #1
 8003d00:	6043      	strle	r3, [r0, #4]

    info->satinfo.inview = pack->sat_count;

    nsat = (pack->pack_index - 1) * NMEA_SATINPACK;
 8003d02:	6843      	ldr	r3, [r0, #4]
        return;

    if(pack->pack_index < 1)
        pack->pack_index = 1;

    info->satinfo.inview = pack->sat_count;
 8003d04:	6882      	ldr	r2, [r0, #8]
 8003d06:	674a      	str	r2, [r1, #116]	; 0x74

    nsat = (pack->pack_index - 1) * NMEA_SATINPACK;
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	009b      	lsls	r3, r3, #2
    nsat = (nsat + NMEA_SATINPACK > pack->sat_count)?pack->sat_count - nsat:NMEA_SATINPACK;
 8003d0c:	1cdc      	adds	r4, r3, #3
 8003d0e:	42a2      	cmp	r2, r4
 8003d10:	f04f 0414 	mov.w	r4, #20
 8003d14:	bfd8      	it	le
 8003d16:	1ad2      	suble	r2, r2, r3
 8003d18:	fb04 1303 	mla	r3, r4, r3, r1
 8003d1c:	bfc8      	it	gt
 8003d1e:	2204      	movgt	r2, #4
 8003d20:	300c      	adds	r0, #12
 8003d22:	3378      	adds	r3, #120	; 0x78

    for(isat = 0; isat < nsat; ++isat)
 8003d24:	2400      	movs	r4, #0
 8003d26:	4294      	cmp	r4, r2
 8003d28:	f100 0014 	add.w	r0, r0, #20
 8003d2c:	f103 0314 	add.w	r3, r3, #20
 8003d30:	da11      	bge.n	8003d56 <nmea_GPGSV2info+0x7e>
    {
        isi = (pack->pack_index - 1) * NMEA_SATINPACK + isat;
        info->satinfo.sat[isi].id = pack->sat_data[isat].id;
 8003d32:	f850 5c14 	ldr.w	r5, [r0, #-20]
 8003d36:	f843 5c14 	str.w	r5, [r3, #-20]
        info->satinfo.sat[isi].elv = pack->sat_data[isat].elv;
 8003d3a:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 8003d3e:	f843 5c0c 	str.w	r5, [r3, #-12]
        info->satinfo.sat[isi].azimuth = pack->sat_data[isat].azimuth;
 8003d42:	f850 5c08 	ldr.w	r5, [r0, #-8]
 8003d46:	f843 5c08 	str.w	r5, [r3, #-8]
        info->satinfo.sat[isi].sig = pack->sat_data[isat].sig;
 8003d4a:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8003d4e:	f843 5c04 	str.w	r5, [r3, #-4]
    info->satinfo.inview = pack->sat_count;

    nsat = (pack->pack_index - 1) * NMEA_SATINPACK;
    nsat = (nsat + NMEA_SATINPACK > pack->sat_count)?pack->sat_count - nsat:NMEA_SATINPACK;

    for(isat = 0; isat < nsat; ++isat)
 8003d52:	3401      	adds	r4, #1
 8003d54:	e7e7      	b.n	8003d26 <nmea_GPGSV2info+0x4e>
        info->satinfo.sat[isi].elv = pack->sat_data[isat].elv;
        info->satinfo.sat[isi].azimuth = pack->sat_data[isat].azimuth;
        info->satinfo.sat[isi].sig = pack->sat_data[isat].sig;
    }

    info->smask |= GPGSV;
 8003d56:	680b      	ldr	r3, [r1, #0]
 8003d58:	f043 0304 	orr.w	r3, r3, #4
 8003d5c:	600b      	str	r3, [r1, #0]
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}
 8003d60:	0800ca37 	.word	0x0800ca37
 8003d64:	0800ca73 	.word	0x0800ca73
 8003d68:	0800c830 	.word	0x0800c830
 8003d6c:	00000000 	.word	0x00000000

08003d70 <nmea_GPRMC2info>:
 * \brief Fill nmeaINFO structure by RMC packet data.
 * @param pack a pointer of packet structure.
 * @param info a pointer of summary information structure.
 */
void nmea_GPRMC2info(nmeaGPRMC *pack, nmeaINFO *info)
{
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	460c      	mov	r4, r1
    NMEA_ASSERT(pack && info);
 8003d74:	4605      	mov	r5, r0
 8003d76:	b100      	cbz	r0, 8003d7a <nmea_GPRMC2info+0xa>
 8003d78:	b931      	cbnz	r1, 8003d88 <nmea_GPRMC2info+0x18>
 8003d7a:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <nmea_GPRMC2info+0xb0>)
 8003d7c:	4a29      	ldr	r2, [pc, #164]	; (8003e24 <nmea_GPRMC2info+0xb4>)
 8003d7e:	482a      	ldr	r0, [pc, #168]	; (8003e28 <nmea_GPRMC2info+0xb8>)
 8003d80:	f240 11d1 	movw	r1, #465	; 0x1d1
 8003d84:	f000 fb24 	bl	80043d0 <__assert_func>

    if('A' == pack->status)
 8003d88:	7f03      	ldrb	r3, [r0, #28]
 8003d8a:	2b41      	cmp	r3, #65	; 0x41
 8003d8c:	d108      	bne.n	8003da0 <nmea_GPRMC2info+0x30>
    {
        if(NMEA_SIG_BAD == info->sig)
 8003d8e:	6a0b      	ldr	r3, [r1, #32]
 8003d90:	b90b      	cbnz	r3, 8003d96 <nmea_GPRMC2info+0x26>
            info->sig = NMEA_SIG_MID;
 8003d92:	2302      	movs	r3, #2
 8003d94:	620b      	str	r3, [r1, #32]
        if(NMEA_FIX_BAD == info->fix)
 8003d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d107      	bne.n	8003dac <nmea_GPRMC2info+0x3c>
            info->fix = NMEA_FIX_2D;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e004      	b.n	8003daa <nmea_GPRMC2info+0x3a>
    }
    else if('V' == pack->status)
 8003da0:	2b56      	cmp	r3, #86	; 0x56
 8003da2:	d103      	bne.n	8003dac <nmea_GPRMC2info+0x3c>
    {
        info->sig = NMEA_SIG_BAD;
 8003da4:	2300      	movs	r3, #0
 8003da6:	620b      	str	r3, [r1, #32]
        info->fix = NMEA_FIX_BAD;
 8003da8:	2301      	movs	r3, #1
 8003daa:	6263      	str	r3, [r4, #36]	; 0x24
    }

    info->utc = pack->utc;
 8003dac:	462f      	mov	r7, r5
 8003dae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003db0:	1d26      	adds	r6, r4, #4
 8003db2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003db4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003db8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    info->lat = ((pack->ns == 'N')?pack->lat:-(pack->lat));
 8003dbc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8003dc0:	2b4e      	cmp	r3, #78	; 0x4e
 8003dc2:	d102      	bne.n	8003dca <nmea_GPRMC2info+0x5a>
 8003dc4:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 8003dc8:	e003      	b.n	8003dd2 <nmea_GPRMC2info+0x62>
 8003dca:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003dcc:	6a2a      	ldr	r2, [r5, #32]
 8003dce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003dd2:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    info->lon = ((pack->ew == 'E')?pack->lon:-(pack->lon));
 8003dd6:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8003dda:	2b45      	cmp	r3, #69	; 0x45
 8003ddc:	d102      	bne.n	8003de4 <nmea_GPRMC2info+0x74>
 8003dde:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8003de2:	e003      	b.n	8003dec <nmea_GPRMC2info+0x7c>
 8003de4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003de6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003de8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    info->speed = pack->speed * NMEA_TUD_KNOTS;
 8003dec:	e9d5 0110 	ldrd	r0, r1, [r5, #64]	; 0x40
        info->fix = NMEA_FIX_BAD;
    }

    info->utc = pack->utc;
    info->lat = ((pack->ns == 'N')?pack->lat:-(pack->lat));
    info->lon = ((pack->ew == 'E')?pack->lon:-(pack->lon));
 8003df0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    info->speed = pack->speed * NMEA_TUD_KNOTS;
 8003df4:	a308      	add	r3, pc, #32	; (adr r3, 8003e18 <nmea_GPRMC2info+0xa8>)
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f7fc fbf9 	bl	80005f0 <__aeabi_dmul>
    info->direction = pack->direction;
 8003dfe:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	; 0x48
 8003e02:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
    info->smask |= GPRMC;
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	f043 0308 	orr.w	r3, r3, #8
    }

    info->utc = pack->utc;
    info->lat = ((pack->ns == 'N')?pack->lat:-(pack->lat));
    info->lon = ((pack->ew == 'E')?pack->lon:-(pack->lon));
    info->speed = pack->speed * NMEA_TUD_KNOTS;
 8003e0c:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    info->direction = pack->direction;
    info->smask |= GPRMC;
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e14:	f3af 8000 	nop.w
 8003e18:	c083126f 	.word	0xc083126f
 8003e1c:	3ffda1ca 	.word	0x3ffda1ca
 8003e20:	0800ca37 	.word	0x0800ca37
 8003e24:	0800c78e 	.word	0x0800c78e
 8003e28:	0800c830 	.word	0x0800c830

08003e2c <nmea_GPVTG2info>:
 * \brief Fill nmeaINFO structure by VTG packet data.
 * @param pack a pointer of packet structure.
 * @param info a pointer of summary information structure.
 */
void nmea_GPVTG2info(nmeaGPVTG *pack, nmeaINFO *info)
{
 8003e2c:	b508      	push	{r3, lr}
    NMEA_ASSERT(pack && info);
 8003e2e:	b100      	cbz	r0, 8003e32 <nmea_GPVTG2info+0x6>
 8003e30:	b931      	cbnz	r1, 8003e40 <nmea_GPVTG2info+0x14>
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <nmea_GPVTG2info+0x38>)
 8003e34:	4a0c      	ldr	r2, [pc, #48]	; (8003e68 <nmea_GPVTG2info+0x3c>)
 8003e36:	480d      	ldr	r0, [pc, #52]	; (8003e6c <nmea_GPVTG2info+0x40>)
 8003e38:	f240 11ef 	movw	r1, #495	; 0x1ef
 8003e3c:	f000 fac8 	bl	80043d0 <__assert_func>

    info->direction = pack->dir;
 8003e40:	e9d0 2300 	ldrd	r2, r3, [r0]
 8003e44:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    info->declination = pack->dec;
 8003e48:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8003e4c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    info->speed = pack->spk;
 8003e50:	e9d0 230c 	ldrd	r2, r3, [r0, #48]	; 0x30
 8003e54:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    info->smask |= GPVTG;
 8003e58:	680b      	ldr	r3, [r1, #0]
 8003e5a:	f043 0310 	orr.w	r3, r3, #16
 8003e5e:	600b      	str	r3, [r1, #0]
 8003e60:	bd08      	pop	{r3, pc}
 8003e62:	bf00      	nop
 8003e64:	0800ca37 	.word	0x0800ca37
 8003e68:	0800c7d1 	.word	0x0800c7d1
 8003e6c:	0800c830 	.word	0x0800c830

08003e70 <nmea_parser_init>:
/**
 * \brief Initialization of parser object
 * @return true (1) - success or false (0) - fail
 */
int nmea_parser_init(nmeaPARSER *parser)
{
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	4605      	mov	r5, r0
    int resv = 0;
    int buff_size = nmea_property()->parse_buff_size;
 8003e74:	f7ff fb60 	bl	8003538 <nmea_property>
 8003e78:	6886      	ldr	r6, [r0, #8]

    NMEA_ASSERT(parser);
 8003e7a:	b92d      	cbnz	r5, 8003e88 <nmea_parser_init+0x18>
 8003e7c:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <nmea_parser_init+0x48>)
 8003e7e:	4a0f      	ldr	r2, [pc, #60]	; (8003ebc <nmea_parser_init+0x4c>)
 8003e80:	480f      	ldr	r0, [pc, #60]	; (8003ec0 <nmea_parser_init+0x50>)
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	f000 faa4 	bl	80043d0 <__assert_func>

    if(buff_size < NMEA_MIN_PARSEBUFF)
        buff_size = NMEA_MIN_PARSEBUFF;
 8003e88:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8003e8c:	bfb8      	it	lt
 8003e8e:	f44f 7680 	movlt.w	r6, #256	; 0x100

    memset(parser, 0, sizeof(nmeaPARSER));
 8003e92:	2214      	movs	r2, #20
 8003e94:	2100      	movs	r1, #0
 8003e96:	4628      	mov	r0, r5
 8003e98:	f000 fde4 	bl	8004a64 <memset>

    if(0 == (parser->buffer = malloc(buff_size)))
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f000 fb97 	bl	80045d0 <malloc>
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	60a8      	str	r0, [r5, #8]
 8003ea6:	b920      	cbnz	r0, 8003eb2 <nmea_parser_init+0x42>
        nmea_error("Insufficient memory!");
 8003ea8:	4806      	ldr	r0, [pc, #24]	; (8003ec4 <nmea_parser_init+0x54>)
 8003eaa:	f7ff fb51 	bl	8003550 <nmea_error>
 * \brief Initialization of parser object
 * @return true (1) - success or false (0) - fail
 */
int nmea_parser_init(nmeaPARSER *parser)
{
    int resv = 0;
 8003eae:	4620      	mov	r0, r4
 8003eb0:	bd70      	pop	{r4, r5, r6, pc}

    if(0 == (parser->buffer = malloc(buff_size)))
        nmea_error("Insufficient memory!");
    else
    {
        parser->buff_size = buff_size;
 8003eb2:	60ee      	str	r6, [r5, #12]
        resv = 1;
 8003eb4:	2001      	movs	r0, #1
    }    

    return resv;
}
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	0800cacc 	.word	0x0800cacc
 8003ebc:	0800cabb 	.word	0x0800cabb
 8003ec0:	0800cad3 	.word	0x0800cad3
 8003ec4:	0800caee 	.word	0x0800caee

08003ec8 <nmea_parser_pop>:
int nmea_parser_pop(nmeaPARSER *parser, void **pack_ptr)
{
    int retval = GPNON;
    nmeaParserNODE *node = (nmeaParserNODE *)parser->top_node;

    NMEA_ASSERT(parser && parser->buffer);
 8003ec8:	6882      	ldr	r2, [r0, #8]
 * @see nmeaPACKTYPE
 */
int nmea_parser_pop(nmeaPARSER *parser, void **pack_ptr)
{
    int retval = GPNON;
    nmeaParserNODE *node = (nmeaParserNODE *)parser->top_node;
 8003eca:	6803      	ldr	r3, [r0, #0]
 * \brief Withdraw top packet from parser
 * @return Received packet type
 * @see nmeaPACKTYPE
 */
int nmea_parser_pop(nmeaPARSER *parser, void **pack_ptr)
{
 8003ecc:	b510      	push	{r4, lr}
    int retval = GPNON;
    nmeaParserNODE *node = (nmeaParserNODE *)parser->top_node;

    NMEA_ASSERT(parser && parser->buffer);
 8003ece:	b932      	cbnz	r2, 8003ede <nmea_parser_pop+0x16>
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <nmea_parser_pop+0x34>)
 8003ed2:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <nmea_parser_pop+0x38>)
 8003ed4:	480b      	ldr	r0, [pc, #44]	; (8003f04 <nmea_parser_pop+0x3c>)
 8003ed6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8003eda:	f000 fa79 	bl	80043d0 <__assert_func>

    if(node)
 8003ede:	b153      	cbz	r3, 8003ef6 <nmea_parser_pop+0x2e>
    {
        *pack_ptr = node->pack;
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	600a      	str	r2, [r1, #0]
        retval = node->packType;
        parser->top_node = node->next_node;
 8003ee4:	689a      	ldr	r2, [r3, #8]
    NMEA_ASSERT(parser && parser->buffer);

    if(node)
    {
        *pack_ptr = node->pack;
        retval = node->packType;
 8003ee6:	681c      	ldr	r4, [r3, #0]
        parser->top_node = node->next_node;
 8003ee8:	6002      	str	r2, [r0, #0]
        if(!parser->top_node)
 8003eea:	b902      	cbnz	r2, 8003eee <nmea_parser_pop+0x26>
            parser->end_node = 0;
 8003eec:	6042      	str	r2, [r0, #4]
        free(node);
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fb76 	bl	80045e0 <free>
 8003ef4:	e000      	b.n	8003ef8 <nmea_parser_pop+0x30>
 * @return Received packet type
 * @see nmeaPACKTYPE
 */
int nmea_parser_pop(nmeaPARSER *parser, void **pack_ptr)
{
    int retval = GPNON;
 8003ef6:	461c      	mov	r4, r3
            parser->end_node = 0;
        free(node);
    }

    return retval;
}
 8003ef8:	4620      	mov	r0, r4
 8003efa:	bd10      	pop	{r4, pc}
 8003efc:	0800cb03 	.word	0x0800cb03
 8003f00:	0800cb27 	.word	0x0800cb27
 8003f04:	0800cad3 	.word	0x0800cad3

08003f08 <nmea_parser_buff_clear>:
/**
 * \brief Clear cache of parser
 * @return true (1) - success
 */
int nmea_parser_buff_clear(nmeaPARSER *parser)
{
 8003f08:	b508      	push	{r3, lr}
    NMEA_ASSERT(parser && parser->buffer);
 8003f0a:	b108      	cbz	r0, 8003f10 <nmea_parser_buff_clear+0x8>
 8003f0c:	6883      	ldr	r3, [r0, #8]
 8003f0e:	b933      	cbnz	r3, 8003f1e <nmea_parser_buff_clear+0x16>
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <nmea_parser_buff_clear+0x20>)
 8003f12:	4a06      	ldr	r2, [pc, #24]	; (8003f2c <nmea_parser_buff_clear+0x24>)
 8003f14:	4806      	ldr	r0, [pc, #24]	; (8003f30 <nmea_parser_buff_clear+0x28>)
 8003f16:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8003f1a:	f000 fa59 	bl	80043d0 <__assert_func>
    parser->buff_use = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	6103      	str	r3, [r0, #16]
    return 1;
}
 8003f22:	2001      	movs	r0, #1
 8003f24:	bd08      	pop	{r3, pc}
 8003f26:	bf00      	nop
 8003f28:	0800cb03 	.word	0x0800cb03
 8003f2c:	0800cb37 	.word	0x0800cb37
 8003f30:	0800cad3 	.word	0x0800cad3

08003f34 <nmea_parser_real_push>:
/*
 * low level
 */

int nmea_parser_real_push(nmeaPARSER *parser, const char *buff, int buff_sz)
{
 8003f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003f38:	460e      	mov	r6, r1
 8003f3a:	4614      	mov	r4, r2
    int nparsed = 0, crc, sen_sz, ptype;
    nmeaParserNODE *node = 0;

    NMEA_ASSERT(parser && parser->buffer);
 8003f3c:	4605      	mov	r5, r0
 8003f3e:	b108      	cbz	r0, 8003f44 <nmea_parser_real_push+0x10>
 8003f40:	6883      	ldr	r3, [r0, #8]
 8003f42:	b92b      	cbnz	r3, 8003f50 <nmea_parser_real_push+0x1c>
 8003f44:	4b59      	ldr	r3, [pc, #356]	; (80040ac <nmea_parser_real_push+0x178>)
 8003f46:	4a5a      	ldr	r2, [pc, #360]	; (80040b0 <nmea_parser_real_push+0x17c>)
 8003f48:	485a      	ldr	r0, [pc, #360]	; (80040b4 <nmea_parser_real_push+0x180>)
 8003f4a:	2180      	movs	r1, #128	; 0x80
 8003f4c:	f000 fa40 	bl	80043d0 <__assert_func>
        parser->buff_size - parser->buff_use
        );
        */

    /* add */
    if(parser->buff_use + buff_sz >= parser->buff_size)
 8003f50:	6903      	ldr	r3, [r0, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	68c2      	ldr	r2, [r0, #12]
 8003f56:	4293      	cmp	r3, r2
 8003f58:	db01      	blt.n	8003f5e <nmea_parser_real_push+0x2a>
        nmea_parser_buff_clear(parser);
 8003f5a:	f7ff ffd5 	bl	8003f08 <nmea_parser_buff_clear>

    memcpy(parser->buffer + parser->buff_use, buff, buff_sz);
 8003f5e:	692b      	ldr	r3, [r5, #16]
 8003f60:	68a8      	ldr	r0, [r5, #8]
 8003f62:	4622      	mov	r2, r4
 8003f64:	4631      	mov	r1, r6
 8003f66:	4418      	add	r0, r3
 8003f68:	f000 fd71 	bl	8004a4e <memcpy>
    parser->buff_use += buff_sz;
 8003f6c:	692b      	ldr	r3, [r5, #16]
 * low level
 */

int nmea_parser_real_push(nmeaPARSER *parser, const char *buff, int buff_sz)
{
    int nparsed = 0, crc, sen_sz, ptype;
 8003f6e:	2600      	movs	r6, #0
    /* add */
    if(parser->buff_use + buff_sz >= parser->buff_size)
        nmea_parser_buff_clear(parser);

    memcpy(parser->buffer + parser->buff_use, buff, buff_sz);
    parser->buff_use += buff_sz;
 8003f70:	441c      	add	r4, r3
 8003f72:	612c      	str	r4, [r5, #16]
                parser->buff_use - nparsed - 1);

            if(0 == (node = malloc(sizeof(nmeaParserNODE))))
                goto mem_fail;

            node->pack = 0;
 8003f74:	46b1      	mov	r9, r6
    parser->buff_use += buff_sz;

    /* parse */
    for(;;node = 0)
    {
        sen_sz = nmea_find_tail(
 8003f76:	6929      	ldr	r1, [r5, #16]
 8003f78:	68a8      	ldr	r0, [r5, #8]
 8003f7a:	aa01      	add	r2, sp, #4
 8003f7c:	1b89      	subs	r1, r1, r6
 8003f7e:	4430      	add	r0, r6
 8003f80:	f7ff fbe2 	bl	8003748 <nmea_find_tail>
            (const char *)parser->buffer + nparsed,
            (int)parser->buff_use - nparsed, &crc);

        if(!sen_sz)
 8003f84:	4607      	mov	r7, r0
 8003f86:	b950      	cbnz	r0, 8003f9e <nmea_parser_real_push+0x6a>
        {
            if(nparsed)
 8003f88:	2e00      	cmp	r6, #0
 8003f8a:	f000 808a 	beq.w	80040a2 <nmea_parser_real_push+0x16e>
                memcpy(
                parser->buffer,
                parser->buffer + nparsed,
                parser->buff_use -= nparsed);
 8003f8e:	692a      	ldr	r2, [r5, #16]
        if(!sen_sz)
        {
            if(nparsed)
                memcpy(
                parser->buffer,
                parser->buffer + nparsed,
 8003f90:	68a8      	ldr	r0, [r5, #8]
                parser->buff_use -= nparsed);
 8003f92:	1b92      	subs	r2, r2, r6
 8003f94:	612a      	str	r2, [r5, #16]
            (int)parser->buff_use - nparsed, &crc);

        if(!sen_sz)
        {
            if(nparsed)
                memcpy(
 8003f96:	1981      	adds	r1, r0, r6
 8003f98:	f000 fd59 	bl	8004a4e <memcpy>
 8003f9c:	e081      	b.n	80040a2 <nmea_parser_real_push+0x16e>
                parser->buffer,
                parser->buffer + nparsed,
                parser->buff_use -= nparsed);
            break;
        }
        else if(crc >= 0)
 8003f9e:	9b01      	ldr	r3, [sp, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	db73      	blt.n	800408c <nmea_parser_real_push+0x158>
        {
            ptype = nmea_pack_type(
 8003fa4:	6929      	ldr	r1, [r5, #16]
 8003fa6:	68ab      	ldr	r3, [r5, #8]
 8003fa8:	1b89      	subs	r1, r1, r6
 8003faa:	1c70      	adds	r0, r6, #1
 8003fac:	3901      	subs	r1, #1
 8003fae:	4418      	add	r0, r3
 8003fb0:	f7ff fb84 	bl	80036bc <nmea_pack_type>
 8003fb4:	4680      	mov	r8, r0
                (const char *)parser->buffer + nparsed + 1,
                parser->buff_use - nparsed - 1);

            if(0 == (node = malloc(sizeof(nmeaParserNODE))))
 8003fb6:	200c      	movs	r0, #12
 8003fb8:	f000 fb0a 	bl	80045d0 <malloc>
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d069      	beq.n	8004096 <nmea_parser_real_push+0x162>
                goto mem_fail;

            node->pack = 0;
 8003fc2:	f8c0 9004 	str.w	r9, [r0, #4]

            switch(ptype)
 8003fc6:	f108 30ff 	add.w	r0, r8, #4294967295
 8003fca:	280f      	cmp	r0, #15
 8003fcc:	d851      	bhi.n	8004072 <nmea_parser_real_push+0x13e>
 8003fce:	e8df f000 	tbb	[pc, r0]
 8003fd2:	1708      	.short	0x1708
 8003fd4:	50502650 	.word	0x50502650
 8003fd8:	50503450 	.word	0x50503450
 8003fdc:	50505050 	.word	0x50505050
 8003fe0:	4250      	.short	0x4250
            {
            case GPGGA:
                if(0 == (node->pack = malloc(sizeof(nmeaGPGGA))))
 8003fe2:	2080      	movs	r0, #128	; 0x80
 8003fe4:	f000 faf4 	bl	80045d0 <malloc>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6060      	str	r0, [r4, #4]
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d04f      	beq.n	8004090 <nmea_parser_real_push+0x15c>
                    goto mem_fail;
                node->packType = GPGGA;
                if(!nmea_parse_GPGGA(
 8003ff0:	68a8      	ldr	r0, [r5, #8]
            switch(ptype)
            {
            case GPGGA:
                if(0 == (node->pack = malloc(sizeof(nmeaGPGGA))))
                    goto mem_fail;
                node->packType = GPGGA;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	6023      	str	r3, [r4, #0]
                if(!nmea_parse_GPGGA(
 8003ff6:	4639      	mov	r1, r7
 8003ff8:	4430      	add	r0, r6
 8003ffa:	f7ff fbf1 	bl	80037e0 <nmea_parse_GPGGA>
 8003ffe:	e037      	b.n	8004070 <nmea_parser_real_push+0x13c>
                    free(node);
                    node = 0;
                }
                break;
            case GPGSA:
                if(0 == (node->pack = malloc(sizeof(nmeaGPGSA))))
 8004000:	2050      	movs	r0, #80	; 0x50
 8004002:	f000 fae5 	bl	80045d0 <malloc>
 8004006:	4602      	mov	r2, r0
 8004008:	6060      	str	r0, [r4, #4]
 800400a:	2800      	cmp	r0, #0
 800400c:	d040      	beq.n	8004090 <nmea_parser_real_push+0x15c>
                    goto mem_fail;
                node->packType = GPGSA;
                if(!nmea_parse_GPGSA(
 800400e:	68a8      	ldr	r0, [r5, #8]
                }
                break;
            case GPGSA:
                if(0 == (node->pack = malloc(sizeof(nmeaGPGSA))))
                    goto mem_fail;
                node->packType = GPGSA;
 8004010:	2302      	movs	r3, #2
 8004012:	6023      	str	r3, [r4, #0]
                if(!nmea_parse_GPGSA(
 8004014:	4639      	mov	r1, r7
 8004016:	4430      	add	r0, r6
 8004018:	f7ff fc46 	bl	80038a8 <nmea_parse_GPGSA>
 800401c:	e028      	b.n	8004070 <nmea_parser_real_push+0x13c>
                    free(node);
                    node = 0;
                }
                break;
            case GPGSV:
                if(0 == (node->pack = malloc(sizeof(nmeaGPGSV))))
 800401e:	205c      	movs	r0, #92	; 0x5c
 8004020:	f000 fad6 	bl	80045d0 <malloc>
 8004024:	4602      	mov	r2, r0
 8004026:	6060      	str	r0, [r4, #4]
 8004028:	b390      	cbz	r0, 8004090 <nmea_parser_real_push+0x15c>
                    goto mem_fail;
                node->packType = GPGSV;
                if(!nmea_parse_GPGSV(
 800402a:	68a8      	ldr	r0, [r5, #8]
                }
                break;
            case GPGSV:
                if(0 == (node->pack = malloc(sizeof(nmeaGPGSV))))
                    goto mem_fail;
                node->packType = GPGSV;
 800402c:	2304      	movs	r3, #4
 800402e:	6023      	str	r3, [r4, #0]
                if(!nmea_parse_GPGSV(
 8004030:	4639      	mov	r1, r7
 8004032:	4430      	add	r0, r6
 8004034:	f7ff fc98 	bl	8003968 <nmea_parse_GPGSV>
 8004038:	e01a      	b.n	8004070 <nmea_parser_real_push+0x13c>
                    free(node);
                    node = 0;
                }
                break;
            case GPRMC:
                if(0 == (node->pack = malloc(sizeof(nmeaGPRMC))))
 800403a:	2060      	movs	r0, #96	; 0x60
 800403c:	f000 fac8 	bl	80045d0 <malloc>
 8004040:	4602      	mov	r2, r0
 8004042:	6060      	str	r0, [r4, #4]
 8004044:	b320      	cbz	r0, 8004090 <nmea_parser_real_push+0x15c>
                    goto mem_fail;
                node->packType = GPRMC;
                if(!nmea_parse_GPRMC(
 8004046:	68a8      	ldr	r0, [r5, #8]
                }
                break;
            case GPRMC:
                if(0 == (node->pack = malloc(sizeof(nmeaGPRMC))))
                    goto mem_fail;
                node->packType = GPRMC;
 8004048:	2308      	movs	r3, #8
 800404a:	6023      	str	r3, [r4, #0]
                if(!nmea_parse_GPRMC(
 800404c:	4639      	mov	r1, r7
 800404e:	4430      	add	r0, r6
 8004050:	f7ff fcfe 	bl	8003a50 <nmea_parse_GPRMC>
 8004054:	e00c      	b.n	8004070 <nmea_parser_real_push+0x13c>
                    free(node);
                    node = 0;
                }
                break;
            case GPVTG:
                if(0 == (node->pack = malloc(sizeof(nmeaGPVTG))))
 8004056:	2040      	movs	r0, #64	; 0x40
 8004058:	f000 faba 	bl	80045d0 <malloc>
 800405c:	4602      	mov	r2, r0
 800405e:	6060      	str	r0, [r4, #4]
 8004060:	b1b0      	cbz	r0, 8004090 <nmea_parser_real_push+0x15c>
                    goto mem_fail;
                node->packType = GPVTG;
                if(!nmea_parse_GPVTG(
 8004062:	68a8      	ldr	r0, [r5, #8]
                }
                break;
            case GPVTG:
                if(0 == (node->pack = malloc(sizeof(nmeaGPVTG))))
                    goto mem_fail;
                node->packType = GPVTG;
 8004064:	2310      	movs	r3, #16
 8004066:	6023      	str	r3, [r4, #0]
                if(!nmea_parse_GPVTG(
 8004068:	4639      	mov	r1, r7
 800406a:	4430      	add	r0, r6
 800406c:	f7ff fd5c 	bl	8003b28 <nmea_parse_GPVTG>
 8004070:	b918      	cbnz	r0, 800407a <nmea_parser_real_push+0x146>
                    free(node);
                    node = 0;
                }
                break;
            default:
                free(node);
 8004072:	4620      	mov	r0, r4
 8004074:	f000 fab4 	bl	80045e0 <free>
                node = 0;
                break;
 8004078:	e008      	b.n	800408c <nmea_parser_real_push+0x158>
            };

            if(node)
            {
                if(parser->end_node)
 800407a:	686b      	ldr	r3, [r5, #4]
 800407c:	b103      	cbz	r3, 8004080 <nmea_parser_real_push+0x14c>
                    ((nmeaParserNODE *)parser->end_node)->next_node = node;
 800407e:	609c      	str	r4, [r3, #8]
                parser->end_node = node;
                if(!parser->top_node)
 8004080:	682b      	ldr	r3, [r5, #0]

            if(node)
            {
                if(parser->end_node)
                    ((nmeaParserNODE *)parser->end_node)->next_node = node;
                parser->end_node = node;
 8004082:	606c      	str	r4, [r5, #4]
                if(!parser->top_node)
 8004084:	b903      	cbnz	r3, 8004088 <nmea_parser_real_push+0x154>
                    parser->top_node = node;
 8004086:	602c      	str	r4, [r5, #0]
                node->next_node = 0;
 8004088:	f8c4 9008 	str.w	r9, [r4, #8]
            }
        }

        nparsed += sen_sz;
 800408c:	443e      	add	r6, r7
    }
 800408e:	e772      	b.n	8003f76 <nmea_parser_real_push+0x42>

    return nparsed;

mem_fail:
    if(node)
        free(node);
 8004090:	4620      	mov	r0, r4
 8004092:	f000 faa5 	bl	80045e0 <free>

    nmea_error("Insufficient memory!");
 8004096:	4808      	ldr	r0, [pc, #32]	; (80040b8 <nmea_parser_real_push+0x184>)
 8004098:	f7ff fa5a 	bl	8003550 <nmea_error>

    return -1;
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	e000      	b.n	80040a4 <nmea_parser_real_push+0x170>
 80040a2:	4630      	mov	r0, r6
}
 80040a4:	b003      	add	sp, #12
 80040a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040aa:	bf00      	nop
 80040ac:	0800cb03 	.word	0x0800cb03
 80040b0:	0800caa5 	.word	0x0800caa5
 80040b4:	0800cad3 	.word	0x0800cad3
 80040b8:	0800caee 	.word	0x0800caee

080040bc <nmea_parser_push>:
/**
 * \brief Analysis of buffer and keep results into parser
 * @return Number of bytes wos parsed from buffer
 */
int nmea_parser_push(nmeaPARSER *parser, const char *buff, int buff_sz)
{
 80040bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c0:	4607      	mov	r7, r0
 80040c2:	4688      	mov	r8, r1
 80040c4:	4615      	mov	r5, r2
    int nparse, nparsed = 0;
 80040c6:	2600      	movs	r6, #0

    do
    {
        if(buff_sz > parser->buff_size)
 80040c8:	68fc      	ldr	r4, [r7, #12]
 80040ca:	42ac      	cmp	r4, r5
 80040cc:	bfa8      	it	ge
 80040ce:	462c      	movge	r4, r5
            nparse = parser->buff_size;
        else
            nparse = buff_sz;

        nparsed += nmea_parser_real_push(
 80040d0:	4622      	mov	r2, r4
 80040d2:	4641      	mov	r1, r8
 80040d4:	4638      	mov	r0, r7
 80040d6:	f7ff ff2d 	bl	8003f34 <nmea_parser_real_push>
            parser, buff, nparse);

        buff_sz -= nparse;

    } while(buff_sz);
 80040da:	1b2d      	subs	r5, r5, r4
        if(buff_sz > parser->buff_size)
            nparse = parser->buff_size;
        else
            nparse = buff_sz;

        nparsed += nmea_parser_real_push(
 80040dc:	4406      	add	r6, r0
            parser, buff, nparse);

        buff_sz -= nparse;

    } while(buff_sz);
 80040de:	d1f3      	bne.n	80040c8 <nmea_parser_push+0xc>

    return nparsed;
}
 80040e0:	4630      	mov	r0, r6
 80040e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080040e8 <nmea_parse>:
int nmea_parse(    
    nmeaPARSER *parser,
    const char *buff, int buff_sz,
    nmeaINFO *info
    )
{
 80040e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ptype, nread = 0;
    void *pack = 0;
 80040ea:	2400      	movs	r4, #0
int nmea_parse(    
    nmeaPARSER *parser,
    const char *buff, int buff_sz,
    nmeaINFO *info
    )
{
 80040ec:	461d      	mov	r5, r3
    int ptype, nread = 0;
    void *pack = 0;
 80040ee:	9401      	str	r4, [sp, #4]

    NMEA_ASSERT(parser && parser->buffer);
 80040f0:	4606      	mov	r6, r0
 80040f2:	b108      	cbz	r0, 80040f8 <nmea_parse+0x10>
 80040f4:	6883      	ldr	r3, [r0, #8]
 80040f6:	b92b      	cbnz	r3, 8004104 <nmea_parse+0x1c>
 80040f8:	4b1c      	ldr	r3, [pc, #112]	; (800416c <nmea_parse+0x84>)
 80040fa:	4a1d      	ldr	r2, [pc, #116]	; (8004170 <nmea_parse+0x88>)
 80040fc:	481d      	ldr	r0, [pc, #116]	; (8004174 <nmea_parse+0x8c>)
 80040fe:	2156      	movs	r1, #86	; 0x56
 8004100:	f000 f966 	bl	80043d0 <__assert_func>

    nmea_parser_push(parser, buff, buff_sz);
 8004104:	f7ff ffda 	bl	80040bc <nmea_parser_push>

    while(GPNON != (ptype = nmea_parser_pop(parser, &pack)))
 8004108:	a901      	add	r1, sp, #4
 800410a:	4630      	mov	r0, r6
 800410c:	f7ff fedc 	bl	8003ec8 <nmea_parser_pop>
 8004110:	b348      	cbz	r0, 8004166 <nmea_parse+0x7e>
    {
        nread++;

        switch(ptype)
 8004112:	3801      	subs	r0, #1

    nmea_parser_push(parser, buff, buff_sz);

    while(GPNON != (ptype = nmea_parser_pop(parser, &pack)))
    {
        nread++;
 8004114:	3401      	adds	r4, #1

        switch(ptype)
 8004116:	280f      	cmp	r0, #15
 8004118:	d821      	bhi.n	800415e <nmea_parse+0x76>
 800411a:	e8df f000 	tbb	[pc, r0]
 800411e:	0d08      	.short	0x0d08
 8004120:	20201220 	.word	0x20201220
 8004124:	20201720 	.word	0x20201720
 8004128:	20202020 	.word	0x20202020
 800412c:	1c20      	.short	0x1c20
        {
        case GPGGA:
            nmea_GPGGA2info((nmeaGPGGA *)pack, info);
 800412e:	4629      	mov	r1, r5
 8004130:	9801      	ldr	r0, [sp, #4]
 8004132:	f7ff fd51 	bl	8003bd8 <nmea_GPGGA2info>
            break;
 8004136:	e012      	b.n	800415e <nmea_parse+0x76>
        case GPGSA:
            nmea_GPGSA2info((nmeaGPGSA *)pack, info);
 8004138:	4629      	mov	r1, r5
 800413a:	9801      	ldr	r0, [sp, #4]
 800413c:	f7ff fd8e 	bl	8003c5c <nmea_GPGSA2info>
            break;
 8004140:	e00d      	b.n	800415e <nmea_parse+0x76>
        case GPGSV:
            nmea_GPGSV2info((nmeaGPGSV *)pack, info);
 8004142:	4629      	mov	r1, r5
 8004144:	9801      	ldr	r0, [sp, #4]
 8004146:	f7ff fdc7 	bl	8003cd8 <nmea_GPGSV2info>
            break;
 800414a:	e008      	b.n	800415e <nmea_parse+0x76>
        case GPRMC:
            nmea_GPRMC2info((nmeaGPRMC *)pack, info);
 800414c:	4629      	mov	r1, r5
 800414e:	9801      	ldr	r0, [sp, #4]
 8004150:	f7ff fe0e 	bl	8003d70 <nmea_GPRMC2info>
            break;
 8004154:	e003      	b.n	800415e <nmea_parse+0x76>
        case GPVTG:
            nmea_GPVTG2info((nmeaGPVTG *)pack, info);
 8004156:	4629      	mov	r1, r5
 8004158:	9801      	ldr	r0, [sp, #4]
 800415a:	f7ff fe67 	bl	8003e2c <nmea_GPVTG2info>
            break;
        };

        free(pack);
 800415e:	9801      	ldr	r0, [sp, #4]
 8004160:	f000 fa3e 	bl	80045e0 <free>
 8004164:	e7d0      	b.n	8004108 <nmea_parse+0x20>
    }

    return nread;
}
 8004166:	4620      	mov	r0, r4
 8004168:	b002      	add	sp, #8
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	0800cb03 	.word	0x0800cb03
 8004170:	0800cb1c 	.word	0x0800cb1c
 8004174:	0800cad3 	.word	0x0800cad3

08004178 <nmea_time_now>:
}

#else /* NMEA_WIN */

void nmea_time_now(nmeaTIME *stm)
{
 8004178:	b513      	push	{r0, r1, r4, lr}
 800417a:	4604      	mov	r4, r0
    time_t lt;
    struct tm *tt;

    time(&lt);
 800417c:	a801      	add	r0, sp, #4
 800417e:	f002 fb19 	bl	80067b4 <time>
    tt = gmtime(&lt);
 8004182:	a801      	add	r0, sp, #4
 8004184:	f000 f954 	bl	8004430 <gmtime>

    stm->year = tt->tm_year;
 8004188:	6943      	ldr	r3, [r0, #20]
 800418a:	6023      	str	r3, [r4, #0]
    stm->mon = tt->tm_mon;
 800418c:	6903      	ldr	r3, [r0, #16]
 800418e:	6063      	str	r3, [r4, #4]
    stm->day = tt->tm_mday;
 8004190:	68c3      	ldr	r3, [r0, #12]
 8004192:	60a3      	str	r3, [r4, #8]
    stm->hour = tt->tm_hour;
 8004194:	6883      	ldr	r3, [r0, #8]
 8004196:	60e3      	str	r3, [r4, #12]
    stm->min = tt->tm_min;
 8004198:	6843      	ldr	r3, [r0, #4]
 800419a:	6123      	str	r3, [r4, #16]
    stm->sec = tt->tm_sec;
 800419c:	6803      	ldr	r3, [r0, #0]
 800419e:	6163      	str	r3, [r4, #20]
    stm->hsec = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61a3      	str	r3, [r4, #24]
}
 80041a4:	b002      	add	sp, #8
 80041a6:	bd10      	pop	{r4, pc}

080041a8 <nmea_atoi.part.0>:
}

/**
 * \brief Convert string to number
 */
int nmea_atoi(const char *str, int str_sz, int radix)
 80041a8:	b530      	push	{r4, r5, lr}
 80041aa:	b0c3      	sub	sp, #268	; 0x10c
    char buff[NMEA_CONVSTR_BUF];
    int res = 0;

    if(str_sz < NMEA_CONVSTR_BUF)
    {
        memcpy(&buff[0], str, str_sz);
 80041ac:	ab02      	add	r3, sp, #8
}

/**
 * \brief Convert string to number
 */
int nmea_atoi(const char *str, int str_sz, int radix)
 80041ae:	460c      	mov	r4, r1
 80041b0:	4615      	mov	r5, r2
    char buff[NMEA_CONVSTR_BUF];
    int res = 0;

    if(str_sz < NMEA_CONVSTR_BUF)
    {
        memcpy(&buff[0], str, str_sz);
 80041b2:	460a      	mov	r2, r1
 80041b4:	4601      	mov	r1, r0
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fc49 	bl	8004a4e <memcpy>
        buff[str_sz] = '\0';
 80041bc:	2200      	movs	r2, #0
 80041be:	5502      	strb	r2, [r0, r4]
        res = strtol(&buff[0], &tmp_ptr, radix);
 80041c0:	a901      	add	r1, sp, #4
 80041c2:	462a      	mov	r2, r5
 80041c4:	f001 fb2a 	bl	800581c <strtol>
    }

    return res;
}
 80041c8:	b043      	add	sp, #268	; 0x10c
 80041ca:	bd30      	pop	{r4, r5, pc}

080041cc <nmea_atof.part.1>:

/**
 * \brief Convert string to fraction number
 */
double nmea_atof(const char *str, int str_sz)
 80041cc:	b510      	push	{r4, lr}
 80041ce:	b0c2      	sub	sp, #264	; 0x108
    char buff[NMEA_CONVSTR_BUF];
    double res = 0;

    if(str_sz < NMEA_CONVSTR_BUF)
    {
        memcpy(&buff[0], str, str_sz);
 80041d0:	ab02      	add	r3, sp, #8
}

/**
 * \brief Convert string to fraction number
 */
double nmea_atof(const char *str, int str_sz)
 80041d2:	460c      	mov	r4, r1
    char buff[NMEA_CONVSTR_BUF];
    double res = 0;

    if(str_sz < NMEA_CONVSTR_BUF)
    {
        memcpy(&buff[0], str, str_sz);
 80041d4:	460a      	mov	r2, r1
 80041d6:	4601      	mov	r1, r0
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fc38 	bl	8004a4e <memcpy>
        buff[str_sz] = '\0';
 80041de:	2200      	movs	r2, #0
        res = strtod(&buff[0], &tmp_ptr);
 80041e0:	a901      	add	r1, sp, #4
    double res = 0;

    if(str_sz < NMEA_CONVSTR_BUF)
    {
        memcpy(&buff[0], str, str_sz);
        buff[str_sz] = '\0';
 80041e2:	5502      	strb	r2, [r0, r4]
        res = strtod(&buff[0], &tmp_ptr);
 80041e4:	f001 fa8c 	bl	8005700 <strtod>
    }

    return res;
}
 80041e8:	ec51 0b10 	vmov	r0, r1, d0
 80041ec:	b042      	add	sp, #264	; 0x108
 80041ee:	bd10      	pop	{r4, pc}

080041f0 <nmea_atoi>:
{
    char *tmp_ptr;
    char buff[NMEA_CONVSTR_BUF];
    int res = 0;

    if(str_sz < NMEA_CONVSTR_BUF)
 80041f0:	29ff      	cmp	r1, #255	; 0xff
 80041f2:	dc01      	bgt.n	80041f8 <nmea_atoi+0x8>
 80041f4:	f7ff bfd8 	b.w	80041a8 <nmea_atoi.part.0>
        buff[str_sz] = '\0';
        res = strtol(&buff[0], &tmp_ptr, radix);
    }

    return res;
}
 80041f8:	2000      	movs	r0, #0
 80041fa:	4770      	bx	lr

080041fc <nmea_atof>:
{
    char *tmp_ptr;
    char buff[NMEA_CONVSTR_BUF];
    double res = 0;

    if(str_sz < NMEA_CONVSTR_BUF)
 80041fc:	29ff      	cmp	r1, #255	; 0xff

/**
 * \brief Convert string to fraction number
 */
double nmea_atof(const char *str, int str_sz)
{
 80041fe:	b508      	push	{r3, lr}
    char *tmp_ptr;
    char buff[NMEA_CONVSTR_BUF];
    double res = 0;

    if(str_sz < NMEA_CONVSTR_BUF)
 8004200:	dc02      	bgt.n	8004208 <nmea_atof+0xc>
 8004202:	f7ff ffe3 	bl	80041cc <nmea_atof.part.1>
 8004206:	e001      	b.n	800420c <nmea_atof+0x10>
 */
double nmea_atof(const char *str, int str_sz)
{
    char *tmp_ptr;
    char buff[NMEA_CONVSTR_BUF];
    double res = 0;
 8004208:	2000      	movs	r0, #0
 800420a:	2100      	movs	r1, #0
        buff[str_sz] = '\0';
        res = strtod(&buff[0], &tmp_ptr);
    }

    return res;
}
 800420c:	ec41 0b10 	vmov	d0, r0, r1
 8004210:	bd08      	pop	{r3, pc}
	...

08004214 <nmea_scanf>:

/**
 * \brief Analyse string (specificate for NMEA sentences)
 */
int nmea_scanf(const char *buff, int buff_sz, const char *format, ...)
{
 8004214:	b40c      	push	{r2, r3}
 8004216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421a:	b085      	sub	sp, #20
 800421c:	ab0e      	add	r3, sp, #56	; 0x38

    va_list arg_ptr;
    int tok_type = NMEA_TOKS_COMPARE;
    int width = 0;
    const char *beg_fmt = 0;
    int snum = 0, unum = 0;
 800421e:	2600      	movs	r6, #0

/**
 * \brief Analyse string (specificate for NMEA sentences)
 */
int nmea_scanf(const char *buff, int buff_sz, const char *format, ...)
{
 8004220:	f853 7b04 	ldr.w	r7, [r3], #4

    va_list arg_ptr;
    int tok_type = NMEA_TOKS_COMPARE;
    int width = 0;
    const char *beg_fmt = 0;
    int snum = 0, unum = 0;
 8004224:	9602      	str	r6, [sp, #8]

/**
 * \brief Analyse string (specificate for NMEA sentences)
 */
int nmea_scanf(const char *buff, int buff_sz, const char *format, ...)
{
 8004226:	4604      	mov	r4, r0
    const char *beg_tok;
    const char *end_buf = buff + buff_sz;
 8004228:	eb00 0801 	add.w	r8, r0, r1

    va_list arg_ptr;
    int tok_type = NMEA_TOKS_COMPARE;
    int width = 0;
    const char *beg_fmt = 0;
    int snum = 0, unum = 0;
 800422c:	9603      	str	r6, [sp, #12]

    int tok_count = 0;
    void *parg_target;

    va_start(arg_ptr, format);
 800422e:	9301      	str	r3, [sp, #4]
    const char *end_buf = buff + buff_sz;

    va_list arg_ptr;
    int tok_type = NMEA_TOKS_COMPARE;
    int width = 0;
    const char *beg_fmt = 0;
 8004230:	46b2      	mov	sl, r6
    const char *beg_tok;
    const char *end_buf = buff + buff_sz;

    va_list arg_ptr;
    int tok_type = NMEA_TOKS_COMPARE;
    int width = 0;
 8004232:	4635      	mov	r5, r6
{
    const char *beg_tok;
    const char *end_buf = buff + buff_sz;

    va_list arg_ptr;
    int tok_type = NMEA_TOKS_COMPARE;
 8004234:	2201      	movs	r2, #1
    int tok_count = 0;
    void *parg_target;

    va_start(arg_ptr, format);
    
    for(; *format && buff < end_buf; ++format)
 8004236:	7839      	ldrb	r1, [r7, #0]
 8004238:	2900      	cmp	r1, #0
 800423a:	f000 80c0 	beq.w	80043be <nmea_scanf+0x1aa>
 800423e:	4544      	cmp	r4, r8
 8004240:	f080 80bd 	bcs.w	80043be <nmea_scanf+0x1aa>
    {
        switch(tok_type)
 8004244:	1e53      	subs	r3, r2, #1
 8004246:	2b03      	cmp	r3, #3
 8004248:	d829      	bhi.n	800429e <nmea_scanf+0x8a>
 800424a:	e8df f003 	tbb	[pc, r3]
 800424e:	0a02      	.short	0x0a02
 8004250:	1b0c      	.short	0x1b0c
        {
        case NMEA_TOKS_COMPARE:
            if('%' == *format)
 8004252:	2925      	cmp	r1, #37	; 0x25
 8004254:	d025      	beq.n	80042a2 <nmea_scanf+0x8e>
                tok_type = NMEA_TOKS_PERCENT;
            else if(*buff++ != *format)
 8004256:	7820      	ldrb	r0, [r4, #0]
 8004258:	4288      	cmp	r0, r1
 800425a:	f104 0b01 	add.w	fp, r4, #1
 800425e:	d04a      	beq.n	80042f6 <nmea_scanf+0xe2>
 8004260:	e0ad      	b.n	80043be <nmea_scanf+0x1aa>

    va_start(arg_ptr, format);
    
    for(; *format && buff < end_buf; ++format)
    {
        switch(tok_type)
 8004262:	46ba      	mov	sl, r7
                tok_type = NMEA_TOKS_PERCENT;
            else if(*buff++ != *format)
                goto fail;
            break;
        case NMEA_TOKS_PERCENT:
            width = 0;
 8004264:	2500      	movs	r5, #0
            beg_fmt = format;
            tok_type = NMEA_TOKS_WIDTH;
        case NMEA_TOKS_WIDTH:
            if(isdigit(*format))
 8004266:	4b59      	ldr	r3, [pc, #356]	; (80043cc <nmea_scanf+0x1b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4419      	add	r1, r3
 800426c:	784b      	ldrb	r3, [r1, #1]
 800426e:	075b      	lsls	r3, r3, #29
 8004270:	d41a      	bmi.n	80042a8 <nmea_scanf+0x94>
                break;
            {
                tok_type = NMEA_TOKS_TYPE;
                if(format > beg_fmt)
 8004272:	4557      	cmp	r7, sl
 8004274:	d906      	bls.n	8004284 <nmea_scanf+0x70>
                    width = nmea_atoi(beg_fmt, (int)(format - beg_fmt), 10);
 8004276:	220a      	movs	r2, #10
 8004278:	ebca 0107 	rsb	r1, sl, r7
 800427c:	4650      	mov	r0, sl
 800427e:	f7ff ffb7 	bl	80041f0 <nmea_atoi>
 8004282:	4605      	mov	r5, r0
            }
        case NMEA_TOKS_TYPE:
            beg_tok = buff;

            if(!width && ('c' == *format || 'C' == *format) && *buff != format[1])
 8004284:	2d00      	cmp	r5, #0
 8004286:	d139      	bne.n	80042fc <nmea_scanf+0xe8>
 8004288:	783b      	ldrb	r3, [r7, #0]
 800428a:	7879      	ldrb	r1, [r7, #1]
 800428c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004290:	2b43      	cmp	r3, #67	; 0x43
 8004292:	d10c      	bne.n	80042ae <nmea_scanf+0x9a>
 8004294:	7823      	ldrb	r3, [r4, #0]
 8004296:	428b      	cmp	r3, r1
 8004298:	d009      	beq.n	80042ae <nmea_scanf+0x9a>
                width = 1;
 800429a:	2501      	movs	r5, #1
 800429c:	e02e      	b.n	80042fc <nmea_scanf+0xe8>

    va_start(arg_ptr, format);
    
    for(; *format && buff < end_buf; ++format)
    {
        switch(tok_type)
 800429e:	46a3      	mov	fp, r4
 80042a0:	e029      	b.n	80042f6 <nmea_scanf+0xe2>
 80042a2:	46a3      	mov	fp, r4
        {
        case NMEA_TOKS_COMPARE:
            if('%' == *format)
                tok_type = NMEA_TOKS_PERCENT;
 80042a4:	2202      	movs	r2, #2
 80042a6:	e026      	b.n	80042f6 <nmea_scanf+0xe2>
 80042a8:	46a3      	mov	fp, r4
 80042aa:	2203      	movs	r2, #3
 80042ac:	e023      	b.n	80042f6 <nmea_scanf+0xe2>
                else
                    goto fail;
            }
            else
            {
                if(!format[1] || (0 == (buff = (char *)memchr(buff, format[1], end_buf - buff))))
 80042ae:	b131      	cbz	r1, 80042be <nmea_scanf+0xaa>
 80042b0:	ebc4 0208 	rsb	r2, r4, r8
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7fb ff8b 	bl	80001d0 <memchr>
 80042ba:	4683      	mov	fp, r0
 80042bc:	bb00      	cbnz	r0, 8004300 <nmea_scanf+0xec>
 80042be:	46c3      	mov	fp, r8
            tok_type = NMEA_TOKS_COMPARE;
            tok_count++;

            parg_target = 0; width = (int)(buff - beg_tok);

            switch(*format)
 80042c0:	783a      	ldrb	r2, [r7, #0]
 80042c2:	9901      	ldr	r1, [sp, #4]
 80042c4:	2a53      	cmp	r2, #83	; 0x53

            if(buff > end_buf)
                goto fail;

            tok_type = NMEA_TOKS_COMPARE;
            tok_count++;
 80042c6:	f106 0601 	add.w	r6, r6, #1

            parg_target = 0; width = (int)(buff - beg_tok);
 80042ca:	ebc4 050b 	rsb	r5, r4, fp

            switch(*format)
 80042ce:	d022      	beq.n	8004316 <nmea_scanf+0x102>
 80042d0:	d819      	bhi.n	8004306 <nmea_scanf+0xf2>
 80042d2:	2a45      	cmp	r2, #69	; 0x45
 80042d4:	d030      	beq.n	8004338 <nmea_scanf+0x124>
 80042d6:	2a47      	cmp	r2, #71	; 0x47
 80042d8:	d02e      	beq.n	8004338 <nmea_scanf+0x124>
 80042da:	2a43      	cmp	r2, #67	; 0x43
 80042dc:	d13e      	bne.n	800435c <nmea_scanf+0x148>
            {
            case 'c':
            case 'C':
                parg_target = (void *)va_arg(arg_ptr, char *);
 80042de:	1d08      	adds	r0, r1, #4
 80042e0:	9001      	str	r0, [sp, #4]
 80042e2:	f8d1 9000 	ldr.w	r9, [r1]
                if(width && 0 != (parg_target))
 80042e6:	b3b5      	cbz	r5, 8004356 <nmea_scanf+0x142>
 80042e8:	f1b9 0f00 	cmp.w	r9, #0
 80042ec:	d036      	beq.n	800435c <nmea_scanf+0x148>
                    *((char *)parg_target) = *beg_tok;
 80042ee:	7822      	ldrb	r2, [r4, #0]
 80042f0:	f889 2000 	strb.w	r2, [r9]
            }

            if(buff > end_buf)
                goto fail;

            tok_type = NMEA_TOKS_COMPARE;
 80042f4:	2201      	movs	r2, #1
    int tok_count = 0;
    void *parg_target;

    va_start(arg_ptr, format);
    
    for(; *format && buff < end_buf; ++format)
 80042f6:	3701      	adds	r7, #1
 80042f8:	465c      	mov	r4, fp
 80042fa:	e79c      	b.n	8004236 <nmea_scanf+0x22>
            if(!width && ('c' == *format || 'C' == *format) && *buff != format[1])
                width = 1;

            if(width)
            {
                if(buff + width <= end_buf)
 80042fc:	eb04 0b05 	add.w	fp, r4, r5
 8004300:	45d8      	cmp	r8, fp
 8004302:	d2dd      	bcs.n	80042c0 <nmea_scanf+0xac>
 8004304:	e05b      	b.n	80043be <nmea_scanf+0x1aa>
            tok_type = NMEA_TOKS_COMPARE;
            tok_count++;

            parg_target = 0; width = (int)(buff - beg_tok);

            switch(*format)
 8004306:	2a67      	cmp	r2, #103	; 0x67
 8004308:	d803      	bhi.n	8004312 <nmea_scanf+0xfe>
 800430a:	2a65      	cmp	r2, #101	; 0x65
 800430c:	d214      	bcs.n	8004338 <nmea_scanf+0x124>
 800430e:	2a63      	cmp	r2, #99	; 0x63
 8004310:	e7e4      	b.n	80042dc <nmea_scanf+0xc8>
 8004312:	2a73      	cmp	r2, #115	; 0x73
 8004314:	d122      	bne.n	800435c <nmea_scanf+0x148>
                if(width && 0 != (parg_target))
                    *((char *)parg_target) = *beg_tok;
                break;
            case 's':
            case 'S':
                parg_target = (void *)va_arg(arg_ptr, char *);
 8004316:	1d08      	adds	r0, r1, #4
 8004318:	9001      	str	r0, [sp, #4]
 800431a:	f8d1 9000 	ldr.w	r9, [r1]
                if(width && 0 != (parg_target))
 800431e:	b1d5      	cbz	r5, 8004356 <nmea_scanf+0x142>
 8004320:	f1b9 0f00 	cmp.w	r9, #0
 8004324:	d01a      	beq.n	800435c <nmea_scanf+0x148>
                {
                    memcpy(parg_target, beg_tok, width);
 8004326:	462a      	mov	r2, r5
 8004328:	4621      	mov	r1, r4
 800432a:	4648      	mov	r0, r9
 800432c:	f000 fb8f 	bl	8004a4e <memcpy>
                    ((char *)parg_target)[width] = '\0';
 8004330:	2200      	movs	r2, #0
 8004332:	f809 2005 	strb.w	r2, [r9, r5]
 8004336:	e7dd      	b.n	80042f4 <nmea_scanf+0xe0>
            case 'f':
            case 'g':
            case 'G':
            case 'e':
            case 'E':
                parg_target = (void *)va_arg(arg_ptr, double *);
 8004338:	1d08      	adds	r0, r1, #4
 800433a:	9001      	str	r0, [sp, #4]
 800433c:	f8d1 9000 	ldr.w	r9, [r1]
                if(width && 0 != (parg_target))
 8004340:	b14d      	cbz	r5, 8004356 <nmea_scanf+0x142>
 8004342:	f1b9 0f00 	cmp.w	r9, #0
 8004346:	d009      	beq.n	800435c <nmea_scanf+0x148>
                    *((double *)parg_target) = nmea_atof(beg_tok, width);
 8004348:	4629      	mov	r1, r5
 800434a:	4620      	mov	r0, r4
 800434c:	f7ff ff56 	bl	80041fc <nmea_atof>
 8004350:	ed89 0b00 	vstr	d0, [r9]
 8004354:	e7ce      	b.n	80042f4 <nmea_scanf+0xe0>
                break;
            };

            if(parg_target)
 8004356:	f1b9 0f00 	cmp.w	r9, #0
 800435a:	d1cb      	bne.n	80042f4 <nmea_scanf+0xe0>
                break;
            if(0 == (parg_target = (void *)va_arg(arg_ptr, int *)))
 800435c:	9901      	ldr	r1, [sp, #4]
 800435e:	f8d1 9000 	ldr.w	r9, [r1]
 8004362:	1d08      	adds	r0, r1, #4
 8004364:	9001      	str	r0, [sp, #4]
 8004366:	f1b9 0f00 	cmp.w	r9, #0
 800436a:	d0c3      	beq.n	80042f4 <nmea_scanf+0xe0>
                break;
            if(!width)
 800436c:	2d00      	cmp	r5, #0
 800436e:	d0c1      	beq.n	80042f4 <nmea_scanf+0xe0>
                break;

            switch(*format)
 8004370:	2a69      	cmp	r2, #105	; 0x69
 8004372:	d00d      	beq.n	8004390 <nmea_scanf+0x17c>
 8004374:	d804      	bhi.n	8004380 <nmea_scanf+0x16c>
 8004376:	2a58      	cmp	r2, #88	; 0x58
 8004378:	d015      	beq.n	80043a6 <nmea_scanf+0x192>
 800437a:	2a64      	cmp	r2, #100	; 0x64
 800437c:	d008      	beq.n	8004390 <nmea_scanf+0x17c>
 800437e:	e01e      	b.n	80043be <nmea_scanf+0x1aa>
 8004380:	2a75      	cmp	r2, #117	; 0x75
 8004382:	d00e      	beq.n	80043a2 <nmea_scanf+0x18e>
 8004384:	2a78      	cmp	r2, #120	; 0x78
 8004386:	d00e      	beq.n	80043a6 <nmea_scanf+0x192>
 8004388:	2a6f      	cmp	r2, #111	; 0x6f
 800438a:	d118      	bne.n	80043be <nmea_scanf+0x1aa>
            case 'X':
                unum = nmea_atoi(beg_tok, width, 16);
                memcpy(parg_target, &unum, sizeof(unsigned int));
                break;
            case 'o':
                unum = nmea_atoi(beg_tok, width, 8);
 800438c:	2208      	movs	r2, #8
 800438e:	e00b      	b.n	80043a8 <nmea_scanf+0x194>

            switch(*format)
            {
            case 'd':
            case 'i':
                snum = nmea_atoi(beg_tok, width, 10);
 8004390:	220a      	movs	r2, #10
 8004392:	4629      	mov	r1, r5
 8004394:	4620      	mov	r0, r4
 8004396:	f7ff ff2b 	bl	80041f0 <nmea_atoi>
 800439a:	aa04      	add	r2, sp, #16
 800439c:	f842 0d08 	str.w	r0, [r2, #-8]!
 80043a0:	e009      	b.n	80043b6 <nmea_scanf+0x1a2>
                memcpy(parg_target, &snum, sizeof(int));
                break;
            case 'u':
                unum = nmea_atoi(beg_tok, width, 10);
 80043a2:	220a      	movs	r2, #10
 80043a4:	e000      	b.n	80043a8 <nmea_scanf+0x194>
                memcpy(parg_target, &unum, sizeof(unsigned int));
                break;
            case 'x':
            case 'X':
                unum = nmea_atoi(beg_tok, width, 16);
 80043a6:	2210      	movs	r2, #16
                memcpy(parg_target, &unum, sizeof(unsigned int));
                break;
            case 'o':
                unum = nmea_atoi(beg_tok, width, 8);
 80043a8:	4629      	mov	r1, r5
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7ff ff20 	bl	80041f0 <nmea_atoi>
 80043b0:	aa04      	add	r2, sp, #16
 80043b2:	f842 0d04 	str.w	r0, [r2, #-4]!
                memcpy(parg_target, &unum, sizeof(unsigned int));
 80043b6:	6810      	ldr	r0, [r2, #0]
 80043b8:	f8c9 0000 	str.w	r0, [r9]
 80043bc:	e79a      	b.n	80042f4 <nmea_scanf+0xe0>
fail:

    va_end(arg_ptr);

    return tok_count;
}
 80043be:	4630      	mov	r0, r6
 80043c0:	b005      	add	sp, #20
 80043c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c6:	b002      	add	sp, #8
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	2000002c 	.word	0x2000002c

080043d0 <__assert_func>:
 80043d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043d2:	461c      	mov	r4, r3
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <__assert_func+0x2c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4605      	mov	r5, r0
 80043da:	68d8      	ldr	r0, [r3, #12]
 80043dc:	b912      	cbnz	r2, 80043e4 <__assert_func+0x14>
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <__assert_func+0x30>)
 80043e0:	461a      	mov	r2, r3
 80043e2:	e000      	b.n	80043e6 <__assert_func+0x16>
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <__assert_func+0x34>)
 80043e6:	9202      	str	r2, [sp, #8]
 80043e8:	e88d 000a 	stmia.w	sp, {r1, r3}
 80043ec:	4622      	mov	r2, r4
 80043ee:	462b      	mov	r3, r5
 80043f0:	4905      	ldr	r1, [pc, #20]	; (8004408 <__assert_func+0x38>)
 80043f2:	f000 f80b 	bl	800440c <fiprintf>
 80043f6:	f003 ff5f 	bl	80082b8 <abort>
 80043fa:	bf00      	nop
 80043fc:	20000120 	.word	0x20000120
 8004400:	0800cb89 	.word	0x0800cb89
 8004404:	0800cb4e 	.word	0x0800cb4e
 8004408:	0800cb5b 	.word	0x0800cb5b

0800440c <fiprintf>:
 800440c:	b40e      	push	{r1, r2, r3}
 800440e:	b503      	push	{r0, r1, lr}
 8004410:	4601      	mov	r1, r0
 8004412:	ab03      	add	r3, sp, #12
 8004414:	4805      	ldr	r0, [pc, #20]	; (800442c <fiprintf+0x20>)
 8004416:	f853 2b04 	ldr.w	r2, [r3], #4
 800441a:	6800      	ldr	r0, [r0, #0]
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	f002 fa0f 	bl	8006840 <_vfiprintf_r>
 8004422:	b002      	add	sp, #8
 8004424:	f85d eb04 	ldr.w	lr, [sp], #4
 8004428:	b003      	add	sp, #12
 800442a:	4770      	bx	lr
 800442c:	20000120 	.word	0x20000120

08004430 <gmtime>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <gmtime+0x20>)
 8004434:	681c      	ldr	r4, [r3, #0]
 8004436:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004438:	4605      	mov	r5, r0
 800443a:	b91b      	cbnz	r3, 8004444 <gmtime+0x14>
 800443c:	2024      	movs	r0, #36	; 0x24
 800443e:	f000 f8c7 	bl	80045d0 <malloc>
 8004442:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004444:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004446:	4628      	mov	r0, r5
 8004448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800444c:	f000 b802 	b.w	8004454 <gmtime_r>
 8004450:	20000120 	.word	0x20000120

08004454 <gmtime_r>:
 8004454:	6802      	ldr	r2, [r0, #0]
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <gmtime_r+0x120>)
 8004458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445a:	fb92 f4f3 	sdiv	r4, r2, r3
 800445e:	fb03 2214 	mls	r2, r3, r4, r2
 8004462:	2a00      	cmp	r2, #0
 8004464:	bfbc      	itt	lt
 8004466:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800446a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800446e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8004472:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8004476:	fb92 f3f0 	sdiv	r3, r2, r0
 800447a:	fb00 2213 	mls	r2, r0, r3, r2
 800447e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8004482:	bfac      	ite	ge
 8004484:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8004488:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 800448c:	608b      	str	r3, [r1, #8]
 800448e:	fb92 f3f0 	sdiv	r3, r2, r0
 8004492:	fb00 2213 	mls	r2, r0, r3, r2
 8004496:	604b      	str	r3, [r1, #4]
 8004498:	600a      	str	r2, [r1, #0]
 800449a:	2307      	movs	r3, #7
 800449c:	1ce2      	adds	r2, r4, #3
 800449e:	fb92 f3f3 	sdiv	r3, r2, r3
 80044a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	618b      	str	r3, [r1, #24]
 80044aa:	4b33      	ldr	r3, [pc, #204]	; (8004578 <gmtime_r+0x124>)
 80044ac:	4d33      	ldr	r5, [pc, #204]	; (800457c <gmtime_r+0x128>)
 80044ae:	fb94 f5f5 	sdiv	r5, r4, r5
 80044b2:	fb03 4405 	mla	r4, r3, r5, r4
 80044b6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80044ba:	fbb4 f2f2 	udiv	r2, r4, r2
 80044be:	4422      	add	r2, r4
 80044c0:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80044c4:	fbb4 f3f7 	udiv	r3, r4, r7
 80044c8:	1ad2      	subs	r2, r2, r3
 80044ca:	482d      	ldr	r0, [pc, #180]	; (8004580 <gmtime_r+0x12c>)
 80044cc:	fbb4 f0f0 	udiv	r0, r4, r0
 80044d0:	f648 6694 	movw	r6, #36500	; 0x8e94
 80044d4:	1a13      	subs	r3, r2, r0
 80044d6:	fbb3 f6f6 	udiv	r6, r3, r6
 80044da:	4434      	add	r4, r6
 80044dc:	f240 126d 	movw	r2, #365	; 0x16d
 80044e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80044e4:	fbb3 f3f7 	udiv	r3, r3, r7
 80044e8:	1ae3      	subs	r3, r4, r3
 80044ea:	fb02 3310 	mls	r3, r2, r0, r3
 80044ee:	2499      	movs	r4, #153	; 0x99
 80044f0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80044f4:	3202      	adds	r2, #2
 80044f6:	fbb2 f2f4 	udiv	r2, r2, r4
 80044fa:	2a0a      	cmp	r2, #10
 80044fc:	fb04 f402 	mul.w	r4, r4, r2
 8004500:	f104 0602 	add.w	r6, r4, #2
 8004504:	f04f 0405 	mov.w	r4, #5
 8004508:	fbb6 f4f4 	udiv	r4, r6, r4
 800450c:	bf34      	ite	cc
 800450e:	2602      	movcc	r6, #2
 8004510:	f06f 0609 	mvncs.w	r6, #9
 8004514:	4416      	add	r6, r2
 8004516:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800451a:	fb02 0505 	mla	r5, r2, r5, r0
 800451e:	1c5f      	adds	r7, r3, #1
 8004520:	2e01      	cmp	r6, #1
 8004522:	bf98      	it	ls
 8004524:	3501      	addls	r5, #1
 8004526:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800452a:	eba7 0704 	sub.w	r7, r7, r4
 800452e:	d302      	bcc.n	8004536 <gmtime_r+0xe2>
 8004530:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8004534:	e014      	b.n	8004560 <gmtime_r+0x10c>
 8004536:	0782      	lsls	r2, r0, #30
 8004538:	d105      	bne.n	8004546 <gmtime_r+0xf2>
 800453a:	2464      	movs	r4, #100	; 0x64
 800453c:	fbb0 f2f4 	udiv	r2, r0, r4
 8004540:	fb04 0212 	mls	r2, r4, r2, r0
 8004544:	b94a      	cbnz	r2, 800455a <gmtime_r+0x106>
 8004546:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800454a:	fbb0 f4f2 	udiv	r4, r0, r2
 800454e:	fb02 0014 	mls	r0, r2, r4, r0
 8004552:	fab0 f280 	clz	r2, r0
 8004556:	0952      	lsrs	r2, r2, #5
 8004558:	e000      	b.n	800455c <gmtime_r+0x108>
 800455a:	2201      	movs	r2, #1
 800455c:	333b      	adds	r3, #59	; 0x3b
 800455e:	441a      	add	r2, r3
 8004560:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8004564:	2300      	movs	r3, #0
 8004566:	61ca      	str	r2, [r1, #28]
 8004568:	614d      	str	r5, [r1, #20]
 800456a:	610e      	str	r6, [r1, #16]
 800456c:	60cf      	str	r7, [r1, #12]
 800456e:	620b      	str	r3, [r1, #32]
 8004570:	4608      	mov	r0, r1
 8004572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004574:	00015180 	.word	0x00015180
 8004578:	fffdc54f 	.word	0xfffdc54f
 800457c:	00023ab1 	.word	0x00023ab1
 8004580:	00023ab0 	.word	0x00023ab0

08004584 <__libc_init_array>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <__libc_init_array+0x3c>)
 8004588:	4c0e      	ldr	r4, [pc, #56]	; (80045c4 <__libc_init_array+0x40>)
 800458a:	1ae4      	subs	r4, r4, r3
 800458c:	10a4      	asrs	r4, r4, #2
 800458e:	2500      	movs	r5, #0
 8004590:	461e      	mov	r6, r3
 8004592:	42a5      	cmp	r5, r4
 8004594:	d004      	beq.n	80045a0 <__libc_init_array+0x1c>
 8004596:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800459a:	4798      	blx	r3
 800459c:	3501      	adds	r5, #1
 800459e:	e7f8      	b.n	8004592 <__libc_init_array+0xe>
 80045a0:	f008 f856 	bl	800c650 <_init>
 80045a4:	4c08      	ldr	r4, [pc, #32]	; (80045c8 <__libc_init_array+0x44>)
 80045a6:	4b09      	ldr	r3, [pc, #36]	; (80045cc <__libc_init_array+0x48>)
 80045a8:	1ae4      	subs	r4, r4, r3
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	2500      	movs	r5, #0
 80045ae:	461e      	mov	r6, r3
 80045b0:	42a5      	cmp	r5, r4
 80045b2:	d004      	beq.n	80045be <__libc_init_array+0x3a>
 80045b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045b8:	4798      	blx	r3
 80045ba:	3501      	adds	r5, #1
 80045bc:	e7f8      	b.n	80045b0 <__libc_init_array+0x2c>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	0800d110 	.word	0x0800d110
 80045c4:	0800d110 	.word	0x0800d110
 80045c8:	0800d114 	.word	0x0800d114
 80045cc:	0800d110 	.word	0x0800d110

080045d0 <malloc>:
 80045d0:	4b02      	ldr	r3, [pc, #8]	; (80045dc <malloc+0xc>)
 80045d2:	4601      	mov	r1, r0
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	f000 b80b 	b.w	80045f0 <_malloc_r>
 80045da:	bf00      	nop
 80045dc:	20000120 	.word	0x20000120

080045e0 <free>:
 80045e0:	4b02      	ldr	r3, [pc, #8]	; (80045ec <free+0xc>)
 80045e2:	4601      	mov	r1, r0
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	f004 beb1 	b.w	800934c <_free_r>
 80045ea:	bf00      	nop
 80045ec:	20000120 	.word	0x20000120

080045f0 <_malloc_r>:
 80045f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	f101 040b 	add.w	r4, r1, #11
 80045f8:	2c16      	cmp	r4, #22
 80045fa:	b085      	sub	sp, #20
 80045fc:	4681      	mov	r9, r0
 80045fe:	d903      	bls.n	8004608 <_malloc_r+0x18>
 8004600:	f034 0407 	bics.w	r4, r4, #7
 8004604:	d501      	bpl.n	800460a <_malloc_r+0x1a>
 8004606:	e002      	b.n	800460e <_malloc_r+0x1e>
 8004608:	2410      	movs	r4, #16
 800460a:	428c      	cmp	r4, r1
 800460c:	d203      	bcs.n	8004616 <_malloc_r+0x26>
 800460e:	230c      	movs	r3, #12
 8004610:	f8c9 3000 	str.w	r3, [r9]
 8004614:	e1ea      	b.n	80049ec <_malloc_r+0x3fc>
 8004616:	4648      	mov	r0, r9
 8004618:	f000 fa2c 	bl	8004a74 <__malloc_lock>
 800461c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004620:	4d9e      	ldr	r5, [pc, #632]	; (800489c <_malloc_r+0x2ac>)
 8004622:	d217      	bcs.n	8004654 <_malloc_r+0x64>
 8004624:	f104 0208 	add.w	r2, r4, #8
 8004628:	442a      	add	r2, r5
 800462a:	f1a2 0108 	sub.w	r1, r2, #8
 800462e:	6856      	ldr	r6, [r2, #4]
 8004630:	428e      	cmp	r6, r1
 8004632:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004636:	d102      	bne.n	800463e <_malloc_r+0x4e>
 8004638:	68d6      	ldr	r6, [r2, #12]
 800463a:	42b2      	cmp	r2, r6
 800463c:	d008      	beq.n	8004650 <_malloc_r+0x60>
 800463e:	6873      	ldr	r3, [r6, #4]
 8004640:	68f2      	ldr	r2, [r6, #12]
 8004642:	68b1      	ldr	r1, [r6, #8]
 8004644:	f023 0303 	bic.w	r3, r3, #3
 8004648:	60ca      	str	r2, [r1, #12]
 800464a:	4433      	add	r3, r6
 800464c:	6091      	str	r1, [r2, #8]
 800464e:	e02f      	b.n	80046b0 <_malloc_r+0xc0>
 8004650:	3302      	adds	r3, #2
 8004652:	e03d      	b.n	80046d0 <_malloc_r+0xe0>
 8004654:	0a63      	lsrs	r3, r4, #9
 8004656:	d01a      	beq.n	800468e <_malloc_r+0x9e>
 8004658:	2b04      	cmp	r3, #4
 800465a:	d802      	bhi.n	8004662 <_malloc_r+0x72>
 800465c:	09a3      	lsrs	r3, r4, #6
 800465e:	3338      	adds	r3, #56	; 0x38
 8004660:	e018      	b.n	8004694 <_malloc_r+0xa4>
 8004662:	2b14      	cmp	r3, #20
 8004664:	d801      	bhi.n	800466a <_malloc_r+0x7a>
 8004666:	335b      	adds	r3, #91	; 0x5b
 8004668:	e014      	b.n	8004694 <_malloc_r+0xa4>
 800466a:	2b54      	cmp	r3, #84	; 0x54
 800466c:	d802      	bhi.n	8004674 <_malloc_r+0x84>
 800466e:	0b23      	lsrs	r3, r4, #12
 8004670:	336e      	adds	r3, #110	; 0x6e
 8004672:	e00f      	b.n	8004694 <_malloc_r+0xa4>
 8004674:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004678:	d802      	bhi.n	8004680 <_malloc_r+0x90>
 800467a:	0be3      	lsrs	r3, r4, #15
 800467c:	3377      	adds	r3, #119	; 0x77
 800467e:	e009      	b.n	8004694 <_malloc_r+0xa4>
 8004680:	f240 5254 	movw	r2, #1364	; 0x554
 8004684:	4293      	cmp	r3, r2
 8004686:	d804      	bhi.n	8004692 <_malloc_r+0xa2>
 8004688:	0ca3      	lsrs	r3, r4, #18
 800468a:	337c      	adds	r3, #124	; 0x7c
 800468c:	e002      	b.n	8004694 <_malloc_r+0xa4>
 800468e:	233f      	movs	r3, #63	; 0x3f
 8004690:	e000      	b.n	8004694 <_malloc_r+0xa4>
 8004692:	237e      	movs	r3, #126	; 0x7e
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800469a:	f1a2 0008 	sub.w	r0, r2, #8
 800469e:	6856      	ldr	r6, [r2, #4]
 80046a0:	e00c      	b.n	80046bc <_malloc_r+0xcc>
 80046a2:	2900      	cmp	r1, #0
 80046a4:	68f1      	ldr	r1, [r6, #12]
 80046a6:	db08      	blt.n	80046ba <_malloc_r+0xca>
 80046a8:	68b3      	ldr	r3, [r6, #8]
 80046aa:	60d9      	str	r1, [r3, #12]
 80046ac:	608b      	str	r3, [r1, #8]
 80046ae:	18b3      	adds	r3, r6, r2
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	e1a3      	b.n	8004a02 <_malloc_r+0x412>
 80046ba:	460e      	mov	r6, r1
 80046bc:	4286      	cmp	r6, r0
 80046be:	d006      	beq.n	80046ce <_malloc_r+0xde>
 80046c0:	6872      	ldr	r2, [r6, #4]
 80046c2:	f022 0203 	bic.w	r2, r2, #3
 80046c6:	1b11      	subs	r1, r2, r4
 80046c8:	290f      	cmp	r1, #15
 80046ca:	ddea      	ble.n	80046a2 <_malloc_r+0xb2>
 80046cc:	3b01      	subs	r3, #1
 80046ce:	3301      	adds	r3, #1
 80046d0:	4a72      	ldr	r2, [pc, #456]	; (800489c <_malloc_r+0x2ac>)
 80046d2:	692e      	ldr	r6, [r5, #16]
 80046d4:	f102 0708 	add.w	r7, r2, #8
 80046d8:	42be      	cmp	r6, r7
 80046da:	4639      	mov	r1, r7
 80046dc:	d079      	beq.n	80047d2 <_malloc_r+0x1e2>
 80046de:	6870      	ldr	r0, [r6, #4]
 80046e0:	f020 0003 	bic.w	r0, r0, #3
 80046e4:	ebc4 0e00 	rsb	lr, r4, r0
 80046e8:	f1be 0f0f 	cmp.w	lr, #15
 80046ec:	dd0d      	ble.n	800470a <_malloc_r+0x11a>
 80046ee:	1933      	adds	r3, r6, r4
 80046f0:	f044 0401 	orr.w	r4, r4, #1
 80046f4:	6074      	str	r4, [r6, #4]
 80046f6:	6153      	str	r3, [r2, #20]
 80046f8:	6113      	str	r3, [r2, #16]
 80046fa:	f04e 0201 	orr.w	r2, lr, #1
 80046fe:	60df      	str	r7, [r3, #12]
 8004700:	609f      	str	r7, [r3, #8]
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	f843 e00e 	str.w	lr, [r3, lr]
 8004708:	e17b      	b.n	8004a02 <_malloc_r+0x412>
 800470a:	f1be 0f00 	cmp.w	lr, #0
 800470e:	6157      	str	r7, [r2, #20]
 8004710:	6117      	str	r7, [r2, #16]
 8004712:	db05      	blt.n	8004720 <_malloc_r+0x130>
 8004714:	4430      	add	r0, r6
 8004716:	6843      	ldr	r3, [r0, #4]
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	6043      	str	r3, [r0, #4]
 800471e:	e170      	b.n	8004a02 <_malloc_r+0x412>
 8004720:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004724:	d215      	bcs.n	8004752 <_malloc_r+0x162>
 8004726:	08c0      	lsrs	r0, r0, #3
 8004728:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 800472c:	2701      	movs	r7, #1
 800472e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8004732:	6857      	ldr	r7, [r2, #4]
 8004734:	3001      	adds	r0, #1
 8004736:	ea4e 0707 	orr.w	r7, lr, r7
 800473a:	6057      	str	r7, [r2, #4]
 800473c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8004740:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8004744:	f8c6 e008 	str.w	lr, [r6, #8]
 8004748:	3f08      	subs	r7, #8
 800474a:	60f7      	str	r7, [r6, #12]
 800474c:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8004750:	e03d      	b.n	80047ce <_malloc_r+0x1de>
 8004752:	0a42      	lsrs	r2, r0, #9
 8004754:	2a04      	cmp	r2, #4
 8004756:	d802      	bhi.n	800475e <_malloc_r+0x16e>
 8004758:	0982      	lsrs	r2, r0, #6
 800475a:	3238      	adds	r2, #56	; 0x38
 800475c:	e015      	b.n	800478a <_malloc_r+0x19a>
 800475e:	2a14      	cmp	r2, #20
 8004760:	d801      	bhi.n	8004766 <_malloc_r+0x176>
 8004762:	325b      	adds	r2, #91	; 0x5b
 8004764:	e011      	b.n	800478a <_malloc_r+0x19a>
 8004766:	2a54      	cmp	r2, #84	; 0x54
 8004768:	d802      	bhi.n	8004770 <_malloc_r+0x180>
 800476a:	0b02      	lsrs	r2, r0, #12
 800476c:	326e      	adds	r2, #110	; 0x6e
 800476e:	e00c      	b.n	800478a <_malloc_r+0x19a>
 8004770:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004774:	d802      	bhi.n	800477c <_malloc_r+0x18c>
 8004776:	0bc2      	lsrs	r2, r0, #15
 8004778:	3277      	adds	r2, #119	; 0x77
 800477a:	e006      	b.n	800478a <_malloc_r+0x19a>
 800477c:	f240 5754 	movw	r7, #1364	; 0x554
 8004780:	42ba      	cmp	r2, r7
 8004782:	bf9a      	itte	ls
 8004784:	0c82      	lsrls	r2, r0, #18
 8004786:	327c      	addls	r2, #124	; 0x7c
 8004788:	227e      	movhi	r2, #126	; 0x7e
 800478a:	1c57      	adds	r7, r2, #1
 800478c:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004790:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004794:	f8df c104 	ldr.w	ip, [pc, #260]	; 800489c <_malloc_r+0x2ac>
 8004798:	45be      	cmp	lr, r7
 800479a:	d10d      	bne.n	80047b8 <_malloc_r+0x1c8>
 800479c:	2001      	movs	r0, #1
 800479e:	1092      	asrs	r2, r2, #2
 80047a0:	fa00 f202 	lsl.w	r2, r0, r2
 80047a4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80047a8:	4310      	orrs	r0, r2
 80047aa:	f8cc 0004 	str.w	r0, [ip, #4]
 80047ae:	4672      	mov	r2, lr
 80047b0:	e009      	b.n	80047c6 <_malloc_r+0x1d6>
 80047b2:	68bf      	ldr	r7, [r7, #8]
 80047b4:	45be      	cmp	lr, r7
 80047b6:	d004      	beq.n	80047c2 <_malloc_r+0x1d2>
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	f022 0203 	bic.w	r2, r2, #3
 80047be:	4290      	cmp	r0, r2
 80047c0:	d3f7      	bcc.n	80047b2 <_malloc_r+0x1c2>
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	46be      	mov	lr, r7
 80047c6:	60f2      	str	r2, [r6, #12]
 80047c8:	f8c6 e008 	str.w	lr, [r6, #8]
 80047cc:	6096      	str	r6, [r2, #8]
 80047ce:	f8ce 600c 	str.w	r6, [lr, #12]
 80047d2:	2001      	movs	r0, #1
 80047d4:	109a      	asrs	r2, r3, #2
 80047d6:	fa00 f202 	lsl.w	r2, r0, r2
 80047da:	6868      	ldr	r0, [r5, #4]
 80047dc:	4282      	cmp	r2, r0
 80047de:	d85f      	bhi.n	80048a0 <_malloc_r+0x2b0>
 80047e0:	4202      	tst	r2, r0
 80047e2:	d106      	bne.n	80047f2 <_malloc_r+0x202>
 80047e4:	f023 0303 	bic.w	r3, r3, #3
 80047e8:	0052      	lsls	r2, r2, #1
 80047ea:	4202      	tst	r2, r0
 80047ec:	f103 0304 	add.w	r3, r3, #4
 80047f0:	d0fa      	beq.n	80047e8 <_malloc_r+0x1f8>
 80047f2:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80047f6:	46c2      	mov	sl, r8
 80047f8:	469c      	mov	ip, r3
 80047fa:	f8da 600c 	ldr.w	r6, [sl, #12]
 80047fe:	4556      	cmp	r6, sl
 8004800:	d02c      	beq.n	800485c <_malloc_r+0x26c>
 8004802:	6870      	ldr	r0, [r6, #4]
 8004804:	68f7      	ldr	r7, [r6, #12]
 8004806:	f020 0003 	bic.w	r0, r0, #3
 800480a:	ebc4 0e00 	rsb	lr, r4, r0
 800480e:	f1be 0f0f 	cmp.w	lr, #15
 8004812:	dd11      	ble.n	8004838 <_malloc_r+0x248>
 8004814:	1933      	adds	r3, r6, r4
 8004816:	f044 0401 	orr.w	r4, r4, #1
 800481a:	6074      	str	r4, [r6, #4]
 800481c:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8004820:	60d7      	str	r7, [r2, #12]
 8004822:	60ba      	str	r2, [r7, #8]
 8004824:	f04e 0201 	orr.w	r2, lr, #1
 8004828:	616b      	str	r3, [r5, #20]
 800482a:	612b      	str	r3, [r5, #16]
 800482c:	60d9      	str	r1, [r3, #12]
 800482e:	6099      	str	r1, [r3, #8]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	f843 e00e 	str.w	lr, [r3, lr]
 8004836:	e00b      	b.n	8004850 <_malloc_r+0x260>
 8004838:	f1be 0f00 	cmp.w	lr, #0
 800483c:	db0c      	blt.n	8004858 <_malloc_r+0x268>
 800483e:	1833      	adds	r3, r6, r0
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	605a      	str	r2, [r3, #4]
 8004848:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800484c:	60df      	str	r7, [r3, #12]
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	4648      	mov	r0, r9
 8004852:	f000 f910 	bl	8004a76 <__malloc_unlock>
 8004856:	e0d8      	b.n	8004a0a <_malloc_r+0x41a>
 8004858:	463e      	mov	r6, r7
 800485a:	e7d0      	b.n	80047fe <_malloc_r+0x20e>
 800485c:	f10c 0c01 	add.w	ip, ip, #1
 8004860:	f01c 0f03 	tst.w	ip, #3
 8004864:	f10a 0a08 	add.w	sl, sl, #8
 8004868:	d1c7      	bne.n	80047fa <_malloc_r+0x20a>
 800486a:	0798      	lsls	r0, r3, #30
 800486c:	d104      	bne.n	8004878 <_malloc_r+0x288>
 800486e:	686b      	ldr	r3, [r5, #4]
 8004870:	ea23 0302 	bic.w	r3, r3, r2
 8004874:	606b      	str	r3, [r5, #4]
 8004876:	e005      	b.n	8004884 <_malloc_r+0x294>
 8004878:	f858 0908 	ldr.w	r0, [r8], #-8
 800487c:	4580      	cmp	r8, r0
 800487e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004882:	d0f2      	beq.n	800486a <_malloc_r+0x27a>
 8004884:	6868      	ldr	r0, [r5, #4]
 8004886:	0052      	lsls	r2, r2, #1
 8004888:	4282      	cmp	r2, r0
 800488a:	d809      	bhi.n	80048a0 <_malloc_r+0x2b0>
 800488c:	b142      	cbz	r2, 80048a0 <_malloc_r+0x2b0>
 800488e:	4663      	mov	r3, ip
 8004890:	4202      	tst	r2, r0
 8004892:	d1ae      	bne.n	80047f2 <_malloc_r+0x202>
 8004894:	3304      	adds	r3, #4
 8004896:	0052      	lsls	r2, r2, #1
 8004898:	e7fa      	b.n	8004890 <_malloc_r+0x2a0>
 800489a:	bf00      	nop
 800489c:	20000124 	.word	0x20000124
 80048a0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80048a4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80048a8:	f026 0603 	bic.w	r6, r6, #3
 80048ac:	42b4      	cmp	r4, r6
 80048ae:	d803      	bhi.n	80048b8 <_malloc_r+0x2c8>
 80048b0:	1b33      	subs	r3, r6, r4
 80048b2:	2b0f      	cmp	r3, #15
 80048b4:	f300 809c 	bgt.w	80049f0 <_malloc_r+0x400>
 80048b8:	4a56      	ldr	r2, [pc, #344]	; (8004a14 <_malloc_r+0x424>)
 80048ba:	4957      	ldr	r1, [pc, #348]	; (8004a18 <_malloc_r+0x428>)
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	6808      	ldr	r0, [r1, #0]
 80048c0:	9101      	str	r1, [sp, #4]
 80048c2:	f102 0810 	add.w	r8, r2, #16
 80048c6:	4a55      	ldr	r2, [pc, #340]	; (8004a1c <_malloc_r+0x42c>)
 80048c8:	9203      	str	r2, [sp, #12]
 80048ca:	3001      	adds	r0, #1
 80048cc:	bf18      	it	ne
 80048ce:	f102 31ff 	addne.w	r1, r2, #4294967295
 80048d2:	44a0      	add	r8, r4
 80048d4:	bf1e      	ittt	ne
 80048d6:	4488      	addne	r8, r1
 80048d8:	4251      	negne	r1, r2
 80048da:	ea01 0808 	andne.w	r8, r1, r8
 80048de:	eb0b 0306 	add.w	r3, fp, r6
 80048e2:	4641      	mov	r1, r8
 80048e4:	4648      	mov	r0, r9
 80048e6:	9302      	str	r3, [sp, #8]
 80048e8:	f000 f8de 	bl	8004aa8 <_sbrk_r>
 80048ec:	1c42      	adds	r2, r0, #1
 80048ee:	4607      	mov	r7, r0
 80048f0:	d06f      	beq.n	80049d2 <_malloc_r+0x3e2>
 80048f2:	9b02      	ldr	r3, [sp, #8]
 80048f4:	9a03      	ldr	r2, [sp, #12]
 80048f6:	4283      	cmp	r3, r0
 80048f8:	d901      	bls.n	80048fe <_malloc_r+0x30e>
 80048fa:	45ab      	cmp	fp, r5
 80048fc:	d169      	bne.n	80049d2 <_malloc_r+0x3e2>
 80048fe:	f8df a128 	ldr.w	sl, [pc, #296]	; 8004a28 <_malloc_r+0x438>
 8004902:	f8df c128 	ldr.w	ip, [pc, #296]	; 8004a2c <_malloc_r+0x43c>
 8004906:	f8da 0000 	ldr.w	r0, [sl]
 800490a:	42bb      	cmp	r3, r7
 800490c:	4440      	add	r0, r8
 800490e:	f8ca 0000 	str.w	r0, [sl]
 8004912:	d108      	bne.n	8004926 <_malloc_r+0x336>
 8004914:	ea13 0f0c 	tst.w	r3, ip
 8004918:	d105      	bne.n	8004926 <_malloc_r+0x336>
 800491a:	68ab      	ldr	r3, [r5, #8]
 800491c:	4446      	add	r6, r8
 800491e:	f046 0601 	orr.w	r6, r6, #1
 8004922:	605e      	str	r6, [r3, #4]
 8004924:	e049      	b.n	80049ba <_malloc_r+0x3ca>
 8004926:	9901      	ldr	r1, [sp, #4]
 8004928:	f8d1 e000 	ldr.w	lr, [r1]
 800492c:	f1be 3fff 	cmp.w	lr, #4294967295
 8004930:	bf15      	itete	ne
 8004932:	1afb      	subne	r3, r7, r3
 8004934:	4b38      	ldreq	r3, [pc, #224]	; (8004a18 <_malloc_r+0x428>)
 8004936:	181b      	addne	r3, r3, r0
 8004938:	601f      	streq	r7, [r3, #0]
 800493a:	bf18      	it	ne
 800493c:	f8ca 3000 	strne.w	r3, [sl]
 8004940:	f017 0307 	ands.w	r3, r7, #7
 8004944:	bf1c      	itt	ne
 8004946:	f1c3 0308 	rsbne	r3, r3, #8
 800494a:	18ff      	addne	r7, r7, r3
 800494c:	44b8      	add	r8, r7
 800494e:	441a      	add	r2, r3
 8004950:	ea08 080c 	and.w	r8, r8, ip
 8004954:	ebc8 0802 	rsb	r8, r8, r2
 8004958:	4641      	mov	r1, r8
 800495a:	4648      	mov	r0, r9
 800495c:	f000 f8a4 	bl	8004aa8 <_sbrk_r>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	bf04      	itt	eq
 8004964:	4638      	moveq	r0, r7
 8004966:	f04f 0800 	moveq.w	r8, #0
 800496a:	f8da 3000 	ldr.w	r3, [sl]
 800496e:	60af      	str	r7, [r5, #8]
 8004970:	1bc2      	subs	r2, r0, r7
 8004972:	4442      	add	r2, r8
 8004974:	4443      	add	r3, r8
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	45ab      	cmp	fp, r5
 800497c:	f8ca 3000 	str.w	r3, [sl]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	d01a      	beq.n	80049ba <_malloc_r+0x3ca>
 8004984:	2e0f      	cmp	r6, #15
 8004986:	d802      	bhi.n	800498e <_malloc_r+0x39e>
 8004988:	2301      	movs	r3, #1
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	e021      	b.n	80049d2 <_malloc_r+0x3e2>
 800498e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004992:	3e0c      	subs	r6, #12
 8004994:	f026 0607 	bic.w	r6, r6, #7
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	4333      	orrs	r3, r6
 800499e:	f8cb 3004 	str.w	r3, [fp, #4]
 80049a2:	eb0b 0306 	add.w	r3, fp, r6
 80049a6:	2205      	movs	r2, #5
 80049a8:	2e0f      	cmp	r6, #15
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	d904      	bls.n	80049ba <_malloc_r+0x3ca>
 80049b0:	f10b 0108 	add.w	r1, fp, #8
 80049b4:	4648      	mov	r0, r9
 80049b6:	f004 fcc9 	bl	800934c <_free_r>
 80049ba:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <_malloc_r+0x430>)
 80049bc:	f8da 3000 	ldr.w	r3, [sl]
 80049c0:	6811      	ldr	r1, [r2, #0]
 80049c2:	428b      	cmp	r3, r1
 80049c4:	bf88      	it	hi
 80049c6:	6013      	strhi	r3, [r2, #0]
 80049c8:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <_malloc_r+0x434>)
 80049ca:	6811      	ldr	r1, [r2, #0]
 80049cc:	428b      	cmp	r3, r1
 80049ce:	bf88      	it	hi
 80049d0:	6013      	strhi	r3, [r2, #0]
 80049d2:	68ab      	ldr	r3, [r5, #8]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	f022 0203 	bic.w	r2, r2, #3
 80049da:	4294      	cmp	r4, r2
 80049dc:	eba2 0304 	sub.w	r3, r2, r4
 80049e0:	d801      	bhi.n	80049e6 <_malloc_r+0x3f6>
 80049e2:	2b0f      	cmp	r3, #15
 80049e4:	dc04      	bgt.n	80049f0 <_malloc_r+0x400>
 80049e6:	4648      	mov	r0, r9
 80049e8:	f000 f845 	bl	8004a76 <__malloc_unlock>
 80049ec:	2600      	movs	r6, #0
 80049ee:	e00c      	b.n	8004a0a <_malloc_r+0x41a>
 80049f0:	68ae      	ldr	r6, [r5, #8]
 80049f2:	f044 0201 	orr.w	r2, r4, #1
 80049f6:	4434      	add	r4, r6
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	6072      	str	r2, [r6, #4]
 80049fe:	60ac      	str	r4, [r5, #8]
 8004a00:	6063      	str	r3, [r4, #4]
 8004a02:	4648      	mov	r0, r9
 8004a04:	f000 f837 	bl	8004a76 <__malloc_unlock>
 8004a08:	3608      	adds	r6, #8
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	b005      	add	sp, #20
 8004a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	200005cc 	.word	0x200005cc
 8004a18:	20000530 	.word	0x20000530
 8004a1c:	00000080 	.word	0x00000080
 8004a20:	200005c8 	.word	0x200005c8
 8004a24:	200005c4 	.word	0x200005c4
 8004a28:	200005d0 	.word	0x200005d0
 8004a2c:	0000007f 	.word	0x0000007f

08004a30 <memcmp>:
 8004a30:	b510      	push	{r4, lr}
 8004a32:	3901      	subs	r1, #1
 8004a34:	4402      	add	r2, r0
 8004a36:	4290      	cmp	r0, r2
 8004a38:	d007      	beq.n	8004a4a <memcmp+0x1a>
 8004a3a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004a3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004a42:	42a3      	cmp	r3, r4
 8004a44:	d0f7      	beq.n	8004a36 <memcmp+0x6>
 8004a46:	1b18      	subs	r0, r3, r4
 8004a48:	bd10      	pop	{r4, pc}
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	bd10      	pop	{r4, pc}

08004a4e <memcpy>:
 8004a4e:	b510      	push	{r4, lr}
 8004a50:	1e43      	subs	r3, r0, #1
 8004a52:	440a      	add	r2, r1
 8004a54:	4291      	cmp	r1, r2
 8004a56:	d004      	beq.n	8004a62 <memcpy+0x14>
 8004a58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a60:	e7f8      	b.n	8004a54 <memcpy+0x6>
 8004a62:	bd10      	pop	{r4, pc}

08004a64 <memset>:
 8004a64:	4402      	add	r2, r0
 8004a66:	4603      	mov	r3, r0
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d002      	beq.n	8004a72 <memset+0xe>
 8004a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a70:	e7fa      	b.n	8004a68 <memset+0x4>
 8004a72:	4770      	bx	lr

08004a74 <__malloc_lock>:
 8004a74:	4770      	bx	lr

08004a76 <__malloc_unlock>:
 8004a76:	4770      	bx	lr

08004a78 <printf>:
 8004a78:	b40f      	push	{r0, r1, r2, r3}
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <printf+0x2c>)
 8004a7c:	b513      	push	{r0, r1, r4, lr}
 8004a7e:	681c      	ldr	r4, [r3, #0]
 8004a80:	b124      	cbz	r4, 8004a8c <printf+0x14>
 8004a82:	69a3      	ldr	r3, [r4, #24]
 8004a84:	b913      	cbnz	r3, 8004a8c <printf+0x14>
 8004a86:	4620      	mov	r0, r4
 8004a88:	f004 fb48 	bl	800911c <__sinit>
 8004a8c:	ab05      	add	r3, sp, #20
 8004a8e:	9a04      	ldr	r2, [sp, #16]
 8004a90:	68a1      	ldr	r1, [r4, #8]
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	4620      	mov	r0, r4
 8004a96:	f002 fb37 	bl	8007108 <_vfprintf_r>
 8004a9a:	b002      	add	sp, #8
 8004a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aa0:	b004      	add	sp, #16
 8004aa2:	4770      	bx	lr
 8004aa4:	20000120 	.word	0x20000120

08004aa8 <_sbrk_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4c06      	ldr	r4, [pc, #24]	; (8004ac4 <_sbrk_r+0x1c>)
 8004aac:	2300      	movs	r3, #0
 8004aae:	4605      	mov	r5, r0
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	f007 fdbc 	bl	800c630 <_sbrk>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d102      	bne.n	8004ac2 <_sbrk_r+0x1a>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	b103      	cbz	r3, 8004ac2 <_sbrk_r+0x1a>
 8004ac0:	602b      	str	r3, [r5, #0]
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	2000076c 	.word	0x2000076c

08004ac8 <sulp>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	4604      	mov	r4, r0
 8004acc:	460d      	mov	r5, r1
 8004ace:	ec45 4b10 	vmov	d0, r4, r5
 8004ad2:	4616      	mov	r6, r2
 8004ad4:	f005 fce8 	bl	800a4a8 <__ulp>
 8004ad8:	ec51 0b10 	vmov	r0, r1, d0
 8004adc:	b17e      	cbz	r6, 8004afe <sulp+0x36>
 8004ade:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004ae2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	dd09      	ble.n	8004afe <sulp+0x36>
 8004aea:	051b      	lsls	r3, r3, #20
 8004aec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004af0:	2400      	movs	r4, #0
 8004af2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004af6:	4622      	mov	r2, r4
 8004af8:	462b      	mov	r3, r5
 8004afa:	f7fb fd79 	bl	80005f0 <__aeabi_dmul>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}

08004b00 <_strtod_r>:
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	b09d      	sub	sp, #116	; 0x74
 8004b06:	2300      	movs	r3, #0
 8004b08:	9002      	str	r0, [sp, #8]
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8004b0e:	9318      	str	r3, [sp, #96]	; 0x60
 8004b10:	f04f 0a00 	mov.w	sl, #0
 8004b14:	f04f 0b00 	mov.w	fp, #0
 8004b18:	9117      	str	r1, [sp, #92]	; 0x5c
 8004b1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	2a0d      	cmp	r2, #13
 8004b20:	d805      	bhi.n	8004b2e <_strtod_r+0x2e>
 8004b22:	2a09      	cmp	r2, #9
 8004b24:	d213      	bcs.n	8004b4e <_strtod_r+0x4e>
 8004b26:	2a00      	cmp	r2, #0
 8004b28:	f000 81ac 	beq.w	8004e84 <_strtod_r+0x384>
 8004b2c:	e012      	b.n	8004b54 <_strtod_r+0x54>
 8004b2e:	2a2b      	cmp	r2, #43	; 0x2b
 8004b30:	d004      	beq.n	8004b3c <_strtod_r+0x3c>
 8004b32:	2a2d      	cmp	r2, #45	; 0x2d
 8004b34:	d004      	beq.n	8004b40 <_strtod_r+0x40>
 8004b36:	2a20      	cmp	r2, #32
 8004b38:	d10c      	bne.n	8004b54 <_strtod_r+0x54>
 8004b3a:	e008      	b.n	8004b4e <_strtod_r+0x4e>
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	e000      	b.n	8004b42 <_strtod_r+0x42>
 8004b40:	2201      	movs	r2, #1
 8004b42:	920c      	str	r2, [sp, #48]	; 0x30
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	b92b      	cbnz	r3, 8004b58 <_strtod_r+0x58>
 8004b4c:	e19a      	b.n	8004e84 <_strtod_r+0x384>
 8004b4e:	3301      	adds	r3, #1
 8004b50:	9317      	str	r3, [sp, #92]	; 0x5c
 8004b52:	e7e2      	b.n	8004b1a <_strtod_r+0x1a>
 8004b54:	2300      	movs	r3, #0
 8004b56:	930c      	str	r3, [sp, #48]	; 0x30
 8004b58:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004b5a:	782b      	ldrb	r3, [r5, #0]
 8004b5c:	2b30      	cmp	r3, #48	; 0x30
 8004b5e:	d15c      	bne.n	8004c1a <_strtod_r+0x11a>
 8004b60:	786b      	ldrb	r3, [r5, #1]
 8004b62:	2b58      	cmp	r3, #88	; 0x58
 8004b64:	d001      	beq.n	8004b6a <_strtod_r+0x6a>
 8004b66:	2b78      	cmp	r3, #120	; 0x78
 8004b68:	d14c      	bne.n	8004c04 <_strtod_r+0x104>
 8004b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b6c:	9301      	str	r3, [sp, #4]
 8004b6e:	ab18      	add	r3, sp, #96	; 0x60
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	4aa9      	ldr	r2, [pc, #676]	; (8004e18 <_strtod_r+0x318>)
 8004b74:	9802      	ldr	r0, [sp, #8]
 8004b76:	ab19      	add	r3, sp, #100	; 0x64
 8004b78:	a917      	add	r1, sp, #92	; 0x5c
 8004b7a:	f004 fe58 	bl	800982e <__gethex>
 8004b7e:	f010 0607 	ands.w	r6, r0, #7
 8004b82:	4604      	mov	r4, r0
 8004b84:	f000 8587 	beq.w	8005696 <_strtod_r+0xb96>
 8004b88:	2e06      	cmp	r6, #6
 8004b8a:	d105      	bne.n	8004b98 <_strtod_r+0x98>
 8004b8c:	3501      	adds	r5, #1
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9517      	str	r5, [sp, #92]	; 0x5c
 8004b92:	930c      	str	r3, [sp, #48]	; 0x30
 8004b94:	f000 bd7f 	b.w	8005696 <_strtod_r+0xb96>
 8004b98:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004b9a:	b13a      	cbz	r2, 8004bac <_strtod_r+0xac>
 8004b9c:	2135      	movs	r1, #53	; 0x35
 8004b9e:	a81a      	add	r0, sp, #104	; 0x68
 8004ba0:	f005 fd6f 	bl	800a682 <__copybits>
 8004ba4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004ba6:	9802      	ldr	r0, [sp, #8]
 8004ba8:	f005 f9ec 	bl	8009f84 <_Bfree>
 8004bac:	2e06      	cmp	r6, #6
 8004bae:	d822      	bhi.n	8004bf6 <_strtod_r+0xf6>
 8004bb0:	e8df f006 	tbb	[pc, r6]
 8004bb4:	18080d04 	.word	0x18080d04
 8004bb8:	0d1d      	.short	0x0d1d
 8004bba:	04          	.byte	0x04
 8004bbb:	00          	.byte	0x00
 8004bbc:	f04f 0b00 	mov.w	fp, #0
 8004bc0:	46da      	mov	sl, fp
 8004bc2:	e018      	b.n	8004bf6 <_strtod_r+0xf6>
 8004bc4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004bc8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8004bcc:	e013      	b.n	8004bf6 <_strtod_r+0xf6>
 8004bce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004bd2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004bd6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004bda:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004bde:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004be2:	e008      	b.n	8004bf6 <_strtod_r+0xf6>
 8004be4:	f8df b234 	ldr.w	fp, [pc, #564]	; 8004e1c <_strtod_r+0x31c>
 8004be8:	f04f 0a00 	mov.w	sl, #0
 8004bec:	e003      	b.n	8004bf6 <_strtod_r+0xf6>
 8004bee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004bf2:	f04f 3aff 	mov.w	sl, #4294967295
 8004bf6:	0721      	lsls	r1, r4, #28
 8004bf8:	f140 854d 	bpl.w	8005696 <_strtod_r+0xb96>
 8004bfc:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004c00:	f000 bd49 	b.w	8005696 <_strtod_r+0xb96>
 8004c04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	9217      	str	r2, [sp, #92]	; 0x5c
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	2b30      	cmp	r3, #48	; 0x30
 8004c0e:	d0f9      	beq.n	8004c04 <_strtod_r+0x104>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8540 	beq.w	8005696 <_strtod_r+0xb96>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <_strtod_r+0x11c>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f04f 0800 	mov.w	r8, #0
 8004c20:	9306      	str	r3, [sp, #24]
 8004c22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c24:	9307      	str	r3, [sp, #28]
 8004c26:	f8cd 8014 	str.w	r8, [sp, #20]
 8004c2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8004c2e:	220a      	movs	r2, #10
 8004c30:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8004c32:	782e      	ldrb	r6, [r5, #0]
 8004c34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004c38:	b2d9      	uxtb	r1, r3
 8004c3a:	2909      	cmp	r1, #9
 8004c3c:	d80e      	bhi.n	8004c5c <_strtod_r+0x15c>
 8004c3e:	9904      	ldr	r1, [sp, #16]
 8004c40:	2908      	cmp	r1, #8
 8004c42:	bfdd      	ittte	le
 8004c44:	9905      	ldrle	r1, [sp, #20]
 8004c46:	fb02 3301 	mlale	r3, r2, r1, r3
 8004c4a:	9305      	strle	r3, [sp, #20]
 8004c4c:	fb02 3808 	mlagt	r8, r2, r8, r3
 8004c50:	9b04      	ldr	r3, [sp, #16]
 8004c52:	3501      	adds	r5, #1
 8004c54:	3301      	adds	r3, #1
 8004c56:	9304      	str	r3, [sp, #16]
 8004c58:	9517      	str	r5, [sp, #92]	; 0x5c
 8004c5a:	e7e9      	b.n	8004c30 <_strtod_r+0x130>
 8004c5c:	9802      	ldr	r0, [sp, #8]
 8004c5e:	f005 f8d5 	bl	8009e0c <_localeconv_r>
 8004c62:	6807      	ldr	r7, [r0, #0]
 8004c64:	9802      	ldr	r0, [sp, #8]
 8004c66:	f005 f8d1 	bl	8009e0c <_localeconv_r>
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	f7fb fb00 	bl	8000270 <strlen>
 8004c70:	4639      	mov	r1, r7
 8004c72:	4602      	mov	r2, r0
 8004c74:	4628      	mov	r0, r5
 8004c76:	f005 ff72 	bl	800ab5e <strncmp>
 8004c7a:	4607      	mov	r7, r0
 8004c7c:	b128      	cbz	r0, 8004c8a <_strtod_r+0x18a>
 8004c7e:	2000      	movs	r0, #0
 8004c80:	4633      	mov	r3, r6
 8004c82:	9d04      	ldr	r5, [sp, #16]
 8004c84:	4602      	mov	r2, r0
 8004c86:	4601      	mov	r1, r0
 8004c88:	e057      	b.n	8004d3a <_strtod_r+0x23a>
 8004c8a:	9802      	ldr	r0, [sp, #8]
 8004c8c:	f005 f8be 	bl	8009e0c <_localeconv_r>
 8004c90:	6800      	ldr	r0, [r0, #0]
 8004c92:	f7fb faed 	bl	8000270 <strlen>
 8004c96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c98:	181a      	adds	r2, r3, r0
 8004c9a:	9217      	str	r2, [sp, #92]	; 0x5c
 8004c9c:	9a04      	ldr	r2, [sp, #16]
 8004c9e:	5c1b      	ldrb	r3, [r3, r0]
 8004ca0:	2a00      	cmp	r2, #0
 8004ca2:	d142      	bne.n	8004d2a <_strtod_r+0x22a>
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	2b30      	cmp	r3, #48	; 0x30
 8004ca8:	d105      	bne.n	8004cb6 <_strtod_r+0x1b6>
 8004caa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	9217      	str	r2, [sp, #92]	; 0x5c
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	e7f7      	b.n	8004ca6 <_strtod_r+0x1a6>
 8004cb6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004cba:	2a08      	cmp	r2, #8
 8004cbc:	d843      	bhi.n	8004d46 <_strtod_r+0x246>
 8004cbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004cc0:	9207      	str	r2, [sp, #28]
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	3b30      	subs	r3, #48	; 0x30
 8004cca:	f100 0101 	add.w	r1, r0, #1
 8004cce:	d026      	beq.n	8004d1e <_strtod_r+0x21e>
 8004cd0:	440a      	add	r2, r1
 8004cd2:	eb05 0c00 	add.w	ip, r5, r0
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	260a      	movs	r6, #10
 8004cda:	4561      	cmp	r1, ip
 8004cdc:	d00e      	beq.n	8004cfc <_strtod_r+0x1fc>
 8004cde:	3101      	adds	r1, #1
 8004ce0:	f101 3eff 	add.w	lr, r1, #4294967295
 8004ce4:	f1be 0f08 	cmp.w	lr, #8
 8004ce8:	dc03      	bgt.n	8004cf2 <_strtod_r+0x1f2>
 8004cea:	9f05      	ldr	r7, [sp, #20]
 8004cec:	4377      	muls	r7, r6
 8004cee:	9705      	str	r7, [sp, #20]
 8004cf0:	e7f3      	b.n	8004cda <_strtod_r+0x1da>
 8004cf2:	2910      	cmp	r1, #16
 8004cf4:	bfd8      	it	le
 8004cf6:	fb06 f808 	mulle.w	r8, r6, r8
 8004cfa:	e7ee      	b.n	8004cda <_strtod_r+0x1da>
 8004cfc:	4428      	add	r0, r5
 8004cfe:	2808      	cmp	r0, #8
 8004d00:	f100 0501 	add.w	r5, r0, #1
 8004d04:	dc05      	bgt.n	8004d12 <_strtod_r+0x212>
 8004d06:	9805      	ldr	r0, [sp, #20]
 8004d08:	210a      	movs	r1, #10
 8004d0a:	fb01 3300 	mla	r3, r1, r0, r3
 8004d0e:	9305      	str	r3, [sp, #20]
 8004d10:	e004      	b.n	8004d1c <_strtod_r+0x21c>
 8004d12:	2d10      	cmp	r5, #16
 8004d14:	bfdc      	itt	le
 8004d16:	210a      	movle	r1, #10
 8004d18:	fb01 3808 	mlale	r8, r1, r8, r3
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d20:	1c58      	adds	r0, r3, #1
 8004d22:	9017      	str	r0, [sp, #92]	; 0x5c
 8004d24:	785b      	ldrb	r3, [r3, #1]
 8004d26:	4608      	mov	r0, r1
 8004d28:	e002      	b.n	8004d30 <_strtod_r+0x230>
 8004d2a:	9d04      	ldr	r5, [sp, #16]
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	463a      	mov	r2, r7
 8004d30:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004d34:	2909      	cmp	r1, #9
 8004d36:	d9c7      	bls.n	8004cc8 <_strtod_r+0x1c8>
 8004d38:	2101      	movs	r1, #1
 8004d3a:	2b65      	cmp	r3, #101	; 0x65
 8004d3c:	d001      	beq.n	8004d42 <_strtod_r+0x242>
 8004d3e:	2b45      	cmp	r3, #69	; 0x45
 8004d40:	d151      	bne.n	8004de6 <_strtod_r+0x2e6>
 8004d42:	b96d      	cbnz	r5, 8004d60 <_strtod_r+0x260>
 8004d44:	e004      	b.n	8004d50 <_strtod_r+0x250>
 8004d46:	2b65      	cmp	r3, #101	; 0x65
 8004d48:	f040 84b3 	bne.w	80056b2 <_strtod_r+0xbb2>
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2101      	movs	r1, #1
 8004d50:	b928      	cbnz	r0, 8004d5e <_strtod_r+0x25e>
 8004d52:	9b06      	ldr	r3, [sp, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8095 	beq.w	8004e84 <_strtod_r+0x384>
 8004d5a:	4605      	mov	r5, r0
 8004d5c:	e000      	b.n	8004d60 <_strtod_r+0x260>
 8004d5e:	2500      	movs	r5, #0
 8004d60:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004d62:	1c63      	adds	r3, r4, #1
 8004d64:	9317      	str	r3, [sp, #92]	; 0x5c
 8004d66:	7863      	ldrb	r3, [r4, #1]
 8004d68:	2b2b      	cmp	r3, #43	; 0x2b
 8004d6a:	d006      	beq.n	8004d7a <_strtod_r+0x27a>
 8004d6c:	2b2d      	cmp	r3, #45	; 0x2d
 8004d6e:	d002      	beq.n	8004d76 <_strtod_r+0x276>
 8004d70:	2600      	movs	r6, #0
 8004d72:	9603      	str	r6, [sp, #12]
 8004d74:	e006      	b.n	8004d84 <_strtod_r+0x284>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <_strtod_r+0x27c>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9303      	str	r3, [sp, #12]
 8004d7e:	1ca3      	adds	r3, r4, #2
 8004d80:	9317      	str	r3, [sp, #92]	; 0x5c
 8004d82:	78a3      	ldrb	r3, [r4, #2]
 8004d84:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004d88:	2e09      	cmp	r6, #9
 8004d8a:	d82b      	bhi.n	8004de4 <_strtod_r+0x2e4>
 8004d8c:	2b30      	cmp	r3, #48	; 0x30
 8004d8e:	d104      	bne.n	8004d9a <_strtod_r+0x29a>
 8004d90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d92:	1c5e      	adds	r6, r3, #1
 8004d94:	9617      	str	r6, [sp, #92]	; 0x5c
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	e7f8      	b.n	8004d8c <_strtod_r+0x28c>
 8004d9a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8004d9e:	2e08      	cmp	r6, #8
 8004da0:	d821      	bhi.n	8004de6 <_strtod_r+0x2e6>
 8004da2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004da6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004da8:	f04f 0c0a 	mov.w	ip, #10
 8004dac:	461f      	mov	r7, r3
 8004dae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004db0:	1c5e      	adds	r6, r3, #1
 8004db2:	9617      	str	r6, [sp, #92]	; 0x5c
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 8004dba:	f1b9 0f09 	cmp.w	r9, #9
 8004dbe:	d804      	bhi.n	8004dca <_strtod_r+0x2ca>
 8004dc0:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8004dc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004dc8:	e7f1      	b.n	8004dae <_strtod_r+0x2ae>
 8004dca:	1bf6      	subs	r6, r6, r7
 8004dcc:	2e08      	cmp	r6, #8
 8004dce:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8004dd2:	dc02      	bgt.n	8004dda <_strtod_r+0x2da>
 8004dd4:	45f1      	cmp	r9, lr
 8004dd6:	bfa8      	it	ge
 8004dd8:	46f1      	movge	r9, lr
 8004dda:	9e03      	ldr	r6, [sp, #12]
 8004ddc:	b12e      	cbz	r6, 8004dea <_strtod_r+0x2ea>
 8004dde:	f1c9 0900 	rsb	r9, r9, #0
 8004de2:	e002      	b.n	8004dea <_strtod_r+0x2ea>
 8004de4:	9417      	str	r4, [sp, #92]	; 0x5c
 8004de6:	f04f 0900 	mov.w	r9, #0
 8004dea:	2d00      	cmp	r5, #0
 8004dec:	d153      	bne.n	8004e96 <_strtod_r+0x396>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f040 8451 	bne.w	8005696 <_strtod_r+0xb96>
 8004df4:	9a06      	ldr	r2, [sp, #24]
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	f040 844d 	bne.w	8005696 <_strtod_r+0xb96>
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	d141      	bne.n	8004e84 <_strtod_r+0x384>
 8004e00:	2b4e      	cmp	r3, #78	; 0x4e
 8004e02:	d020      	beq.n	8004e46 <_strtod_r+0x346>
 8004e04:	dc02      	bgt.n	8004e0c <_strtod_r+0x30c>
 8004e06:	2b49      	cmp	r3, #73	; 0x49
 8004e08:	d00a      	beq.n	8004e20 <_strtod_r+0x320>
 8004e0a:	e03b      	b.n	8004e84 <_strtod_r+0x384>
 8004e0c:	2b69      	cmp	r3, #105	; 0x69
 8004e0e:	d007      	beq.n	8004e20 <_strtod_r+0x320>
 8004e10:	2b6e      	cmp	r3, #110	; 0x6e
 8004e12:	d018      	beq.n	8004e46 <_strtod_r+0x346>
 8004e14:	e036      	b.n	8004e84 <_strtod_r+0x384>
 8004e16:	bf00      	nop
 8004e18:	0800cc90 	.word	0x0800cc90
 8004e1c:	7ff00000 	.word	0x7ff00000
 8004e20:	49a8      	ldr	r1, [pc, #672]	; (80050c4 <_strtod_r+0x5c4>)
 8004e22:	a817      	add	r0, sp, #92	; 0x5c
 8004e24:	f004 ff34 	bl	8009c90 <__match>
 8004e28:	b360      	cbz	r0, 8004e84 <_strtod_r+0x384>
 8004e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e2c:	49a6      	ldr	r1, [pc, #664]	; (80050c8 <_strtod_r+0x5c8>)
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	a817      	add	r0, sp, #92	; 0x5c
 8004e32:	9317      	str	r3, [sp, #92]	; 0x5c
 8004e34:	f004 ff2c 	bl	8009c90 <__match>
 8004e38:	b910      	cbnz	r0, 8004e40 <_strtod_r+0x340>
 8004e3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004e40:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 80050e4 <_strtod_r+0x5e4>
 8004e44:	e01a      	b.n	8004e7c <_strtod_r+0x37c>
 8004e46:	49a1      	ldr	r1, [pc, #644]	; (80050cc <_strtod_r+0x5cc>)
 8004e48:	a817      	add	r0, sp, #92	; 0x5c
 8004e4a:	f004 ff21 	bl	8009c90 <__match>
 8004e4e:	b1c8      	cbz	r0, 8004e84 <_strtod_r+0x384>
 8004e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b28      	cmp	r3, #40	; 0x28
 8004e56:	d10f      	bne.n	8004e78 <_strtod_r+0x378>
 8004e58:	aa1a      	add	r2, sp, #104	; 0x68
 8004e5a:	499d      	ldr	r1, [pc, #628]	; (80050d0 <_strtod_r+0x5d0>)
 8004e5c:	a817      	add	r0, sp, #92	; 0x5c
 8004e5e:	f004 ff2a 	bl	8009cb6 <__hexnan>
 8004e62:	2805      	cmp	r0, #5
 8004e64:	d108      	bne.n	8004e78 <_strtod_r+0x378>
 8004e66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004e6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004e70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004e74:	f000 bc0f 	b.w	8005696 <_strtod_r+0xb96>
 8004e78:	f8df b26c 	ldr.w	fp, [pc, #620]	; 80050e8 <_strtod_r+0x5e8>
 8004e7c:	f04f 0a00 	mov.w	sl, #0
 8004e80:	f000 bc09 	b.w	8005696 <_strtod_r+0xb96>
 8004e84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e86:	9417      	str	r4, [sp, #92]	; 0x5c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 840f 	beq.w	80056ac <_strtod_r+0xbac>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	930c      	str	r3, [sp, #48]	; 0x30
 8004e92:	f000 bc02 	b.w	800569a <_strtod_r+0xb9a>
 8004e96:	9b04      	ldr	r3, [sp, #16]
 8004e98:	9805      	ldr	r0, [sp, #20]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bf08      	it	eq
 8004e9e:	462b      	moveq	r3, r5
 8004ea0:	2d10      	cmp	r5, #16
 8004ea2:	462c      	mov	r4, r5
 8004ea4:	ebc2 0909 	rsb	r9, r2, r9
 8004ea8:	bfa8      	it	ge
 8004eaa:	2410      	movge	r4, #16
 8004eac:	9304      	str	r3, [sp, #16]
 8004eae:	f7fb fb29 	bl	8000504 <__aeabi_ui2d>
 8004eb2:	2c09      	cmp	r4, #9
 8004eb4:	4682      	mov	sl, r0
 8004eb6:	468b      	mov	fp, r1
 8004eb8:	dd13      	ble.n	8004ee2 <_strtod_r+0x3e2>
 8004eba:	4b86      	ldr	r3, [pc, #536]	; (80050d4 <_strtod_r+0x5d4>)
 8004ebc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ec0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004ec4:	f7fb fb94 	bl	80005f0 <__aeabi_dmul>
 8004ec8:	4606      	mov	r6, r0
 8004eca:	4640      	mov	r0, r8
 8004ecc:	460f      	mov	r7, r1
 8004ece:	f7fb fb19 	bl	8000504 <__aeabi_ui2d>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	4639      	mov	r1, r7
 8004eda:	f7fb f9d7 	bl	800028c <__adddf3>
 8004ede:	4682      	mov	sl, r0
 8004ee0:	468b      	mov	fp, r1
 8004ee2:	2d0f      	cmp	r5, #15
 8004ee4:	dc36      	bgt.n	8004f54 <_strtod_r+0x454>
 8004ee6:	f1b9 0f00 	cmp.w	r9, #0
 8004eea:	f000 83d4 	beq.w	8005696 <_strtod_r+0xb96>
 8004eee:	dd24      	ble.n	8004f3a <_strtod_r+0x43a>
 8004ef0:	f1b9 0f16 	cmp.w	r9, #22
 8004ef4:	dc07      	bgt.n	8004f06 <_strtod_r+0x406>
 8004ef6:	4d77      	ldr	r5, [pc, #476]	; (80050d4 <_strtod_r+0x5d4>)
 8004ef8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8004efc:	4652      	mov	r2, sl
 8004efe:	465b      	mov	r3, fp
 8004f00:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004f04:	e014      	b.n	8004f30 <_strtod_r+0x430>
 8004f06:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004f0a:	4599      	cmp	r9, r3
 8004f0c:	dc22      	bgt.n	8004f54 <_strtod_r+0x454>
 8004f0e:	4c71      	ldr	r4, [pc, #452]	; (80050d4 <_strtod_r+0x5d4>)
 8004f10:	f1c5 050f 	rsb	r5, r5, #15
 8004f14:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004f18:	ebc5 0509 	rsb	r5, r5, r9
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	465b      	mov	r3, fp
 8004f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f24:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004f28:	f7fb fb62 	bl	80005f0 <__aeabi_dmul>
 8004f2c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004f30:	f7fb fb5e 	bl	80005f0 <__aeabi_dmul>
 8004f34:	4682      	mov	sl, r0
 8004f36:	468b      	mov	fp, r1
 8004f38:	e3ad      	b.n	8005696 <_strtod_r+0xb96>
 8004f3a:	f119 0f16 	cmn.w	r9, #22
 8004f3e:	db09      	blt.n	8004f54 <_strtod_r+0x454>
 8004f40:	4d64      	ldr	r5, [pc, #400]	; (80050d4 <_strtod_r+0x5d4>)
 8004f42:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8004f46:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004f4a:	4650      	mov	r0, sl
 8004f4c:	4659      	mov	r1, fp
 8004f4e:	f7fb fc79 	bl	8000844 <__aeabi_ddiv>
 8004f52:	e7ef      	b.n	8004f34 <_strtod_r+0x434>
 8004f54:	1b2c      	subs	r4, r5, r4
 8004f56:	444c      	add	r4, r9
 8004f58:	2c00      	cmp	r4, #0
 8004f5a:	dd57      	ble.n	800500c <_strtod_r+0x50c>
 8004f5c:	f014 010f 	ands.w	r1, r4, #15
 8004f60:	d00a      	beq.n	8004f78 <_strtod_r+0x478>
 8004f62:	4b5c      	ldr	r3, [pc, #368]	; (80050d4 <_strtod_r+0x5d4>)
 8004f64:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004f68:	4652      	mov	r2, sl
 8004f6a:	465b      	mov	r3, fp
 8004f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f70:	f7fb fb3e 	bl	80005f0 <__aeabi_dmul>
 8004f74:	4682      	mov	sl, r0
 8004f76:	468b      	mov	fp, r1
 8004f78:	f034 040f 	bics.w	r4, r4, #15
 8004f7c:	f000 80b8 	beq.w	80050f0 <_strtod_r+0x5f0>
 8004f80:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8004f84:	dd0b      	ble.n	8004f9e <_strtod_r+0x49e>
 8004f86:	2400      	movs	r4, #0
 8004f88:	4625      	mov	r5, r4
 8004f8a:	9405      	str	r4, [sp, #20]
 8004f8c:	9404      	str	r4, [sp, #16]
 8004f8e:	9a02      	ldr	r2, [sp, #8]
 8004f90:	f8df b150 	ldr.w	fp, [pc, #336]	; 80050e4 <_strtod_r+0x5e4>
 8004f94:	2322      	movs	r3, #34	; 0x22
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	f04f 0a00 	mov.w	sl, #0
 8004f9c:	e187      	b.n	80052ae <_strtod_r+0x7ae>
 8004f9e:	4e4e      	ldr	r6, [pc, #312]	; (80050d8 <_strtod_r+0x5d8>)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	1124      	asrs	r4, r4, #4
 8004fa4:	4650      	mov	r0, sl
 8004fa6:	4659      	mov	r1, fp
 8004fa8:	4698      	mov	r8, r3
 8004faa:	4637      	mov	r7, r6
 8004fac:	2c01      	cmp	r4, #1
 8004fae:	dd0b      	ble.n	8004fc8 <_strtod_r+0x4c8>
 8004fb0:	07e2      	lsls	r2, r4, #31
 8004fb2:	d504      	bpl.n	8004fbe <_strtod_r+0x4be>
 8004fb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fb8:	f7fb fb1a 	bl	80005f0 <__aeabi_dmul>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f108 0801 	add.w	r8, r8, #1
 8004fc2:	1064      	asrs	r4, r4, #1
 8004fc4:	3608      	adds	r6, #8
 8004fc6:	e7f1      	b.n	8004fac <_strtod_r+0x4ac>
 8004fc8:	b10b      	cbz	r3, 8004fce <_strtod_r+0x4ce>
 8004fca:	4682      	mov	sl, r0
 8004fcc:	468b      	mov	fp, r1
 8004fce:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004fd2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8004fd6:	4652      	mov	r2, sl
 8004fd8:	465b      	mov	r3, fp
 8004fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fde:	f7fb fb07 	bl	80005f0 <__aeabi_dmul>
 8004fe2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004fe6:	468b      	mov	fp, r1
 8004fe8:	460a      	mov	r2, r1
 8004fea:	0d1b      	lsrs	r3, r3, #20
 8004fec:	493b      	ldr	r1, [pc, #236]	; (80050dc <_strtod_r+0x5dc>)
 8004fee:	051b      	lsls	r3, r3, #20
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	4682      	mov	sl, r0
 8004ff4:	d8c7      	bhi.n	8004f86 <_strtod_r+0x486>
 8004ff6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004ffa:	428b      	cmp	r3, r1
 8004ffc:	bf86      	itte	hi
 8004ffe:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 80050ec <_strtod_r+0x5ec>
 8005002:	f04f 3aff 	movhi.w	sl, #4294967295
 8005006:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800500a:	e071      	b.n	80050f0 <_strtod_r+0x5f0>
 800500c:	d070      	beq.n	80050f0 <_strtod_r+0x5f0>
 800500e:	4264      	negs	r4, r4
 8005010:	f014 020f 	ands.w	r2, r4, #15
 8005014:	d00a      	beq.n	800502c <_strtod_r+0x52c>
 8005016:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <_strtod_r+0x5d4>)
 8005018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800501c:	4650      	mov	r0, sl
 800501e:	4659      	mov	r1, fp
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f7fb fc0e 	bl	8000844 <__aeabi_ddiv>
 8005028:	4682      	mov	sl, r0
 800502a:	468b      	mov	fp, r1
 800502c:	1124      	asrs	r4, r4, #4
 800502e:	d05f      	beq.n	80050f0 <_strtod_r+0x5f0>
 8005030:	2c1f      	cmp	r4, #31
 8005032:	dd04      	ble.n	800503e <_strtod_r+0x53e>
 8005034:	2400      	movs	r4, #0
 8005036:	4625      	mov	r5, r4
 8005038:	9405      	str	r4, [sp, #20]
 800503a:	9404      	str	r4, [sp, #16]
 800503c:	e130      	b.n	80052a0 <_strtod_r+0x7a0>
 800503e:	f014 0f10 	tst.w	r4, #16
 8005042:	bf0c      	ite	eq
 8005044:	2300      	moveq	r3, #0
 8005046:	236a      	movne	r3, #106	; 0x6a
 8005048:	4e25      	ldr	r6, [pc, #148]	; (80050e0 <_strtod_r+0x5e0>)
 800504a:	9303      	str	r3, [sp, #12]
 800504c:	4650      	mov	r0, sl
 800504e:	4659      	mov	r1, fp
 8005050:	2300      	movs	r3, #0
 8005052:	2c00      	cmp	r4, #0
 8005054:	dd09      	ble.n	800506a <_strtod_r+0x56a>
 8005056:	07e2      	lsls	r2, r4, #31
 8005058:	d504      	bpl.n	8005064 <_strtod_r+0x564>
 800505a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800505e:	f7fb fac7 	bl	80005f0 <__aeabi_dmul>
 8005062:	2301      	movs	r3, #1
 8005064:	1064      	asrs	r4, r4, #1
 8005066:	3608      	adds	r6, #8
 8005068:	e7f3      	b.n	8005052 <_strtod_r+0x552>
 800506a:	b10b      	cbz	r3, 8005070 <_strtod_r+0x570>
 800506c:	4682      	mov	sl, r0
 800506e:	468b      	mov	fp, r1
 8005070:	9b03      	ldr	r3, [sp, #12]
 8005072:	b1eb      	cbz	r3, 80050b0 <_strtod_r+0x5b0>
 8005074:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005078:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800507c:	2b00      	cmp	r3, #0
 800507e:	4659      	mov	r1, fp
 8005080:	dd16      	ble.n	80050b0 <_strtod_r+0x5b0>
 8005082:	2b1f      	cmp	r3, #31
 8005084:	dd0e      	ble.n	80050a4 <_strtod_r+0x5a4>
 8005086:	2b34      	cmp	r3, #52	; 0x34
 8005088:	bfde      	ittt	le
 800508a:	3b20      	suble	r3, #32
 800508c:	f04f 32ff 	movle.w	r2, #4294967295
 8005090:	fa02 f303 	lslle.w	r3, r2, r3
 8005094:	f04f 0a00 	mov.w	sl, #0
 8005098:	bfcc      	ite	gt
 800509a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800509e:	ea03 0b01 	andle.w	fp, r3, r1
 80050a2:	e005      	b.n	80050b0 <_strtod_r+0x5b0>
 80050a4:	f04f 32ff 	mov.w	r2, #4294967295
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	ea03 0a0a 	and.w	sl, r3, sl
 80050b0:	2200      	movs	r2, #0
 80050b2:	2300      	movs	r3, #0
 80050b4:	4650      	mov	r0, sl
 80050b6:	4659      	mov	r1, fp
 80050b8:	f7fb fd02 	bl	8000ac0 <__aeabi_dcmpeq>
 80050bc:	2800      	cmp	r0, #0
 80050be:	d1b9      	bne.n	8005034 <_strtod_r+0x534>
 80050c0:	e018      	b.n	80050f4 <_strtod_r+0x5f4>
 80050c2:	bf00      	nop
 80050c4:	0800ccf5 	.word	0x0800ccf5
 80050c8:	0800cd77 	.word	0x0800cd77
 80050cc:	0800ccfd 	.word	0x0800ccfd
 80050d0:	0800cca4 	.word	0x0800cca4
 80050d4:	0800cdf0 	.word	0x0800cdf0
 80050d8:	0800ceb8 	.word	0x0800ceb8
 80050dc:	7ca00000 	.word	0x7ca00000
 80050e0:	0800ccb8 	.word	0x0800ccb8
 80050e4:	7ff00000 	.word	0x7ff00000
 80050e8:	fff80000 	.word	0xfff80000
 80050ec:	7fefffff 	.word	0x7fefffff
 80050f0:	2300      	movs	r3, #0
 80050f2:	9303      	str	r3, [sp, #12]
 80050f4:	9b05      	ldr	r3, [sp, #20]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	9a04      	ldr	r2, [sp, #16]
 80050fa:	9907      	ldr	r1, [sp, #28]
 80050fc:	9802      	ldr	r0, [sp, #8]
 80050fe:	462b      	mov	r3, r5
 8005100:	f004 ff92 	bl	800a028 <__s2b>
 8005104:	9005      	str	r0, [sp, #20]
 8005106:	2800      	cmp	r0, #0
 8005108:	f43f af3d 	beq.w	8004f86 <_strtod_r+0x486>
 800510c:	f1b9 0f00 	cmp.w	r9, #0
 8005110:	f1c9 0300 	rsb	r3, r9, #0
 8005114:	bfa8      	it	ge
 8005116:	2300      	movge	r3, #0
 8005118:	930d      	str	r3, [sp, #52]	; 0x34
 800511a:	2400      	movs	r4, #0
 800511c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8005120:	9312      	str	r3, [sp, #72]	; 0x48
 8005122:	4625      	mov	r5, r4
 8005124:	9b05      	ldr	r3, [sp, #20]
 8005126:	9802      	ldr	r0, [sp, #8]
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	f004 fef6 	bl	8009f1a <_Balloc>
 800512e:	9004      	str	r0, [sp, #16]
 8005130:	2800      	cmp	r0, #0
 8005132:	f43f af2c 	beq.w	8004f8e <_strtod_r+0x48e>
 8005136:	9b05      	ldr	r3, [sp, #20]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	3202      	adds	r2, #2
 800513c:	f103 010c 	add.w	r1, r3, #12
 8005140:	0092      	lsls	r2, r2, #2
 8005142:	300c      	adds	r0, #12
 8005144:	f7ff fc83 	bl	8004a4e <memcpy>
 8005148:	aa1a      	add	r2, sp, #104	; 0x68
 800514a:	a919      	add	r1, sp, #100	; 0x64
 800514c:	ec4b ab10 	vmov	d0, sl, fp
 8005150:	9802      	ldr	r0, [sp, #8]
 8005152:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005156:	f005 fa1c 	bl	800a592 <__d2b>
 800515a:	9018      	str	r0, [sp, #96]	; 0x60
 800515c:	2800      	cmp	r0, #0
 800515e:	f43f af16 	beq.w	8004f8e <_strtod_r+0x48e>
 8005162:	2101      	movs	r1, #1
 8005164:	9802      	ldr	r0, [sp, #8]
 8005166:	f004 ffea 	bl	800a13e <__i2b>
 800516a:	4605      	mov	r5, r0
 800516c:	2800      	cmp	r0, #0
 800516e:	f43f af0e 	beq.w	8004f8e <_strtod_r+0x48e>
 8005172:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005174:	9903      	ldr	r1, [sp, #12]
 8005176:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8005178:	2b00      	cmp	r3, #0
 800517a:	bfad      	iteet	ge
 800517c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 800517e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005180:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
 8005184:	eb02 0803 	addge.w	r8, r2, r3
 8005188:	bfb8      	it	lt
 800518a:	1ad2      	sublt	r2, r2, r3
 800518c:	eba3 0301 	sub.w	r3, r3, r1
 8005190:	4433      	add	r3, r6
 8005192:	49b5      	ldr	r1, [pc, #724]	; (8005468 <_strtod_r+0x968>)
 8005194:	bfa8      	it	ge
 8005196:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 8005198:	3b01      	subs	r3, #1
 800519a:	428b      	cmp	r3, r1
 800519c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
 80051a0:	f280 808a 	bge.w	80052b8 <_strtod_r+0x7b8>
 80051a4:	1ac9      	subs	r1, r1, r3
 80051a6:	291f      	cmp	r1, #31
 80051a8:	bfc8      	it	gt
 80051aa:	4fb0      	ldrgt	r7, [pc, #704]	; (800546c <_strtod_r+0x96c>)
 80051ac:	f04f 0901 	mov.w	r9, #1
 80051b0:	bfd4      	ite	le
 80051b2:	fa09 f301 	lslle.w	r3, r9, r1
 80051b6:	1aff      	subgt	r7, r7, r3
 80051b8:	eba6 0601 	sub.w	r6, r6, r1
 80051bc:	bfd9      	ittee	le
 80051be:	9306      	strle	r3, [sp, #24]
 80051c0:	2700      	movle	r7, #0
 80051c2:	fa09 f707 	lslgt.w	r7, r9, r7
 80051c6:	f8cd 9018 	strgt.w	r9, [sp, #24]
 80051ca:	eb08 0906 	add.w	r9, r8, r6
 80051ce:	9b03      	ldr	r3, [sp, #12]
 80051d0:	45c8      	cmp	r8, r9
 80051d2:	4416      	add	r6, r2
 80051d4:	441e      	add	r6, r3
 80051d6:	4643      	mov	r3, r8
 80051d8:	bfa8      	it	ge
 80051da:	464b      	movge	r3, r9
 80051dc:	42b3      	cmp	r3, r6
 80051de:	bfa8      	it	ge
 80051e0:	4633      	movge	r3, r6
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	bfc2      	ittt	gt
 80051e6:	ebc3 0909 	rsbgt	r9, r3, r9
 80051ea:	1af6      	subgt	r6, r6, r3
 80051ec:	ebc3 0808 	rsbgt	r8, r3, r8
 80051f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d164      	bne.n	80052c0 <_strtod_r+0x7c0>
 80051f6:	f1b9 0f00 	cmp.w	r9, #0
 80051fa:	dc7a      	bgt.n	80052f2 <_strtod_r+0x7f2>
 80051fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f040 8081 	bne.w	8005306 <_strtod_r+0x806>
 8005204:	2e00      	cmp	r6, #0
 8005206:	f300 8088 	bgt.w	800531a <_strtod_r+0x81a>
 800520a:	f1b8 0f00 	cmp.w	r8, #0
 800520e:	f300 808e 	bgt.w	800532e <_strtod_r+0x82e>
 8005212:	9a04      	ldr	r2, [sp, #16]
 8005214:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005216:	9802      	ldr	r0, [sp, #8]
 8005218:	f005 f8e7 	bl	800a3ea <__mdiff>
 800521c:	4604      	mov	r4, r0
 800521e:	2800      	cmp	r0, #0
 8005220:	f43f aeb5 	beq.w	8004f8e <_strtod_r+0x48e>
 8005224:	68c3      	ldr	r3, [r0, #12]
 8005226:	9307      	str	r3, [sp, #28]
 8005228:	2300      	movs	r3, #0
 800522a:	60c3      	str	r3, [r0, #12]
 800522c:	4629      	mov	r1, r5
 800522e:	f005 f8c0 	bl	800a3b2 <__mcmp>
 8005232:	2800      	cmp	r0, #0
 8005234:	f280 8089 	bge.w	800534a <_strtod_r+0x84a>
 8005238:	9b07      	ldr	r3, [sp, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f040 8204 	bne.w	8005648 <_strtod_r+0xb48>
 8005240:	f1ba 0f00 	cmp.w	sl, #0
 8005244:	f040 8200 	bne.w	8005648 <_strtod_r+0xb48>
 8005248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800524c:	2b00      	cmp	r3, #0
 800524e:	f040 81fb 	bne.w	8005648 <_strtod_r+0xb48>
 8005252:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005256:	0d1b      	lsrs	r3, r3, #20
 8005258:	051b      	lsls	r3, r3, #20
 800525a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800525e:	f240 81f3 	bls.w	8005648 <_strtod_r+0xb48>
 8005262:	6963      	ldr	r3, [r4, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d06c      	beq.n	8005342 <_strtod_r+0x842>
 8005268:	4621      	mov	r1, r4
 800526a:	2201      	movs	r2, #1
 800526c:	9802      	ldr	r0, [sp, #8]
 800526e:	f005 f84f 	bl	800a310 <__lshift>
 8005272:	4629      	mov	r1, r5
 8005274:	4604      	mov	r4, r0
 8005276:	f005 f89c 	bl	800a3b2 <__mcmp>
 800527a:	2800      	cmp	r0, #0
 800527c:	f340 81e4 	ble.w	8005648 <_strtod_r+0xb48>
 8005280:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005284:	9a03      	ldr	r2, [sp, #12]
 8005286:	0d1b      	lsrs	r3, r3, #20
 8005288:	051b      	lsls	r3, r3, #20
 800528a:	2a00      	cmp	r2, #0
 800528c:	f000 808c 	beq.w	80053a8 <_strtod_r+0x8a8>
 8005290:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005294:	f300 8088 	bgt.w	80053a8 <_strtod_r+0x8a8>
 8005298:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800529c:	f300 81d6 	bgt.w	800564c <_strtod_r+0xb4c>
 80052a0:	9a02      	ldr	r2, [sp, #8]
 80052a2:	2322      	movs	r3, #34	; 0x22
 80052a4:	f04f 0a00 	mov.w	sl, #0
 80052a8:	f04f 0b00 	mov.w	fp, #0
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	9b05      	ldr	r3, [sp, #20]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f040 81dc 	bne.w	800566e <_strtod_r+0xb6e>
 80052b6:	e1ee      	b.n	8005696 <_strtod_r+0xb96>
 80052b8:	2301      	movs	r3, #1
 80052ba:	2700      	movs	r7, #0
 80052bc:	9306      	str	r3, [sp, #24]
 80052be:	e784      	b.n	80051ca <_strtod_r+0x6ca>
 80052c0:	4629      	mov	r1, r5
 80052c2:	461a      	mov	r2, r3
 80052c4:	9802      	ldr	r0, [sp, #8]
 80052c6:	f004 ffd5 	bl	800a274 <__pow5mult>
 80052ca:	4605      	mov	r5, r0
 80052cc:	2800      	cmp	r0, #0
 80052ce:	f43f ae5e 	beq.w	8004f8e <_strtod_r+0x48e>
 80052d2:	4601      	mov	r1, r0
 80052d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80052d6:	9802      	ldr	r0, [sp, #8]
 80052d8:	f004 ff3a 	bl	800a150 <__multiply>
 80052dc:	9007      	str	r0, [sp, #28]
 80052de:	2800      	cmp	r0, #0
 80052e0:	f43f ae55 	beq.w	8004f8e <_strtod_r+0x48e>
 80052e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80052e6:	9802      	ldr	r0, [sp, #8]
 80052e8:	f004 fe4c 	bl	8009f84 <_Bfree>
 80052ec:	9b07      	ldr	r3, [sp, #28]
 80052ee:	9318      	str	r3, [sp, #96]	; 0x60
 80052f0:	e781      	b.n	80051f6 <_strtod_r+0x6f6>
 80052f2:	464a      	mov	r2, r9
 80052f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80052f6:	9802      	ldr	r0, [sp, #8]
 80052f8:	f005 f80a 	bl	800a310 <__lshift>
 80052fc:	9018      	str	r0, [sp, #96]	; 0x60
 80052fe:	2800      	cmp	r0, #0
 8005300:	f47f af7c 	bne.w	80051fc <_strtod_r+0x6fc>
 8005304:	e643      	b.n	8004f8e <_strtod_r+0x48e>
 8005306:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005308:	9904      	ldr	r1, [sp, #16]
 800530a:	9802      	ldr	r0, [sp, #8]
 800530c:	f004 ffb2 	bl	800a274 <__pow5mult>
 8005310:	9004      	str	r0, [sp, #16]
 8005312:	2800      	cmp	r0, #0
 8005314:	f47f af76 	bne.w	8005204 <_strtod_r+0x704>
 8005318:	e639      	b.n	8004f8e <_strtod_r+0x48e>
 800531a:	4632      	mov	r2, r6
 800531c:	9904      	ldr	r1, [sp, #16]
 800531e:	9802      	ldr	r0, [sp, #8]
 8005320:	f004 fff6 	bl	800a310 <__lshift>
 8005324:	9004      	str	r0, [sp, #16]
 8005326:	2800      	cmp	r0, #0
 8005328:	f47f af6f 	bne.w	800520a <_strtod_r+0x70a>
 800532c:	e62f      	b.n	8004f8e <_strtod_r+0x48e>
 800532e:	4629      	mov	r1, r5
 8005330:	4642      	mov	r2, r8
 8005332:	9802      	ldr	r0, [sp, #8]
 8005334:	f004 ffec 	bl	800a310 <__lshift>
 8005338:	4605      	mov	r5, r0
 800533a:	2800      	cmp	r0, #0
 800533c:	f47f af69 	bne.w	8005212 <_strtod_r+0x712>
 8005340:	e625      	b.n	8004f8e <_strtod_r+0x48e>
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	2b01      	cmp	r3, #1
 8005346:	dc8f      	bgt.n	8005268 <_strtod_r+0x768>
 8005348:	e17e      	b.n	8005648 <_strtod_r+0xb48>
 800534a:	d161      	bne.n	8005410 <_strtod_r+0x910>
 800534c:	9a07      	ldr	r2, [sp, #28]
 800534e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005352:	b322      	cbz	r2, 800539e <_strtod_r+0x89e>
 8005354:	4946      	ldr	r1, [pc, #280]	; (8005470 <_strtod_r+0x970>)
 8005356:	428b      	cmp	r3, r1
 8005358:	465a      	mov	r2, fp
 800535a:	d12e      	bne.n	80053ba <_strtod_r+0x8ba>
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	4651      	mov	r1, sl
 8005360:	b163      	cbz	r3, 800537c <_strtod_r+0x87c>
 8005362:	4b44      	ldr	r3, [pc, #272]	; (8005474 <_strtod_r+0x974>)
 8005364:	4013      	ands	r3, r2
 8005366:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800536a:	d807      	bhi.n	800537c <_strtod_r+0x87c>
 800536c:	0d1b      	lsrs	r3, r3, #20
 800536e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005372:	f04f 30ff 	mov.w	r0, #4294967295
 8005376:	fa00 f303 	lsl.w	r3, r0, r3
 800537a:	e001      	b.n	8005380 <_strtod_r+0x880>
 800537c:	f04f 33ff 	mov.w	r3, #4294967295
 8005380:	428b      	cmp	r3, r1
 8005382:	d11a      	bne.n	80053ba <_strtod_r+0x8ba>
 8005384:	493c      	ldr	r1, [pc, #240]	; (8005478 <_strtod_r+0x978>)
 8005386:	428a      	cmp	r2, r1
 8005388:	d102      	bne.n	8005390 <_strtod_r+0x890>
 800538a:	3301      	adds	r3, #1
 800538c:	f43f adff 	beq.w	8004f8e <_strtod_r+0x48e>
 8005390:	4b38      	ldr	r3, [pc, #224]	; (8005474 <_strtod_r+0x974>)
 8005392:	4013      	ands	r3, r2
 8005394:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005398:	f04f 0a00 	mov.w	sl, #0
 800539c:	e154      	b.n	8005648 <_strtod_r+0xb48>
 800539e:	b963      	cbnz	r3, 80053ba <_strtod_r+0x8ba>
 80053a0:	f1ba 0f00 	cmp.w	sl, #0
 80053a4:	d109      	bne.n	80053ba <_strtod_r+0x8ba>
 80053a6:	e76b      	b.n	8005280 <_strtod_r+0x780>
 80053a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80053ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80053b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80053b4:	f04f 3aff 	mov.w	sl, #4294967295
 80053b8:	e146      	b.n	8005648 <_strtod_r+0xb48>
 80053ba:	b117      	cbz	r7, 80053c2 <_strtod_r+0x8c2>
 80053bc:	ea17 0f0b 	tst.w	r7, fp
 80053c0:	e002      	b.n	80053c8 <_strtod_r+0x8c8>
 80053c2:	9b06      	ldr	r3, [sp, #24]
 80053c4:	ea13 0f0a 	tst.w	r3, sl
 80053c8:	f000 813e 	beq.w	8005648 <_strtod_r+0xb48>
 80053cc:	9b07      	ldr	r3, [sp, #28]
 80053ce:	9a03      	ldr	r2, [sp, #12]
 80053d0:	4650      	mov	r0, sl
 80053d2:	4659      	mov	r1, fp
 80053d4:	b153      	cbz	r3, 80053ec <_strtod_r+0x8ec>
 80053d6:	f7ff fb77 	bl	8004ac8 <sulp>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053e2:	f7fa ff53 	bl	800028c <__adddf3>
 80053e6:	4682      	mov	sl, r0
 80053e8:	468b      	mov	fp, r1
 80053ea:	e12d      	b.n	8005648 <_strtod_r+0xb48>
 80053ec:	f7ff fb6c 	bl	8004ac8 <sulp>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053f8:	f7fa ff46 	bl	8000288 <__aeabi_dsub>
 80053fc:	2200      	movs	r2, #0
 80053fe:	2300      	movs	r3, #0
 8005400:	4682      	mov	sl, r0
 8005402:	468b      	mov	fp, r1
 8005404:	f7fb fb5c 	bl	8000ac0 <__aeabi_dcmpeq>
 8005408:	2800      	cmp	r0, #0
 800540a:	f47f af49 	bne.w	80052a0 <_strtod_r+0x7a0>
 800540e:	e11b      	b.n	8005648 <_strtod_r+0xb48>
 8005410:	4629      	mov	r1, r5
 8005412:	4620      	mov	r0, r4
 8005414:	f005 f90b 	bl	800a62e <__ratio>
 8005418:	ec57 6b10 	vmov	r6, r7, d0
 800541c:	2200      	movs	r2, #0
 800541e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005422:	ee10 0a10 	vmov	r0, s0
 8005426:	4639      	mov	r1, r7
 8005428:	f7fb fb5e 	bl	8000ae8 <__aeabi_dcmple>
 800542c:	2800      	cmp	r0, #0
 800542e:	d042      	beq.n	80054b6 <_strtod_r+0x9b6>
 8005430:	9b07      	ldr	r3, [sp, #28]
 8005432:	b123      	cbz	r3, 800543e <_strtod_r+0x93e>
 8005434:	f04f 0800 	mov.w	r8, #0
 8005438:	f8df 9040 	ldr.w	r9, [pc, #64]	; 800547c <_strtod_r+0x97c>
 800543c:	e011      	b.n	8005462 <_strtod_r+0x962>
 800543e:	f1ba 0f00 	cmp.w	sl, #0
 8005442:	d103      	bne.n	800544c <_strtod_r+0x94c>
 8005444:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005448:	b93b      	cbnz	r3, 800545a <_strtod_r+0x95a>
 800544a:	e01b      	b.n	8005484 <_strtod_r+0x984>
 800544c:	f1ba 0f01 	cmp.w	sl, #1
 8005450:	d103      	bne.n	800545a <_strtod_r+0x95a>
 8005452:	f1bb 0f00 	cmp.w	fp, #0
 8005456:	f43f af23 	beq.w	80052a0 <_strtod_r+0x7a0>
 800545a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8005480 <_strtod_r+0x980>
 800545e:	f04f 0800 	mov.w	r8, #0
 8005462:	2600      	movs	r6, #0
 8005464:	4f05      	ldr	r7, [pc, #20]	; (800547c <_strtod_r+0x97c>)
 8005466:	e039      	b.n	80054dc <_strtod_r+0x9dc>
 8005468:	fffffc02 	.word	0xfffffc02
 800546c:	fffffbe2 	.word	0xfffffbe2
 8005470:	000fffff 	.word	0x000fffff
 8005474:	7ff00000 	.word	0x7ff00000
 8005478:	7fefffff 	.word	0x7fefffff
 800547c:	3ff00000 	.word	0x3ff00000
 8005480:	bff00000 	.word	0xbff00000
 8005484:	2200      	movs	r2, #0
 8005486:	4b98      	ldr	r3, [pc, #608]	; (80056e8 <_strtod_r+0xbe8>)
 8005488:	4630      	mov	r0, r6
 800548a:	4639      	mov	r1, r7
 800548c:	f7fb fb22 	bl	8000ad4 <__aeabi_dcmplt>
 8005490:	b940      	cbnz	r0, 80054a4 <_strtod_r+0x9a4>
 8005492:	4630      	mov	r0, r6
 8005494:	4639      	mov	r1, r7
 8005496:	2200      	movs	r2, #0
 8005498:	4b94      	ldr	r3, [pc, #592]	; (80056ec <_strtod_r+0xbec>)
 800549a:	f7fb f8a9 	bl	80005f0 <__aeabi_dmul>
 800549e:	4606      	mov	r6, r0
 80054a0:	460f      	mov	r7, r1
 80054a2:	e001      	b.n	80054a8 <_strtod_r+0x9a8>
 80054a4:	4f91      	ldr	r7, [pc, #580]	; (80056ec <_strtod_r+0xbec>)
 80054a6:	2600      	movs	r6, #0
 80054a8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80054ac:	9614      	str	r6, [sp, #80]	; 0x50
 80054ae:	9315      	str	r3, [sp, #84]	; 0x54
 80054b0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80054b4:	e012      	b.n	80054dc <_strtod_r+0x9dc>
 80054b6:	4b8d      	ldr	r3, [pc, #564]	; (80056ec <_strtod_r+0xbec>)
 80054b8:	4630      	mov	r0, r6
 80054ba:	4639      	mov	r1, r7
 80054bc:	2200      	movs	r2, #0
 80054be:	f7fb f897 	bl	80005f0 <__aeabi_dmul>
 80054c2:	9b07      	ldr	r3, [sp, #28]
 80054c4:	4606      	mov	r6, r0
 80054c6:	460f      	mov	r7, r1
 80054c8:	b923      	cbnz	r3, 80054d4 <_strtod_r+0x9d4>
 80054ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054ce:	900e      	str	r0, [sp, #56]	; 0x38
 80054d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80054d2:	e001      	b.n	80054d8 <_strtod_r+0x9d8>
 80054d4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 80054d8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80054dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80054e0:	0d1b      	lsrs	r3, r3, #20
 80054e2:	051b      	lsls	r3, r3, #20
 80054e4:	9306      	str	r3, [sp, #24]
 80054e6:	9a06      	ldr	r2, [sp, #24]
 80054e8:	4b81      	ldr	r3, [pc, #516]	; (80056f0 <_strtod_r+0xbf0>)
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d12b      	bne.n	8005546 <_strtod_r+0xa46>
 80054ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80054f6:	ec4b ab10 	vmov	d0, sl, fp
 80054fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80054fe:	f004 ffd3 	bl	800a4a8 <__ulp>
 8005502:	4640      	mov	r0, r8
 8005504:	ec53 2b10 	vmov	r2, r3, d0
 8005508:	4649      	mov	r1, r9
 800550a:	f7fb f871 	bl	80005f0 <__aeabi_dmul>
 800550e:	4652      	mov	r2, sl
 8005510:	465b      	mov	r3, fp
 8005512:	f7fa febb 	bl	800028c <__adddf3>
 8005516:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800551a:	0d1b      	lsrs	r3, r3, #20
 800551c:	4a75      	ldr	r2, [pc, #468]	; (80056f4 <_strtod_r+0xbf4>)
 800551e:	051b      	lsls	r3, r3, #20
 8005520:	4293      	cmp	r3, r2
 8005522:	4682      	mov	sl, r0
 8005524:	d90c      	bls.n	8005540 <_strtod_r+0xa40>
 8005526:	4b74      	ldr	r3, [pc, #464]	; (80056f8 <_strtod_r+0xbf8>)
 8005528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800552a:	429a      	cmp	r2, r3
 800552c:	d103      	bne.n	8005536 <_strtod_r+0xa36>
 800552e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005530:	3301      	adds	r3, #1
 8005532:	f43f ad2c 	beq.w	8004f8e <_strtod_r+0x48e>
 8005536:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 80056f8 <_strtod_r+0xbf8>
 800553a:	f04f 3aff 	mov.w	sl, #4294967295
 800553e:	e072      	b.n	8005626 <_strtod_r+0xb26>
 8005540:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8005544:	e038      	b.n	80055b8 <_strtod_r+0xab8>
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	b333      	cbz	r3, 8005598 <_strtod_r+0xa98>
 800554a:	9b06      	ldr	r3, [sp, #24]
 800554c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005550:	d822      	bhi.n	8005598 <_strtod_r+0xa98>
 8005552:	a35d      	add	r3, pc, #372	; (adr r3, 80056c8 <_strtod_r+0xbc8>)
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	4630      	mov	r0, r6
 800555a:	4639      	mov	r1, r7
 800555c:	f7fb fac4 	bl	8000ae8 <__aeabi_dcmple>
 8005560:	b1a8      	cbz	r0, 800558e <_strtod_r+0xa8e>
 8005562:	4639      	mov	r1, r7
 8005564:	4630      	mov	r0, r6
 8005566:	f7fb fb1b 	bl	8000ba0 <__aeabi_d2uiz>
 800556a:	2800      	cmp	r0, #0
 800556c:	bf08      	it	eq
 800556e:	2001      	moveq	r0, #1
 8005570:	f7fa ffc8 	bl	8000504 <__aeabi_ui2d>
 8005574:	9b07      	ldr	r3, [sp, #28]
 8005576:	4606      	mov	r6, r0
 8005578:	460f      	mov	r7, r1
 800557a:	b923      	cbnz	r3, 8005586 <_strtod_r+0xa86>
 800557c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005580:	9010      	str	r0, [sp, #64]	; 0x40
 8005582:	9311      	str	r3, [sp, #68]	; 0x44
 8005584:	e001      	b.n	800558a <_strtod_r+0xa8a>
 8005586:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800558a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800558e:	9a06      	ldr	r2, [sp, #24]
 8005590:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 8005594:	ebc2 0903 	rsb	r9, r2, r3
 8005598:	ed9d 0b08 	vldr	d0, [sp, #32]
 800559c:	f004 ff84 	bl	800a4a8 <__ulp>
 80055a0:	4640      	mov	r0, r8
 80055a2:	ec53 2b10 	vmov	r2, r3, d0
 80055a6:	4649      	mov	r1, r9
 80055a8:	f7fb f822 	bl	80005f0 <__aeabi_dmul>
 80055ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055b0:	f7fa fe6c 	bl	800028c <__adddf3>
 80055b4:	4682      	mov	sl, r0
 80055b6:	468b      	mov	fp, r1
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	bba3      	cbnz	r3, 8005626 <_strtod_r+0xb26>
 80055bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80055c0:	0d1b      	lsrs	r3, r3, #20
 80055c2:	9a06      	ldr	r2, [sp, #24]
 80055c4:	051b      	lsls	r3, r3, #20
 80055c6:	429a      	cmp	r2, r3
 80055c8:	46d8      	mov	r8, fp
 80055ca:	d12c      	bne.n	8005626 <_strtod_r+0xb26>
 80055cc:	4639      	mov	r1, r7
 80055ce:	4630      	mov	r0, r6
 80055d0:	f7fb fabe 	bl	8000b50 <__aeabi_d2iz>
 80055d4:	f7fa ffa6 	bl	8000524 <__aeabi_i2d>
 80055d8:	460b      	mov	r3, r1
 80055da:	4602      	mov	r2, r0
 80055dc:	4639      	mov	r1, r7
 80055de:	4630      	mov	r0, r6
 80055e0:	f7fa fe52 	bl	8000288 <__aeabi_dsub>
 80055e4:	9b07      	ldr	r3, [sp, #28]
 80055e6:	4606      	mov	r6, r0
 80055e8:	460f      	mov	r7, r1
 80055ea:	b92b      	cbnz	r3, 80055f8 <_strtod_r+0xaf8>
 80055ec:	f1ba 0f00 	cmp.w	sl, #0
 80055f0:	d102      	bne.n	80055f8 <_strtod_r+0xaf8>
 80055f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80055f6:	b183      	cbz	r3, 800561a <_strtod_r+0xb1a>
 80055f8:	a335      	add	r3, pc, #212	; (adr r3, 80056d0 <_strtod_r+0xbd0>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	4630      	mov	r0, r6
 8005600:	4639      	mov	r1, r7
 8005602:	f7fb fa67 	bl	8000ad4 <__aeabi_dcmplt>
 8005606:	2800      	cmp	r0, #0
 8005608:	d131      	bne.n	800566e <_strtod_r+0xb6e>
 800560a:	a333      	add	r3, pc, #204	; (adr r3, 80056d8 <_strtod_r+0xbd8>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	4630      	mov	r0, r6
 8005612:	4639      	mov	r1, r7
 8005614:	f7fb fa7c 	bl	8000b10 <__aeabi_dcmpgt>
 8005618:	e004      	b.n	8005624 <_strtod_r+0xb24>
 800561a:	a331      	add	r3, pc, #196	; (adr r3, 80056e0 <_strtod_r+0xbe0>)
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f7fb fa58 	bl	8000ad4 <__aeabi_dcmplt>
 8005624:	bb18      	cbnz	r0, 800566e <_strtod_r+0xb6e>
 8005626:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005628:	9802      	ldr	r0, [sp, #8]
 800562a:	f004 fcab 	bl	8009f84 <_Bfree>
 800562e:	9904      	ldr	r1, [sp, #16]
 8005630:	9802      	ldr	r0, [sp, #8]
 8005632:	f004 fca7 	bl	8009f84 <_Bfree>
 8005636:	4629      	mov	r1, r5
 8005638:	9802      	ldr	r0, [sp, #8]
 800563a:	f004 fca3 	bl	8009f84 <_Bfree>
 800563e:	4621      	mov	r1, r4
 8005640:	9802      	ldr	r0, [sp, #8]
 8005642:	f004 fc9f 	bl	8009f84 <_Bfree>
 8005646:	e56d      	b.n	8005124 <_strtod_r+0x624>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	b183      	cbz	r3, 800566e <_strtod_r+0xb6e>
 800564c:	4b2b      	ldr	r3, [pc, #172]	; (80056fc <_strtod_r+0xbfc>)
 800564e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005650:	2300      	movs	r3, #0
 8005652:	930a      	str	r3, [sp, #40]	; 0x28
 8005654:	4650      	mov	r0, sl
 8005656:	4659      	mov	r1, fp
 8005658:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800565c:	f7fa ffc8 	bl	80005f0 <__aeabi_dmul>
 8005660:	4682      	mov	sl, r0
 8005662:	468b      	mov	fp, r1
 8005664:	b919      	cbnz	r1, 800566e <_strtod_r+0xb6e>
 8005666:	b910      	cbnz	r0, 800566e <_strtod_r+0xb6e>
 8005668:	9a02      	ldr	r2, [sp, #8]
 800566a:	2322      	movs	r3, #34	; 0x22
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005670:	9802      	ldr	r0, [sp, #8]
 8005672:	f004 fc87 	bl	8009f84 <_Bfree>
 8005676:	9904      	ldr	r1, [sp, #16]
 8005678:	9802      	ldr	r0, [sp, #8]
 800567a:	f004 fc83 	bl	8009f84 <_Bfree>
 800567e:	4629      	mov	r1, r5
 8005680:	9802      	ldr	r0, [sp, #8]
 8005682:	f004 fc7f 	bl	8009f84 <_Bfree>
 8005686:	9905      	ldr	r1, [sp, #20]
 8005688:	9802      	ldr	r0, [sp, #8]
 800568a:	f004 fc7b 	bl	8009f84 <_Bfree>
 800568e:	4621      	mov	r1, r4
 8005690:	9802      	ldr	r0, [sp, #8]
 8005692:	f004 fc77 	bl	8009f84 <_Bfree>
 8005696:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005698:	b113      	cbz	r3, 80056a0 <_strtod_r+0xba0>
 800569a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800569c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056a2:	b11b      	cbz	r3, 80056ac <_strtod_r+0xbac>
 80056a4:	4652      	mov	r2, sl
 80056a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056aa:	e007      	b.n	80056bc <_strtod_r+0xbbc>
 80056ac:	4652      	mov	r2, sl
 80056ae:	465b      	mov	r3, fp
 80056b0:	e004      	b.n	80056bc <_strtod_r+0xbbc>
 80056b2:	2500      	movs	r5, #0
 80056b4:	462a      	mov	r2, r5
 80056b6:	2101      	movs	r1, #1
 80056b8:	f7ff bb41 	b.w	8004d3e <_strtod_r+0x23e>
 80056bc:	ec43 2b10 	vmov	d0, r2, r3
 80056c0:	b01d      	add	sp, #116	; 0x74
 80056c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c6:	bf00      	nop
 80056c8:	ffc00000 	.word	0xffc00000
 80056cc:	41dfffff 	.word	0x41dfffff
 80056d0:	94a03595 	.word	0x94a03595
 80056d4:	3fdfffff 	.word	0x3fdfffff
 80056d8:	35afe535 	.word	0x35afe535
 80056dc:	3fe00000 	.word	0x3fe00000
 80056e0:	94a03595 	.word	0x94a03595
 80056e4:	3fcfffff 	.word	0x3fcfffff
 80056e8:	3ff00000 	.word	0x3ff00000
 80056ec:	3fe00000 	.word	0x3fe00000
 80056f0:	7fe00000 	.word	0x7fe00000
 80056f4:	7c9fffff 	.word	0x7c9fffff
 80056f8:	7fefffff 	.word	0x7fefffff
 80056fc:	39500000 	.word	0x39500000

08005700 <strtod>:
 8005700:	4b02      	ldr	r3, [pc, #8]	; (800570c <strtod+0xc>)
 8005702:	460a      	mov	r2, r1
 8005704:	4601      	mov	r1, r0
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	f7ff b9fa 	b.w	8004b00 <_strtod_r>
 800570c:	20000120 	.word	0x20000120

08005710 <_strtol_r>:
 8005710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005714:	4680      	mov	r8, r0
 8005716:	4840      	ldr	r0, [pc, #256]	; (8005818 <_strtol_r+0x108>)
 8005718:	f8d0 9000 	ldr.w	r9, [r0]
 800571c:	460f      	mov	r7, r1
 800571e:	463d      	mov	r5, r7
 8005720:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005724:	eb09 0004 	add.w	r0, r9, r4
 8005728:	7840      	ldrb	r0, [r0, #1]
 800572a:	f000 0008 	and.w	r0, r0, #8
 800572e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8005732:	b108      	cbz	r0, 8005738 <_strtol_r+0x28>
 8005734:	462f      	mov	r7, r5
 8005736:	e7f2      	b.n	800571e <_strtol_r+0xe>
 8005738:	2c2d      	cmp	r4, #45	; 0x2d
 800573a:	d103      	bne.n	8005744 <_strtol_r+0x34>
 800573c:	1cbd      	adds	r5, r7, #2
 800573e:	787c      	ldrb	r4, [r7, #1]
 8005740:	2601      	movs	r6, #1
 8005742:	e003      	b.n	800574c <_strtol_r+0x3c>
 8005744:	2c2b      	cmp	r4, #43	; 0x2b
 8005746:	bf04      	itt	eq
 8005748:	787c      	ldrbeq	r4, [r7, #1]
 800574a:	1cbd      	addeq	r5, r7, #2
 800574c:	b113      	cbz	r3, 8005754 <_strtol_r+0x44>
 800574e:	2b10      	cmp	r3, #16
 8005750:	d10a      	bne.n	8005768 <_strtol_r+0x58>
 8005752:	e05b      	b.n	800580c <_strtol_r+0xfc>
 8005754:	2c30      	cmp	r4, #48	; 0x30
 8005756:	d157      	bne.n	8005808 <_strtol_r+0xf8>
 8005758:	7828      	ldrb	r0, [r5, #0]
 800575a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800575e:	2858      	cmp	r0, #88	; 0x58
 8005760:	d14d      	bne.n	80057fe <_strtol_r+0xee>
 8005762:	786c      	ldrb	r4, [r5, #1]
 8005764:	2310      	movs	r3, #16
 8005766:	3502      	adds	r5, #2
 8005768:	2e00      	cmp	r6, #0
 800576a:	bf14      	ite	ne
 800576c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8005770:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8005774:	2700      	movs	r7, #0
 8005776:	fbbc faf3 	udiv	sl, ip, r3
 800577a:	4638      	mov	r0, r7
 800577c:	fb03 cc1a 	mls	ip, r3, sl, ip
 8005780:	eb09 0e04 	add.w	lr, r9, r4
 8005784:	f89e e001 	ldrb.w	lr, [lr, #1]
 8005788:	f01e 0f04 	tst.w	lr, #4
 800578c:	d001      	beq.n	8005792 <_strtol_r+0x82>
 800578e:	3c30      	subs	r4, #48	; 0x30
 8005790:	e00b      	b.n	80057aa <_strtol_r+0x9a>
 8005792:	f01e 0e03 	ands.w	lr, lr, #3
 8005796:	d01b      	beq.n	80057d0 <_strtol_r+0xc0>
 8005798:	f1be 0f01 	cmp.w	lr, #1
 800579c:	bf0c      	ite	eq
 800579e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80057a2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80057a6:	ebce 0404 	rsb	r4, lr, r4
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	dd10      	ble.n	80057d0 <_strtol_r+0xc0>
 80057ae:	f1b7 3fff 	cmp.w	r7, #4294967295
 80057b2:	d00a      	beq.n	80057ca <_strtol_r+0xba>
 80057b4:	4550      	cmp	r0, sl
 80057b6:	d806      	bhi.n	80057c6 <_strtol_r+0xb6>
 80057b8:	d101      	bne.n	80057be <_strtol_r+0xae>
 80057ba:	4564      	cmp	r4, ip
 80057bc:	dc03      	bgt.n	80057c6 <_strtol_r+0xb6>
 80057be:	fb03 4000 	mla	r0, r3, r0, r4
 80057c2:	2701      	movs	r7, #1
 80057c4:	e001      	b.n	80057ca <_strtol_r+0xba>
 80057c6:	f04f 37ff 	mov.w	r7, #4294967295
 80057ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057ce:	e7d7      	b.n	8005780 <_strtol_r+0x70>
 80057d0:	1c7b      	adds	r3, r7, #1
 80057d2:	d10c      	bne.n	80057ee <_strtol_r+0xde>
 80057d4:	2e00      	cmp	r6, #0
 80057d6:	f04f 0322 	mov.w	r3, #34	; 0x22
 80057da:	bf14      	ite	ne
 80057dc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80057e0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80057e4:	f8c8 3000 	str.w	r3, [r8]
 80057e8:	b92a      	cbnz	r2, 80057f6 <_strtol_r+0xe6>
 80057ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ee:	b106      	cbz	r6, 80057f2 <_strtol_r+0xe2>
 80057f0:	4240      	negs	r0, r0
 80057f2:	b172      	cbz	r2, 8005812 <_strtol_r+0x102>
 80057f4:	b107      	cbz	r7, 80057f8 <_strtol_r+0xe8>
 80057f6:	1e69      	subs	r1, r5, #1
 80057f8:	6011      	str	r1, [r2, #0]
 80057fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fe:	2430      	movs	r4, #48	; 0x30
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1b1      	bne.n	8005768 <_strtol_r+0x58>
 8005804:	2308      	movs	r3, #8
 8005806:	e7af      	b.n	8005768 <_strtol_r+0x58>
 8005808:	230a      	movs	r3, #10
 800580a:	e7ad      	b.n	8005768 <_strtol_r+0x58>
 800580c:	2c30      	cmp	r4, #48	; 0x30
 800580e:	d0a3      	beq.n	8005758 <_strtol_r+0x48>
 8005810:	e7aa      	b.n	8005768 <_strtol_r+0x58>
 8005812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005816:	bf00      	nop
 8005818:	2000002c 	.word	0x2000002c

0800581c <strtol>:
 800581c:	4613      	mov	r3, r2
 800581e:	460a      	mov	r2, r1
 8005820:	4601      	mov	r1, r0
 8005822:	4802      	ldr	r0, [pc, #8]	; (800582c <strtol+0x10>)
 8005824:	6800      	ldr	r0, [r0, #0]
 8005826:	f7ff bf73 	b.w	8005710 <_strtol_r>
 800582a:	bf00      	nop
 800582c:	20000120 	.word	0x20000120

08005830 <_svfprintf_r>:
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	b0bd      	sub	sp, #244	; 0xf4
 8005836:	468b      	mov	fp, r1
 8005838:	9205      	str	r2, [sp, #20]
 800583a:	461f      	mov	r7, r3
 800583c:	4682      	mov	sl, r0
 800583e:	f004 fae5 	bl	8009e0c <_localeconv_r>
 8005842:	6803      	ldr	r3, [r0, #0]
 8005844:	930d      	str	r3, [sp, #52]	; 0x34
 8005846:	4618      	mov	r0, r3
 8005848:	f7fa fd12 	bl	8000270 <strlen>
 800584c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005850:	9008      	str	r0, [sp, #32]
 8005852:	0619      	lsls	r1, r3, #24
 8005854:	d515      	bpl.n	8005882 <_svfprintf_r+0x52>
 8005856:	f8db 3010 	ldr.w	r3, [fp, #16]
 800585a:	b993      	cbnz	r3, 8005882 <_svfprintf_r+0x52>
 800585c:	2140      	movs	r1, #64	; 0x40
 800585e:	4650      	mov	r0, sl
 8005860:	f7fe fec6 	bl	80045f0 <_malloc_r>
 8005864:	f8cb 0000 	str.w	r0, [fp]
 8005868:	f8cb 0010 	str.w	r0, [fp, #16]
 800586c:	b930      	cbnz	r0, 800587c <_svfprintf_r+0x4c>
 800586e:	230c      	movs	r3, #12
 8005870:	f8ca 3000 	str.w	r3, [sl]
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	f000 bf95 	b.w	80067a6 <_svfprintf_r+0xf76>
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	f8cb 3014 	str.w	r3, [fp, #20]
 8005882:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8005ae8 <_svfprintf_r+0x2b8>
 8005886:	ed8d 7b06 	vstr	d7, [sp, #24]
 800588a:	2300      	movs	r3, #0
 800588c:	ac2c      	add	r4, sp, #176	; 0xb0
 800588e:	941f      	str	r4, [sp, #124]	; 0x7c
 8005890:	9321      	str	r3, [sp, #132]	; 0x84
 8005892:	9320      	str	r3, [sp, #128]	; 0x80
 8005894:	9304      	str	r3, [sp, #16]
 8005896:	9311      	str	r3, [sp, #68]	; 0x44
 8005898:	9310      	str	r3, [sp, #64]	; 0x40
 800589a:	930a      	str	r3, [sp, #40]	; 0x28
 800589c:	9d05      	ldr	r5, [sp, #20]
 800589e:	462b      	mov	r3, r5
 80058a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058a4:	b11a      	cbz	r2, 80058ae <_svfprintf_r+0x7e>
 80058a6:	2a25      	cmp	r2, #37	; 0x25
 80058a8:	d001      	beq.n	80058ae <_svfprintf_r+0x7e>
 80058aa:	461d      	mov	r5, r3
 80058ac:	e7f7      	b.n	800589e <_svfprintf_r+0x6e>
 80058ae:	9b05      	ldr	r3, [sp, #20]
 80058b0:	1aee      	subs	r6, r5, r3
 80058b2:	d017      	beq.n	80058e4 <_svfprintf_r+0xb4>
 80058b4:	e884 0048 	stmia.w	r4, {r3, r6}
 80058b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058ba:	4433      	add	r3, r6
 80058bc:	9321      	str	r3, [sp, #132]	; 0x84
 80058be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058c0:	3301      	adds	r3, #1
 80058c2:	2b07      	cmp	r3, #7
 80058c4:	9320      	str	r3, [sp, #128]	; 0x80
 80058c6:	dc01      	bgt.n	80058cc <_svfprintf_r+0x9c>
 80058c8:	3408      	adds	r4, #8
 80058ca:	e008      	b.n	80058de <_svfprintf_r+0xae>
 80058cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80058ce:	4659      	mov	r1, fp
 80058d0:	4650      	mov	r0, sl
 80058d2:	f005 f959 	bl	800ab88 <__ssprint_r>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f040 862c 	bne.w	8006534 <_svfprintf_r+0xd04>
 80058dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80058de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e0:	4433      	add	r3, r6
 80058e2:	930a      	str	r3, [sp, #40]	; 0x28
 80058e4:	782b      	ldrb	r3, [r5, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 861d 	beq.w	8006526 <_svfprintf_r+0xcf6>
 80058ec:	2200      	movs	r2, #0
 80058ee:	1c6b      	adds	r3, r5, #1
 80058f0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80058f4:	4611      	mov	r1, r2
 80058f6:	f04f 39ff 	mov.w	r9, #4294967295
 80058fa:	9209      	str	r2, [sp, #36]	; 0x24
 80058fc:	4615      	mov	r5, r2
 80058fe:	200a      	movs	r0, #10
 8005900:	1c5e      	adds	r6, r3, #1
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	9605      	str	r6, [sp, #20]
 8005906:	9302      	str	r3, [sp, #8]
 8005908:	9b02      	ldr	r3, [sp, #8]
 800590a:	3b20      	subs	r3, #32
 800590c:	2b58      	cmp	r3, #88	; 0x58
 800590e:	f200 8263 	bhi.w	8005dd8 <_svfprintf_r+0x5a8>
 8005912:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005916:	005c      	.short	0x005c
 8005918:	02610261 	.word	0x02610261
 800591c:	0261006b 	.word	0x0261006b
 8005920:	02610261 	.word	0x02610261
 8005924:	02610261 	.word	0x02610261
 8005928:	006e0261 	.word	0x006e0261
 800592c:	02610059 	.word	0x02610059
 8005930:	007c0079 	.word	0x007c0079
 8005934:	00a30261 	.word	0x00a30261
 8005938:	00a600a6 	.word	0x00a600a6
 800593c:	00a600a6 	.word	0x00a600a6
 8005940:	00a600a6 	.word	0x00a600a6
 8005944:	00a600a6 	.word	0x00a600a6
 8005948:	026100a6 	.word	0x026100a6
 800594c:	02610261 	.word	0x02610261
 8005950:	02610261 	.word	0x02610261
 8005954:	02610261 	.word	0x02610261
 8005958:	02610261 	.word	0x02610261
 800595c:	00d60261 	.word	0x00d60261
 8005960:	0261010b 	.word	0x0261010b
 8005964:	0261010b 	.word	0x0261010b
 8005968:	02610261 	.word	0x02610261
 800596c:	00b90261 	.word	0x00b90261
 8005970:	02610261 	.word	0x02610261
 8005974:	02610152 	.word	0x02610152
 8005978:	02610261 	.word	0x02610261
 800597c:	02610261 	.word	0x02610261
 8005980:	02610199 	.word	0x02610199
 8005984:	00660261 	.word	0x00660261
 8005988:	02610261 	.word	0x02610261
 800598c:	02610261 	.word	0x02610261
 8005990:	02610261 	.word	0x02610261
 8005994:	02610261 	.word	0x02610261
 8005998:	02610261 	.word	0x02610261
 800599c:	006100cd 	.word	0x006100cd
 80059a0:	010b010b 	.word	0x010b010b
 80059a4:	00bc010b 	.word	0x00bc010b
 80059a8:	02610061 	.word	0x02610061
 80059ac:	00bf0261 	.word	0x00bf0261
 80059b0:	01340261 	.word	0x01340261
 80059b4:	016f0154 	.word	0x016f0154
 80059b8:	026100ca 	.word	0x026100ca
 80059bc:	02610180 	.word	0x02610180
 80059c0:	0261019b 	.word	0x0261019b
 80059c4:	01b30261 	.word	0x01b30261
 80059c8:	2201      	movs	r2, #1
 80059ca:	212b      	movs	r1, #43	; 0x2b
 80059cc:	e002      	b.n	80059d4 <_svfprintf_r+0x1a4>
 80059ce:	b909      	cbnz	r1, 80059d4 <_svfprintf_r+0x1a4>
 80059d0:	2201      	movs	r2, #1
 80059d2:	2120      	movs	r1, #32
 80059d4:	9b05      	ldr	r3, [sp, #20]
 80059d6:	e793      	b.n	8005900 <_svfprintf_r+0xd0>
 80059d8:	2a00      	cmp	r2, #0
 80059da:	d077      	beq.n	8005acc <_svfprintf_r+0x29c>
 80059dc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80059e0:	e074      	b.n	8005acc <_svfprintf_r+0x29c>
 80059e2:	b10a      	cbz	r2, 80059e8 <_svfprintf_r+0x1b8>
 80059e4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80059e8:	4b41      	ldr	r3, [pc, #260]	; (8005af0 <_svfprintf_r+0x2c0>)
 80059ea:	e14b      	b.n	8005c84 <_svfprintf_r+0x454>
 80059ec:	f045 0501 	orr.w	r5, r5, #1
 80059f0:	e7f0      	b.n	80059d4 <_svfprintf_r+0x1a4>
 80059f2:	683e      	ldr	r6, [r7, #0]
 80059f4:	9609      	str	r6, [sp, #36]	; 0x24
 80059f6:	2e00      	cmp	r6, #0
 80059f8:	f107 0304 	add.w	r3, r7, #4
 80059fc:	db01      	blt.n	8005a02 <_svfprintf_r+0x1d2>
 80059fe:	461f      	mov	r7, r3
 8005a00:	e7e8      	b.n	80059d4 <_svfprintf_r+0x1a4>
 8005a02:	4276      	negs	r6, r6
 8005a04:	9609      	str	r6, [sp, #36]	; 0x24
 8005a06:	461f      	mov	r7, r3
 8005a08:	f045 0504 	orr.w	r5, r5, #4
 8005a0c:	e7e2      	b.n	80059d4 <_svfprintf_r+0x1a4>
 8005a0e:	9e05      	ldr	r6, [sp, #20]
 8005a10:	9b05      	ldr	r3, [sp, #20]
 8005a12:	7836      	ldrb	r6, [r6, #0]
 8005a14:	9602      	str	r6, [sp, #8]
 8005a16:	2e2a      	cmp	r6, #42	; 0x2a
 8005a18:	f103 0301 	add.w	r3, r3, #1
 8005a1c:	d002      	beq.n	8005a24 <_svfprintf_r+0x1f4>
 8005a1e:	f04f 0900 	mov.w	r9, #0
 8005a22:	e00a      	b.n	8005a3a <_svfprintf_r+0x20a>
 8005a24:	f8d7 9000 	ldr.w	r9, [r7]
 8005a28:	9305      	str	r3, [sp, #20]
 8005a2a:	1d3e      	adds	r6, r7, #4
 8005a2c:	f1b9 0f00 	cmp.w	r9, #0
 8005a30:	4637      	mov	r7, r6
 8005a32:	dacf      	bge.n	80059d4 <_svfprintf_r+0x1a4>
 8005a34:	f04f 39ff 	mov.w	r9, #4294967295
 8005a38:	e7cc      	b.n	80059d4 <_svfprintf_r+0x1a4>
 8005a3a:	9305      	str	r3, [sp, #20]
 8005a3c:	9b02      	ldr	r3, [sp, #8]
 8005a3e:	3b30      	subs	r3, #48	; 0x30
 8005a40:	2b09      	cmp	r3, #9
 8005a42:	d808      	bhi.n	8005a56 <_svfprintf_r+0x226>
 8005a44:	fb00 3909 	mla	r9, r0, r9, r3
 8005a48:	9b05      	ldr	r3, [sp, #20]
 8005a4a:	461e      	mov	r6, r3
 8005a4c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005a50:	9302      	str	r3, [sp, #8]
 8005a52:	4633      	mov	r3, r6
 8005a54:	e7f1      	b.n	8005a3a <_svfprintf_r+0x20a>
 8005a56:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8005a5a:	e755      	b.n	8005908 <_svfprintf_r+0xd8>
 8005a5c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005a60:	e7b8      	b.n	80059d4 <_svfprintf_r+0x1a4>
 8005a62:	2300      	movs	r3, #0
 8005a64:	9309      	str	r3, [sp, #36]	; 0x24
 8005a66:	9b02      	ldr	r3, [sp, #8]
 8005a68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005a6a:	3b30      	subs	r3, #48	; 0x30
 8005a6c:	fb00 3306 	mla	r3, r0, r6, r3
 8005a70:	9309      	str	r3, [sp, #36]	; 0x24
 8005a72:	9b05      	ldr	r3, [sp, #20]
 8005a74:	461e      	mov	r6, r3
 8005a76:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005a7a:	9302      	str	r3, [sp, #8]
 8005a7c:	9b02      	ldr	r3, [sp, #8]
 8005a7e:	9605      	str	r6, [sp, #20]
 8005a80:	3b30      	subs	r3, #48	; 0x30
 8005a82:	2b09      	cmp	r3, #9
 8005a84:	d9ef      	bls.n	8005a66 <_svfprintf_r+0x236>
 8005a86:	e73f      	b.n	8005908 <_svfprintf_r+0xd8>
 8005a88:	f045 0508 	orr.w	r5, r5, #8
 8005a8c:	e7a2      	b.n	80059d4 <_svfprintf_r+0x1a4>
 8005a8e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8005a92:	e79f      	b.n	80059d4 <_svfprintf_r+0x1a4>
 8005a94:	9b05      	ldr	r3, [sp, #20]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b6c      	cmp	r3, #108	; 0x6c
 8005a9a:	d103      	bne.n	8005aa4 <_svfprintf_r+0x274>
 8005a9c:	9b05      	ldr	r3, [sp, #20]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	9305      	str	r3, [sp, #20]
 8005aa2:	e002      	b.n	8005aaa <_svfprintf_r+0x27a>
 8005aa4:	f045 0510 	orr.w	r5, r5, #16
 8005aa8:	e794      	b.n	80059d4 <_svfprintf_r+0x1a4>
 8005aaa:	f045 0520 	orr.w	r5, r5, #32
 8005aae:	e791      	b.n	80059d4 <_svfprintf_r+0x1a4>
 8005ab0:	1d3b      	adds	r3, r7, #4
 8005ab2:	9303      	str	r3, [sp, #12]
 8005ab4:	2600      	movs	r6, #0
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005abc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005ac0:	e199      	b.n	8005df6 <_svfprintf_r+0x5c6>
 8005ac2:	b10a      	cbz	r2, 8005ac8 <_svfprintf_r+0x298>
 8005ac4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005ac8:	f045 0510 	orr.w	r5, r5, #16
 8005acc:	06aa      	lsls	r2, r5, #26
 8005ace:	d511      	bpl.n	8005af4 <_svfprintf_r+0x2c4>
 8005ad0:	3707      	adds	r7, #7
 8005ad2:	f027 0707 	bic.w	r7, r7, #7
 8005ad6:	f107 0308 	add.w	r3, r7, #8
 8005ada:	9303      	str	r3, [sp, #12]
 8005adc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005ae0:	e017      	b.n	8005b12 <_svfprintf_r+0x2e2>
 8005ae2:	bf00      	nop
 8005ae4:	f3af 8000 	nop.w
	...
 8005af0:	0800cd00 	.word	0x0800cd00
 8005af4:	f015 0f10 	tst.w	r5, #16
 8005af8:	f107 0304 	add.w	r3, r7, #4
 8005afc:	d002      	beq.n	8005b04 <_svfprintf_r+0x2d4>
 8005afe:	9303      	str	r3, [sp, #12]
 8005b00:	683e      	ldr	r6, [r7, #0]
 8005b02:	e005      	b.n	8005b10 <_svfprintf_r+0x2e0>
 8005b04:	683e      	ldr	r6, [r7, #0]
 8005b06:	9303      	str	r3, [sp, #12]
 8005b08:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b0c:	bf18      	it	ne
 8005b0e:	b236      	sxthne	r6, r6
 8005b10:	17f7      	asrs	r7, r6, #31
 8005b12:	2e00      	cmp	r6, #0
 8005b14:	f177 0300 	sbcs.w	r3, r7, #0
 8005b18:	f280 80de 	bge.w	8005cd8 <_svfprintf_r+0x4a8>
 8005b1c:	4276      	negs	r6, r6
 8005b1e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8005b22:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005b26:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005b2a:	e0d5      	b.n	8005cd8 <_svfprintf_r+0x4a8>
 8005b2c:	b10a      	cbz	r2, 8005b32 <_svfprintf_r+0x302>
 8005b2e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005b32:	3707      	adds	r7, #7
 8005b34:	f027 0707 	bic.w	r7, r7, #7
 8005b38:	f107 0308 	add.w	r3, r7, #8
 8005b3c:	9303      	str	r3, [sp, #12]
 8005b3e:	ed97 7b00 	vldr	d7, [r7]
 8005b42:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005b46:	9b06      	ldr	r3, [sp, #24]
 8005b48:	9312      	str	r3, [sp, #72]	; 0x48
 8005b4a:	9b07      	ldr	r3, [sp, #28]
 8005b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b50:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b52:	f04f 32ff 	mov.w	r2, #4294967295
 8005b56:	4bab      	ldr	r3, [pc, #684]	; (8005e04 <_svfprintf_r+0x5d4>)
 8005b58:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005b5c:	f7fa ffe2 	bl	8000b24 <__aeabi_dcmpun>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	f040 84f1 	bne.w	8006548 <_svfprintf_r+0xd18>
 8005b66:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6a:	4ba6      	ldr	r3, [pc, #664]	; (8005e04 <_svfprintf_r+0x5d4>)
 8005b6c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005b70:	f7fa ffba 	bl	8000ae8 <__aeabi_dcmple>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f040 84e7 	bne.w	8006548 <_svfprintf_r+0xd18>
 8005b7a:	f000 bdfd 	b.w	8006778 <_svfprintf_r+0xf48>
 8005b7e:	b10a      	cbz	r2, 8005b84 <_svfprintf_r+0x354>
 8005b80:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005b84:	f015 0f20 	tst.w	r5, #32
 8005b88:	f107 0304 	add.w	r3, r7, #4
 8005b8c:	d007      	beq.n	8005b9e <_svfprintf_r+0x36e>
 8005b8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	17ce      	asrs	r6, r1, #31
 8005b94:	4608      	mov	r0, r1
 8005b96:	4631      	mov	r1, r6
 8005b98:	e9c2 0100 	strd	r0, r1, [r2]
 8005b9c:	e00b      	b.n	8005bb6 <_svfprintf_r+0x386>
 8005b9e:	06e9      	lsls	r1, r5, #27
 8005ba0:	d406      	bmi.n	8005bb0 <_svfprintf_r+0x380>
 8005ba2:	066a      	lsls	r2, r5, #25
 8005ba4:	d504      	bpl.n	8005bb0 <_svfprintf_r+0x380>
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8005bac:	8011      	strh	r1, [r2, #0]
 8005bae:	e002      	b.n	8005bb6 <_svfprintf_r+0x386>
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bb4:	6011      	str	r1, [r2, #0]
 8005bb6:	461f      	mov	r7, r3
 8005bb8:	e670      	b.n	800589c <_svfprintf_r+0x6c>
 8005bba:	f045 0510 	orr.w	r5, r5, #16
 8005bbe:	f015 0320 	ands.w	r3, r5, #32
 8005bc2:	d009      	beq.n	8005bd8 <_svfprintf_r+0x3a8>
 8005bc4:	3707      	adds	r7, #7
 8005bc6:	f027 0707 	bic.w	r7, r7, #7
 8005bca:	f107 0308 	add.w	r3, r7, #8
 8005bce:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005bd2:	9303      	str	r3, [sp, #12]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e07b      	b.n	8005cd0 <_svfprintf_r+0x4a0>
 8005bd8:	1d3a      	adds	r2, r7, #4
 8005bda:	f015 0110 	ands.w	r1, r5, #16
 8005bde:	9203      	str	r2, [sp, #12]
 8005be0:	d105      	bne.n	8005bee <_svfprintf_r+0x3be>
 8005be2:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005be6:	d002      	beq.n	8005bee <_svfprintf_r+0x3be>
 8005be8:	883e      	ldrh	r6, [r7, #0]
 8005bea:	2700      	movs	r7, #0
 8005bec:	e7f2      	b.n	8005bd4 <_svfprintf_r+0x3a4>
 8005bee:	683e      	ldr	r6, [r7, #0]
 8005bf0:	2700      	movs	r7, #0
 8005bf2:	e06d      	b.n	8005cd0 <_svfprintf_r+0x4a0>
 8005bf4:	1d3b      	adds	r3, r7, #4
 8005bf6:	9303      	str	r3, [sp, #12]
 8005bf8:	2330      	movs	r3, #48	; 0x30
 8005bfa:	2278      	movs	r2, #120	; 0x78
 8005bfc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005c00:	4b81      	ldr	r3, [pc, #516]	; (8005e08 <_svfprintf_r+0x5d8>)
 8005c02:	683e      	ldr	r6, [r7, #0]
 8005c04:	9311      	str	r3, [sp, #68]	; 0x44
 8005c06:	2700      	movs	r7, #0
 8005c08:	f045 0502 	orr.w	r5, r5, #2
 8005c0c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005c10:	2302      	movs	r3, #2
 8005c12:	9202      	str	r2, [sp, #8]
 8005c14:	e05c      	b.n	8005cd0 <_svfprintf_r+0x4a0>
 8005c16:	2600      	movs	r6, #0
 8005c18:	1d3b      	adds	r3, r7, #4
 8005c1a:	45b1      	cmp	r9, r6
 8005c1c:	9303      	str	r3, [sp, #12]
 8005c1e:	f8d7 8000 	ldr.w	r8, [r7]
 8005c22:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005c26:	db0a      	blt.n	8005c3e <_svfprintf_r+0x40e>
 8005c28:	464a      	mov	r2, r9
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	f7fa facf 	bl	80001d0 <memchr>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	f000 80ea 	beq.w	8005e0c <_svfprintf_r+0x5dc>
 8005c38:	ebc8 0900 	rsb	r9, r8, r0
 8005c3c:	e0e7      	b.n	8005e0e <_svfprintf_r+0x5de>
 8005c3e:	4640      	mov	r0, r8
 8005c40:	f7fa fb16 	bl	8000270 <strlen>
 8005c44:	4681      	mov	r9, r0
 8005c46:	e0e2      	b.n	8005e0e <_svfprintf_r+0x5de>
 8005c48:	f045 0510 	orr.w	r5, r5, #16
 8005c4c:	06ae      	lsls	r6, r5, #26
 8005c4e:	d508      	bpl.n	8005c62 <_svfprintf_r+0x432>
 8005c50:	3707      	adds	r7, #7
 8005c52:	f027 0707 	bic.w	r7, r7, #7
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	9303      	str	r3, [sp, #12]
 8005c5c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005c60:	e00a      	b.n	8005c78 <_svfprintf_r+0x448>
 8005c62:	1d3b      	adds	r3, r7, #4
 8005c64:	f015 0f10 	tst.w	r5, #16
 8005c68:	9303      	str	r3, [sp, #12]
 8005c6a:	d103      	bne.n	8005c74 <_svfprintf_r+0x444>
 8005c6c:	0668      	lsls	r0, r5, #25
 8005c6e:	d501      	bpl.n	8005c74 <_svfprintf_r+0x444>
 8005c70:	883e      	ldrh	r6, [r7, #0]
 8005c72:	e000      	b.n	8005c76 <_svfprintf_r+0x446>
 8005c74:	683e      	ldr	r6, [r7, #0]
 8005c76:	2700      	movs	r7, #0
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e029      	b.n	8005cd0 <_svfprintf_r+0x4a0>
 8005c7c:	b10a      	cbz	r2, 8005c82 <_svfprintf_r+0x452>
 8005c7e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005c82:	4b61      	ldr	r3, [pc, #388]	; (8005e08 <_svfprintf_r+0x5d8>)
 8005c84:	9311      	str	r3, [sp, #68]	; 0x44
 8005c86:	06a9      	lsls	r1, r5, #26
 8005c88:	d508      	bpl.n	8005c9c <_svfprintf_r+0x46c>
 8005c8a:	3707      	adds	r7, #7
 8005c8c:	f027 0707 	bic.w	r7, r7, #7
 8005c90:	f107 0308 	add.w	r3, r7, #8
 8005c94:	9303      	str	r3, [sp, #12]
 8005c96:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005c9a:	e00a      	b.n	8005cb2 <_svfprintf_r+0x482>
 8005c9c:	1d3b      	adds	r3, r7, #4
 8005c9e:	f015 0f10 	tst.w	r5, #16
 8005ca2:	9303      	str	r3, [sp, #12]
 8005ca4:	d103      	bne.n	8005cae <_svfprintf_r+0x47e>
 8005ca6:	066a      	lsls	r2, r5, #25
 8005ca8:	d501      	bpl.n	8005cae <_svfprintf_r+0x47e>
 8005caa:	883e      	ldrh	r6, [r7, #0]
 8005cac:	e000      	b.n	8005cb0 <_svfprintf_r+0x480>
 8005cae:	683e      	ldr	r6, [r7, #0]
 8005cb0:	2700      	movs	r7, #0
 8005cb2:	07eb      	lsls	r3, r5, #31
 8005cb4:	d50b      	bpl.n	8005cce <_svfprintf_r+0x49e>
 8005cb6:	ea56 0307 	orrs.w	r3, r6, r7
 8005cba:	d008      	beq.n	8005cce <_svfprintf_r+0x49e>
 8005cbc:	2330      	movs	r3, #48	; 0x30
 8005cbe:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005cc2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005cc6:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8005cca:	f045 0502 	orr.w	r5, r5, #2
 8005cce:	2302      	movs	r3, #2
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005cd6:	e000      	b.n	8005cda <_svfprintf_r+0x4aa>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f1b9 0f00 	cmp.w	r9, #0
 8005cde:	f2c0 855c 	blt.w	800679a <_svfprintf_r+0xf6a>
 8005ce2:	ea56 0207 	orrs.w	r2, r6, r7
 8005ce6:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8005cea:	d103      	bne.n	8005cf4 <_svfprintf_r+0x4c4>
 8005cec:	f1b9 0f00 	cmp.w	r9, #0
 8005cf0:	d05f      	beq.n	8005db2 <_svfprintf_r+0x582>
 8005cf2:	e006      	b.n	8005d02 <_svfprintf_r+0x4d2>
 8005cf4:	460d      	mov	r5, r1
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d025      	beq.n	8005d46 <_svfprintf_r+0x516>
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d046      	beq.n	8005d8c <_svfprintf_r+0x55c>
 8005cfe:	4629      	mov	r1, r5
 8005d00:	e007      	b.n	8005d12 <_svfprintf_r+0x4e2>
 8005d02:	460d      	mov	r5, r1
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d022      	beq.n	8005d4e <_svfprintf_r+0x51e>
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d03d      	beq.n	8005d88 <_svfprintf_r+0x558>
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	2600      	movs	r6, #0
 8005d10:	2700      	movs	r7, #0
 8005d12:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005d16:	08f2      	lsrs	r2, r6, #3
 8005d18:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8005d1c:	08f8      	lsrs	r0, r7, #3
 8005d1e:	f006 0307 	and.w	r3, r6, #7
 8005d22:	4607      	mov	r7, r0
 8005d24:	4616      	mov	r6, r2
 8005d26:	3330      	adds	r3, #48	; 0x30
 8005d28:	ea56 0207 	orrs.w	r2, r6, r7
 8005d2c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005d30:	d1f1      	bne.n	8005d16 <_svfprintf_r+0x4e6>
 8005d32:	07e8      	lsls	r0, r5, #31
 8005d34:	d548      	bpl.n	8005dc8 <_svfprintf_r+0x598>
 8005d36:	2b30      	cmp	r3, #48	; 0x30
 8005d38:	d046      	beq.n	8005dc8 <_svfprintf_r+0x598>
 8005d3a:	2330      	movs	r3, #48	; 0x30
 8005d3c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8005d40:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d44:	e040      	b.n	8005dc8 <_svfprintf_r+0x598>
 8005d46:	2f00      	cmp	r7, #0
 8005d48:	bf08      	it	eq
 8005d4a:	2e0a      	cmpeq	r6, #10
 8005d4c:	d205      	bcs.n	8005d5a <_svfprintf_r+0x52a>
 8005d4e:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005d52:	3630      	adds	r6, #48	; 0x30
 8005d54:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005d58:	e029      	b.n	8005dae <_svfprintf_r+0x57e>
 8005d5a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005d5e:	4630      	mov	r0, r6
 8005d60:	4639      	mov	r1, r7
 8005d62:	220a      	movs	r2, #10
 8005d64:	2300      	movs	r3, #0
 8005d66:	f7fa ff3b 	bl	8000be0 <__aeabi_uldivmod>
 8005d6a:	3230      	adds	r2, #48	; 0x30
 8005d6c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005d70:	2300      	movs	r3, #0
 8005d72:	4630      	mov	r0, r6
 8005d74:	4639      	mov	r1, r7
 8005d76:	220a      	movs	r2, #10
 8005d78:	f7fa ff32 	bl	8000be0 <__aeabi_uldivmod>
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	460f      	mov	r7, r1
 8005d80:	ea56 0307 	orrs.w	r3, r6, r7
 8005d84:	d1eb      	bne.n	8005d5e <_svfprintf_r+0x52e>
 8005d86:	e012      	b.n	8005dae <_svfprintf_r+0x57e>
 8005d88:	2600      	movs	r6, #0
 8005d8a:	2700      	movs	r7, #0
 8005d8c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005d90:	f006 030f 	and.w	r3, r6, #15
 8005d94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d96:	5cd3      	ldrb	r3, [r2, r3]
 8005d98:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005d9c:	0933      	lsrs	r3, r6, #4
 8005d9e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005da2:	093a      	lsrs	r2, r7, #4
 8005da4:	461e      	mov	r6, r3
 8005da6:	4617      	mov	r7, r2
 8005da8:	ea56 0307 	orrs.w	r3, r6, r7
 8005dac:	d1f0      	bne.n	8005d90 <_svfprintf_r+0x560>
 8005dae:	4629      	mov	r1, r5
 8005db0:	e00a      	b.n	8005dc8 <_svfprintf_r+0x598>
 8005db2:	b93b      	cbnz	r3, 8005dc4 <_svfprintf_r+0x594>
 8005db4:	07ea      	lsls	r2, r5, #31
 8005db6:	d505      	bpl.n	8005dc4 <_svfprintf_r+0x594>
 8005db8:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005dbc:	2330      	movs	r3, #48	; 0x30
 8005dbe:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005dc2:	e001      	b.n	8005dc8 <_svfprintf_r+0x598>
 8005dc4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005dc8:	464e      	mov	r6, r9
 8005dca:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005dce:	ebc8 0909 	rsb	r9, r8, r9
 8005dd2:	460d      	mov	r5, r1
 8005dd4:	2700      	movs	r7, #0
 8005dd6:	e01b      	b.n	8005e10 <_svfprintf_r+0x5e0>
 8005dd8:	b10a      	cbz	r2, 8005dde <_svfprintf_r+0x5ae>
 8005dda:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005dde:	9b02      	ldr	r3, [sp, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 83a0 	beq.w	8006526 <_svfprintf_r+0xcf6>
 8005de6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005dea:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005dee:	2600      	movs	r6, #0
 8005df0:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005df4:	9703      	str	r7, [sp, #12]
 8005df6:	f04f 0901 	mov.w	r9, #1
 8005dfa:	4637      	mov	r7, r6
 8005dfc:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8005e00:	e006      	b.n	8005e10 <_svfprintf_r+0x5e0>
 8005e02:	bf00      	nop
 8005e04:	7fefffff 	.word	0x7fefffff
 8005e08:	0800cd11 	.word	0x0800cd11
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	4637      	mov	r7, r6
 8005e10:	454e      	cmp	r6, r9
 8005e12:	4633      	mov	r3, r6
 8005e14:	bfb8      	it	lt
 8005e16:	464b      	movlt	r3, r9
 8005e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e1a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005e1e:	b113      	cbz	r3, 8005e26 <_svfprintf_r+0x5f6>
 8005e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e22:	3301      	adds	r3, #1
 8005e24:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e26:	f015 0302 	ands.w	r3, r5, #2
 8005e2a:	9314      	str	r3, [sp, #80]	; 0x50
 8005e2c:	bf1e      	ittt	ne
 8005e2e:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8005e30:	3302      	addne	r3, #2
 8005e32:	930b      	strne	r3, [sp, #44]	; 0x2c
 8005e34:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8005e38:	9315      	str	r3, [sp, #84]	; 0x54
 8005e3a:	d139      	bne.n	8005eb0 <_svfprintf_r+0x680>
 8005e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	930c      	str	r3, [sp, #48]	; 0x30
 8005e46:	dd33      	ble.n	8005eb0 <_svfprintf_r+0x680>
 8005e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	4ba6      	ldr	r3, [pc, #664]	; (80060e8 <_svfprintf_r+0x8b8>)
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	dd18      	ble.n	8005e84 <_svfprintf_r+0x654>
 8005e52:	2310      	movs	r3, #16
 8005e54:	6063      	str	r3, [r4, #4]
 8005e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e58:	3310      	adds	r3, #16
 8005e5a:	9321      	str	r3, [sp, #132]	; 0x84
 8005e5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e5e:	3301      	adds	r3, #1
 8005e60:	2b07      	cmp	r3, #7
 8005e62:	9320      	str	r3, [sp, #128]	; 0x80
 8005e64:	dc01      	bgt.n	8005e6a <_svfprintf_r+0x63a>
 8005e66:	3408      	adds	r4, #8
 8005e68:	e008      	b.n	8005e7c <_svfprintf_r+0x64c>
 8005e6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e6c:	4659      	mov	r1, fp
 8005e6e:	4650      	mov	r0, sl
 8005e70:	f004 fe8a 	bl	800ab88 <__ssprint_r>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f040 835d 	bne.w	8006534 <_svfprintf_r+0xd04>
 8005e7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e7e:	3b10      	subs	r3, #16
 8005e80:	930c      	str	r3, [sp, #48]	; 0x30
 8005e82:	e7e1      	b.n	8005e48 <_svfprintf_r+0x618>
 8005e84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e86:	6063      	str	r3, [r4, #4]
 8005e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e8c:	4413      	add	r3, r2
 8005e8e:	9321      	str	r3, [sp, #132]	; 0x84
 8005e90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e92:	3301      	adds	r3, #1
 8005e94:	2b07      	cmp	r3, #7
 8005e96:	9320      	str	r3, [sp, #128]	; 0x80
 8005e98:	dc01      	bgt.n	8005e9e <_svfprintf_r+0x66e>
 8005e9a:	3408      	adds	r4, #8
 8005e9c:	e008      	b.n	8005eb0 <_svfprintf_r+0x680>
 8005e9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ea0:	4659      	mov	r1, fp
 8005ea2:	4650      	mov	r0, sl
 8005ea4:	f004 fe70 	bl	800ab88 <__ssprint_r>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	f040 8343 	bne.w	8006534 <_svfprintf_r+0xd04>
 8005eae:	ac2c      	add	r4, sp, #176	; 0xb0
 8005eb0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005eb4:	b1bb      	cbz	r3, 8005ee6 <_svfprintf_r+0x6b6>
 8005eb6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	6063      	str	r3, [r4, #4]
 8005ec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	9321      	str	r3, [sp, #132]	; 0x84
 8005ec6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ec8:	3301      	adds	r3, #1
 8005eca:	2b07      	cmp	r3, #7
 8005ecc:	9320      	str	r3, [sp, #128]	; 0x80
 8005ece:	dc01      	bgt.n	8005ed4 <_svfprintf_r+0x6a4>
 8005ed0:	3408      	adds	r4, #8
 8005ed2:	e008      	b.n	8005ee6 <_svfprintf_r+0x6b6>
 8005ed4:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ed6:	4659      	mov	r1, fp
 8005ed8:	4650      	mov	r0, sl
 8005eda:	f004 fe55 	bl	800ab88 <__ssprint_r>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f040 8328 	bne.w	8006534 <_svfprintf_r+0xd04>
 8005ee4:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ee6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ee8:	b1b3      	cbz	r3, 8005f18 <_svfprintf_r+0x6e8>
 8005eea:	ab18      	add	r3, sp, #96	; 0x60
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	2302      	movs	r3, #2
 8005ef0:	6063      	str	r3, [r4, #4]
 8005ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	9321      	str	r3, [sp, #132]	; 0x84
 8005ef8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005efa:	3301      	adds	r3, #1
 8005efc:	2b07      	cmp	r3, #7
 8005efe:	9320      	str	r3, [sp, #128]	; 0x80
 8005f00:	dc01      	bgt.n	8005f06 <_svfprintf_r+0x6d6>
 8005f02:	3408      	adds	r4, #8
 8005f04:	e008      	b.n	8005f18 <_svfprintf_r+0x6e8>
 8005f06:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f08:	4659      	mov	r1, fp
 8005f0a:	4650      	mov	r0, sl
 8005f0c:	f004 fe3c 	bl	800ab88 <__ssprint_r>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f040 830f 	bne.w	8006534 <_svfprintf_r+0xd04>
 8005f16:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f1a:	2b80      	cmp	r3, #128	; 0x80
 8005f1c:	d135      	bne.n	8005f8a <_svfprintf_r+0x75a>
 8005f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	dd30      	ble.n	8005f8a <_svfprintf_r+0x75a>
 8005f28:	4a70      	ldr	r2, [pc, #448]	; (80060ec <_svfprintf_r+0x8bc>)
 8005f2a:	6022      	str	r2, [r4, #0]
 8005f2c:	2b10      	cmp	r3, #16
 8005f2e:	dd18      	ble.n	8005f62 <_svfprintf_r+0x732>
 8005f30:	2210      	movs	r2, #16
 8005f32:	6062      	str	r2, [r4, #4]
 8005f34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f36:	3210      	adds	r2, #16
 8005f38:	9221      	str	r2, [sp, #132]	; 0x84
 8005f3a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f3c:	3201      	adds	r2, #1
 8005f3e:	2a07      	cmp	r2, #7
 8005f40:	9220      	str	r2, [sp, #128]	; 0x80
 8005f42:	dc01      	bgt.n	8005f48 <_svfprintf_r+0x718>
 8005f44:	3408      	adds	r4, #8
 8005f46:	e00a      	b.n	8005f5e <_svfprintf_r+0x72e>
 8005f48:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f4a:	4659      	mov	r1, fp
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8005f50:	f004 fe1a 	bl	800ab88 <__ssprint_r>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	f040 82ed 	bne.w	8006534 <_svfprintf_r+0xd04>
 8005f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f5c:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f5e:	3b10      	subs	r3, #16
 8005f60:	e7e2      	b.n	8005f28 <_svfprintf_r+0x6f8>
 8005f62:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f64:	6063      	str	r3, [r4, #4]
 8005f66:	4413      	add	r3, r2
 8005f68:	9321      	str	r3, [sp, #132]	; 0x84
 8005f6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	2b07      	cmp	r3, #7
 8005f70:	9320      	str	r3, [sp, #128]	; 0x80
 8005f72:	dc01      	bgt.n	8005f78 <_svfprintf_r+0x748>
 8005f74:	3408      	adds	r4, #8
 8005f76:	e008      	b.n	8005f8a <_svfprintf_r+0x75a>
 8005f78:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f7a:	4659      	mov	r1, fp
 8005f7c:	4650      	mov	r0, sl
 8005f7e:	f004 fe03 	bl	800ab88 <__ssprint_r>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f040 82d6 	bne.w	8006534 <_svfprintf_r+0xd04>
 8005f88:	ac2c      	add	r4, sp, #176	; 0xb0
 8005f8a:	ebc9 0606 	rsb	r6, r9, r6
 8005f8e:	2e00      	cmp	r6, #0
 8005f90:	dd2e      	ble.n	8005ff0 <_svfprintf_r+0x7c0>
 8005f92:	4b56      	ldr	r3, [pc, #344]	; (80060ec <_svfprintf_r+0x8bc>)
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	2e10      	cmp	r6, #16
 8005f98:	dd16      	ble.n	8005fc8 <_svfprintf_r+0x798>
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	6063      	str	r3, [r4, #4]
 8005f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fa0:	3310      	adds	r3, #16
 8005fa2:	9321      	str	r3, [sp, #132]	; 0x84
 8005fa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	2b07      	cmp	r3, #7
 8005faa:	9320      	str	r3, [sp, #128]	; 0x80
 8005fac:	dc01      	bgt.n	8005fb2 <_svfprintf_r+0x782>
 8005fae:	3408      	adds	r4, #8
 8005fb0:	e008      	b.n	8005fc4 <_svfprintf_r+0x794>
 8005fb2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005fb4:	4659      	mov	r1, fp
 8005fb6:	4650      	mov	r0, sl
 8005fb8:	f004 fde6 	bl	800ab88 <__ssprint_r>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	f040 82b9 	bne.w	8006534 <_svfprintf_r+0xd04>
 8005fc2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005fc4:	3e10      	subs	r6, #16
 8005fc6:	e7e4      	b.n	8005f92 <_svfprintf_r+0x762>
 8005fc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fca:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005fcc:	6066      	str	r6, [r4, #4]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	4406      	add	r6, r0
 8005fd2:	2b07      	cmp	r3, #7
 8005fd4:	9621      	str	r6, [sp, #132]	; 0x84
 8005fd6:	9320      	str	r3, [sp, #128]	; 0x80
 8005fd8:	dc01      	bgt.n	8005fde <_svfprintf_r+0x7ae>
 8005fda:	3408      	adds	r4, #8
 8005fdc:	e008      	b.n	8005ff0 <_svfprintf_r+0x7c0>
 8005fde:	aa1f      	add	r2, sp, #124	; 0x7c
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	4650      	mov	r0, sl
 8005fe4:	f004 fdd0 	bl	800ab88 <__ssprint_r>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	f040 82a3 	bne.w	8006534 <_svfprintf_r+0xd04>
 8005fee:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ff0:	05eb      	lsls	r3, r5, #23
 8005ff2:	d414      	bmi.n	800601e <_svfprintf_r+0x7ee>
 8005ff4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ff6:	e884 0300 	stmia.w	r4, {r8, r9}
 8005ffa:	444b      	add	r3, r9
 8005ffc:	9321      	str	r3, [sp, #132]	; 0x84
 8005ffe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006000:	3301      	adds	r3, #1
 8006002:	2b07      	cmp	r3, #7
 8006004:	9320      	str	r3, [sp, #128]	; 0x80
 8006006:	f340 8244 	ble.w	8006492 <_svfprintf_r+0xc62>
 800600a:	aa1f      	add	r2, sp, #124	; 0x7c
 800600c:	4659      	mov	r1, fp
 800600e:	4650      	mov	r0, sl
 8006010:	f004 fdba 	bl	800ab88 <__ssprint_r>
 8006014:	2800      	cmp	r0, #0
 8006016:	f040 828d 	bne.w	8006534 <_svfprintf_r+0xd04>
 800601a:	ac2c      	add	r4, sp, #176	; 0xb0
 800601c:	e23a      	b.n	8006494 <_svfprintf_r+0xc64>
 800601e:	9b02      	ldr	r3, [sp, #8]
 8006020:	2b65      	cmp	r3, #101	; 0x65
 8006022:	f340 81ad 	ble.w	8006380 <_svfprintf_r+0xb50>
 8006026:	2200      	movs	r2, #0
 8006028:	2300      	movs	r3, #0
 800602a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800602e:	f7fa fd47 	bl	8000ac0 <__aeabi_dcmpeq>
 8006032:	2800      	cmp	r0, #0
 8006034:	d05e      	beq.n	80060f4 <_svfprintf_r+0x8c4>
 8006036:	4b2e      	ldr	r3, [pc, #184]	; (80060f0 <_svfprintf_r+0x8c0>)
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	2301      	movs	r3, #1
 800603c:	6063      	str	r3, [r4, #4]
 800603e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006040:	3301      	adds	r3, #1
 8006042:	9321      	str	r3, [sp, #132]	; 0x84
 8006044:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006046:	3301      	adds	r3, #1
 8006048:	2b07      	cmp	r3, #7
 800604a:	9320      	str	r3, [sp, #128]	; 0x80
 800604c:	dc01      	bgt.n	8006052 <_svfprintf_r+0x822>
 800604e:	3408      	adds	r4, #8
 8006050:	e008      	b.n	8006064 <_svfprintf_r+0x834>
 8006052:	aa1f      	add	r2, sp, #124	; 0x7c
 8006054:	4659      	mov	r1, fp
 8006056:	4650      	mov	r0, sl
 8006058:	f004 fd96 	bl	800ab88 <__ssprint_r>
 800605c:	2800      	cmp	r0, #0
 800605e:	f040 8269 	bne.w	8006534 <_svfprintf_r+0xd04>
 8006062:	ac2c      	add	r4, sp, #176	; 0xb0
 8006064:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006066:	9a04      	ldr	r2, [sp, #16]
 8006068:	4293      	cmp	r3, r2
 800606a:	db02      	blt.n	8006072 <_svfprintf_r+0x842>
 800606c:	07ee      	lsls	r6, r5, #31
 800606e:	f140 8211 	bpl.w	8006494 <_svfprintf_r+0xc64>
 8006072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	9b08      	ldr	r3, [sp, #32]
 8006078:	6063      	str	r3, [r4, #4]
 800607a:	9a08      	ldr	r2, [sp, #32]
 800607c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800607e:	4413      	add	r3, r2
 8006080:	9321      	str	r3, [sp, #132]	; 0x84
 8006082:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006084:	3301      	adds	r3, #1
 8006086:	2b07      	cmp	r3, #7
 8006088:	9320      	str	r3, [sp, #128]	; 0x80
 800608a:	dc01      	bgt.n	8006090 <_svfprintf_r+0x860>
 800608c:	3408      	adds	r4, #8
 800608e:	e008      	b.n	80060a2 <_svfprintf_r+0x872>
 8006090:	aa1f      	add	r2, sp, #124	; 0x7c
 8006092:	4659      	mov	r1, fp
 8006094:	4650      	mov	r0, sl
 8006096:	f004 fd77 	bl	800ab88 <__ssprint_r>
 800609a:	2800      	cmp	r0, #0
 800609c:	f040 824a 	bne.w	8006534 <_svfprintf_r+0xd04>
 80060a0:	ac2c      	add	r4, sp, #176	; 0xb0
 80060a2:	9b04      	ldr	r3, [sp, #16]
 80060a4:	1e5e      	subs	r6, r3, #1
 80060a6:	2e00      	cmp	r6, #0
 80060a8:	f340 81f4 	ble.w	8006494 <_svfprintf_r+0xc64>
 80060ac:	4f0f      	ldr	r7, [pc, #60]	; (80060ec <_svfprintf_r+0x8bc>)
 80060ae:	f04f 0810 	mov.w	r8, #16
 80060b2:	2e10      	cmp	r6, #16
 80060b4:	f340 8159 	ble.w	800636a <_svfprintf_r+0xb3a>
 80060b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ba:	3310      	adds	r3, #16
 80060bc:	9321      	str	r3, [sp, #132]	; 0x84
 80060be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060c0:	3301      	adds	r3, #1
 80060c2:	2b07      	cmp	r3, #7
 80060c4:	e884 0180 	stmia.w	r4, {r7, r8}
 80060c8:	9320      	str	r3, [sp, #128]	; 0x80
 80060ca:	dc01      	bgt.n	80060d0 <_svfprintf_r+0x8a0>
 80060cc:	3408      	adds	r4, #8
 80060ce:	e008      	b.n	80060e2 <_svfprintf_r+0x8b2>
 80060d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80060d2:	4659      	mov	r1, fp
 80060d4:	4650      	mov	r0, sl
 80060d6:	f004 fd57 	bl	800ab88 <__ssprint_r>
 80060da:	2800      	cmp	r0, #0
 80060dc:	f040 822a 	bne.w	8006534 <_svfprintf_r+0xd04>
 80060e0:	ac2c      	add	r4, sp, #176	; 0xb0
 80060e2:	3e10      	subs	r6, #16
 80060e4:	e7e5      	b.n	80060b2 <_svfprintf_r+0x882>
 80060e6:	bf00      	nop
 80060e8:	0800cd24 	.word	0x0800cd24
 80060ec:	0800cce0 	.word	0x0800cce0
 80060f0:	0800cd22 	.word	0x0800cd22
 80060f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	dc7c      	bgt.n	80061f4 <_svfprintf_r+0x9c4>
 80060fa:	4b9f      	ldr	r3, [pc, #636]	; (8006378 <_svfprintf_r+0xb48>)
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	2301      	movs	r3, #1
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006104:	3301      	adds	r3, #1
 8006106:	9321      	str	r3, [sp, #132]	; 0x84
 8006108:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800610a:	3301      	adds	r3, #1
 800610c:	2b07      	cmp	r3, #7
 800610e:	9320      	str	r3, [sp, #128]	; 0x80
 8006110:	dc01      	bgt.n	8006116 <_svfprintf_r+0x8e6>
 8006112:	3408      	adds	r4, #8
 8006114:	e008      	b.n	8006128 <_svfprintf_r+0x8f8>
 8006116:	aa1f      	add	r2, sp, #124	; 0x7c
 8006118:	4659      	mov	r1, fp
 800611a:	4650      	mov	r0, sl
 800611c:	f004 fd34 	bl	800ab88 <__ssprint_r>
 8006120:	2800      	cmp	r0, #0
 8006122:	f040 8207 	bne.w	8006534 <_svfprintf_r+0xd04>
 8006126:	ac2c      	add	r4, sp, #176	; 0xb0
 8006128:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800612a:	b923      	cbnz	r3, 8006136 <_svfprintf_r+0x906>
 800612c:	9b04      	ldr	r3, [sp, #16]
 800612e:	b913      	cbnz	r3, 8006136 <_svfprintf_r+0x906>
 8006130:	07e8      	lsls	r0, r5, #31
 8006132:	f140 81af 	bpl.w	8006494 <_svfprintf_r+0xc64>
 8006136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	9b08      	ldr	r3, [sp, #32]
 800613c:	6063      	str	r3, [r4, #4]
 800613e:	9a08      	ldr	r2, [sp, #32]
 8006140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006142:	4413      	add	r3, r2
 8006144:	9321      	str	r3, [sp, #132]	; 0x84
 8006146:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006148:	3301      	adds	r3, #1
 800614a:	2b07      	cmp	r3, #7
 800614c:	9320      	str	r3, [sp, #128]	; 0x80
 800614e:	dc02      	bgt.n	8006156 <_svfprintf_r+0x926>
 8006150:	f104 0308 	add.w	r3, r4, #8
 8006154:	e008      	b.n	8006168 <_svfprintf_r+0x938>
 8006156:	aa1f      	add	r2, sp, #124	; 0x7c
 8006158:	4659      	mov	r1, fp
 800615a:	4650      	mov	r0, sl
 800615c:	f004 fd14 	bl	800ab88 <__ssprint_r>
 8006160:	2800      	cmp	r0, #0
 8006162:	f040 81e7 	bne.w	8006534 <_svfprintf_r+0xd04>
 8006166:	ab2c      	add	r3, sp, #176	; 0xb0
 8006168:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800616a:	4276      	negs	r6, r6
 800616c:	2e00      	cmp	r6, #0
 800616e:	dd30      	ble.n	80061d2 <_svfprintf_r+0x9a2>
 8006170:	4f82      	ldr	r7, [pc, #520]	; (800637c <_svfprintf_r+0xb4c>)
 8006172:	2410      	movs	r4, #16
 8006174:	2e10      	cmp	r6, #16
 8006176:	dd16      	ble.n	80061a6 <_svfprintf_r+0x976>
 8006178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800617a:	601f      	str	r7, [r3, #0]
 800617c:	3210      	adds	r2, #16
 800617e:	9221      	str	r2, [sp, #132]	; 0x84
 8006180:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006182:	605c      	str	r4, [r3, #4]
 8006184:	3201      	adds	r2, #1
 8006186:	2a07      	cmp	r2, #7
 8006188:	9220      	str	r2, [sp, #128]	; 0x80
 800618a:	dc01      	bgt.n	8006190 <_svfprintf_r+0x960>
 800618c:	3308      	adds	r3, #8
 800618e:	e008      	b.n	80061a2 <_svfprintf_r+0x972>
 8006190:	aa1f      	add	r2, sp, #124	; 0x7c
 8006192:	4659      	mov	r1, fp
 8006194:	4650      	mov	r0, sl
 8006196:	f004 fcf7 	bl	800ab88 <__ssprint_r>
 800619a:	2800      	cmp	r0, #0
 800619c:	f040 81ca 	bne.w	8006534 <_svfprintf_r+0xd04>
 80061a0:	ab2c      	add	r3, sp, #176	; 0xb0
 80061a2:	3e10      	subs	r6, #16
 80061a4:	e7e6      	b.n	8006174 <_svfprintf_r+0x944>
 80061a6:	4a75      	ldr	r2, [pc, #468]	; (800637c <_svfprintf_r+0xb4c>)
 80061a8:	e883 0044 	stmia.w	r3, {r2, r6}
 80061ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061ae:	4416      	add	r6, r2
 80061b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061b2:	9621      	str	r6, [sp, #132]	; 0x84
 80061b4:	3201      	adds	r2, #1
 80061b6:	2a07      	cmp	r2, #7
 80061b8:	9220      	str	r2, [sp, #128]	; 0x80
 80061ba:	dc01      	bgt.n	80061c0 <_svfprintf_r+0x990>
 80061bc:	3308      	adds	r3, #8
 80061be:	e008      	b.n	80061d2 <_svfprintf_r+0x9a2>
 80061c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80061c2:	4659      	mov	r1, fp
 80061c4:	4650      	mov	r0, sl
 80061c6:	f004 fcdf 	bl	800ab88 <__ssprint_r>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	f040 81b2 	bne.w	8006534 <_svfprintf_r+0xd04>
 80061d0:	ab2c      	add	r3, sp, #176	; 0xb0
 80061d2:	9a04      	ldr	r2, [sp, #16]
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	9904      	ldr	r1, [sp, #16]
 80061d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061da:	f8c3 8000 	str.w	r8, [r3]
 80061de:	440a      	add	r2, r1
 80061e0:	9221      	str	r2, [sp, #132]	; 0x84
 80061e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061e4:	3201      	adds	r2, #1
 80061e6:	2a07      	cmp	r2, #7
 80061e8:	9220      	str	r2, [sp, #128]	; 0x80
 80061ea:	f73f af0e 	bgt.w	800600a <_svfprintf_r+0x7da>
 80061ee:	f103 0408 	add.w	r4, r3, #8
 80061f2:	e14f      	b.n	8006494 <_svfprintf_r+0xc64>
 80061f4:	9b04      	ldr	r3, [sp, #16]
 80061f6:	42bb      	cmp	r3, r7
 80061f8:	bfa8      	it	ge
 80061fa:	463b      	movge	r3, r7
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	461e      	mov	r6, r3
 8006200:	dd15      	ble.n	800622e <_svfprintf_r+0x9fe>
 8006202:	6063      	str	r3, [r4, #4]
 8006204:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006206:	f8c4 8000 	str.w	r8, [r4]
 800620a:	4433      	add	r3, r6
 800620c:	9321      	str	r3, [sp, #132]	; 0x84
 800620e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006210:	3301      	adds	r3, #1
 8006212:	2b07      	cmp	r3, #7
 8006214:	9320      	str	r3, [sp, #128]	; 0x80
 8006216:	dc01      	bgt.n	800621c <_svfprintf_r+0x9ec>
 8006218:	3408      	adds	r4, #8
 800621a:	e008      	b.n	800622e <_svfprintf_r+0x9fe>
 800621c:	aa1f      	add	r2, sp, #124	; 0x7c
 800621e:	4659      	mov	r1, fp
 8006220:	4650      	mov	r0, sl
 8006222:	f004 fcb1 	bl	800ab88 <__ssprint_r>
 8006226:	2800      	cmp	r0, #0
 8006228:	f040 8184 	bne.w	8006534 <_svfprintf_r+0xd04>
 800622c:	ac2c      	add	r4, sp, #176	; 0xb0
 800622e:	2e00      	cmp	r6, #0
 8006230:	bfac      	ite	ge
 8006232:	1bbe      	subge	r6, r7, r6
 8006234:	463e      	movlt	r6, r7
 8006236:	2e00      	cmp	r6, #0
 8006238:	dd30      	ble.n	800629c <_svfprintf_r+0xa6c>
 800623a:	f04f 0910 	mov.w	r9, #16
 800623e:	4b4f      	ldr	r3, [pc, #316]	; (800637c <_svfprintf_r+0xb4c>)
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	2e10      	cmp	r6, #16
 8006244:	dd16      	ble.n	8006274 <_svfprintf_r+0xa44>
 8006246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006248:	f8c4 9004 	str.w	r9, [r4, #4]
 800624c:	3310      	adds	r3, #16
 800624e:	9321      	str	r3, [sp, #132]	; 0x84
 8006250:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006252:	3301      	adds	r3, #1
 8006254:	2b07      	cmp	r3, #7
 8006256:	9320      	str	r3, [sp, #128]	; 0x80
 8006258:	dc01      	bgt.n	800625e <_svfprintf_r+0xa2e>
 800625a:	3408      	adds	r4, #8
 800625c:	e008      	b.n	8006270 <_svfprintf_r+0xa40>
 800625e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006260:	4659      	mov	r1, fp
 8006262:	4650      	mov	r0, sl
 8006264:	f004 fc90 	bl	800ab88 <__ssprint_r>
 8006268:	2800      	cmp	r0, #0
 800626a:	f040 8163 	bne.w	8006534 <_svfprintf_r+0xd04>
 800626e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006270:	3e10      	subs	r6, #16
 8006272:	e7e4      	b.n	800623e <_svfprintf_r+0xa0e>
 8006274:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006276:	6066      	str	r6, [r4, #4]
 8006278:	441e      	add	r6, r3
 800627a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800627c:	9621      	str	r6, [sp, #132]	; 0x84
 800627e:	3301      	adds	r3, #1
 8006280:	2b07      	cmp	r3, #7
 8006282:	9320      	str	r3, [sp, #128]	; 0x80
 8006284:	dc01      	bgt.n	800628a <_svfprintf_r+0xa5a>
 8006286:	3408      	adds	r4, #8
 8006288:	e008      	b.n	800629c <_svfprintf_r+0xa6c>
 800628a:	aa1f      	add	r2, sp, #124	; 0x7c
 800628c:	4659      	mov	r1, fp
 800628e:	4650      	mov	r0, sl
 8006290:	f004 fc7a 	bl	800ab88 <__ssprint_r>
 8006294:	2800      	cmp	r0, #0
 8006296:	f040 814d 	bne.w	8006534 <_svfprintf_r+0xd04>
 800629a:	ac2c      	add	r4, sp, #176	; 0xb0
 800629c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800629e:	9a04      	ldr	r2, [sp, #16]
 80062a0:	4293      	cmp	r3, r2
 80062a2:	4447      	add	r7, r8
 80062a4:	db01      	blt.n	80062aa <_svfprintf_r+0xa7a>
 80062a6:	07e9      	lsls	r1, r5, #31
 80062a8:	d517      	bpl.n	80062da <_svfprintf_r+0xaaa>
 80062aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	9b08      	ldr	r3, [sp, #32]
 80062b0:	6063      	str	r3, [r4, #4]
 80062b2:	9a08      	ldr	r2, [sp, #32]
 80062b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062b6:	4413      	add	r3, r2
 80062b8:	9321      	str	r3, [sp, #132]	; 0x84
 80062ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80062bc:	3301      	adds	r3, #1
 80062be:	2b07      	cmp	r3, #7
 80062c0:	9320      	str	r3, [sp, #128]	; 0x80
 80062c2:	dc01      	bgt.n	80062c8 <_svfprintf_r+0xa98>
 80062c4:	3408      	adds	r4, #8
 80062c6:	e008      	b.n	80062da <_svfprintf_r+0xaaa>
 80062c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80062ca:	4659      	mov	r1, fp
 80062cc:	4650      	mov	r0, sl
 80062ce:	f004 fc5b 	bl	800ab88 <__ssprint_r>
 80062d2:	2800      	cmp	r0, #0
 80062d4:	f040 812e 	bne.w	8006534 <_svfprintf_r+0xd04>
 80062d8:	ac2c      	add	r4, sp, #176	; 0xb0
 80062da:	9b04      	ldr	r3, [sp, #16]
 80062dc:	9a04      	ldr	r2, [sp, #16]
 80062de:	eb08 0603 	add.w	r6, r8, r3
 80062e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062e4:	1bf6      	subs	r6, r6, r7
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	429e      	cmp	r6, r3
 80062ea:	bfa8      	it	ge
 80062ec:	461e      	movge	r6, r3
 80062ee:	2e00      	cmp	r6, #0
 80062f0:	dd14      	ble.n	800631c <_svfprintf_r+0xaec>
 80062f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062f4:	6027      	str	r7, [r4, #0]
 80062f6:	4433      	add	r3, r6
 80062f8:	9321      	str	r3, [sp, #132]	; 0x84
 80062fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80062fc:	6066      	str	r6, [r4, #4]
 80062fe:	3301      	adds	r3, #1
 8006300:	2b07      	cmp	r3, #7
 8006302:	9320      	str	r3, [sp, #128]	; 0x80
 8006304:	dc01      	bgt.n	800630a <_svfprintf_r+0xada>
 8006306:	3408      	adds	r4, #8
 8006308:	e008      	b.n	800631c <_svfprintf_r+0xaec>
 800630a:	aa1f      	add	r2, sp, #124	; 0x7c
 800630c:	4659      	mov	r1, fp
 800630e:	4650      	mov	r0, sl
 8006310:	f004 fc3a 	bl	800ab88 <__ssprint_r>
 8006314:	2800      	cmp	r0, #0
 8006316:	f040 810d 	bne.w	8006534 <_svfprintf_r+0xd04>
 800631a:	ac2c      	add	r4, sp, #176	; 0xb0
 800631c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800631e:	9a04      	ldr	r2, [sp, #16]
 8006320:	2e00      	cmp	r6, #0
 8006322:	eba2 0303 	sub.w	r3, r2, r3
 8006326:	bfac      	ite	ge
 8006328:	1b9e      	subge	r6, r3, r6
 800632a:	461e      	movlt	r6, r3
 800632c:	2e00      	cmp	r6, #0
 800632e:	f340 80b1 	ble.w	8006494 <_svfprintf_r+0xc64>
 8006332:	4f12      	ldr	r7, [pc, #72]	; (800637c <_svfprintf_r+0xb4c>)
 8006334:	f04f 0810 	mov.w	r8, #16
 8006338:	2e10      	cmp	r6, #16
 800633a:	dd16      	ble.n	800636a <_svfprintf_r+0xb3a>
 800633c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800633e:	3310      	adds	r3, #16
 8006340:	9321      	str	r3, [sp, #132]	; 0x84
 8006342:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006344:	3301      	adds	r3, #1
 8006346:	2b07      	cmp	r3, #7
 8006348:	e884 0180 	stmia.w	r4, {r7, r8}
 800634c:	9320      	str	r3, [sp, #128]	; 0x80
 800634e:	dc01      	bgt.n	8006354 <_svfprintf_r+0xb24>
 8006350:	3408      	adds	r4, #8
 8006352:	e008      	b.n	8006366 <_svfprintf_r+0xb36>
 8006354:	aa1f      	add	r2, sp, #124	; 0x7c
 8006356:	4659      	mov	r1, fp
 8006358:	4650      	mov	r0, sl
 800635a:	f004 fc15 	bl	800ab88 <__ssprint_r>
 800635e:	2800      	cmp	r0, #0
 8006360:	f040 80e8 	bne.w	8006534 <_svfprintf_r+0xd04>
 8006364:	ac2c      	add	r4, sp, #176	; 0xb0
 8006366:	3e10      	subs	r6, #16
 8006368:	e7e6      	b.n	8006338 <_svfprintf_r+0xb08>
 800636a:	4b04      	ldr	r3, [pc, #16]	; (800637c <_svfprintf_r+0xb4c>)
 800636c:	e884 0048 	stmia.w	r4, {r3, r6}
 8006370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006372:	441e      	add	r6, r3
 8006374:	9621      	str	r6, [sp, #132]	; 0x84
 8006376:	e642      	b.n	8005ffe <_svfprintf_r+0x7ce>
 8006378:	0800cd22 	.word	0x0800cd22
 800637c:	0800cce0 	.word	0x0800cce0
 8006380:	9b04      	ldr	r3, [sp, #16]
 8006382:	2b01      	cmp	r3, #1
 8006384:	dc01      	bgt.n	800638a <_svfprintf_r+0xb5a>
 8006386:	07ea      	lsls	r2, r5, #31
 8006388:	d573      	bpl.n	8006472 <_svfprintf_r+0xc42>
 800638a:	2301      	movs	r3, #1
 800638c:	6063      	str	r3, [r4, #4]
 800638e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006390:	f8c4 8000 	str.w	r8, [r4]
 8006394:	3301      	adds	r3, #1
 8006396:	9321      	str	r3, [sp, #132]	; 0x84
 8006398:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800639a:	3301      	adds	r3, #1
 800639c:	2b07      	cmp	r3, #7
 800639e:	9320      	str	r3, [sp, #128]	; 0x80
 80063a0:	dc01      	bgt.n	80063a6 <_svfprintf_r+0xb76>
 80063a2:	3408      	adds	r4, #8
 80063a4:	e008      	b.n	80063b8 <_svfprintf_r+0xb88>
 80063a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80063a8:	4659      	mov	r1, fp
 80063aa:	4650      	mov	r0, sl
 80063ac:	f004 fbec 	bl	800ab88 <__ssprint_r>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f040 80bf 	bne.w	8006534 <_svfprintf_r+0xd04>
 80063b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80063b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	9b08      	ldr	r3, [sp, #32]
 80063be:	6063      	str	r3, [r4, #4]
 80063c0:	9a08      	ldr	r2, [sp, #32]
 80063c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063c4:	4413      	add	r3, r2
 80063c6:	9321      	str	r3, [sp, #132]	; 0x84
 80063c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063ca:	3301      	adds	r3, #1
 80063cc:	2b07      	cmp	r3, #7
 80063ce:	9320      	str	r3, [sp, #128]	; 0x80
 80063d0:	dc01      	bgt.n	80063d6 <_svfprintf_r+0xba6>
 80063d2:	3408      	adds	r4, #8
 80063d4:	e008      	b.n	80063e8 <_svfprintf_r+0xbb8>
 80063d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80063d8:	4659      	mov	r1, fp
 80063da:	4650      	mov	r0, sl
 80063dc:	f004 fbd4 	bl	800ab88 <__ssprint_r>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	f040 80a7 	bne.w	8006534 <_svfprintf_r+0xd04>
 80063e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80063e8:	2300      	movs	r3, #0
 80063ea:	2200      	movs	r2, #0
 80063ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063f0:	f7fa fb66 	bl	8000ac0 <__aeabi_dcmpeq>
 80063f4:	9b04      	ldr	r3, [sp, #16]
 80063f6:	1e5e      	subs	r6, r3, #1
 80063f8:	b9b8      	cbnz	r0, 800642a <_svfprintf_r+0xbfa>
 80063fa:	f108 0301 	add.w	r3, r8, #1
 80063fe:	e884 0048 	stmia.w	r4, {r3, r6}
 8006402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006404:	9a04      	ldr	r2, [sp, #16]
 8006406:	3b01      	subs	r3, #1
 8006408:	4413      	add	r3, r2
 800640a:	9321      	str	r3, [sp, #132]	; 0x84
 800640c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800640e:	3301      	adds	r3, #1
 8006410:	2b07      	cmp	r3, #7
 8006412:	9320      	str	r3, [sp, #128]	; 0x80
 8006414:	dd34      	ble.n	8006480 <_svfprintf_r+0xc50>
 8006416:	aa1f      	add	r2, sp, #124	; 0x7c
 8006418:	4659      	mov	r1, fp
 800641a:	4650      	mov	r0, sl
 800641c:	f004 fbb4 	bl	800ab88 <__ssprint_r>
 8006420:	2800      	cmp	r0, #0
 8006422:	f040 8087 	bne.w	8006534 <_svfprintf_r+0xd04>
 8006426:	ac2c      	add	r4, sp, #176	; 0xb0
 8006428:	e02b      	b.n	8006482 <_svfprintf_r+0xc52>
 800642a:	2e00      	cmp	r6, #0
 800642c:	dd29      	ble.n	8006482 <_svfprintf_r+0xc52>
 800642e:	4fa7      	ldr	r7, [pc, #668]	; (80066cc <_svfprintf_r+0xe9c>)
 8006430:	f04f 0810 	mov.w	r8, #16
 8006434:	2e10      	cmp	r6, #16
 8006436:	dd15      	ble.n	8006464 <_svfprintf_r+0xc34>
 8006438:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800643a:	3310      	adds	r3, #16
 800643c:	9321      	str	r3, [sp, #132]	; 0x84
 800643e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006440:	3301      	adds	r3, #1
 8006442:	2b07      	cmp	r3, #7
 8006444:	e884 0180 	stmia.w	r4, {r7, r8}
 8006448:	9320      	str	r3, [sp, #128]	; 0x80
 800644a:	dc01      	bgt.n	8006450 <_svfprintf_r+0xc20>
 800644c:	3408      	adds	r4, #8
 800644e:	e007      	b.n	8006460 <_svfprintf_r+0xc30>
 8006450:	aa1f      	add	r2, sp, #124	; 0x7c
 8006452:	4659      	mov	r1, fp
 8006454:	4650      	mov	r0, sl
 8006456:	f004 fb97 	bl	800ab88 <__ssprint_r>
 800645a:	2800      	cmp	r0, #0
 800645c:	d16a      	bne.n	8006534 <_svfprintf_r+0xd04>
 800645e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006460:	3e10      	subs	r6, #16
 8006462:	e7e7      	b.n	8006434 <_svfprintf_r+0xc04>
 8006464:	4b99      	ldr	r3, [pc, #612]	; (80066cc <_svfprintf_r+0xe9c>)
 8006466:	e884 0048 	stmia.w	r4, {r3, r6}
 800646a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800646c:	441e      	add	r6, r3
 800646e:	9621      	str	r6, [sp, #132]	; 0x84
 8006470:	e7cc      	b.n	800640c <_svfprintf_r+0xbdc>
 8006472:	2301      	movs	r3, #1
 8006474:	6063      	str	r3, [r4, #4]
 8006476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006478:	f8c4 8000 	str.w	r8, [r4]
 800647c:	3301      	adds	r3, #1
 800647e:	e7c4      	b.n	800640a <_svfprintf_r+0xbda>
 8006480:	3408      	adds	r4, #8
 8006482:	ab1b      	add	r3, sp, #108	; 0x6c
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006488:	6063      	str	r3, [r4, #4]
 800648a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800648c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800648e:	4413      	add	r3, r2
 8006490:	e5b4      	b.n	8005ffc <_svfprintf_r+0x7cc>
 8006492:	3408      	adds	r4, #8
 8006494:	076b      	lsls	r3, r5, #29
 8006496:	d40b      	bmi.n	80064b0 <_svfprintf_r+0xc80>
 8006498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800649c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800649e:	428a      	cmp	r2, r1
 80064a0:	bfac      	ite	ge
 80064a2:	189b      	addge	r3, r3, r2
 80064a4:	185b      	addlt	r3, r3, r1
 80064a6:	930a      	str	r3, [sp, #40]	; 0x28
 80064a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d035      	beq.n	800651a <_svfprintf_r+0xcea>
 80064ae:	e02e      	b.n	800650e <_svfprintf_r+0xcde>
 80064b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064b4:	1a9d      	subs	r5, r3, r2
 80064b6:	2d00      	cmp	r5, #0
 80064b8:	ddee      	ble.n	8006498 <_svfprintf_r+0xc68>
 80064ba:	2610      	movs	r6, #16
 80064bc:	4b84      	ldr	r3, [pc, #528]	; (80066d0 <_svfprintf_r+0xea0>)
 80064be:	6023      	str	r3, [r4, #0]
 80064c0:	2d10      	cmp	r5, #16
 80064c2:	dd13      	ble.n	80064ec <_svfprintf_r+0xcbc>
 80064c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064c6:	6066      	str	r6, [r4, #4]
 80064c8:	3310      	adds	r3, #16
 80064ca:	9321      	str	r3, [sp, #132]	; 0x84
 80064cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80064ce:	3301      	adds	r3, #1
 80064d0:	2b07      	cmp	r3, #7
 80064d2:	9320      	str	r3, [sp, #128]	; 0x80
 80064d4:	dc01      	bgt.n	80064da <_svfprintf_r+0xcaa>
 80064d6:	3408      	adds	r4, #8
 80064d8:	e006      	b.n	80064e8 <_svfprintf_r+0xcb8>
 80064da:	aa1f      	add	r2, sp, #124	; 0x7c
 80064dc:	4659      	mov	r1, fp
 80064de:	4650      	mov	r0, sl
 80064e0:	f004 fb52 	bl	800ab88 <__ssprint_r>
 80064e4:	bb30      	cbnz	r0, 8006534 <_svfprintf_r+0xd04>
 80064e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80064e8:	3d10      	subs	r5, #16
 80064ea:	e7e7      	b.n	80064bc <_svfprintf_r+0xc8c>
 80064ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064ee:	6065      	str	r5, [r4, #4]
 80064f0:	441d      	add	r5, r3
 80064f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80064f4:	9521      	str	r5, [sp, #132]	; 0x84
 80064f6:	3301      	adds	r3, #1
 80064f8:	2b07      	cmp	r3, #7
 80064fa:	9320      	str	r3, [sp, #128]	; 0x80
 80064fc:	ddcc      	ble.n	8006498 <_svfprintf_r+0xc68>
 80064fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8006500:	4659      	mov	r1, fp
 8006502:	4650      	mov	r0, sl
 8006504:	f004 fb40 	bl	800ab88 <__ssprint_r>
 8006508:	2800      	cmp	r0, #0
 800650a:	d0c5      	beq.n	8006498 <_svfprintf_r+0xc68>
 800650c:	e012      	b.n	8006534 <_svfprintf_r+0xd04>
 800650e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006510:	4659      	mov	r1, fp
 8006512:	4650      	mov	r0, sl
 8006514:	f004 fb38 	bl	800ab88 <__ssprint_r>
 8006518:	b960      	cbnz	r0, 8006534 <_svfprintf_r+0xd04>
 800651a:	2300      	movs	r3, #0
 800651c:	9320      	str	r3, [sp, #128]	; 0x80
 800651e:	9f03      	ldr	r7, [sp, #12]
 8006520:	ac2c      	add	r4, sp, #176	; 0xb0
 8006522:	f7ff b9bb 	b.w	800589c <_svfprintf_r+0x6c>
 8006526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006528:	b123      	cbz	r3, 8006534 <_svfprintf_r+0xd04>
 800652a:	aa1f      	add	r2, sp, #124	; 0x7c
 800652c:	4659      	mov	r1, fp
 800652e:	4650      	mov	r0, sl
 8006530:	f004 fb2a 	bl	800ab88 <__ssprint_r>
 8006534:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8006538:	f013 0f40 	tst.w	r3, #64	; 0x40
 800653c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800653e:	bf18      	it	ne
 8006540:	f04f 33ff 	movne.w	r3, #4294967295
 8006544:	4618      	mov	r0, r3
 8006546:	e12e      	b.n	80067a6 <_svfprintf_r+0xf76>
 8006548:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800654c:	4610      	mov	r0, r2
 800654e:	4619      	mov	r1, r3
 8006550:	f7fa fae8 	bl	8000b24 <__aeabi_dcmpun>
 8006554:	b160      	cbz	r0, 8006570 <_svfprintf_r+0xd40>
 8006556:	4b5f      	ldr	r3, [pc, #380]	; (80066d4 <_svfprintf_r+0xea4>)
 8006558:	4a5f      	ldr	r2, [pc, #380]	; (80066d8 <_svfprintf_r+0xea8>)
 800655a:	9902      	ldr	r1, [sp, #8]
 800655c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8006560:	2947      	cmp	r1, #71	; 0x47
 8006562:	bfcc      	ite	gt
 8006564:	4690      	movgt	r8, r2
 8006566:	4698      	movle	r8, r3
 8006568:	f04f 0903 	mov.w	r9, #3
 800656c:	2600      	movs	r6, #0
 800656e:	e44e      	b.n	8005e0e <_svfprintf_r+0x5de>
 8006570:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006574:	d00a      	beq.n	800658c <_svfprintf_r+0xd5c>
 8006576:	9b02      	ldr	r3, [sp, #8]
 8006578:	f023 0320 	bic.w	r3, r3, #32
 800657c:	2b47      	cmp	r3, #71	; 0x47
 800657e:	d107      	bne.n	8006590 <_svfprintf_r+0xd60>
 8006580:	f1b9 0f00 	cmp.w	r9, #0
 8006584:	bf08      	it	eq
 8006586:	f04f 0901 	moveq.w	r9, #1
 800658a:	e001      	b.n	8006590 <_svfprintf_r+0xd60>
 800658c:	f04f 0906 	mov.w	r9, #6
 8006590:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8006594:	930c      	str	r3, [sp, #48]	; 0x30
 8006596:	9b07      	ldr	r3, [sp, #28]
 8006598:	2b00      	cmp	r3, #0
 800659a:	da07      	bge.n	80065ac <_svfprintf_r+0xd7c>
 800659c:	9b06      	ldr	r3, [sp, #24]
 800659e:	930e      	str	r3, [sp, #56]	; 0x38
 80065a0:	9b07      	ldr	r3, [sp, #28]
 80065a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80065a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80065a8:	232d      	movs	r3, #45	; 0x2d
 80065aa:	e004      	b.n	80065b6 <_svfprintf_r+0xd86>
 80065ac:	ed9d 7b06 	vldr	d7, [sp, #24]
 80065b0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80065b4:	2300      	movs	r3, #0
 80065b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b8:	9b02      	ldr	r3, [sp, #8]
 80065ba:	f023 0720 	bic.w	r7, r3, #32
 80065be:	2f46      	cmp	r7, #70	; 0x46
 80065c0:	d004      	beq.n	80065cc <_svfprintf_r+0xd9c>
 80065c2:	2f45      	cmp	r7, #69	; 0x45
 80065c4:	d105      	bne.n	80065d2 <_svfprintf_r+0xda2>
 80065c6:	f109 0601 	add.w	r6, r9, #1
 80065ca:	e003      	b.n	80065d4 <_svfprintf_r+0xda4>
 80065cc:	464e      	mov	r6, r9
 80065ce:	2103      	movs	r1, #3
 80065d0:	e001      	b.n	80065d6 <_svfprintf_r+0xda6>
 80065d2:	464e      	mov	r6, r9
 80065d4:	2102      	movs	r1, #2
 80065d6:	ab1d      	add	r3, sp, #116	; 0x74
 80065d8:	9301      	str	r3, [sp, #4]
 80065da:	ab1a      	add	r3, sp, #104	; 0x68
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	4632      	mov	r2, r6
 80065e0:	ab19      	add	r3, sp, #100	; 0x64
 80065e2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80065e6:	4650      	mov	r0, sl
 80065e8:	f001 fefe 	bl	80083e8 <_dtoa_r>
 80065ec:	2f47      	cmp	r7, #71	; 0x47
 80065ee:	4680      	mov	r8, r0
 80065f0:	d102      	bne.n	80065f8 <_svfprintf_r+0xdc8>
 80065f2:	07eb      	lsls	r3, r5, #31
 80065f4:	f140 80cd 	bpl.w	8006792 <_svfprintf_r+0xf62>
 80065f8:	eb08 0306 	add.w	r3, r8, r6
 80065fc:	2f46      	cmp	r7, #70	; 0x46
 80065fe:	9304      	str	r3, [sp, #16]
 8006600:	d111      	bne.n	8006626 <_svfprintf_r+0xdf6>
 8006602:	f898 3000 	ldrb.w	r3, [r8]
 8006606:	2b30      	cmp	r3, #48	; 0x30
 8006608:	d109      	bne.n	800661e <_svfprintf_r+0xdee>
 800660a:	2200      	movs	r2, #0
 800660c:	2300      	movs	r3, #0
 800660e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006612:	f7fa fa55 	bl	8000ac0 <__aeabi_dcmpeq>
 8006616:	b910      	cbnz	r0, 800661e <_svfprintf_r+0xdee>
 8006618:	f1c6 0601 	rsb	r6, r6, #1
 800661c:	9619      	str	r6, [sp, #100]	; 0x64
 800661e:	9a04      	ldr	r2, [sp, #16]
 8006620:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006622:	441a      	add	r2, r3
 8006624:	9204      	str	r2, [sp, #16]
 8006626:	2200      	movs	r2, #0
 8006628:	2300      	movs	r3, #0
 800662a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800662e:	f7fa fa47 	bl	8000ac0 <__aeabi_dcmpeq>
 8006632:	b908      	cbnz	r0, 8006638 <_svfprintf_r+0xe08>
 8006634:	2230      	movs	r2, #48	; 0x30
 8006636:	e002      	b.n	800663e <_svfprintf_r+0xe0e>
 8006638:	9b04      	ldr	r3, [sp, #16]
 800663a:	931d      	str	r3, [sp, #116]	; 0x74
 800663c:	e007      	b.n	800664e <_svfprintf_r+0xe1e>
 800663e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006640:	9904      	ldr	r1, [sp, #16]
 8006642:	4299      	cmp	r1, r3
 8006644:	d903      	bls.n	800664e <_svfprintf_r+0xe1e>
 8006646:	1c59      	adds	r1, r3, #1
 8006648:	911d      	str	r1, [sp, #116]	; 0x74
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	e7f7      	b.n	800663e <_svfprintf_r+0xe0e>
 800664e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006650:	2f47      	cmp	r7, #71	; 0x47
 8006652:	ebc8 0303 	rsb	r3, r8, r3
 8006656:	9304      	str	r3, [sp, #16]
 8006658:	d108      	bne.n	800666c <_svfprintf_r+0xe3c>
 800665a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800665c:	1cdf      	adds	r7, r3, #3
 800665e:	db01      	blt.n	8006664 <_svfprintf_r+0xe34>
 8006660:	4599      	cmp	r9, r3
 8006662:	da68      	bge.n	8006736 <_svfprintf_r+0xf06>
 8006664:	9b02      	ldr	r3, [sp, #8]
 8006666:	3b02      	subs	r3, #2
 8006668:	9302      	str	r3, [sp, #8]
 800666a:	e002      	b.n	8006672 <_svfprintf_r+0xe42>
 800666c:	9b02      	ldr	r3, [sp, #8]
 800666e:	2b65      	cmp	r3, #101	; 0x65
 8006670:	dc4a      	bgt.n	8006708 <_svfprintf_r+0xed8>
 8006672:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006674:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8006678:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800667c:	3b01      	subs	r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	9319      	str	r3, [sp, #100]	; 0x64
 8006682:	bfba      	itte	lt
 8006684:	425b      	neglt	r3, r3
 8006686:	222d      	movlt	r2, #45	; 0x2d
 8006688:	222b      	movge	r2, #43	; 0x2b
 800668a:	2b09      	cmp	r3, #9
 800668c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8006690:	dd24      	ble.n	80066dc <_svfprintf_r+0xeac>
 8006692:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8006696:	200a      	movs	r0, #10
 8006698:	fb93 f1f0 	sdiv	r1, r3, r0
 800669c:	fb00 3311 	mls	r3, r0, r1, r3
 80066a0:	3330      	adds	r3, #48	; 0x30
 80066a2:	2909      	cmp	r1, #9
 80066a4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80066a8:	460b      	mov	r3, r1
 80066aa:	dcf5      	bgt.n	8006698 <_svfprintf_r+0xe68>
 80066ac:	3330      	adds	r3, #48	; 0x30
 80066ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80066b2:	1e51      	subs	r1, r2, #1
 80066b4:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80066b8:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80066bc:	4281      	cmp	r1, r0
 80066be:	461a      	mov	r2, r3
 80066c0:	d213      	bcs.n	80066ea <_svfprintf_r+0xeba>
 80066c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066c6:	f803 2b01 	strb.w	r2, [r3], #1
 80066ca:	e7f7      	b.n	80066bc <_svfprintf_r+0xe8c>
 80066cc:	0800cce0 	.word	0x0800cce0
 80066d0:	0800cd24 	.word	0x0800cd24
 80066d4:	0800ccf8 	.word	0x0800ccf8
 80066d8:	0800ccfc 	.word	0x0800ccfc
 80066dc:	2230      	movs	r2, #48	; 0x30
 80066de:	4413      	add	r3, r2
 80066e0:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80066e4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80066e8:	aa1c      	add	r2, sp, #112	; 0x70
 80066ea:	ab1b      	add	r3, sp, #108	; 0x6c
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	9a04      	ldr	r2, [sp, #16]
 80066f0:	9310      	str	r3, [sp, #64]	; 0x40
 80066f2:	2a01      	cmp	r2, #1
 80066f4:	eb03 0902 	add.w	r9, r3, r2
 80066f8:	dc02      	bgt.n	8006700 <_svfprintf_r+0xed0>
 80066fa:	f015 0701 	ands.w	r7, r5, #1
 80066fe:	d032      	beq.n	8006766 <_svfprintf_r+0xf36>
 8006700:	9b08      	ldr	r3, [sp, #32]
 8006702:	2700      	movs	r7, #0
 8006704:	4499      	add	r9, r3
 8006706:	e02e      	b.n	8006766 <_svfprintf_r+0xf36>
 8006708:	9b02      	ldr	r3, [sp, #8]
 800670a:	2b66      	cmp	r3, #102	; 0x66
 800670c:	d113      	bne.n	8006736 <_svfprintf_r+0xf06>
 800670e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006710:	2b00      	cmp	r3, #0
 8006712:	dd07      	ble.n	8006724 <_svfprintf_r+0xef4>
 8006714:	f1b9 0f00 	cmp.w	r9, #0
 8006718:	d101      	bne.n	800671e <_svfprintf_r+0xeee>
 800671a:	07ee      	lsls	r6, r5, #31
 800671c:	d521      	bpl.n	8006762 <_svfprintf_r+0xf32>
 800671e:	9a08      	ldr	r2, [sp, #32]
 8006720:	4413      	add	r3, r2
 8006722:	e006      	b.n	8006732 <_svfprintf_r+0xf02>
 8006724:	f1b9 0f00 	cmp.w	r9, #0
 8006728:	d101      	bne.n	800672e <_svfprintf_r+0xefe>
 800672a:	07ed      	lsls	r5, r5, #31
 800672c:	d514      	bpl.n	8006758 <_svfprintf_r+0xf28>
 800672e:	9b08      	ldr	r3, [sp, #32]
 8006730:	3301      	adds	r3, #1
 8006732:	444b      	add	r3, r9
 8006734:	e015      	b.n	8006762 <_svfprintf_r+0xf32>
 8006736:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006738:	9a04      	ldr	r2, [sp, #16]
 800673a:	4293      	cmp	r3, r2
 800673c:	db03      	blt.n	8006746 <_svfprintf_r+0xf16>
 800673e:	07e8      	lsls	r0, r5, #31
 8006740:	d50d      	bpl.n	800675e <_svfprintf_r+0xf2e>
 8006742:	9a08      	ldr	r2, [sp, #32]
 8006744:	e006      	b.n	8006754 <_svfprintf_r+0xf24>
 8006746:	9a04      	ldr	r2, [sp, #16]
 8006748:	9908      	ldr	r1, [sp, #32]
 800674a:	2b00      	cmp	r3, #0
 800674c:	440a      	add	r2, r1
 800674e:	dc05      	bgt.n	800675c <_svfprintf_r+0xf2c>
 8006750:	f1c3 0301 	rsb	r3, r3, #1
 8006754:	4413      	add	r3, r2
 8006756:	e002      	b.n	800675e <_svfprintf_r+0xf2e>
 8006758:	2301      	movs	r3, #1
 800675a:	e002      	b.n	8006762 <_svfprintf_r+0xf32>
 800675c:	4613      	mov	r3, r2
 800675e:	2267      	movs	r2, #103	; 0x67
 8006760:	9202      	str	r2, [sp, #8]
 8006762:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8006764:	4699      	mov	r9, r3
 8006766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006768:	b113      	cbz	r3, 8006770 <_svfprintf_r+0xf40>
 800676a:	232d      	movs	r3, #45	; 0x2d
 800676c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006770:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006772:	2600      	movs	r6, #0
 8006774:	f7ff bb4c 	b.w	8005e10 <_svfprintf_r+0x5e0>
 8006778:	2200      	movs	r2, #0
 800677a:	2300      	movs	r3, #0
 800677c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006780:	f7fa f9a8 	bl	8000ad4 <__aeabi_dcmplt>
 8006784:	b110      	cbz	r0, 800678c <_svfprintf_r+0xf5c>
 8006786:	232d      	movs	r3, #45	; 0x2d
 8006788:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800678c:	4b07      	ldr	r3, [pc, #28]	; (80067ac <_svfprintf_r+0xf7c>)
 800678e:	4a08      	ldr	r2, [pc, #32]	; (80067b0 <_svfprintf_r+0xf80>)
 8006790:	e6e3      	b.n	800655a <_svfprintf_r+0xd2a>
 8006792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006794:	1a1b      	subs	r3, r3, r0
 8006796:	9304      	str	r3, [sp, #16]
 8006798:	e75f      	b.n	800665a <_svfprintf_r+0xe2a>
 800679a:	ea56 0207 	orrs.w	r2, r6, r7
 800679e:	f47f aaaa 	bne.w	8005cf6 <_svfprintf_r+0x4c6>
 80067a2:	f7ff baaf 	b.w	8005d04 <_svfprintf_r+0x4d4>
 80067a6:	b03d      	add	sp, #244	; 0xf4
 80067a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ac:	0800ccf0 	.word	0x0800ccf0
 80067b0:	0800ccf4 	.word	0x0800ccf4

080067b4 <time>:
 80067b4:	b513      	push	{r0, r1, r4, lr}
 80067b6:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <time+0x24>)
 80067b8:	4604      	mov	r4, r0
 80067ba:	2200      	movs	r2, #0
 80067bc:	4669      	mov	r1, sp
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	f003 fb08 	bl	8009dd4 <_gettimeofday_r>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	db03      	blt.n	80067d0 <time+0x1c>
 80067c8:	9800      	ldr	r0, [sp, #0]
 80067ca:	b11c      	cbz	r4, 80067d4 <time+0x20>
 80067cc:	6020      	str	r0, [r4, #0]
 80067ce:	e001      	b.n	80067d4 <time+0x20>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	b002      	add	sp, #8
 80067d6:	bd10      	pop	{r4, pc}
 80067d8:	20000120 	.word	0x20000120

080067dc <__sprint_r>:
 80067dc:	6893      	ldr	r3, [r2, #8]
 80067de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e2:	4680      	mov	r8, r0
 80067e4:	460f      	mov	r7, r1
 80067e6:	4614      	mov	r4, r2
 80067e8:	b91b      	cbnz	r3, 80067f2 <__sprint_r+0x16>
 80067ea:	6053      	str	r3, [r2, #4]
 80067ec:	4618      	mov	r0, r3
 80067ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80067f4:	049d      	lsls	r5, r3, #18
 80067f6:	d51c      	bpl.n	8006832 <__sprint_r+0x56>
 80067f8:	6815      	ldr	r5, [r2, #0]
 80067fa:	68a0      	ldr	r0, [r4, #8]
 80067fc:	3508      	adds	r5, #8
 80067fe:	b1d0      	cbz	r0, 8006836 <__sprint_r+0x5a>
 8006800:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8006804:	f855 ac08 	ldr.w	sl, [r5, #-8]
 8006808:	08b6      	lsrs	r6, r6, #2
 800680a:	f04f 0900 	mov.w	r9, #0
 800680e:	454e      	cmp	r6, r9
 8006810:	dd0a      	ble.n	8006828 <__sprint_r+0x4c>
 8006812:	463a      	mov	r2, r7
 8006814:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 8006818:	4640      	mov	r0, r8
 800681a:	f002 fd30 	bl	800927e <_fputwc_r>
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	d009      	beq.n	8006836 <__sprint_r+0x5a>
 8006822:	f109 0901 	add.w	r9, r9, #1
 8006826:	e7f2      	b.n	800680e <__sprint_r+0x32>
 8006828:	68a3      	ldr	r3, [r4, #8]
 800682a:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 800682e:	60a6      	str	r6, [r4, #8]
 8006830:	e7e3      	b.n	80067fa <__sprint_r+0x1e>
 8006832:	f002 fe49 	bl	80094c8 <__sfvwrite_r>
 8006836:	2300      	movs	r3, #0
 8006838:	60a3      	str	r3, [r4, #8]
 800683a:	6063      	str	r3, [r4, #4]
 800683c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006840 <_vfiprintf_r>:
 8006840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006844:	b0ab      	sub	sp, #172	; 0xac
 8006846:	4689      	mov	r9, r1
 8006848:	9202      	str	r2, [sp, #8]
 800684a:	461d      	mov	r5, r3
 800684c:	461c      	mov	r4, r3
 800684e:	4683      	mov	fp, r0
 8006850:	b118      	cbz	r0, 800685a <_vfiprintf_r+0x1a>
 8006852:	6983      	ldr	r3, [r0, #24]
 8006854:	b90b      	cbnz	r3, 800685a <_vfiprintf_r+0x1a>
 8006856:	f002 fc61 	bl	800911c <__sinit>
 800685a:	4bb0      	ldr	r3, [pc, #704]	; (8006b1c <_vfiprintf_r+0x2dc>)
 800685c:	4599      	cmp	r9, r3
 800685e:	d102      	bne.n	8006866 <_vfiprintf_r+0x26>
 8006860:	f8db 9004 	ldr.w	r9, [fp, #4]
 8006864:	e00a      	b.n	800687c <_vfiprintf_r+0x3c>
 8006866:	4bae      	ldr	r3, [pc, #696]	; (8006b20 <_vfiprintf_r+0x2e0>)
 8006868:	4599      	cmp	r9, r3
 800686a:	d102      	bne.n	8006872 <_vfiprintf_r+0x32>
 800686c:	f8db 9008 	ldr.w	r9, [fp, #8]
 8006870:	e004      	b.n	800687c <_vfiprintf_r+0x3c>
 8006872:	4bac      	ldr	r3, [pc, #688]	; (8006b24 <_vfiprintf_r+0x2e4>)
 8006874:	4599      	cmp	r9, r3
 8006876:	bf08      	it	eq
 8006878:	f8db 900c 	ldreq.w	r9, [fp, #12]
 800687c:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8006880:	049f      	lsls	r7, r3, #18
 8006882:	d409      	bmi.n	8006898 <_vfiprintf_r+0x58>
 8006884:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8006888:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800688c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006890:	f8a9 300c 	strh.w	r3, [r9, #12]
 8006894:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
 8006898:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800689c:	071e      	lsls	r6, r3, #28
 800689e:	d509      	bpl.n	80068b4 <_vfiprintf_r+0x74>
 80068a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068a4:	b133      	cbz	r3, 80068b4 <_vfiprintf_r+0x74>
 80068a6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80068aa:	f003 031a 	and.w	r3, r3, #26
 80068ae:	2b0a      	cmp	r3, #10
 80068b0:	d114      	bne.n	80068dc <_vfiprintf_r+0x9c>
 80068b2:	e008      	b.n	80068c6 <_vfiprintf_r+0x86>
 80068b4:	4649      	mov	r1, r9
 80068b6:	4658      	mov	r0, fp
 80068b8:	f001 fc90 	bl	80081dc <__swsetup_r>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d0f2      	beq.n	80068a6 <_vfiprintf_r+0x66>
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	e3e0      	b.n	8007088 <_vfiprintf_r+0x848>
 80068c6:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	db06      	blt.n	80068dc <_vfiprintf_r+0x9c>
 80068ce:	462b      	mov	r3, r5
 80068d0:	9a02      	ldr	r2, [sp, #8]
 80068d2:	4649      	mov	r1, r9
 80068d4:	4658      	mov	r0, fp
 80068d6:	f000 fbdf 	bl	8007098 <__sbprintf>
 80068da:	e3d5      	b.n	8007088 <_vfiprintf_r+0x848>
 80068dc:	2300      	movs	r3, #0
 80068de:	ae1a      	add	r6, sp, #104	; 0x68
 80068e0:	960d      	str	r6, [sp, #52]	; 0x34
 80068e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80068e4:	930e      	str	r3, [sp, #56]	; 0x38
 80068e6:	9306      	str	r3, [sp, #24]
 80068e8:	9304      	str	r3, [sp, #16]
 80068ea:	9f02      	ldr	r7, [sp, #8]
 80068ec:	463d      	mov	r5, r7
 80068ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80068f2:	b11b      	cbz	r3, 80068fc <_vfiprintf_r+0xbc>
 80068f4:	2b25      	cmp	r3, #37	; 0x25
 80068f6:	d001      	beq.n	80068fc <_vfiprintf_r+0xbc>
 80068f8:	462f      	mov	r7, r5
 80068fa:	e7f7      	b.n	80068ec <_vfiprintf_r+0xac>
 80068fc:	9b02      	ldr	r3, [sp, #8]
 80068fe:	ebb7 0803 	subs.w	r8, r7, r3
 8006902:	d017      	beq.n	8006934 <_vfiprintf_r+0xf4>
 8006904:	e886 0108 	stmia.w	r6, {r3, r8}
 8006908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800690a:	4443      	add	r3, r8
 800690c:	930f      	str	r3, [sp, #60]	; 0x3c
 800690e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006910:	3301      	adds	r3, #1
 8006912:	2b07      	cmp	r3, #7
 8006914:	930e      	str	r3, [sp, #56]	; 0x38
 8006916:	dc01      	bgt.n	800691c <_vfiprintf_r+0xdc>
 8006918:	3608      	adds	r6, #8
 800691a:	e008      	b.n	800692e <_vfiprintf_r+0xee>
 800691c:	aa0d      	add	r2, sp, #52	; 0x34
 800691e:	4649      	mov	r1, r9
 8006920:	4658      	mov	r0, fp
 8006922:	f7ff ff5b 	bl	80067dc <__sprint_r>
 8006926:	2800      	cmp	r0, #0
 8006928:	f040 83a2 	bne.w	8007070 <_vfiprintf_r+0x830>
 800692c:	ae1a      	add	r6, sp, #104	; 0x68
 800692e:	9b04      	ldr	r3, [sp, #16]
 8006930:	4443      	add	r3, r8
 8006932:	9304      	str	r3, [sp, #16]
 8006934:	783b      	ldrb	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8393 	beq.w	8007062 <_vfiprintf_r+0x822>
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	2200      	movs	r2, #0
 8006942:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006946:	f04f 33ff 	mov.w	r3, #4294967295
 800694a:	4611      	mov	r1, r2
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	9203      	str	r2, [sp, #12]
 8006950:	4617      	mov	r7, r2
 8006952:	f04f 0e0a 	mov.w	lr, #10
 8006956:	1c6b      	adds	r3, r5, #1
 8006958:	9302      	str	r3, [sp, #8]
 800695a:	782b      	ldrb	r3, [r5, #0]
 800695c:	2b58      	cmp	r3, #88	; 0x58
 800695e:	d064      	beq.n	8006a2a <_vfiprintf_r+0x1ea>
 8006960:	dc2a      	bgt.n	80069b8 <_vfiprintf_r+0x178>
 8006962:	2b2e      	cmp	r3, #46	; 0x2e
 8006964:	d077      	beq.n	8006a56 <_vfiprintf_r+0x216>
 8006966:	dc13      	bgt.n	8006990 <_vfiprintf_r+0x150>
 8006968:	2b2a      	cmp	r3, #42	; 0x2a
 800696a:	d066      	beq.n	8006a3a <_vfiprintf_r+0x1fa>
 800696c:	dc08      	bgt.n	8006980 <_vfiprintf_r+0x140>
 800696e:	2b20      	cmp	r3, #32
 8006970:	d060      	beq.n	8006a34 <_vfiprintf_r+0x1f4>
 8006972:	2b23      	cmp	r3, #35	; 0x23
 8006974:	f040 820c 	bne.w	8006d90 <_vfiprintf_r+0x550>
 8006978:	f047 0701 	orr.w	r7, r7, #1
 800697c:	9d02      	ldr	r5, [sp, #8]
 800697e:	e7ea      	b.n	8006956 <_vfiprintf_r+0x116>
 8006980:	2b2b      	cmp	r3, #43	; 0x2b
 8006982:	d102      	bne.n	800698a <_vfiprintf_r+0x14a>
 8006984:	2201      	movs	r2, #1
 8006986:	4619      	mov	r1, r3
 8006988:	e7f8      	b.n	800697c <_vfiprintf_r+0x13c>
 800698a:	2b2d      	cmp	r3, #45	; 0x2d
 800698c:	d060      	beq.n	8006a50 <_vfiprintf_r+0x210>
 800698e:	e1ff      	b.n	8006d90 <_vfiprintf_r+0x550>
 8006990:	2b39      	cmp	r3, #57	; 0x39
 8006992:	dc07      	bgt.n	80069a4 <_vfiprintf_r+0x164>
 8006994:	2b31      	cmp	r3, #49	; 0x31
 8006996:	da7f      	bge.n	8006a98 <_vfiprintf_r+0x258>
 8006998:	2b30      	cmp	r3, #48	; 0x30
 800699a:	f040 81f9 	bne.w	8006d90 <_vfiprintf_r+0x550>
 800699e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 80069a2:	e7eb      	b.n	800697c <_vfiprintf_r+0x13c>
 80069a4:	2b4f      	cmp	r3, #79	; 0x4f
 80069a6:	f000 80f4 	beq.w	8006b92 <_vfiprintf_r+0x352>
 80069aa:	2b55      	cmp	r3, #85	; 0x55
 80069ac:	f000 812b 	beq.w	8006c06 <_vfiprintf_r+0x3c6>
 80069b0:	2b44      	cmp	r3, #68	; 0x44
 80069b2:	f040 81ed 	bne.w	8006d90 <_vfiprintf_r+0x550>
 80069b6:	e09a      	b.n	8006aee <_vfiprintf_r+0x2ae>
 80069b8:	2b6e      	cmp	r3, #110	; 0x6e
 80069ba:	f000 80cc 	beq.w	8006b56 <_vfiprintf_r+0x316>
 80069be:	dc0d      	bgt.n	80069dc <_vfiprintf_r+0x19c>
 80069c0:	2b68      	cmp	r3, #104	; 0x68
 80069c2:	d079      	beq.n	8006ab8 <_vfiprintf_r+0x278>
 80069c4:	dc05      	bgt.n	80069d2 <_vfiprintf_r+0x192>
 80069c6:	2b63      	cmp	r3, #99	; 0x63
 80069c8:	f000 8087 	beq.w	8006ada <_vfiprintf_r+0x29a>
 80069cc:	2b64      	cmp	r3, #100	; 0x64
 80069ce:	d027      	beq.n	8006a20 <_vfiprintf_r+0x1e0>
 80069d0:	e1de      	b.n	8006d90 <_vfiprintf_r+0x550>
 80069d2:	2b69      	cmp	r3, #105	; 0x69
 80069d4:	d024      	beq.n	8006a20 <_vfiprintf_r+0x1e0>
 80069d6:	2b6c      	cmp	r3, #108	; 0x6c
 80069d8:	d071      	beq.n	8006abe <_vfiprintf_r+0x27e>
 80069da:	e1d9      	b.n	8006d90 <_vfiprintf_r+0x550>
 80069dc:	2b71      	cmp	r3, #113	; 0x71
 80069de:	d079      	beq.n	8006ad4 <_vfiprintf_r+0x294>
 80069e0:	dc14      	bgt.n	8006a0c <_vfiprintf_r+0x1cc>
 80069e2:	2b6f      	cmp	r3, #111	; 0x6f
 80069e4:	f000 80d7 	beq.w	8006b96 <_vfiprintf_r+0x356>
 80069e8:	2b70      	cmp	r3, #112	; 0x70
 80069ea:	f040 81d1 	bne.w	8006d90 <_vfiprintf_r+0x550>
 80069ee:	2330      	movs	r3, #48	; 0x30
 80069f0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 80069f4:	2378      	movs	r3, #120	; 0x78
 80069f6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 80069fa:	4b4b      	ldr	r3, [pc, #300]	; (8006b28 <_vfiprintf_r+0x2e8>)
 80069fc:	9306      	str	r3, [sp, #24]
 80069fe:	f104 0804 	add.w	r8, r4, #4
 8006a02:	2500      	movs	r5, #0
 8006a04:	6824      	ldr	r4, [r4, #0]
 8006a06:	f047 0702 	orr.w	r7, r7, #2
 8006a0a:	e13b      	b.n	8006c84 <_vfiprintf_r+0x444>
 8006a0c:	2b75      	cmp	r3, #117	; 0x75
 8006a0e:	f000 80fc 	beq.w	8006c0a <_vfiprintf_r+0x3ca>
 8006a12:	2b78      	cmp	r3, #120	; 0x78
 8006a14:	f000 8110 	beq.w	8006c38 <_vfiprintf_r+0x3f8>
 8006a18:	2b73      	cmp	r3, #115	; 0x73
 8006a1a:	f040 81b9 	bne.w	8006d90 <_vfiprintf_r+0x550>
 8006a1e:	e0d4      	b.n	8006bca <_vfiprintf_r+0x38a>
 8006a20:	2a00      	cmp	r2, #0
 8006a22:	d069      	beq.n	8006af8 <_vfiprintf_r+0x2b8>
 8006a24:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006a28:	e066      	b.n	8006af8 <_vfiprintf_r+0x2b8>
 8006a2a:	b10a      	cbz	r2, 8006a30 <_vfiprintf_r+0x1f0>
 8006a2c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006a30:	4a3e      	ldr	r2, [pc, #248]	; (8006b2c <_vfiprintf_r+0x2ec>)
 8006a32:	e105      	b.n	8006c40 <_vfiprintf_r+0x400>
 8006a34:	2900      	cmp	r1, #0
 8006a36:	d0a5      	beq.n	8006984 <_vfiprintf_r+0x144>
 8006a38:	e7a0      	b.n	800697c <_vfiprintf_r+0x13c>
 8006a3a:	6820      	ldr	r0, [r4, #0]
 8006a3c:	9003      	str	r0, [sp, #12]
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f104 0304 	add.w	r3, r4, #4
 8006a44:	db01      	blt.n	8006a4a <_vfiprintf_r+0x20a>
 8006a46:	461c      	mov	r4, r3
 8006a48:	e798      	b.n	800697c <_vfiprintf_r+0x13c>
 8006a4a:	4240      	negs	r0, r0
 8006a4c:	9003      	str	r0, [sp, #12]
 8006a4e:	461c      	mov	r4, r3
 8006a50:	f047 0704 	orr.w	r7, r7, #4
 8006a54:	e792      	b.n	800697c <_vfiprintf_r+0x13c>
 8006a56:	9b02      	ldr	r3, [sp, #8]
 8006a58:	1c58      	adds	r0, r3, #1
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a5e:	d001      	beq.n	8006a64 <_vfiprintf_r+0x224>
 8006a60:	2500      	movs	r5, #0
 8006a62:	e00a      	b.n	8006a7a <_vfiprintf_r+0x23a>
 8006a64:	1d23      	adds	r3, r4, #4
 8006a66:	6824      	ldr	r4, [r4, #0]
 8006a68:	9401      	str	r4, [sp, #4]
 8006a6a:	2c00      	cmp	r4, #0
 8006a6c:	9002      	str	r0, [sp, #8]
 8006a6e:	461c      	mov	r4, r3
 8006a70:	da84      	bge.n	800697c <_vfiprintf_r+0x13c>
 8006a72:	f04f 33ff 	mov.w	r3, #4294967295
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	e780      	b.n	800697c <_vfiprintf_r+0x13c>
 8006a7a:	9002      	str	r0, [sp, #8]
 8006a7c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006a80:	2809      	cmp	r0, #9
 8006a82:	d805      	bhi.n	8006a90 <_vfiprintf_r+0x250>
 8006a84:	fb0e 0505 	mla	r5, lr, r5, r0
 8006a88:	9802      	ldr	r0, [sp, #8]
 8006a8a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006a8e:	e7f4      	b.n	8006a7a <_vfiprintf_r+0x23a>
 8006a90:	ea45 70e5 	orr.w	r0, r5, r5, asr #31
 8006a94:	9001      	str	r0, [sp, #4]
 8006a96:	e761      	b.n	800695c <_vfiprintf_r+0x11c>
 8006a98:	2000      	movs	r0, #0
 8006a9a:	9003      	str	r0, [sp, #12]
 8006a9c:	9803      	ldr	r0, [sp, #12]
 8006a9e:	3b30      	subs	r3, #48	; 0x30
 8006aa0:	fb0e 3300 	mla	r3, lr, r0, r3
 8006aa4:	9802      	ldr	r0, [sp, #8]
 8006aa6:	9303      	str	r3, [sp, #12]
 8006aa8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006aac:	9002      	str	r0, [sp, #8]
 8006aae:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006ab2:	2809      	cmp	r0, #9
 8006ab4:	d9f2      	bls.n	8006a9c <_vfiprintf_r+0x25c>
 8006ab6:	e751      	b.n	800695c <_vfiprintf_r+0x11c>
 8006ab8:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8006abc:	e75e      	b.n	800697c <_vfiprintf_r+0x13c>
 8006abe:	9b02      	ldr	r3, [sp, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b6c      	cmp	r3, #108	; 0x6c
 8006ac4:	d103      	bne.n	8006ace <_vfiprintf_r+0x28e>
 8006ac6:	9b02      	ldr	r3, [sp, #8]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	9302      	str	r3, [sp, #8]
 8006acc:	e002      	b.n	8006ad4 <_vfiprintf_r+0x294>
 8006ace:	f047 0710 	orr.w	r7, r7, #16
 8006ad2:	e753      	b.n	800697c <_vfiprintf_r+0x13c>
 8006ad4:	f047 0720 	orr.w	r7, r7, #32
 8006ad8:	e750      	b.n	800697c <_vfiprintf_r+0x13c>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	f104 0804 	add.w	r8, r4, #4
 8006ae8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006aec:	e15d      	b.n	8006daa <_vfiprintf_r+0x56a>
 8006aee:	b10a      	cbz	r2, 8006af4 <_vfiprintf_r+0x2b4>
 8006af0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006af4:	f047 0710 	orr.w	r7, r7, #16
 8006af8:	06b8      	lsls	r0, r7, #26
 8006afa:	d507      	bpl.n	8006b0c <_vfiprintf_r+0x2cc>
 8006afc:	3407      	adds	r4, #7
 8006afe:	f024 0407 	bic.w	r4, r4, #7
 8006b02:	f104 0808 	add.w	r8, r4, #8
 8006b06:	e9d4 4500 	ldrd	r4, r5, [r4]
 8006b0a:	e017      	b.n	8006b3c <_vfiprintf_r+0x2fc>
 8006b0c:	f017 0f10 	tst.w	r7, #16
 8006b10:	f104 0804 	add.w	r8, r4, #4
 8006b14:	d00c      	beq.n	8006b30 <_vfiprintf_r+0x2f0>
 8006b16:	6824      	ldr	r4, [r4, #0]
 8006b18:	e00f      	b.n	8006b3a <_vfiprintf_r+0x2fa>
 8006b1a:	bf00      	nop
 8006b1c:	0800cd84 	.word	0x0800cd84
 8006b20:	0800cda4 	.word	0x0800cda4
 8006b24:	0800cdc4 	.word	0x0800cdc4
 8006b28:	0800cd11 	.word	0x0800cd11
 8006b2c:	0800cd00 	.word	0x0800cd00
 8006b30:	6824      	ldr	r4, [r4, #0]
 8006b32:	f017 0f40 	tst.w	r7, #64	; 0x40
 8006b36:	bf18      	it	ne
 8006b38:	b224      	sxthne	r4, r4
 8006b3a:	17e5      	asrs	r5, r4, #31
 8006b3c:	2c00      	cmp	r4, #0
 8006b3e:	f175 0300 	sbcs.w	r3, r5, #0
 8006b42:	f280 80a5 	bge.w	8006c90 <_vfiprintf_r+0x450>
 8006b46:	4264      	negs	r4, r4
 8006b48:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006b4c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006b50:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006b54:	e09c      	b.n	8006c90 <_vfiprintf_r+0x450>
 8006b56:	b10a      	cbz	r2, 8006b5c <_vfiprintf_r+0x31c>
 8006b58:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006b5c:	f017 0f20 	tst.w	r7, #32
 8006b60:	f104 0304 	add.w	r3, r4, #4
 8006b64:	d007      	beq.n	8006b76 <_vfiprintf_r+0x336>
 8006b66:	9904      	ldr	r1, [sp, #16]
 8006b68:	6822      	ldr	r2, [r4, #0]
 8006b6a:	17cd      	asrs	r5, r1, #31
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	4629      	mov	r1, r5
 8006b70:	e9c2 0100 	strd	r0, r1, [r2]
 8006b74:	e00b      	b.n	8006b8e <_vfiprintf_r+0x34e>
 8006b76:	06f9      	lsls	r1, r7, #27
 8006b78:	d406      	bmi.n	8006b88 <_vfiprintf_r+0x348>
 8006b7a:	067a      	lsls	r2, r7, #25
 8006b7c:	d504      	bpl.n	8006b88 <_vfiprintf_r+0x348>
 8006b7e:	6822      	ldr	r2, [r4, #0]
 8006b80:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8006b84:	8011      	strh	r1, [r2, #0]
 8006b86:	e002      	b.n	8006b8e <_vfiprintf_r+0x34e>
 8006b88:	6822      	ldr	r2, [r4, #0]
 8006b8a:	9904      	ldr	r1, [sp, #16]
 8006b8c:	6011      	str	r1, [r2, #0]
 8006b8e:	461c      	mov	r4, r3
 8006b90:	e6ab      	b.n	80068ea <_vfiprintf_r+0xaa>
 8006b92:	f047 0710 	orr.w	r7, r7, #16
 8006b96:	f017 0320 	ands.w	r3, r7, #32
 8006b9a:	d008      	beq.n	8006bae <_vfiprintf_r+0x36e>
 8006b9c:	3407      	adds	r4, #7
 8006b9e:	f024 0407 	bic.w	r4, r4, #7
 8006ba2:	f104 0808 	add.w	r8, r4, #8
 8006ba6:	e9d4 4500 	ldrd	r4, r5, [r4]
 8006baa:	2300      	movs	r3, #0
 8006bac:	e06b      	b.n	8006c86 <_vfiprintf_r+0x446>
 8006bae:	f017 0210 	ands.w	r2, r7, #16
 8006bb2:	f104 0804 	add.w	r8, r4, #4
 8006bb6:	d105      	bne.n	8006bc4 <_vfiprintf_r+0x384>
 8006bb8:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8006bbc:	d002      	beq.n	8006bc4 <_vfiprintf_r+0x384>
 8006bbe:	8824      	ldrh	r4, [r4, #0]
 8006bc0:	2500      	movs	r5, #0
 8006bc2:	e7f2      	b.n	8006baa <_vfiprintf_r+0x36a>
 8006bc4:	6824      	ldr	r4, [r4, #0]
 8006bc6:	2500      	movs	r5, #0
 8006bc8:	e05d      	b.n	8006c86 <_vfiprintf_r+0x446>
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006bd2:	9b01      	ldr	r3, [sp, #4]
 8006bd4:	f8d4 a000 	ldr.w	sl, [r4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f104 0804 	add.w	r8, r4, #4
 8006bde:	db0b      	blt.n	8006bf8 <_vfiprintf_r+0x3b8>
 8006be0:	461a      	mov	r2, r3
 8006be2:	2100      	movs	r1, #0
 8006be4:	4650      	mov	r0, sl
 8006be6:	f7f9 faf3 	bl	80001d0 <memchr>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	f000 80e4 	beq.w	8006db8 <_vfiprintf_r+0x578>
 8006bf0:	ebca 0300 	rsb	r3, sl, r0
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	e003      	b.n	8006c00 <_vfiprintf_r+0x3c0>
 8006bf8:	4650      	mov	r0, sl
 8006bfa:	f7f9 fb39 	bl	8000270 <strlen>
 8006bfe:	9001      	str	r0, [sp, #4]
 8006c00:	2300      	movs	r3, #0
 8006c02:	9305      	str	r3, [sp, #20]
 8006c04:	e0d9      	b.n	8006dba <_vfiprintf_r+0x57a>
 8006c06:	f047 0710 	orr.w	r7, r7, #16
 8006c0a:	06bb      	lsls	r3, r7, #26
 8006c0c:	d507      	bpl.n	8006c1e <_vfiprintf_r+0x3de>
 8006c0e:	3407      	adds	r4, #7
 8006c10:	f024 0407 	bic.w	r4, r4, #7
 8006c14:	f104 0808 	add.w	r8, r4, #8
 8006c18:	e9d4 4500 	ldrd	r4, r5, [r4]
 8006c1c:	e00a      	b.n	8006c34 <_vfiprintf_r+0x3f4>
 8006c1e:	f017 0f10 	tst.w	r7, #16
 8006c22:	f104 0804 	add.w	r8, r4, #4
 8006c26:	d103      	bne.n	8006c30 <_vfiprintf_r+0x3f0>
 8006c28:	067d      	lsls	r5, r7, #25
 8006c2a:	d501      	bpl.n	8006c30 <_vfiprintf_r+0x3f0>
 8006c2c:	8824      	ldrh	r4, [r4, #0]
 8006c2e:	e000      	b.n	8006c32 <_vfiprintf_r+0x3f2>
 8006c30:	6824      	ldr	r4, [r4, #0]
 8006c32:	2500      	movs	r5, #0
 8006c34:	2301      	movs	r3, #1
 8006c36:	e026      	b.n	8006c86 <_vfiprintf_r+0x446>
 8006c38:	b10a      	cbz	r2, 8006c3e <_vfiprintf_r+0x3fe>
 8006c3a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006c3e:	4ab0      	ldr	r2, [pc, #704]	; (8006f00 <_vfiprintf_r+0x6c0>)
 8006c40:	9206      	str	r2, [sp, #24]
 8006c42:	06b8      	lsls	r0, r7, #26
 8006c44:	d507      	bpl.n	8006c56 <_vfiprintf_r+0x416>
 8006c46:	3407      	adds	r4, #7
 8006c48:	f024 0407 	bic.w	r4, r4, #7
 8006c4c:	f104 0808 	add.w	r8, r4, #8
 8006c50:	e9d4 4500 	ldrd	r4, r5, [r4]
 8006c54:	e00a      	b.n	8006c6c <_vfiprintf_r+0x42c>
 8006c56:	f017 0f10 	tst.w	r7, #16
 8006c5a:	f104 0804 	add.w	r8, r4, #4
 8006c5e:	d103      	bne.n	8006c68 <_vfiprintf_r+0x428>
 8006c60:	0679      	lsls	r1, r7, #25
 8006c62:	d501      	bpl.n	8006c68 <_vfiprintf_r+0x428>
 8006c64:	8824      	ldrh	r4, [r4, #0]
 8006c66:	e000      	b.n	8006c6a <_vfiprintf_r+0x42a>
 8006c68:	6824      	ldr	r4, [r4, #0]
 8006c6a:	2500      	movs	r5, #0
 8006c6c:	07fa      	lsls	r2, r7, #31
 8006c6e:	d509      	bpl.n	8006c84 <_vfiprintf_r+0x444>
 8006c70:	ea54 0205 	orrs.w	r2, r4, r5
 8006c74:	bf1f      	itttt	ne
 8006c76:	2230      	movne	r2, #48	; 0x30
 8006c78:	f88d 2030 	strbne.w	r2, [sp, #48]	; 0x30
 8006c7c:	f88d 3031 	strbne.w	r3, [sp, #49]	; 0x31
 8006c80:	f047 0702 	orrne.w	r7, r7, #2
 8006c84:	2302      	movs	r3, #2
 8006c86:	f04f 0200 	mov.w	r2, #0
 8006c8a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8006c8e:	e000      	b.n	8006c92 <_vfiprintf_r+0x452>
 8006c90:	2301      	movs	r3, #1
 8006c92:	9a01      	ldr	r2, [sp, #4]
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	f2c0 81f2 	blt.w	800707e <_vfiprintf_r+0x83e>
 8006c9a:	ea54 0105 	orrs.w	r1, r4, r5
 8006c9e:	f027 0280 	bic.w	r2, r7, #128	; 0x80
 8006ca2:	d103      	bne.n	8006cac <_vfiprintf_r+0x46c>
 8006ca4:	9901      	ldr	r1, [sp, #4]
 8006ca6:	2900      	cmp	r1, #0
 8006ca8:	d05f      	beq.n	8006d6a <_vfiprintf_r+0x52a>
 8006caa:	e006      	b.n	8006cba <_vfiprintf_r+0x47a>
 8006cac:	4617      	mov	r7, r2
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d025      	beq.n	8006cfe <_vfiprintf_r+0x4be>
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d046      	beq.n	8006d44 <_vfiprintf_r+0x504>
 8006cb6:	463a      	mov	r2, r7
 8006cb8:	e007      	b.n	8006cca <_vfiprintf_r+0x48a>
 8006cba:	4617      	mov	r7, r2
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d022      	beq.n	8006d06 <_vfiprintf_r+0x4c6>
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d03d      	beq.n	8006d40 <_vfiprintf_r+0x500>
 8006cc4:	463a      	mov	r2, r7
 8006cc6:	2400      	movs	r4, #0
 8006cc8:	2500      	movs	r5, #0
 8006cca:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8006cce:	08e1      	lsrs	r1, r4, #3
 8006cd0:	ea41 7145 	orr.w	r1, r1, r5, lsl #29
 8006cd4:	08e8      	lsrs	r0, r5, #3
 8006cd6:	f004 0307 	and.w	r3, r4, #7
 8006cda:	4605      	mov	r5, r0
 8006cdc:	460c      	mov	r4, r1
 8006cde:	3330      	adds	r3, #48	; 0x30
 8006ce0:	ea54 0105 	orrs.w	r1, r4, r5
 8006ce4:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8006ce8:	d1f1      	bne.n	8006cce <_vfiprintf_r+0x48e>
 8006cea:	07f8      	lsls	r0, r7, #31
 8006cec:	d548      	bpl.n	8006d80 <_vfiprintf_r+0x540>
 8006cee:	2b30      	cmp	r3, #48	; 0x30
 8006cf0:	d046      	beq.n	8006d80 <_vfiprintf_r+0x540>
 8006cf2:	2330      	movs	r3, #48	; 0x30
 8006cf4:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8006cf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cfc:	e040      	b.n	8006d80 <_vfiprintf_r+0x540>
 8006cfe:	2d00      	cmp	r5, #0
 8006d00:	bf08      	it	eq
 8006d02:	2c0a      	cmpeq	r4, #10
 8006d04:	d205      	bcs.n	8006d12 <_vfiprintf_r+0x4d2>
 8006d06:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8006d0a:	3430      	adds	r4, #48	; 0x30
 8006d0c:	f80a 4d41 	strb.w	r4, [sl, #-65]!
 8006d10:	e029      	b.n	8006d66 <_vfiprintf_r+0x526>
 8006d12:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8006d16:	4620      	mov	r0, r4
 8006d18:	4629      	mov	r1, r5
 8006d1a:	220a      	movs	r2, #10
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f7f9 ff5f 	bl	8000be0 <__aeabi_uldivmod>
 8006d22:	3230      	adds	r2, #48	; 0x30
 8006d24:	f80a 2d01 	strb.w	r2, [sl, #-1]!
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	220a      	movs	r2, #10
 8006d30:	f7f9 ff56 	bl	8000be0 <__aeabi_uldivmod>
 8006d34:	4604      	mov	r4, r0
 8006d36:	460d      	mov	r5, r1
 8006d38:	ea54 0305 	orrs.w	r3, r4, r5
 8006d3c:	d1eb      	bne.n	8006d16 <_vfiprintf_r+0x4d6>
 8006d3e:	e012      	b.n	8006d66 <_vfiprintf_r+0x526>
 8006d40:	2400      	movs	r4, #0
 8006d42:	2500      	movs	r5, #0
 8006d44:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8006d48:	f004 030f 	and.w	r3, r4, #15
 8006d4c:	9a06      	ldr	r2, [sp, #24]
 8006d4e:	5cd3      	ldrb	r3, [r2, r3]
 8006d50:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8006d54:	0923      	lsrs	r3, r4, #4
 8006d56:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006d5a:	092a      	lsrs	r2, r5, #4
 8006d5c:	461c      	mov	r4, r3
 8006d5e:	4615      	mov	r5, r2
 8006d60:	ea54 0305 	orrs.w	r3, r4, r5
 8006d64:	d1f0      	bne.n	8006d48 <_vfiprintf_r+0x508>
 8006d66:	463a      	mov	r2, r7
 8006d68:	e00a      	b.n	8006d80 <_vfiprintf_r+0x540>
 8006d6a:	b93b      	cbnz	r3, 8006d7c <_vfiprintf_r+0x53c>
 8006d6c:	07f9      	lsls	r1, r7, #31
 8006d6e:	d505      	bpl.n	8006d7c <_vfiprintf_r+0x53c>
 8006d70:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8006d74:	2330      	movs	r3, #48	; 0x30
 8006d76:	f80a 3d41 	strb.w	r3, [sl, #-65]!
 8006d7a:	e001      	b.n	8006d80 <_vfiprintf_r+0x540>
 8006d7c:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8006d80:	9b01      	ldr	r3, [sp, #4]
 8006d82:	9305      	str	r3, [sp, #20]
 8006d84:	ab1a      	add	r3, sp, #104	; 0x68
 8006d86:	ebca 0303 	rsb	r3, sl, r3
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	4617      	mov	r7, r2
 8006d8e:	e014      	b.n	8006dba <_vfiprintf_r+0x57a>
 8006d90:	b10a      	cbz	r2, 8006d96 <_vfiprintf_r+0x556>
 8006d92:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 8163 	beq.w	8007062 <_vfiprintf_r+0x822>
 8006d9c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8006da8:	46a0      	mov	r8, r4
 8006daa:	2301      	movs	r3, #1
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	2300      	movs	r3, #0
 8006db0:	9305      	str	r3, [sp, #20]
 8006db2:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 8006db6:	e000      	b.n	8006dba <_vfiprintf_r+0x57a>
 8006db8:	9005      	str	r0, [sp, #20]
 8006dba:	9b05      	ldr	r3, [sp, #20]
 8006dbc:	9a01      	ldr	r2, [sp, #4]
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	bfb8      	it	lt
 8006dc2:	4613      	movlt	r3, r2
 8006dc4:	461d      	mov	r5, r3
 8006dc6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006dca:	b103      	cbz	r3, 8006dce <_vfiprintf_r+0x58e>
 8006dcc:	3501      	adds	r5, #1
 8006dce:	f017 0302 	ands.w	r3, r7, #2
 8006dd2:	9307      	str	r3, [sp, #28]
 8006dd4:	bf18      	it	ne
 8006dd6:	3502      	addne	r5, #2
 8006dd8:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 8006ddc:	9308      	str	r3, [sp, #32]
 8006dde:	d136      	bne.n	8006e4e <_vfiprintf_r+0x60e>
 8006de0:	9b03      	ldr	r3, [sp, #12]
 8006de2:	1b5c      	subs	r4, r3, r5
 8006de4:	2c00      	cmp	r4, #0
 8006de6:	dd32      	ble.n	8006e4e <_vfiprintf_r+0x60e>
 8006de8:	2310      	movs	r3, #16
 8006dea:	2c10      	cmp	r4, #16
 8006dec:	dd19      	ble.n	8006e22 <_vfiprintf_r+0x5e2>
 8006dee:	4a45      	ldr	r2, [pc, #276]	; (8006f04 <_vfiprintf_r+0x6c4>)
 8006df0:	e886 000c 	stmia.w	r6, {r2, r3}
 8006df4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006df6:	3210      	adds	r2, #16
 8006df8:	920f      	str	r2, [sp, #60]	; 0x3c
 8006dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dfc:	3201      	adds	r2, #1
 8006dfe:	2a07      	cmp	r2, #7
 8006e00:	920e      	str	r2, [sp, #56]	; 0x38
 8006e02:	dc01      	bgt.n	8006e08 <_vfiprintf_r+0x5c8>
 8006e04:	3608      	adds	r6, #8
 8006e06:	e00a      	b.n	8006e1e <_vfiprintf_r+0x5de>
 8006e08:	aa0d      	add	r2, sp, #52	; 0x34
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	4658      	mov	r0, fp
 8006e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e10:	f7ff fce4 	bl	80067dc <__sprint_r>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	f040 812b 	bne.w	8007070 <_vfiprintf_r+0x830>
 8006e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1c:	ae1a      	add	r6, sp, #104	; 0x68
 8006e1e:	3c10      	subs	r4, #16
 8006e20:	e7e3      	b.n	8006dea <_vfiprintf_r+0x5aa>
 8006e22:	4b38      	ldr	r3, [pc, #224]	; (8006f04 <_vfiprintf_r+0x6c4>)
 8006e24:	e886 0018 	stmia.w	r6, {r3, r4}
 8006e28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e2a:	441c      	add	r4, r3
 8006e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e2e:	940f      	str	r4, [sp, #60]	; 0x3c
 8006e30:	3301      	adds	r3, #1
 8006e32:	2b07      	cmp	r3, #7
 8006e34:	930e      	str	r3, [sp, #56]	; 0x38
 8006e36:	dc01      	bgt.n	8006e3c <_vfiprintf_r+0x5fc>
 8006e38:	3608      	adds	r6, #8
 8006e3a:	e008      	b.n	8006e4e <_vfiprintf_r+0x60e>
 8006e3c:	aa0d      	add	r2, sp, #52	; 0x34
 8006e3e:	4649      	mov	r1, r9
 8006e40:	4658      	mov	r0, fp
 8006e42:	f7ff fccb 	bl	80067dc <__sprint_r>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f040 8112 	bne.w	8007070 <_vfiprintf_r+0x830>
 8006e4c:	ae1a      	add	r6, sp, #104	; 0x68
 8006e4e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8006e52:	b1bb      	cbz	r3, 8006e84 <_vfiprintf_r+0x644>
 8006e54:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8006e58:	6033      	str	r3, [r6, #0]
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	6073      	str	r3, [r6, #4]
 8006e5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e60:	3301      	adds	r3, #1
 8006e62:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e66:	3301      	adds	r3, #1
 8006e68:	2b07      	cmp	r3, #7
 8006e6a:	930e      	str	r3, [sp, #56]	; 0x38
 8006e6c:	dc01      	bgt.n	8006e72 <_vfiprintf_r+0x632>
 8006e6e:	3608      	adds	r6, #8
 8006e70:	e008      	b.n	8006e84 <_vfiprintf_r+0x644>
 8006e72:	aa0d      	add	r2, sp, #52	; 0x34
 8006e74:	4649      	mov	r1, r9
 8006e76:	4658      	mov	r0, fp
 8006e78:	f7ff fcb0 	bl	80067dc <__sprint_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f040 80f7 	bne.w	8007070 <_vfiprintf_r+0x830>
 8006e82:	ae1a      	add	r6, sp, #104	; 0x68
 8006e84:	9b07      	ldr	r3, [sp, #28]
 8006e86:	b1b3      	cbz	r3, 8006eb6 <_vfiprintf_r+0x676>
 8006e88:	ab0c      	add	r3, sp, #48	; 0x30
 8006e8a:	6033      	str	r3, [r6, #0]
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	6073      	str	r3, [r6, #4]
 8006e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e92:	3302      	adds	r3, #2
 8006e94:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e98:	3301      	adds	r3, #1
 8006e9a:	2b07      	cmp	r3, #7
 8006e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8006e9e:	dc01      	bgt.n	8006ea4 <_vfiprintf_r+0x664>
 8006ea0:	3608      	adds	r6, #8
 8006ea2:	e008      	b.n	8006eb6 <_vfiprintf_r+0x676>
 8006ea4:	aa0d      	add	r2, sp, #52	; 0x34
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	4658      	mov	r0, fp
 8006eaa:	f7ff fc97 	bl	80067dc <__sprint_r>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f040 80de 	bne.w	8007070 <_vfiprintf_r+0x830>
 8006eb4:	ae1a      	add	r6, sp, #104	; 0x68
 8006eb6:	9b08      	ldr	r3, [sp, #32]
 8006eb8:	2b80      	cmp	r3, #128	; 0x80
 8006eba:	d13d      	bne.n	8006f38 <_vfiprintf_r+0x6f8>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	1b5c      	subs	r4, r3, r5
 8006ec0:	2c00      	cmp	r4, #0
 8006ec2:	dd39      	ble.n	8006f38 <_vfiprintf_r+0x6f8>
 8006ec4:	2310      	movs	r3, #16
 8006ec6:	2c10      	cmp	r4, #16
 8006ec8:	dd20      	ble.n	8006f0c <_vfiprintf_r+0x6cc>
 8006eca:	4a0f      	ldr	r2, [pc, #60]	; (8006f08 <_vfiprintf_r+0x6c8>)
 8006ecc:	e886 000c 	stmia.w	r6, {r2, r3}
 8006ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ed2:	3210      	adds	r2, #16
 8006ed4:	920f      	str	r2, [sp, #60]	; 0x3c
 8006ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ed8:	3201      	adds	r2, #1
 8006eda:	2a07      	cmp	r2, #7
 8006edc:	920e      	str	r2, [sp, #56]	; 0x38
 8006ede:	dc01      	bgt.n	8006ee4 <_vfiprintf_r+0x6a4>
 8006ee0:	3608      	adds	r6, #8
 8006ee2:	e00a      	b.n	8006efa <_vfiprintf_r+0x6ba>
 8006ee4:	aa0d      	add	r2, sp, #52	; 0x34
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	4658      	mov	r0, fp
 8006eea:	9307      	str	r3, [sp, #28]
 8006eec:	f7ff fc76 	bl	80067dc <__sprint_r>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	f040 80bd 	bne.w	8007070 <_vfiprintf_r+0x830>
 8006ef6:	9b07      	ldr	r3, [sp, #28]
 8006ef8:	ae1a      	add	r6, sp, #104	; 0x68
 8006efa:	3c10      	subs	r4, #16
 8006efc:	e7e3      	b.n	8006ec6 <_vfiprintf_r+0x686>
 8006efe:	bf00      	nop
 8006f00:	0800cd11 	.word	0x0800cd11
 8006f04:	0800cd34 	.word	0x0800cd34
 8006f08:	0800cd44 	.word	0x0800cd44
 8006f0c:	4b60      	ldr	r3, [pc, #384]	; (8007090 <_vfiprintf_r+0x850>)
 8006f0e:	e886 0018 	stmia.w	r6, {r3, r4}
 8006f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f14:	441c      	add	r4, r3
 8006f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f18:	940f      	str	r4, [sp, #60]	; 0x3c
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	2b07      	cmp	r3, #7
 8006f1e:	930e      	str	r3, [sp, #56]	; 0x38
 8006f20:	dc01      	bgt.n	8006f26 <_vfiprintf_r+0x6e6>
 8006f22:	3608      	adds	r6, #8
 8006f24:	e008      	b.n	8006f38 <_vfiprintf_r+0x6f8>
 8006f26:	aa0d      	add	r2, sp, #52	; 0x34
 8006f28:	4649      	mov	r1, r9
 8006f2a:	4658      	mov	r0, fp
 8006f2c:	f7ff fc56 	bl	80067dc <__sprint_r>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f040 809d 	bne.w	8007070 <_vfiprintf_r+0x830>
 8006f36:	ae1a      	add	r6, sp, #104	; 0x68
 8006f38:	9b05      	ldr	r3, [sp, #20]
 8006f3a:	9a01      	ldr	r2, [sp, #4]
 8006f3c:	1a9c      	subs	r4, r3, r2
 8006f3e:	2c00      	cmp	r4, #0
 8006f40:	dd30      	ble.n	8006fa4 <_vfiprintf_r+0x764>
 8006f42:	2310      	movs	r3, #16
 8006f44:	2c10      	cmp	r4, #16
 8006f46:	dd18      	ble.n	8006f7a <_vfiprintf_r+0x73a>
 8006f48:	4a51      	ldr	r2, [pc, #324]	; (8007090 <_vfiprintf_r+0x850>)
 8006f4a:	e886 000c 	stmia.w	r6, {r2, r3}
 8006f4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f50:	3210      	adds	r2, #16
 8006f52:	920f      	str	r2, [sp, #60]	; 0x3c
 8006f54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f56:	3201      	adds	r2, #1
 8006f58:	2a07      	cmp	r2, #7
 8006f5a:	920e      	str	r2, [sp, #56]	; 0x38
 8006f5c:	dc01      	bgt.n	8006f62 <_vfiprintf_r+0x722>
 8006f5e:	3608      	adds	r6, #8
 8006f60:	e009      	b.n	8006f76 <_vfiprintf_r+0x736>
 8006f62:	aa0d      	add	r2, sp, #52	; 0x34
 8006f64:	4649      	mov	r1, r9
 8006f66:	4658      	mov	r0, fp
 8006f68:	9305      	str	r3, [sp, #20]
 8006f6a:	f7ff fc37 	bl	80067dc <__sprint_r>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d17e      	bne.n	8007070 <_vfiprintf_r+0x830>
 8006f72:	9b05      	ldr	r3, [sp, #20]
 8006f74:	ae1a      	add	r6, sp, #104	; 0x68
 8006f76:	3c10      	subs	r4, #16
 8006f78:	e7e4      	b.n	8006f44 <_vfiprintf_r+0x704>
 8006f7a:	4b45      	ldr	r3, [pc, #276]	; (8007090 <_vfiprintf_r+0x850>)
 8006f7c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006f7e:	e886 0018 	stmia.w	r6, {r3, r4}
 8006f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f84:	3301      	adds	r3, #1
 8006f86:	4404      	add	r4, r0
 8006f88:	2b07      	cmp	r3, #7
 8006f8a:	940f      	str	r4, [sp, #60]	; 0x3c
 8006f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8006f8e:	dc01      	bgt.n	8006f94 <_vfiprintf_r+0x754>
 8006f90:	3608      	adds	r6, #8
 8006f92:	e007      	b.n	8006fa4 <_vfiprintf_r+0x764>
 8006f94:	aa0d      	add	r2, sp, #52	; 0x34
 8006f96:	4649      	mov	r1, r9
 8006f98:	4658      	mov	r0, fp
 8006f9a:	f7ff fc1f 	bl	80067dc <__sprint_r>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d166      	bne.n	8007070 <_vfiprintf_r+0x830>
 8006fa2:	ae1a      	add	r6, sp, #104	; 0x68
 8006fa4:	9b01      	ldr	r3, [sp, #4]
 8006fa6:	6073      	str	r3, [r6, #4]
 8006fa8:	9a01      	ldr	r2, [sp, #4]
 8006faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fac:	f8c6 a000 	str.w	sl, [r6]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	2b07      	cmp	r3, #7
 8006fba:	930e      	str	r3, [sp, #56]	; 0x38
 8006fbc:	dc01      	bgt.n	8006fc2 <_vfiprintf_r+0x782>
 8006fbe:	3608      	adds	r6, #8
 8006fc0:	e007      	b.n	8006fd2 <_vfiprintf_r+0x792>
 8006fc2:	aa0d      	add	r2, sp, #52	; 0x34
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	4658      	mov	r0, fp
 8006fc8:	f7ff fc08 	bl	80067dc <__sprint_r>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d14f      	bne.n	8007070 <_vfiprintf_r+0x830>
 8006fd0:	ae1a      	add	r6, sp, #104	; 0x68
 8006fd2:	077a      	lsls	r2, r7, #29
 8006fd4:	d40a      	bmi.n	8006fec <_vfiprintf_r+0x7ac>
 8006fd6:	9b04      	ldr	r3, [sp, #16]
 8006fd8:	9a03      	ldr	r2, [sp, #12]
 8006fda:	42aa      	cmp	r2, r5
 8006fdc:	bfac      	ite	ge
 8006fde:	189b      	addge	r3, r3, r2
 8006fe0:	195b      	addlt	r3, r3, r5
 8006fe2:	9304      	str	r3, [sp, #16]
 8006fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d036      	beq.n	8007058 <_vfiprintf_r+0x818>
 8006fea:	e02f      	b.n	800704c <_vfiprintf_r+0x80c>
 8006fec:	9b03      	ldr	r3, [sp, #12]
 8006fee:	1b5c      	subs	r4, r3, r5
 8006ff0:	2c00      	cmp	r4, #0
 8006ff2:	ddf0      	ble.n	8006fd6 <_vfiprintf_r+0x796>
 8006ff4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007094 <_vfiprintf_r+0x854>
 8006ff8:	2710      	movs	r7, #16
 8006ffa:	2c10      	cmp	r4, #16
 8006ffc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007000:	dd13      	ble.n	800702a <_vfiprintf_r+0x7ea>
 8007002:	3301      	adds	r3, #1
 8007004:	3210      	adds	r2, #16
 8007006:	2b07      	cmp	r3, #7
 8007008:	f8c6 a000 	str.w	sl, [r6]
 800700c:	6077      	str	r7, [r6, #4]
 800700e:	920f      	str	r2, [sp, #60]	; 0x3c
 8007010:	930e      	str	r3, [sp, #56]	; 0x38
 8007012:	dc01      	bgt.n	8007018 <_vfiprintf_r+0x7d8>
 8007014:	3608      	adds	r6, #8
 8007016:	e006      	b.n	8007026 <_vfiprintf_r+0x7e6>
 8007018:	aa0d      	add	r2, sp, #52	; 0x34
 800701a:	4649      	mov	r1, r9
 800701c:	4658      	mov	r0, fp
 800701e:	f7ff fbdd 	bl	80067dc <__sprint_r>
 8007022:	bb28      	cbnz	r0, 8007070 <_vfiprintf_r+0x830>
 8007024:	ae1a      	add	r6, sp, #104	; 0x68
 8007026:	3c10      	subs	r4, #16
 8007028:	e7e7      	b.n	8006ffa <_vfiprintf_r+0x7ba>
 800702a:	491a      	ldr	r1, [pc, #104]	; (8007094 <_vfiprintf_r+0x854>)
 800702c:	3301      	adds	r3, #1
 800702e:	e886 0012 	stmia.w	r6, {r1, r4}
 8007032:	2b07      	cmp	r3, #7
 8007034:	4414      	add	r4, r2
 8007036:	940f      	str	r4, [sp, #60]	; 0x3c
 8007038:	930e      	str	r3, [sp, #56]	; 0x38
 800703a:	ddcc      	ble.n	8006fd6 <_vfiprintf_r+0x796>
 800703c:	aa0d      	add	r2, sp, #52	; 0x34
 800703e:	4649      	mov	r1, r9
 8007040:	4658      	mov	r0, fp
 8007042:	f7ff fbcb 	bl	80067dc <__sprint_r>
 8007046:	2800      	cmp	r0, #0
 8007048:	d0c5      	beq.n	8006fd6 <_vfiprintf_r+0x796>
 800704a:	e011      	b.n	8007070 <_vfiprintf_r+0x830>
 800704c:	aa0d      	add	r2, sp, #52	; 0x34
 800704e:	4649      	mov	r1, r9
 8007050:	4658      	mov	r0, fp
 8007052:	f7ff fbc3 	bl	80067dc <__sprint_r>
 8007056:	b958      	cbnz	r0, 8007070 <_vfiprintf_r+0x830>
 8007058:	2300      	movs	r3, #0
 800705a:	930e      	str	r3, [sp, #56]	; 0x38
 800705c:	4644      	mov	r4, r8
 800705e:	ae1a      	add	r6, sp, #104	; 0x68
 8007060:	e443      	b.n	80068ea <_vfiprintf_r+0xaa>
 8007062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007064:	b123      	cbz	r3, 8007070 <_vfiprintf_r+0x830>
 8007066:	aa0d      	add	r2, sp, #52	; 0x34
 8007068:	4649      	mov	r1, r9
 800706a:	4658      	mov	r0, fp
 800706c:	f7ff fbb6 	bl	80067dc <__sprint_r>
 8007070:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007074:	065b      	lsls	r3, r3, #25
 8007076:	f53f ac23 	bmi.w	80068c0 <_vfiprintf_r+0x80>
 800707a:	9804      	ldr	r0, [sp, #16]
 800707c:	e004      	b.n	8007088 <_vfiprintf_r+0x848>
 800707e:	ea54 0205 	orrs.w	r2, r4, r5
 8007082:	f47f ae14 	bne.w	8006cae <_vfiprintf_r+0x46e>
 8007086:	e619      	b.n	8006cbc <_vfiprintf_r+0x47c>
 8007088:	b02b      	add	sp, #172	; 0xac
 800708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708e:	bf00      	nop
 8007090:	0800cd44 	.word	0x0800cd44
 8007094:	0800cd34 	.word	0x0800cd34

08007098 <__sbprintf>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	460c      	mov	r4, r1
 800709c:	8989      	ldrh	r1, [r1, #12]
 800709e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80070a2:	f021 0102 	bic.w	r1, r1, #2
 80070a6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80070aa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80070ac:	9119      	str	r1, [sp, #100]	; 0x64
 80070ae:	89e1      	ldrh	r1, [r4, #14]
 80070b0:	f8ad 100e 	strh.w	r1, [sp, #14]
 80070b4:	6a21      	ldr	r1, [r4, #32]
 80070b6:	9108      	str	r1, [sp, #32]
 80070b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80070ba:	910a      	str	r1, [sp, #40]	; 0x28
 80070bc:	a91a      	add	r1, sp, #104	; 0x68
 80070be:	9100      	str	r1, [sp, #0]
 80070c0:	9104      	str	r1, [sp, #16]
 80070c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80070c6:	9102      	str	r1, [sp, #8]
 80070c8:	9105      	str	r1, [sp, #20]
 80070ca:	2100      	movs	r1, #0
 80070cc:	9106      	str	r1, [sp, #24]
 80070ce:	4669      	mov	r1, sp
 80070d0:	4606      	mov	r6, r0
 80070d2:	f7ff fbb5 	bl	8006840 <_vfiprintf_r>
 80070d6:	1e05      	subs	r5, r0, #0
 80070d8:	db07      	blt.n	80070ea <__sbprintf+0x52>
 80070da:	4669      	mov	r1, sp
 80070dc:	4630      	mov	r0, r6
 80070de:	f001 ffb3 	bl	8009048 <_fflush_r>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	bf18      	it	ne
 80070e6:	f04f 35ff 	movne.w	r5, #4294967295
 80070ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80070ee:	065b      	lsls	r3, r3, #25
 80070f0:	bf48      	it	mi
 80070f2:	89a3      	ldrhmi	r3, [r4, #12]
 80070f4:	4628      	mov	r0, r5
 80070f6:	bf44      	itt	mi
 80070f8:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80070fc:	81a3      	strhmi	r3, [r4, #12]
 80070fe:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	0000      	movs	r0, r0
	...

08007108 <_vfprintf_r>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	b0bd      	sub	sp, #244	; 0xf4
 800710e:	468b      	mov	fp, r1
 8007110:	9205      	str	r2, [sp, #20]
 8007112:	461c      	mov	r4, r3
 8007114:	461f      	mov	r7, r3
 8007116:	4682      	mov	sl, r0
 8007118:	f002 fe78 	bl	8009e0c <_localeconv_r>
 800711c:	6803      	ldr	r3, [r0, #0]
 800711e:	930d      	str	r3, [sp, #52]	; 0x34
 8007120:	4618      	mov	r0, r3
 8007122:	f7f9 f8a5 	bl	8000270 <strlen>
 8007126:	9008      	str	r0, [sp, #32]
 8007128:	f1ba 0f00 	cmp.w	sl, #0
 800712c:	d005      	beq.n	800713a <_vfprintf_r+0x32>
 800712e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8007132:	b913      	cbnz	r3, 800713a <_vfprintf_r+0x32>
 8007134:	4650      	mov	r0, sl
 8007136:	f001 fff1 	bl	800911c <__sinit>
 800713a:	4b9d      	ldr	r3, [pc, #628]	; (80073b0 <_vfprintf_r+0x2a8>)
 800713c:	459b      	cmp	fp, r3
 800713e:	d102      	bne.n	8007146 <_vfprintf_r+0x3e>
 8007140:	f8da b004 	ldr.w	fp, [sl, #4]
 8007144:	e00a      	b.n	800715c <_vfprintf_r+0x54>
 8007146:	4b9b      	ldr	r3, [pc, #620]	; (80073b4 <_vfprintf_r+0x2ac>)
 8007148:	459b      	cmp	fp, r3
 800714a:	d102      	bne.n	8007152 <_vfprintf_r+0x4a>
 800714c:	f8da b008 	ldr.w	fp, [sl, #8]
 8007150:	e004      	b.n	800715c <_vfprintf_r+0x54>
 8007152:	4b99      	ldr	r3, [pc, #612]	; (80073b8 <_vfprintf_r+0x2b0>)
 8007154:	459b      	cmp	fp, r3
 8007156:	bf08      	it	eq
 8007158:	f8da b00c 	ldreq.w	fp, [sl, #12]
 800715c:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8007160:	0498      	lsls	r0, r3, #18
 8007162:	d409      	bmi.n	8007178 <_vfprintf_r+0x70>
 8007164:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 8007168:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800716c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007170:	f8ab 300c 	strh.w	r3, [fp, #12]
 8007174:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 8007178:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800717c:	0719      	lsls	r1, r3, #28
 800717e:	d509      	bpl.n	8007194 <_vfprintf_r+0x8c>
 8007180:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007184:	b133      	cbz	r3, 8007194 <_vfprintf_r+0x8c>
 8007186:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800718a:	f003 031a 	and.w	r3, r3, #26
 800718e:	2b0a      	cmp	r3, #10
 8007190:	d116      	bne.n	80071c0 <_vfprintf_r+0xb8>
 8007192:	e009      	b.n	80071a8 <_vfprintf_r+0xa0>
 8007194:	4659      	mov	r1, fp
 8007196:	4650      	mov	r0, sl
 8007198:	f001 f820 	bl	80081dc <__swsetup_r>
 800719c:	2800      	cmp	r0, #0
 800719e:	d0f2      	beq.n	8007186 <_vfprintf_r+0x7e>
 80071a0:	f04f 30ff 	mov.w	r0, #4294967295
 80071a4:	f000 bfa3 	b.w	80080ee <_vfprintf_r+0xfe6>
 80071a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	db07      	blt.n	80071c0 <_vfprintf_r+0xb8>
 80071b0:	4623      	mov	r3, r4
 80071b2:	9a05      	ldr	r2, [sp, #20]
 80071b4:	4659      	mov	r1, fp
 80071b6:	4650      	mov	r0, sl
 80071b8:	f000 ffa0 	bl	80080fc <__sbprintf>
 80071bc:	f000 bf97 	b.w	80080ee <_vfprintf_r+0xfe6>
 80071c0:	ed9f 7b79 	vldr	d7, [pc, #484]	; 80073a8 <_vfprintf_r+0x2a0>
 80071c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071c8:	2300      	movs	r3, #0
 80071ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80071cc:	941f      	str	r4, [sp, #124]	; 0x7c
 80071ce:	9321      	str	r3, [sp, #132]	; 0x84
 80071d0:	9320      	str	r3, [sp, #128]	; 0x80
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	9311      	str	r3, [sp, #68]	; 0x44
 80071d6:	9310      	str	r3, [sp, #64]	; 0x40
 80071d8:	930a      	str	r3, [sp, #40]	; 0x28
 80071da:	9d05      	ldr	r5, [sp, #20]
 80071dc:	462b      	mov	r3, r5
 80071de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071e2:	b11a      	cbz	r2, 80071ec <_vfprintf_r+0xe4>
 80071e4:	2a25      	cmp	r2, #37	; 0x25
 80071e6:	d001      	beq.n	80071ec <_vfprintf_r+0xe4>
 80071e8:	461d      	mov	r5, r3
 80071ea:	e7f7      	b.n	80071dc <_vfprintf_r+0xd4>
 80071ec:	9b05      	ldr	r3, [sp, #20]
 80071ee:	1aee      	subs	r6, r5, r3
 80071f0:	d017      	beq.n	8007222 <_vfprintf_r+0x11a>
 80071f2:	e884 0048 	stmia.w	r4, {r3, r6}
 80071f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071f8:	4433      	add	r3, r6
 80071fa:	9321      	str	r3, [sp, #132]	; 0x84
 80071fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071fe:	3301      	adds	r3, #1
 8007200:	2b07      	cmp	r3, #7
 8007202:	9320      	str	r3, [sp, #128]	; 0x80
 8007204:	dc01      	bgt.n	800720a <_vfprintf_r+0x102>
 8007206:	3408      	adds	r4, #8
 8007208:	e008      	b.n	800721c <_vfprintf_r+0x114>
 800720a:	aa1f      	add	r2, sp, #124	; 0x7c
 800720c:	4659      	mov	r1, fp
 800720e:	4650      	mov	r0, sl
 8007210:	f7ff fae4 	bl	80067dc <__sprint_r>
 8007214:	2800      	cmp	r0, #0
 8007216:	f040 8633 	bne.w	8007e80 <_vfprintf_r+0xd78>
 800721a:	ac2c      	add	r4, sp, #176	; 0xb0
 800721c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721e:	4433      	add	r3, r6
 8007220:	930a      	str	r3, [sp, #40]	; 0x28
 8007222:	782b      	ldrb	r3, [r5, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 8624 	beq.w	8007e72 <_vfprintf_r+0xd6a>
 800722a:	2200      	movs	r2, #0
 800722c:	1c6b      	adds	r3, r5, #1
 800722e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8007232:	4611      	mov	r1, r2
 8007234:	f04f 39ff 	mov.w	r9, #4294967295
 8007238:	9209      	str	r2, [sp, #36]	; 0x24
 800723a:	4615      	mov	r5, r2
 800723c:	200a      	movs	r0, #10
 800723e:	1c5e      	adds	r6, r3, #1
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	9605      	str	r6, [sp, #20]
 8007244:	9302      	str	r3, [sp, #8]
 8007246:	9b02      	ldr	r3, [sp, #8]
 8007248:	3b20      	subs	r3, #32
 800724a:	2b58      	cmp	r3, #88	; 0x58
 800724c:	f200 826a 	bhi.w	8007724 <_vfprintf_r+0x61c>
 8007250:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007254:	0268005c 	.word	0x0268005c
 8007258:	006c0268 	.word	0x006c0268
 800725c:	02680268 	.word	0x02680268
 8007260:	02680268 	.word	0x02680268
 8007264:	02680268 	.word	0x02680268
 8007268:	0059006f 	.word	0x0059006f
 800726c:	007a0268 	.word	0x007a0268
 8007270:	0268007d 	.word	0x0268007d
 8007274:	00b600a4 	.word	0x00b600a4
 8007278:	00b600b6 	.word	0x00b600b6
 800727c:	00b600b6 	.word	0x00b600b6
 8007280:	00b600b6 	.word	0x00b600b6
 8007284:	00b600b6 	.word	0x00b600b6
 8007288:	02680268 	.word	0x02680268
 800728c:	02680268 	.word	0x02680268
 8007290:	02680268 	.word	0x02680268
 8007294:	02680268 	.word	0x02680268
 8007298:	02680268 	.word	0x02680268
 800729c:	011200e6 	.word	0x011200e6
 80072a0:	01120268 	.word	0x01120268
 80072a4:	02680268 	.word	0x02680268
 80072a8:	02680268 	.word	0x02680268
 80072ac:	026800c9 	.word	0x026800c9
 80072b0:	01590268 	.word	0x01590268
 80072b4:	02680268 	.word	0x02680268
 80072b8:	02680268 	.word	0x02680268
 80072bc:	01a00268 	.word	0x01a00268
 80072c0:	02680268 	.word	0x02680268
 80072c4:	02680067 	.word	0x02680067
 80072c8:	02680268 	.word	0x02680268
 80072cc:	02680268 	.word	0x02680268
 80072d0:	02680268 	.word	0x02680268
 80072d4:	02680268 	.word	0x02680268
 80072d8:	00dd0268 	.word	0x00dd0268
 80072dc:	01120061 	.word	0x01120061
 80072e0:	01120112 	.word	0x01120112
 80072e4:	006100cc 	.word	0x006100cc
 80072e8:	02680268 	.word	0x02680268
 80072ec:	026800cf 	.word	0x026800cf
 80072f0:	015b013b 	.word	0x015b013b
 80072f4:	00da0176 	.word	0x00da0176
 80072f8:	01870268 	.word	0x01870268
 80072fc:	01a20268 	.word	0x01a20268
 8007300:	02680268 	.word	0x02680268
 8007304:	01ba      	.short	0x01ba
 8007306:	2201      	movs	r2, #1
 8007308:	212b      	movs	r1, #43	; 0x2b
 800730a:	e002      	b.n	8007312 <_vfprintf_r+0x20a>
 800730c:	b909      	cbnz	r1, 8007312 <_vfprintf_r+0x20a>
 800730e:	2201      	movs	r2, #1
 8007310:	2120      	movs	r1, #32
 8007312:	9b05      	ldr	r3, [sp, #20]
 8007314:	e793      	b.n	800723e <_vfprintf_r+0x136>
 8007316:	2a00      	cmp	r2, #0
 8007318:	f000 8087 	beq.w	800742a <_vfprintf_r+0x322>
 800731c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8007320:	e083      	b.n	800742a <_vfprintf_r+0x322>
 8007322:	b10a      	cbz	r2, 8007328 <_vfprintf_r+0x220>
 8007324:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8007328:	4b24      	ldr	r3, [pc, #144]	; (80073bc <_vfprintf_r+0x2b4>)
 800732a:	e151      	b.n	80075d0 <_vfprintf_r+0x4c8>
 800732c:	f045 0501 	orr.w	r5, r5, #1
 8007330:	e7ef      	b.n	8007312 <_vfprintf_r+0x20a>
 8007332:	683e      	ldr	r6, [r7, #0]
 8007334:	9609      	str	r6, [sp, #36]	; 0x24
 8007336:	2e00      	cmp	r6, #0
 8007338:	f107 0304 	add.w	r3, r7, #4
 800733c:	db01      	blt.n	8007342 <_vfprintf_r+0x23a>
 800733e:	461f      	mov	r7, r3
 8007340:	e7e7      	b.n	8007312 <_vfprintf_r+0x20a>
 8007342:	4276      	negs	r6, r6
 8007344:	9609      	str	r6, [sp, #36]	; 0x24
 8007346:	461f      	mov	r7, r3
 8007348:	f045 0504 	orr.w	r5, r5, #4
 800734c:	e7e1      	b.n	8007312 <_vfprintf_r+0x20a>
 800734e:	9e05      	ldr	r6, [sp, #20]
 8007350:	9b05      	ldr	r3, [sp, #20]
 8007352:	7836      	ldrb	r6, [r6, #0]
 8007354:	9602      	str	r6, [sp, #8]
 8007356:	2e2a      	cmp	r6, #42	; 0x2a
 8007358:	f103 0301 	add.w	r3, r3, #1
 800735c:	d002      	beq.n	8007364 <_vfprintf_r+0x25c>
 800735e:	f04f 0900 	mov.w	r9, #0
 8007362:	e00a      	b.n	800737a <_vfprintf_r+0x272>
 8007364:	f8d7 9000 	ldr.w	r9, [r7]
 8007368:	9305      	str	r3, [sp, #20]
 800736a:	1d3e      	adds	r6, r7, #4
 800736c:	f1b9 0f00 	cmp.w	r9, #0
 8007370:	4637      	mov	r7, r6
 8007372:	dace      	bge.n	8007312 <_vfprintf_r+0x20a>
 8007374:	f04f 39ff 	mov.w	r9, #4294967295
 8007378:	e7cb      	b.n	8007312 <_vfprintf_r+0x20a>
 800737a:	9305      	str	r3, [sp, #20]
 800737c:	9b02      	ldr	r3, [sp, #8]
 800737e:	3b30      	subs	r3, #48	; 0x30
 8007380:	2b09      	cmp	r3, #9
 8007382:	d808      	bhi.n	8007396 <_vfprintf_r+0x28e>
 8007384:	fb00 3909 	mla	r9, r0, r9, r3
 8007388:	9b05      	ldr	r3, [sp, #20]
 800738a:	461e      	mov	r6, r3
 800738c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007390:	9302      	str	r3, [sp, #8]
 8007392:	4633      	mov	r3, r6
 8007394:	e7f1      	b.n	800737a <_vfprintf_r+0x272>
 8007396:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 800739a:	e754      	b.n	8007246 <_vfprintf_r+0x13e>
 800739c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80073a0:	e7b7      	b.n	8007312 <_vfprintf_r+0x20a>
 80073a2:	bf00      	nop
 80073a4:	f3af 8000 	nop.w
	...
 80073b0:	0800cd84 	.word	0x0800cd84
 80073b4:	0800cda4 	.word	0x0800cda4
 80073b8:	0800cdc4 	.word	0x0800cdc4
 80073bc:	0800cd00 	.word	0x0800cd00
 80073c0:	2300      	movs	r3, #0
 80073c2:	9309      	str	r3, [sp, #36]	; 0x24
 80073c4:	9b02      	ldr	r3, [sp, #8]
 80073c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80073c8:	3b30      	subs	r3, #48	; 0x30
 80073ca:	fb00 3306 	mla	r3, r0, r6, r3
 80073ce:	9309      	str	r3, [sp, #36]	; 0x24
 80073d0:	9b05      	ldr	r3, [sp, #20]
 80073d2:	461e      	mov	r6, r3
 80073d4:	f816 3b01 	ldrb.w	r3, [r6], #1
 80073d8:	9302      	str	r3, [sp, #8]
 80073da:	9b02      	ldr	r3, [sp, #8]
 80073dc:	9605      	str	r6, [sp, #20]
 80073de:	3b30      	subs	r3, #48	; 0x30
 80073e0:	2b09      	cmp	r3, #9
 80073e2:	d9ef      	bls.n	80073c4 <_vfprintf_r+0x2bc>
 80073e4:	e72f      	b.n	8007246 <_vfprintf_r+0x13e>
 80073e6:	f045 0508 	orr.w	r5, r5, #8
 80073ea:	e792      	b.n	8007312 <_vfprintf_r+0x20a>
 80073ec:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80073f0:	e78f      	b.n	8007312 <_vfprintf_r+0x20a>
 80073f2:	9b05      	ldr	r3, [sp, #20]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b6c      	cmp	r3, #108	; 0x6c
 80073f8:	d103      	bne.n	8007402 <_vfprintf_r+0x2fa>
 80073fa:	9b05      	ldr	r3, [sp, #20]
 80073fc:	3301      	adds	r3, #1
 80073fe:	9305      	str	r3, [sp, #20]
 8007400:	e002      	b.n	8007408 <_vfprintf_r+0x300>
 8007402:	f045 0510 	orr.w	r5, r5, #16
 8007406:	e784      	b.n	8007312 <_vfprintf_r+0x20a>
 8007408:	f045 0520 	orr.w	r5, r5, #32
 800740c:	e781      	b.n	8007312 <_vfprintf_r+0x20a>
 800740e:	1d3b      	adds	r3, r7, #4
 8007410:	9303      	str	r3, [sp, #12]
 8007412:	2600      	movs	r6, #0
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800741a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800741e:	e190      	b.n	8007742 <_vfprintf_r+0x63a>
 8007420:	b10a      	cbz	r2, 8007426 <_vfprintf_r+0x31e>
 8007422:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8007426:	f045 0510 	orr.w	r5, r5, #16
 800742a:	06aa      	lsls	r2, r5, #26
 800742c:	d508      	bpl.n	8007440 <_vfprintf_r+0x338>
 800742e:	3707      	adds	r7, #7
 8007430:	f027 0707 	bic.w	r7, r7, #7
 8007434:	f107 0308 	add.w	r3, r7, #8
 8007438:	9303      	str	r3, [sp, #12]
 800743a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800743e:	e00e      	b.n	800745e <_vfprintf_r+0x356>
 8007440:	f015 0f10 	tst.w	r5, #16
 8007444:	f107 0304 	add.w	r3, r7, #4
 8007448:	d002      	beq.n	8007450 <_vfprintf_r+0x348>
 800744a:	9303      	str	r3, [sp, #12]
 800744c:	683e      	ldr	r6, [r7, #0]
 800744e:	e005      	b.n	800745c <_vfprintf_r+0x354>
 8007450:	683e      	ldr	r6, [r7, #0]
 8007452:	9303      	str	r3, [sp, #12]
 8007454:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007458:	bf18      	it	ne
 800745a:	b236      	sxthne	r6, r6
 800745c:	17f7      	asrs	r7, r6, #31
 800745e:	2e00      	cmp	r6, #0
 8007460:	f177 0300 	sbcs.w	r3, r7, #0
 8007464:	f280 80de 	bge.w	8007624 <_vfprintf_r+0x51c>
 8007468:	4276      	negs	r6, r6
 800746a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800746e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8007472:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8007476:	e0d5      	b.n	8007624 <_vfprintf_r+0x51c>
 8007478:	b10a      	cbz	r2, 800747e <_vfprintf_r+0x376>
 800747a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800747e:	3707      	adds	r7, #7
 8007480:	f027 0707 	bic.w	r7, r7, #7
 8007484:	f107 0308 	add.w	r3, r7, #8
 8007488:	9303      	str	r3, [sp, #12]
 800748a:	ed97 7b00 	vldr	d7, [r7]
 800748e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007492:	9b06      	ldr	r3, [sp, #24]
 8007494:	9312      	str	r3, [sp, #72]	; 0x48
 8007496:	9b07      	ldr	r3, [sp, #28]
 8007498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800749c:	9313      	str	r3, [sp, #76]	; 0x4c
 800749e:	f04f 32ff 	mov.w	r2, #4294967295
 80074a2:	4bab      	ldr	r3, [pc, #684]	; (8007750 <_vfprintf_r+0x648>)
 80074a4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80074a8:	f7f9 fb3c 	bl	8000b24 <__aeabi_dcmpun>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f040 84ee 	bne.w	8007e8e <_vfprintf_r+0xd86>
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295
 80074b6:	4ba6      	ldr	r3, [pc, #664]	; (8007750 <_vfprintf_r+0x648>)
 80074b8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80074bc:	f7f9 fb14 	bl	8000ae8 <__aeabi_dcmple>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	f040 84e4 	bne.w	8007e8e <_vfprintf_r+0xd86>
 80074c6:	f000 bdfb 	b.w	80080c0 <_vfprintf_r+0xfb8>
 80074ca:	b10a      	cbz	r2, 80074d0 <_vfprintf_r+0x3c8>
 80074cc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80074d0:	f015 0f20 	tst.w	r5, #32
 80074d4:	f107 0304 	add.w	r3, r7, #4
 80074d8:	d007      	beq.n	80074ea <_vfprintf_r+0x3e2>
 80074da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	17ce      	asrs	r6, r1, #31
 80074e0:	4608      	mov	r0, r1
 80074e2:	4631      	mov	r1, r6
 80074e4:	e9c2 0100 	strd	r0, r1, [r2]
 80074e8:	e00b      	b.n	8007502 <_vfprintf_r+0x3fa>
 80074ea:	06e9      	lsls	r1, r5, #27
 80074ec:	d406      	bmi.n	80074fc <_vfprintf_r+0x3f4>
 80074ee:	066a      	lsls	r2, r5, #25
 80074f0:	d504      	bpl.n	80074fc <_vfprintf_r+0x3f4>
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80074f8:	8011      	strh	r1, [r2, #0]
 80074fa:	e002      	b.n	8007502 <_vfprintf_r+0x3fa>
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007500:	6011      	str	r1, [r2, #0]
 8007502:	461f      	mov	r7, r3
 8007504:	e669      	b.n	80071da <_vfprintf_r+0xd2>
 8007506:	f045 0510 	orr.w	r5, r5, #16
 800750a:	f015 0320 	ands.w	r3, r5, #32
 800750e:	d009      	beq.n	8007524 <_vfprintf_r+0x41c>
 8007510:	3707      	adds	r7, #7
 8007512:	f027 0707 	bic.w	r7, r7, #7
 8007516:	f107 0308 	add.w	r3, r7, #8
 800751a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800751e:	9303      	str	r3, [sp, #12]
 8007520:	2300      	movs	r3, #0
 8007522:	e07b      	b.n	800761c <_vfprintf_r+0x514>
 8007524:	1d3a      	adds	r2, r7, #4
 8007526:	f015 0110 	ands.w	r1, r5, #16
 800752a:	9203      	str	r2, [sp, #12]
 800752c:	d105      	bne.n	800753a <_vfprintf_r+0x432>
 800752e:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8007532:	d002      	beq.n	800753a <_vfprintf_r+0x432>
 8007534:	883e      	ldrh	r6, [r7, #0]
 8007536:	2700      	movs	r7, #0
 8007538:	e7f2      	b.n	8007520 <_vfprintf_r+0x418>
 800753a:	683e      	ldr	r6, [r7, #0]
 800753c:	2700      	movs	r7, #0
 800753e:	e06d      	b.n	800761c <_vfprintf_r+0x514>
 8007540:	1d3b      	adds	r3, r7, #4
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	2330      	movs	r3, #48	; 0x30
 8007546:	2278      	movs	r2, #120	; 0x78
 8007548:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800754c:	4b81      	ldr	r3, [pc, #516]	; (8007754 <_vfprintf_r+0x64c>)
 800754e:	683e      	ldr	r6, [r7, #0]
 8007550:	9311      	str	r3, [sp, #68]	; 0x44
 8007552:	2700      	movs	r7, #0
 8007554:	f045 0502 	orr.w	r5, r5, #2
 8007558:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800755c:	2302      	movs	r3, #2
 800755e:	9202      	str	r2, [sp, #8]
 8007560:	e05c      	b.n	800761c <_vfprintf_r+0x514>
 8007562:	2600      	movs	r6, #0
 8007564:	1d3b      	adds	r3, r7, #4
 8007566:	45b1      	cmp	r9, r6
 8007568:	9303      	str	r3, [sp, #12]
 800756a:	f8d7 8000 	ldr.w	r8, [r7]
 800756e:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8007572:	db0a      	blt.n	800758a <_vfprintf_r+0x482>
 8007574:	464a      	mov	r2, r9
 8007576:	4631      	mov	r1, r6
 8007578:	4640      	mov	r0, r8
 800757a:	f7f8 fe29 	bl	80001d0 <memchr>
 800757e:	2800      	cmp	r0, #0
 8007580:	f000 80ea 	beq.w	8007758 <_vfprintf_r+0x650>
 8007584:	ebc8 0900 	rsb	r9, r8, r0
 8007588:	e0e7      	b.n	800775a <_vfprintf_r+0x652>
 800758a:	4640      	mov	r0, r8
 800758c:	f7f8 fe70 	bl	8000270 <strlen>
 8007590:	4681      	mov	r9, r0
 8007592:	e0e2      	b.n	800775a <_vfprintf_r+0x652>
 8007594:	f045 0510 	orr.w	r5, r5, #16
 8007598:	06ae      	lsls	r6, r5, #26
 800759a:	d508      	bpl.n	80075ae <_vfprintf_r+0x4a6>
 800759c:	3707      	adds	r7, #7
 800759e:	f027 0707 	bic.w	r7, r7, #7
 80075a2:	f107 0308 	add.w	r3, r7, #8
 80075a6:	9303      	str	r3, [sp, #12]
 80075a8:	e9d7 6700 	ldrd	r6, r7, [r7]
 80075ac:	e00a      	b.n	80075c4 <_vfprintf_r+0x4bc>
 80075ae:	1d3b      	adds	r3, r7, #4
 80075b0:	f015 0f10 	tst.w	r5, #16
 80075b4:	9303      	str	r3, [sp, #12]
 80075b6:	d103      	bne.n	80075c0 <_vfprintf_r+0x4b8>
 80075b8:	0668      	lsls	r0, r5, #25
 80075ba:	d501      	bpl.n	80075c0 <_vfprintf_r+0x4b8>
 80075bc:	883e      	ldrh	r6, [r7, #0]
 80075be:	e000      	b.n	80075c2 <_vfprintf_r+0x4ba>
 80075c0:	683e      	ldr	r6, [r7, #0]
 80075c2:	2700      	movs	r7, #0
 80075c4:	2301      	movs	r3, #1
 80075c6:	e029      	b.n	800761c <_vfprintf_r+0x514>
 80075c8:	b10a      	cbz	r2, 80075ce <_vfprintf_r+0x4c6>
 80075ca:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80075ce:	4b61      	ldr	r3, [pc, #388]	; (8007754 <_vfprintf_r+0x64c>)
 80075d0:	9311      	str	r3, [sp, #68]	; 0x44
 80075d2:	06a9      	lsls	r1, r5, #26
 80075d4:	d508      	bpl.n	80075e8 <_vfprintf_r+0x4e0>
 80075d6:	3707      	adds	r7, #7
 80075d8:	f027 0707 	bic.w	r7, r7, #7
 80075dc:	f107 0308 	add.w	r3, r7, #8
 80075e0:	9303      	str	r3, [sp, #12]
 80075e2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80075e6:	e00a      	b.n	80075fe <_vfprintf_r+0x4f6>
 80075e8:	1d3b      	adds	r3, r7, #4
 80075ea:	f015 0f10 	tst.w	r5, #16
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	d103      	bne.n	80075fa <_vfprintf_r+0x4f2>
 80075f2:	066a      	lsls	r2, r5, #25
 80075f4:	d501      	bpl.n	80075fa <_vfprintf_r+0x4f2>
 80075f6:	883e      	ldrh	r6, [r7, #0]
 80075f8:	e000      	b.n	80075fc <_vfprintf_r+0x4f4>
 80075fa:	683e      	ldr	r6, [r7, #0]
 80075fc:	2700      	movs	r7, #0
 80075fe:	07eb      	lsls	r3, r5, #31
 8007600:	d50b      	bpl.n	800761a <_vfprintf_r+0x512>
 8007602:	ea56 0307 	orrs.w	r3, r6, r7
 8007606:	d008      	beq.n	800761a <_vfprintf_r+0x512>
 8007608:	2330      	movs	r3, #48	; 0x30
 800760a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800760e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007612:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8007616:	f045 0502 	orr.w	r5, r5, #2
 800761a:	2302      	movs	r3, #2
 800761c:	2200      	movs	r2, #0
 800761e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8007622:	e000      	b.n	8007626 <_vfprintf_r+0x51e>
 8007624:	2301      	movs	r3, #1
 8007626:	f1b9 0f00 	cmp.w	r9, #0
 800762a:	f2c0 855a 	blt.w	80080e2 <_vfprintf_r+0xfda>
 800762e:	ea56 0207 	orrs.w	r2, r6, r7
 8007632:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8007636:	d103      	bne.n	8007640 <_vfprintf_r+0x538>
 8007638:	f1b9 0f00 	cmp.w	r9, #0
 800763c:	d05f      	beq.n	80076fe <_vfprintf_r+0x5f6>
 800763e:	e006      	b.n	800764e <_vfprintf_r+0x546>
 8007640:	460d      	mov	r5, r1
 8007642:	2b01      	cmp	r3, #1
 8007644:	d025      	beq.n	8007692 <_vfprintf_r+0x58a>
 8007646:	2b02      	cmp	r3, #2
 8007648:	d046      	beq.n	80076d8 <_vfprintf_r+0x5d0>
 800764a:	4629      	mov	r1, r5
 800764c:	e007      	b.n	800765e <_vfprintf_r+0x556>
 800764e:	460d      	mov	r5, r1
 8007650:	2b01      	cmp	r3, #1
 8007652:	d022      	beq.n	800769a <_vfprintf_r+0x592>
 8007654:	2b02      	cmp	r3, #2
 8007656:	d03d      	beq.n	80076d4 <_vfprintf_r+0x5cc>
 8007658:	4629      	mov	r1, r5
 800765a:	2600      	movs	r6, #0
 800765c:	2700      	movs	r7, #0
 800765e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8007662:	08f2      	lsrs	r2, r6, #3
 8007664:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8007668:	08f8      	lsrs	r0, r7, #3
 800766a:	f006 0307 	and.w	r3, r6, #7
 800766e:	4607      	mov	r7, r0
 8007670:	4616      	mov	r6, r2
 8007672:	3330      	adds	r3, #48	; 0x30
 8007674:	ea56 0207 	orrs.w	r2, r6, r7
 8007678:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800767c:	d1f1      	bne.n	8007662 <_vfprintf_r+0x55a>
 800767e:	07e8      	lsls	r0, r5, #31
 8007680:	d548      	bpl.n	8007714 <_vfprintf_r+0x60c>
 8007682:	2b30      	cmp	r3, #48	; 0x30
 8007684:	d046      	beq.n	8007714 <_vfprintf_r+0x60c>
 8007686:	2330      	movs	r3, #48	; 0x30
 8007688:	f808 3c01 	strb.w	r3, [r8, #-1]
 800768c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007690:	e040      	b.n	8007714 <_vfprintf_r+0x60c>
 8007692:	2f00      	cmp	r7, #0
 8007694:	bf08      	it	eq
 8007696:	2e0a      	cmpeq	r6, #10
 8007698:	d205      	bcs.n	80076a6 <_vfprintf_r+0x59e>
 800769a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800769e:	3630      	adds	r6, #48	; 0x30
 80076a0:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80076a4:	e029      	b.n	80076fa <_vfprintf_r+0x5f2>
 80076a6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80076aa:	4630      	mov	r0, r6
 80076ac:	4639      	mov	r1, r7
 80076ae:	220a      	movs	r2, #10
 80076b0:	2300      	movs	r3, #0
 80076b2:	f7f9 fa95 	bl	8000be0 <__aeabi_uldivmod>
 80076b6:	3230      	adds	r2, #48	; 0x30
 80076b8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80076bc:	2300      	movs	r3, #0
 80076be:	4630      	mov	r0, r6
 80076c0:	4639      	mov	r1, r7
 80076c2:	220a      	movs	r2, #10
 80076c4:	f7f9 fa8c 	bl	8000be0 <__aeabi_uldivmod>
 80076c8:	4606      	mov	r6, r0
 80076ca:	460f      	mov	r7, r1
 80076cc:	ea56 0307 	orrs.w	r3, r6, r7
 80076d0:	d1eb      	bne.n	80076aa <_vfprintf_r+0x5a2>
 80076d2:	e012      	b.n	80076fa <_vfprintf_r+0x5f2>
 80076d4:	2600      	movs	r6, #0
 80076d6:	2700      	movs	r7, #0
 80076d8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80076dc:	f006 030f 	and.w	r3, r6, #15
 80076e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80076e2:	5cd3      	ldrb	r3, [r2, r3]
 80076e4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80076e8:	0933      	lsrs	r3, r6, #4
 80076ea:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80076ee:	093a      	lsrs	r2, r7, #4
 80076f0:	461e      	mov	r6, r3
 80076f2:	4617      	mov	r7, r2
 80076f4:	ea56 0307 	orrs.w	r3, r6, r7
 80076f8:	d1f0      	bne.n	80076dc <_vfprintf_r+0x5d4>
 80076fa:	4629      	mov	r1, r5
 80076fc:	e00a      	b.n	8007714 <_vfprintf_r+0x60c>
 80076fe:	b93b      	cbnz	r3, 8007710 <_vfprintf_r+0x608>
 8007700:	07ea      	lsls	r2, r5, #31
 8007702:	d505      	bpl.n	8007710 <_vfprintf_r+0x608>
 8007704:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8007708:	2330      	movs	r3, #48	; 0x30
 800770a:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800770e:	e001      	b.n	8007714 <_vfprintf_r+0x60c>
 8007710:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8007714:	464e      	mov	r6, r9
 8007716:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800771a:	ebc8 0909 	rsb	r9, r8, r9
 800771e:	460d      	mov	r5, r1
 8007720:	2700      	movs	r7, #0
 8007722:	e01b      	b.n	800775c <_vfprintf_r+0x654>
 8007724:	b10a      	cbz	r2, 800772a <_vfprintf_r+0x622>
 8007726:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800772a:	9b02      	ldr	r3, [sp, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 83a0 	beq.w	8007e72 <_vfprintf_r+0xd6a>
 8007732:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007736:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800773a:	2600      	movs	r6, #0
 800773c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8007740:	9703      	str	r7, [sp, #12]
 8007742:	f04f 0901 	mov.w	r9, #1
 8007746:	4637      	mov	r7, r6
 8007748:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800774c:	e006      	b.n	800775c <_vfprintf_r+0x654>
 800774e:	bf00      	nop
 8007750:	7fefffff 	.word	0x7fefffff
 8007754:	0800cd11 	.word	0x0800cd11
 8007758:	4606      	mov	r6, r0
 800775a:	4637      	mov	r7, r6
 800775c:	454e      	cmp	r6, r9
 800775e:	4633      	mov	r3, r6
 8007760:	bfb8      	it	lt
 8007762:	464b      	movlt	r3, r9
 8007764:	930b      	str	r3, [sp, #44]	; 0x2c
 8007766:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800776a:	b113      	cbz	r3, 8007772 <_vfprintf_r+0x66a>
 800776c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776e:	3301      	adds	r3, #1
 8007770:	930b      	str	r3, [sp, #44]	; 0x2c
 8007772:	f015 0302 	ands.w	r3, r5, #2
 8007776:	9314      	str	r3, [sp, #80]	; 0x50
 8007778:	bf1e      	ittt	ne
 800777a:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800777c:	3302      	addne	r3, #2
 800777e:	930b      	strne	r3, [sp, #44]	; 0x2c
 8007780:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8007784:	9315      	str	r3, [sp, #84]	; 0x54
 8007786:	d139      	bne.n	80077fc <_vfprintf_r+0x6f4>
 8007788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800778a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	930c      	str	r3, [sp, #48]	; 0x30
 8007792:	dd33      	ble.n	80077fc <_vfprintf_r+0x6f4>
 8007794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007796:	2b10      	cmp	r3, #16
 8007798:	4ba6      	ldr	r3, [pc, #664]	; (8007a34 <_vfprintf_r+0x92c>)
 800779a:	6023      	str	r3, [r4, #0]
 800779c:	dd18      	ble.n	80077d0 <_vfprintf_r+0x6c8>
 800779e:	2310      	movs	r3, #16
 80077a0:	6063      	str	r3, [r4, #4]
 80077a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077a4:	3310      	adds	r3, #16
 80077a6:	9321      	str	r3, [sp, #132]	; 0x84
 80077a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80077aa:	3301      	adds	r3, #1
 80077ac:	2b07      	cmp	r3, #7
 80077ae:	9320      	str	r3, [sp, #128]	; 0x80
 80077b0:	dc01      	bgt.n	80077b6 <_vfprintf_r+0x6ae>
 80077b2:	3408      	adds	r4, #8
 80077b4:	e008      	b.n	80077c8 <_vfprintf_r+0x6c0>
 80077b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80077b8:	4659      	mov	r1, fp
 80077ba:	4650      	mov	r0, sl
 80077bc:	f7ff f80e 	bl	80067dc <__sprint_r>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	f040 835d 	bne.w	8007e80 <_vfprintf_r+0xd78>
 80077c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80077c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ca:	3b10      	subs	r3, #16
 80077cc:	930c      	str	r3, [sp, #48]	; 0x30
 80077ce:	e7e1      	b.n	8007794 <_vfprintf_r+0x68c>
 80077d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077d2:	6063      	str	r3, [r4, #4]
 80077d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077d8:	4413      	add	r3, r2
 80077da:	9321      	str	r3, [sp, #132]	; 0x84
 80077dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80077de:	3301      	adds	r3, #1
 80077e0:	2b07      	cmp	r3, #7
 80077e2:	9320      	str	r3, [sp, #128]	; 0x80
 80077e4:	dc01      	bgt.n	80077ea <_vfprintf_r+0x6e2>
 80077e6:	3408      	adds	r4, #8
 80077e8:	e008      	b.n	80077fc <_vfprintf_r+0x6f4>
 80077ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80077ec:	4659      	mov	r1, fp
 80077ee:	4650      	mov	r0, sl
 80077f0:	f7fe fff4 	bl	80067dc <__sprint_r>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	f040 8343 	bne.w	8007e80 <_vfprintf_r+0xd78>
 80077fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80077fc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8007800:	b1bb      	cbz	r3, 8007832 <_vfprintf_r+0x72a>
 8007802:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	2301      	movs	r3, #1
 800780a:	6063      	str	r3, [r4, #4]
 800780c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800780e:	3301      	adds	r3, #1
 8007810:	9321      	str	r3, [sp, #132]	; 0x84
 8007812:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007814:	3301      	adds	r3, #1
 8007816:	2b07      	cmp	r3, #7
 8007818:	9320      	str	r3, [sp, #128]	; 0x80
 800781a:	dc01      	bgt.n	8007820 <_vfprintf_r+0x718>
 800781c:	3408      	adds	r4, #8
 800781e:	e008      	b.n	8007832 <_vfprintf_r+0x72a>
 8007820:	aa1f      	add	r2, sp, #124	; 0x7c
 8007822:	4659      	mov	r1, fp
 8007824:	4650      	mov	r0, sl
 8007826:	f7fe ffd9 	bl	80067dc <__sprint_r>
 800782a:	2800      	cmp	r0, #0
 800782c:	f040 8328 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007830:	ac2c      	add	r4, sp, #176	; 0xb0
 8007832:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007834:	b1b3      	cbz	r3, 8007864 <_vfprintf_r+0x75c>
 8007836:	ab18      	add	r3, sp, #96	; 0x60
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	2302      	movs	r3, #2
 800783c:	6063      	str	r3, [r4, #4]
 800783e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007840:	3302      	adds	r3, #2
 8007842:	9321      	str	r3, [sp, #132]	; 0x84
 8007844:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007846:	3301      	adds	r3, #1
 8007848:	2b07      	cmp	r3, #7
 800784a:	9320      	str	r3, [sp, #128]	; 0x80
 800784c:	dc01      	bgt.n	8007852 <_vfprintf_r+0x74a>
 800784e:	3408      	adds	r4, #8
 8007850:	e008      	b.n	8007864 <_vfprintf_r+0x75c>
 8007852:	aa1f      	add	r2, sp, #124	; 0x7c
 8007854:	4659      	mov	r1, fp
 8007856:	4650      	mov	r0, sl
 8007858:	f7fe ffc0 	bl	80067dc <__sprint_r>
 800785c:	2800      	cmp	r0, #0
 800785e:	f040 830f 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007862:	ac2c      	add	r4, sp, #176	; 0xb0
 8007864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007866:	2b80      	cmp	r3, #128	; 0x80
 8007868:	d135      	bne.n	80078d6 <_vfprintf_r+0x7ce>
 800786a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	2b00      	cmp	r3, #0
 8007872:	dd30      	ble.n	80078d6 <_vfprintf_r+0x7ce>
 8007874:	4a70      	ldr	r2, [pc, #448]	; (8007a38 <_vfprintf_r+0x930>)
 8007876:	6022      	str	r2, [r4, #0]
 8007878:	2b10      	cmp	r3, #16
 800787a:	dd18      	ble.n	80078ae <_vfprintf_r+0x7a6>
 800787c:	2210      	movs	r2, #16
 800787e:	6062      	str	r2, [r4, #4]
 8007880:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007882:	3210      	adds	r2, #16
 8007884:	9221      	str	r2, [sp, #132]	; 0x84
 8007886:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007888:	3201      	adds	r2, #1
 800788a:	2a07      	cmp	r2, #7
 800788c:	9220      	str	r2, [sp, #128]	; 0x80
 800788e:	dc01      	bgt.n	8007894 <_vfprintf_r+0x78c>
 8007890:	3408      	adds	r4, #8
 8007892:	e00a      	b.n	80078aa <_vfprintf_r+0x7a2>
 8007894:	aa1f      	add	r2, sp, #124	; 0x7c
 8007896:	4659      	mov	r1, fp
 8007898:	4650      	mov	r0, sl
 800789a:	930c      	str	r3, [sp, #48]	; 0x30
 800789c:	f7fe ff9e 	bl	80067dc <__sprint_r>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	f040 82ed 	bne.w	8007e80 <_vfprintf_r+0xd78>
 80078a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80078aa:	3b10      	subs	r3, #16
 80078ac:	e7e2      	b.n	8007874 <_vfprintf_r+0x76c>
 80078ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078b0:	6063      	str	r3, [r4, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	9321      	str	r3, [sp, #132]	; 0x84
 80078b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078b8:	3301      	adds	r3, #1
 80078ba:	2b07      	cmp	r3, #7
 80078bc:	9320      	str	r3, [sp, #128]	; 0x80
 80078be:	dc01      	bgt.n	80078c4 <_vfprintf_r+0x7bc>
 80078c0:	3408      	adds	r4, #8
 80078c2:	e008      	b.n	80078d6 <_vfprintf_r+0x7ce>
 80078c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80078c6:	4659      	mov	r1, fp
 80078c8:	4650      	mov	r0, sl
 80078ca:	f7fe ff87 	bl	80067dc <__sprint_r>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f040 82d6 	bne.w	8007e80 <_vfprintf_r+0xd78>
 80078d4:	ac2c      	add	r4, sp, #176	; 0xb0
 80078d6:	ebc9 0606 	rsb	r6, r9, r6
 80078da:	2e00      	cmp	r6, #0
 80078dc:	dd2e      	ble.n	800793c <_vfprintf_r+0x834>
 80078de:	4b56      	ldr	r3, [pc, #344]	; (8007a38 <_vfprintf_r+0x930>)
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	2e10      	cmp	r6, #16
 80078e4:	dd16      	ble.n	8007914 <_vfprintf_r+0x80c>
 80078e6:	2310      	movs	r3, #16
 80078e8:	6063      	str	r3, [r4, #4]
 80078ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ec:	3310      	adds	r3, #16
 80078ee:	9321      	str	r3, [sp, #132]	; 0x84
 80078f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078f2:	3301      	adds	r3, #1
 80078f4:	2b07      	cmp	r3, #7
 80078f6:	9320      	str	r3, [sp, #128]	; 0x80
 80078f8:	dc01      	bgt.n	80078fe <_vfprintf_r+0x7f6>
 80078fa:	3408      	adds	r4, #8
 80078fc:	e008      	b.n	8007910 <_vfprintf_r+0x808>
 80078fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8007900:	4659      	mov	r1, fp
 8007902:	4650      	mov	r0, sl
 8007904:	f7fe ff6a 	bl	80067dc <__sprint_r>
 8007908:	2800      	cmp	r0, #0
 800790a:	f040 82b9 	bne.w	8007e80 <_vfprintf_r+0xd78>
 800790e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007910:	3e10      	subs	r6, #16
 8007912:	e7e4      	b.n	80078de <_vfprintf_r+0x7d6>
 8007914:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007916:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007918:	6066      	str	r6, [r4, #4]
 800791a:	3301      	adds	r3, #1
 800791c:	4406      	add	r6, r0
 800791e:	2b07      	cmp	r3, #7
 8007920:	9621      	str	r6, [sp, #132]	; 0x84
 8007922:	9320      	str	r3, [sp, #128]	; 0x80
 8007924:	dc01      	bgt.n	800792a <_vfprintf_r+0x822>
 8007926:	3408      	adds	r4, #8
 8007928:	e008      	b.n	800793c <_vfprintf_r+0x834>
 800792a:	aa1f      	add	r2, sp, #124	; 0x7c
 800792c:	4659      	mov	r1, fp
 800792e:	4650      	mov	r0, sl
 8007930:	f7fe ff54 	bl	80067dc <__sprint_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	f040 82a3 	bne.w	8007e80 <_vfprintf_r+0xd78>
 800793a:	ac2c      	add	r4, sp, #176	; 0xb0
 800793c:	05eb      	lsls	r3, r5, #23
 800793e:	d414      	bmi.n	800796a <_vfprintf_r+0x862>
 8007940:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007942:	e884 0300 	stmia.w	r4, {r8, r9}
 8007946:	444b      	add	r3, r9
 8007948:	9321      	str	r3, [sp, #132]	; 0x84
 800794a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800794c:	3301      	adds	r3, #1
 800794e:	2b07      	cmp	r3, #7
 8007950:	9320      	str	r3, [sp, #128]	; 0x80
 8007952:	f340 8244 	ble.w	8007dde <_vfprintf_r+0xcd6>
 8007956:	aa1f      	add	r2, sp, #124	; 0x7c
 8007958:	4659      	mov	r1, fp
 800795a:	4650      	mov	r0, sl
 800795c:	f7fe ff3e 	bl	80067dc <__sprint_r>
 8007960:	2800      	cmp	r0, #0
 8007962:	f040 828d 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007966:	ac2c      	add	r4, sp, #176	; 0xb0
 8007968:	e23a      	b.n	8007de0 <_vfprintf_r+0xcd8>
 800796a:	9b02      	ldr	r3, [sp, #8]
 800796c:	2b65      	cmp	r3, #101	; 0x65
 800796e:	f340 81ad 	ble.w	8007ccc <_vfprintf_r+0xbc4>
 8007972:	2200      	movs	r2, #0
 8007974:	2300      	movs	r3, #0
 8007976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800797a:	f7f9 f8a1 	bl	8000ac0 <__aeabi_dcmpeq>
 800797e:	2800      	cmp	r0, #0
 8007980:	d05e      	beq.n	8007a40 <_vfprintf_r+0x938>
 8007982:	4b2e      	ldr	r3, [pc, #184]	; (8007a3c <_vfprintf_r+0x934>)
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	2301      	movs	r3, #1
 8007988:	6063      	str	r3, [r4, #4]
 800798a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800798c:	3301      	adds	r3, #1
 800798e:	9321      	str	r3, [sp, #132]	; 0x84
 8007990:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007992:	3301      	adds	r3, #1
 8007994:	2b07      	cmp	r3, #7
 8007996:	9320      	str	r3, [sp, #128]	; 0x80
 8007998:	dc01      	bgt.n	800799e <_vfprintf_r+0x896>
 800799a:	3408      	adds	r4, #8
 800799c:	e008      	b.n	80079b0 <_vfprintf_r+0x8a8>
 800799e:	aa1f      	add	r2, sp, #124	; 0x7c
 80079a0:	4659      	mov	r1, fp
 80079a2:	4650      	mov	r0, sl
 80079a4:	f7fe ff1a 	bl	80067dc <__sprint_r>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f040 8269 	bne.w	8007e80 <_vfprintf_r+0xd78>
 80079ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80079b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079b2:	9a04      	ldr	r2, [sp, #16]
 80079b4:	4293      	cmp	r3, r2
 80079b6:	db02      	blt.n	80079be <_vfprintf_r+0x8b6>
 80079b8:	07ef      	lsls	r7, r5, #31
 80079ba:	f140 8211 	bpl.w	8007de0 <_vfprintf_r+0xcd8>
 80079be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	9b08      	ldr	r3, [sp, #32]
 80079c4:	6063      	str	r3, [r4, #4]
 80079c6:	9a08      	ldr	r2, [sp, #32]
 80079c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079ca:	4413      	add	r3, r2
 80079cc:	9321      	str	r3, [sp, #132]	; 0x84
 80079ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079d0:	3301      	adds	r3, #1
 80079d2:	2b07      	cmp	r3, #7
 80079d4:	9320      	str	r3, [sp, #128]	; 0x80
 80079d6:	dc01      	bgt.n	80079dc <_vfprintf_r+0x8d4>
 80079d8:	3408      	adds	r4, #8
 80079da:	e008      	b.n	80079ee <_vfprintf_r+0x8e6>
 80079dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80079de:	4659      	mov	r1, fp
 80079e0:	4650      	mov	r0, sl
 80079e2:	f7fe fefb 	bl	80067dc <__sprint_r>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	f040 824a 	bne.w	8007e80 <_vfprintf_r+0xd78>
 80079ec:	ac2c      	add	r4, sp, #176	; 0xb0
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	1e5e      	subs	r6, r3, #1
 80079f2:	2e00      	cmp	r6, #0
 80079f4:	f340 81f4 	ble.w	8007de0 <_vfprintf_r+0xcd8>
 80079f8:	4f0f      	ldr	r7, [pc, #60]	; (8007a38 <_vfprintf_r+0x930>)
 80079fa:	f04f 0810 	mov.w	r8, #16
 80079fe:	2e10      	cmp	r6, #16
 8007a00:	f340 8159 	ble.w	8007cb6 <_vfprintf_r+0xbae>
 8007a04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a06:	3310      	adds	r3, #16
 8007a08:	9321      	str	r3, [sp, #132]	; 0x84
 8007a0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	2b07      	cmp	r3, #7
 8007a10:	e884 0180 	stmia.w	r4, {r7, r8}
 8007a14:	9320      	str	r3, [sp, #128]	; 0x80
 8007a16:	dc01      	bgt.n	8007a1c <_vfprintf_r+0x914>
 8007a18:	3408      	adds	r4, #8
 8007a1a:	e008      	b.n	8007a2e <_vfprintf_r+0x926>
 8007a1c:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a1e:	4659      	mov	r1, fp
 8007a20:	4650      	mov	r0, sl
 8007a22:	f7fe fedb 	bl	80067dc <__sprint_r>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	f040 822a 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007a2c:	ac2c      	add	r4, sp, #176	; 0xb0
 8007a2e:	3e10      	subs	r6, #16
 8007a30:	e7e5      	b.n	80079fe <_vfprintf_r+0x8f6>
 8007a32:	bf00      	nop
 8007a34:	0800cd54 	.word	0x0800cd54
 8007a38:	0800cd64 	.word	0x0800cd64
 8007a3c:	0800cd22 	.word	0x0800cd22
 8007a40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dc7c      	bgt.n	8007b40 <_vfprintf_r+0xa38>
 8007a46:	4b9f      	ldr	r3, [pc, #636]	; (8007cc4 <_vfprintf_r+0xbbc>)
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	6063      	str	r3, [r4, #4]
 8007a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a50:	3301      	adds	r3, #1
 8007a52:	9321      	str	r3, [sp, #132]	; 0x84
 8007a54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a56:	3301      	adds	r3, #1
 8007a58:	2b07      	cmp	r3, #7
 8007a5a:	9320      	str	r3, [sp, #128]	; 0x80
 8007a5c:	dc01      	bgt.n	8007a62 <_vfprintf_r+0x95a>
 8007a5e:	3408      	adds	r4, #8
 8007a60:	e008      	b.n	8007a74 <_vfprintf_r+0x96c>
 8007a62:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a64:	4659      	mov	r1, fp
 8007a66:	4650      	mov	r0, sl
 8007a68:	f7fe feb8 	bl	80067dc <__sprint_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f040 8207 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007a72:	ac2c      	add	r4, sp, #176	; 0xb0
 8007a74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a76:	b923      	cbnz	r3, 8007a82 <_vfprintf_r+0x97a>
 8007a78:	9b04      	ldr	r3, [sp, #16]
 8007a7a:	b913      	cbnz	r3, 8007a82 <_vfprintf_r+0x97a>
 8007a7c:	07ee      	lsls	r6, r5, #31
 8007a7e:	f140 81af 	bpl.w	8007de0 <_vfprintf_r+0xcd8>
 8007a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	9b08      	ldr	r3, [sp, #32]
 8007a88:	6063      	str	r3, [r4, #4]
 8007a8a:	9a08      	ldr	r2, [sp, #32]
 8007a8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a8e:	4413      	add	r3, r2
 8007a90:	9321      	str	r3, [sp, #132]	; 0x84
 8007a92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a94:	3301      	adds	r3, #1
 8007a96:	2b07      	cmp	r3, #7
 8007a98:	9320      	str	r3, [sp, #128]	; 0x80
 8007a9a:	dc02      	bgt.n	8007aa2 <_vfprintf_r+0x99a>
 8007a9c:	f104 0308 	add.w	r3, r4, #8
 8007aa0:	e008      	b.n	8007ab4 <_vfprintf_r+0x9ac>
 8007aa2:	aa1f      	add	r2, sp, #124	; 0x7c
 8007aa4:	4659      	mov	r1, fp
 8007aa6:	4650      	mov	r0, sl
 8007aa8:	f7fe fe98 	bl	80067dc <__sprint_r>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f040 81e7 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007ab2:	ab2c      	add	r3, sp, #176	; 0xb0
 8007ab4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007ab6:	4276      	negs	r6, r6
 8007ab8:	2e00      	cmp	r6, #0
 8007aba:	dd30      	ble.n	8007b1e <_vfprintf_r+0xa16>
 8007abc:	4f82      	ldr	r7, [pc, #520]	; (8007cc8 <_vfprintf_r+0xbc0>)
 8007abe:	2410      	movs	r4, #16
 8007ac0:	2e10      	cmp	r6, #16
 8007ac2:	dd16      	ble.n	8007af2 <_vfprintf_r+0x9ea>
 8007ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ac6:	601f      	str	r7, [r3, #0]
 8007ac8:	3210      	adds	r2, #16
 8007aca:	9221      	str	r2, [sp, #132]	; 0x84
 8007acc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ace:	605c      	str	r4, [r3, #4]
 8007ad0:	3201      	adds	r2, #1
 8007ad2:	2a07      	cmp	r2, #7
 8007ad4:	9220      	str	r2, [sp, #128]	; 0x80
 8007ad6:	dc01      	bgt.n	8007adc <_vfprintf_r+0x9d4>
 8007ad8:	3308      	adds	r3, #8
 8007ada:	e008      	b.n	8007aee <_vfprintf_r+0x9e6>
 8007adc:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ade:	4659      	mov	r1, fp
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	f7fe fe7b 	bl	80067dc <__sprint_r>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f040 81ca 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007aec:	ab2c      	add	r3, sp, #176	; 0xb0
 8007aee:	3e10      	subs	r6, #16
 8007af0:	e7e6      	b.n	8007ac0 <_vfprintf_r+0x9b8>
 8007af2:	4a75      	ldr	r2, [pc, #468]	; (8007cc8 <_vfprintf_r+0xbc0>)
 8007af4:	e883 0044 	stmia.w	r3, {r2, r6}
 8007af8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007afa:	4416      	add	r6, r2
 8007afc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007afe:	9621      	str	r6, [sp, #132]	; 0x84
 8007b00:	3201      	adds	r2, #1
 8007b02:	2a07      	cmp	r2, #7
 8007b04:	9220      	str	r2, [sp, #128]	; 0x80
 8007b06:	dc01      	bgt.n	8007b0c <_vfprintf_r+0xa04>
 8007b08:	3308      	adds	r3, #8
 8007b0a:	e008      	b.n	8007b1e <_vfprintf_r+0xa16>
 8007b0c:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b0e:	4659      	mov	r1, fp
 8007b10:	4650      	mov	r0, sl
 8007b12:	f7fe fe63 	bl	80067dc <__sprint_r>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f040 81b2 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007b1c:	ab2c      	add	r3, sp, #176	; 0xb0
 8007b1e:	9a04      	ldr	r2, [sp, #16]
 8007b20:	605a      	str	r2, [r3, #4]
 8007b22:	9904      	ldr	r1, [sp, #16]
 8007b24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b26:	f8c3 8000 	str.w	r8, [r3]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	9221      	str	r2, [sp, #132]	; 0x84
 8007b2e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b30:	3201      	adds	r2, #1
 8007b32:	2a07      	cmp	r2, #7
 8007b34:	9220      	str	r2, [sp, #128]	; 0x80
 8007b36:	f73f af0e 	bgt.w	8007956 <_vfprintf_r+0x84e>
 8007b3a:	f103 0408 	add.w	r4, r3, #8
 8007b3e:	e14f      	b.n	8007de0 <_vfprintf_r+0xcd8>
 8007b40:	9b04      	ldr	r3, [sp, #16]
 8007b42:	42bb      	cmp	r3, r7
 8007b44:	bfa8      	it	ge
 8007b46:	463b      	movge	r3, r7
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	461e      	mov	r6, r3
 8007b4c:	dd15      	ble.n	8007b7a <_vfprintf_r+0xa72>
 8007b4e:	6063      	str	r3, [r4, #4]
 8007b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b52:	f8c4 8000 	str.w	r8, [r4]
 8007b56:	4433      	add	r3, r6
 8007b58:	9321      	str	r3, [sp, #132]	; 0x84
 8007b5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	2b07      	cmp	r3, #7
 8007b60:	9320      	str	r3, [sp, #128]	; 0x80
 8007b62:	dc01      	bgt.n	8007b68 <_vfprintf_r+0xa60>
 8007b64:	3408      	adds	r4, #8
 8007b66:	e008      	b.n	8007b7a <_vfprintf_r+0xa72>
 8007b68:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b6a:	4659      	mov	r1, fp
 8007b6c:	4650      	mov	r0, sl
 8007b6e:	f7fe fe35 	bl	80067dc <__sprint_r>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f040 8184 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007b78:	ac2c      	add	r4, sp, #176	; 0xb0
 8007b7a:	2e00      	cmp	r6, #0
 8007b7c:	bfac      	ite	ge
 8007b7e:	1bbe      	subge	r6, r7, r6
 8007b80:	463e      	movlt	r6, r7
 8007b82:	2e00      	cmp	r6, #0
 8007b84:	dd30      	ble.n	8007be8 <_vfprintf_r+0xae0>
 8007b86:	f04f 0910 	mov.w	r9, #16
 8007b8a:	4b4f      	ldr	r3, [pc, #316]	; (8007cc8 <_vfprintf_r+0xbc0>)
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	2e10      	cmp	r6, #16
 8007b90:	dd16      	ble.n	8007bc0 <_vfprintf_r+0xab8>
 8007b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b94:	f8c4 9004 	str.w	r9, [r4, #4]
 8007b98:	3310      	adds	r3, #16
 8007b9a:	9321      	str	r3, [sp, #132]	; 0x84
 8007b9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	2b07      	cmp	r3, #7
 8007ba2:	9320      	str	r3, [sp, #128]	; 0x80
 8007ba4:	dc01      	bgt.n	8007baa <_vfprintf_r+0xaa2>
 8007ba6:	3408      	adds	r4, #8
 8007ba8:	e008      	b.n	8007bbc <_vfprintf_r+0xab4>
 8007baa:	aa1f      	add	r2, sp, #124	; 0x7c
 8007bac:	4659      	mov	r1, fp
 8007bae:	4650      	mov	r0, sl
 8007bb0:	f7fe fe14 	bl	80067dc <__sprint_r>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f040 8163 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007bba:	ac2c      	add	r4, sp, #176	; 0xb0
 8007bbc:	3e10      	subs	r6, #16
 8007bbe:	e7e4      	b.n	8007b8a <_vfprintf_r+0xa82>
 8007bc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bc2:	6066      	str	r6, [r4, #4]
 8007bc4:	441e      	add	r6, r3
 8007bc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007bc8:	9621      	str	r6, [sp, #132]	; 0x84
 8007bca:	3301      	adds	r3, #1
 8007bcc:	2b07      	cmp	r3, #7
 8007bce:	9320      	str	r3, [sp, #128]	; 0x80
 8007bd0:	dc01      	bgt.n	8007bd6 <_vfprintf_r+0xace>
 8007bd2:	3408      	adds	r4, #8
 8007bd4:	e008      	b.n	8007be8 <_vfprintf_r+0xae0>
 8007bd6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007bd8:	4659      	mov	r1, fp
 8007bda:	4650      	mov	r0, sl
 8007bdc:	f7fe fdfe 	bl	80067dc <__sprint_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	f040 814d 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007be6:	ac2c      	add	r4, sp, #176	; 0xb0
 8007be8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bea:	9a04      	ldr	r2, [sp, #16]
 8007bec:	4293      	cmp	r3, r2
 8007bee:	4447      	add	r7, r8
 8007bf0:	db01      	blt.n	8007bf6 <_vfprintf_r+0xaee>
 8007bf2:	07e8      	lsls	r0, r5, #31
 8007bf4:	d517      	bpl.n	8007c26 <_vfprintf_r+0xb1e>
 8007bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	9b08      	ldr	r3, [sp, #32]
 8007bfc:	6063      	str	r3, [r4, #4]
 8007bfe:	9a08      	ldr	r2, [sp, #32]
 8007c00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c02:	4413      	add	r3, r2
 8007c04:	9321      	str	r3, [sp, #132]	; 0x84
 8007c06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c08:	3301      	adds	r3, #1
 8007c0a:	2b07      	cmp	r3, #7
 8007c0c:	9320      	str	r3, [sp, #128]	; 0x80
 8007c0e:	dc01      	bgt.n	8007c14 <_vfprintf_r+0xb0c>
 8007c10:	3408      	adds	r4, #8
 8007c12:	e008      	b.n	8007c26 <_vfprintf_r+0xb1e>
 8007c14:	aa1f      	add	r2, sp, #124	; 0x7c
 8007c16:	4659      	mov	r1, fp
 8007c18:	4650      	mov	r0, sl
 8007c1a:	f7fe fddf 	bl	80067dc <__sprint_r>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	f040 812e 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007c24:	ac2c      	add	r4, sp, #176	; 0xb0
 8007c26:	9b04      	ldr	r3, [sp, #16]
 8007c28:	9a04      	ldr	r2, [sp, #16]
 8007c2a:	eb08 0603 	add.w	r6, r8, r3
 8007c2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c30:	1bf6      	subs	r6, r6, r7
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	429e      	cmp	r6, r3
 8007c36:	bfa8      	it	ge
 8007c38:	461e      	movge	r6, r3
 8007c3a:	2e00      	cmp	r6, #0
 8007c3c:	dd14      	ble.n	8007c68 <_vfprintf_r+0xb60>
 8007c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c40:	6027      	str	r7, [r4, #0]
 8007c42:	4433      	add	r3, r6
 8007c44:	9321      	str	r3, [sp, #132]	; 0x84
 8007c46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c48:	6066      	str	r6, [r4, #4]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	2b07      	cmp	r3, #7
 8007c4e:	9320      	str	r3, [sp, #128]	; 0x80
 8007c50:	dc01      	bgt.n	8007c56 <_vfprintf_r+0xb4e>
 8007c52:	3408      	adds	r4, #8
 8007c54:	e008      	b.n	8007c68 <_vfprintf_r+0xb60>
 8007c56:	aa1f      	add	r2, sp, #124	; 0x7c
 8007c58:	4659      	mov	r1, fp
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	f7fe fdbe 	bl	80067dc <__sprint_r>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	f040 810d 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007c66:	ac2c      	add	r4, sp, #176	; 0xb0
 8007c68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c6a:	9a04      	ldr	r2, [sp, #16]
 8007c6c:	2e00      	cmp	r6, #0
 8007c6e:	eba2 0303 	sub.w	r3, r2, r3
 8007c72:	bfac      	ite	ge
 8007c74:	1b9e      	subge	r6, r3, r6
 8007c76:	461e      	movlt	r6, r3
 8007c78:	2e00      	cmp	r6, #0
 8007c7a:	f340 80b1 	ble.w	8007de0 <_vfprintf_r+0xcd8>
 8007c7e:	4f12      	ldr	r7, [pc, #72]	; (8007cc8 <_vfprintf_r+0xbc0>)
 8007c80:	f04f 0810 	mov.w	r8, #16
 8007c84:	2e10      	cmp	r6, #16
 8007c86:	dd16      	ble.n	8007cb6 <_vfprintf_r+0xbae>
 8007c88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c8a:	3310      	adds	r3, #16
 8007c8c:	9321      	str	r3, [sp, #132]	; 0x84
 8007c8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c90:	3301      	adds	r3, #1
 8007c92:	2b07      	cmp	r3, #7
 8007c94:	e884 0180 	stmia.w	r4, {r7, r8}
 8007c98:	9320      	str	r3, [sp, #128]	; 0x80
 8007c9a:	dc01      	bgt.n	8007ca0 <_vfprintf_r+0xb98>
 8007c9c:	3408      	adds	r4, #8
 8007c9e:	e008      	b.n	8007cb2 <_vfprintf_r+0xbaa>
 8007ca0:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ca2:	4659      	mov	r1, fp
 8007ca4:	4650      	mov	r0, sl
 8007ca6:	f7fe fd99 	bl	80067dc <__sprint_r>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	f040 80e8 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007cb0:	ac2c      	add	r4, sp, #176	; 0xb0
 8007cb2:	3e10      	subs	r6, #16
 8007cb4:	e7e6      	b.n	8007c84 <_vfprintf_r+0xb7c>
 8007cb6:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <_vfprintf_r+0xbc0>)
 8007cb8:	e884 0048 	stmia.w	r4, {r3, r6}
 8007cbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cbe:	441e      	add	r6, r3
 8007cc0:	9621      	str	r6, [sp, #132]	; 0x84
 8007cc2:	e642      	b.n	800794a <_vfprintf_r+0x842>
 8007cc4:	0800cd22 	.word	0x0800cd22
 8007cc8:	0800cd64 	.word	0x0800cd64
 8007ccc:	9b04      	ldr	r3, [sp, #16]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	dc01      	bgt.n	8007cd6 <_vfprintf_r+0xbce>
 8007cd2:	07e9      	lsls	r1, r5, #31
 8007cd4:	d573      	bpl.n	8007dbe <_vfprintf_r+0xcb6>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	6063      	str	r3, [r4, #4]
 8007cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cdc:	f8c4 8000 	str.w	r8, [r4]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	9321      	str	r3, [sp, #132]	; 0x84
 8007ce4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	2b07      	cmp	r3, #7
 8007cea:	9320      	str	r3, [sp, #128]	; 0x80
 8007cec:	dc01      	bgt.n	8007cf2 <_vfprintf_r+0xbea>
 8007cee:	3408      	adds	r4, #8
 8007cf0:	e008      	b.n	8007d04 <_vfprintf_r+0xbfc>
 8007cf2:	aa1f      	add	r2, sp, #124	; 0x7c
 8007cf4:	4659      	mov	r1, fp
 8007cf6:	4650      	mov	r0, sl
 8007cf8:	f7fe fd70 	bl	80067dc <__sprint_r>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	f040 80bf 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007d02:	ac2c      	add	r4, sp, #176	; 0xb0
 8007d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	9b08      	ldr	r3, [sp, #32]
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	9a08      	ldr	r2, [sp, #32]
 8007d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d10:	4413      	add	r3, r2
 8007d12:	9321      	str	r3, [sp, #132]	; 0x84
 8007d14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d16:	3301      	adds	r3, #1
 8007d18:	2b07      	cmp	r3, #7
 8007d1a:	9320      	str	r3, [sp, #128]	; 0x80
 8007d1c:	dc01      	bgt.n	8007d22 <_vfprintf_r+0xc1a>
 8007d1e:	3408      	adds	r4, #8
 8007d20:	e008      	b.n	8007d34 <_vfprintf_r+0xc2c>
 8007d22:	aa1f      	add	r2, sp, #124	; 0x7c
 8007d24:	4659      	mov	r1, fp
 8007d26:	4650      	mov	r0, sl
 8007d28:	f7fe fd58 	bl	80067dc <__sprint_r>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	f040 80a7 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007d32:	ac2c      	add	r4, sp, #176	; 0xb0
 8007d34:	2300      	movs	r3, #0
 8007d36:	2200      	movs	r2, #0
 8007d38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d3c:	f7f8 fec0 	bl	8000ac0 <__aeabi_dcmpeq>
 8007d40:	9b04      	ldr	r3, [sp, #16]
 8007d42:	1e5e      	subs	r6, r3, #1
 8007d44:	b9b8      	cbnz	r0, 8007d76 <_vfprintf_r+0xc6e>
 8007d46:	f108 0301 	add.w	r3, r8, #1
 8007d4a:	e884 0048 	stmia.w	r4, {r3, r6}
 8007d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d50:	9a04      	ldr	r2, [sp, #16]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	4413      	add	r3, r2
 8007d56:	9321      	str	r3, [sp, #132]	; 0x84
 8007d58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	2b07      	cmp	r3, #7
 8007d5e:	9320      	str	r3, [sp, #128]	; 0x80
 8007d60:	dd34      	ble.n	8007dcc <_vfprintf_r+0xcc4>
 8007d62:	aa1f      	add	r2, sp, #124	; 0x7c
 8007d64:	4659      	mov	r1, fp
 8007d66:	4650      	mov	r0, sl
 8007d68:	f7fe fd38 	bl	80067dc <__sprint_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f040 8087 	bne.w	8007e80 <_vfprintf_r+0xd78>
 8007d72:	ac2c      	add	r4, sp, #176	; 0xb0
 8007d74:	e02b      	b.n	8007dce <_vfprintf_r+0xcc6>
 8007d76:	2e00      	cmp	r6, #0
 8007d78:	dd29      	ble.n	8007dce <_vfprintf_r+0xcc6>
 8007d7a:	4fa6      	ldr	r7, [pc, #664]	; (8008014 <_vfprintf_r+0xf0c>)
 8007d7c:	f04f 0810 	mov.w	r8, #16
 8007d80:	2e10      	cmp	r6, #16
 8007d82:	dd15      	ble.n	8007db0 <_vfprintf_r+0xca8>
 8007d84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d86:	3310      	adds	r3, #16
 8007d88:	9321      	str	r3, [sp, #132]	; 0x84
 8007d8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	2b07      	cmp	r3, #7
 8007d90:	e884 0180 	stmia.w	r4, {r7, r8}
 8007d94:	9320      	str	r3, [sp, #128]	; 0x80
 8007d96:	dc01      	bgt.n	8007d9c <_vfprintf_r+0xc94>
 8007d98:	3408      	adds	r4, #8
 8007d9a:	e007      	b.n	8007dac <_vfprintf_r+0xca4>
 8007d9c:	aa1f      	add	r2, sp, #124	; 0x7c
 8007d9e:	4659      	mov	r1, fp
 8007da0:	4650      	mov	r0, sl
 8007da2:	f7fe fd1b 	bl	80067dc <__sprint_r>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d16a      	bne.n	8007e80 <_vfprintf_r+0xd78>
 8007daa:	ac2c      	add	r4, sp, #176	; 0xb0
 8007dac:	3e10      	subs	r6, #16
 8007dae:	e7e7      	b.n	8007d80 <_vfprintf_r+0xc78>
 8007db0:	4b98      	ldr	r3, [pc, #608]	; (8008014 <_vfprintf_r+0xf0c>)
 8007db2:	e884 0048 	stmia.w	r4, {r3, r6}
 8007db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db8:	441e      	add	r6, r3
 8007dba:	9621      	str	r6, [sp, #132]	; 0x84
 8007dbc:	e7cc      	b.n	8007d58 <_vfprintf_r+0xc50>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	6063      	str	r3, [r4, #4]
 8007dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dc4:	f8c4 8000 	str.w	r8, [r4]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	e7c4      	b.n	8007d56 <_vfprintf_r+0xc4e>
 8007dcc:	3408      	adds	r4, #8
 8007dce:	ab1b      	add	r3, sp, #108	; 0x6c
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dd4:	6063      	str	r3, [r4, #4]
 8007dd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007dd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dda:	4413      	add	r3, r2
 8007ddc:	e5b4      	b.n	8007948 <_vfprintf_r+0x840>
 8007dde:	3408      	adds	r4, #8
 8007de0:	076a      	lsls	r2, r5, #29
 8007de2:	d40b      	bmi.n	8007dfc <_vfprintf_r+0xcf4>
 8007de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dea:	428a      	cmp	r2, r1
 8007dec:	bfac      	ite	ge
 8007dee:	189b      	addge	r3, r3, r2
 8007df0:	185b      	addlt	r3, r3, r1
 8007df2:	930a      	str	r3, [sp, #40]	; 0x28
 8007df4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d035      	beq.n	8007e66 <_vfprintf_r+0xd5e>
 8007dfa:	e02e      	b.n	8007e5a <_vfprintf_r+0xd52>
 8007dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e00:	1a9d      	subs	r5, r3, r2
 8007e02:	2d00      	cmp	r5, #0
 8007e04:	ddee      	ble.n	8007de4 <_vfprintf_r+0xcdc>
 8007e06:	2610      	movs	r6, #16
 8007e08:	4b83      	ldr	r3, [pc, #524]	; (8008018 <_vfprintf_r+0xf10>)
 8007e0a:	6023      	str	r3, [r4, #0]
 8007e0c:	2d10      	cmp	r5, #16
 8007e0e:	dd13      	ble.n	8007e38 <_vfprintf_r+0xd30>
 8007e10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e12:	6066      	str	r6, [r4, #4]
 8007e14:	3310      	adds	r3, #16
 8007e16:	9321      	str	r3, [sp, #132]	; 0x84
 8007e18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	2b07      	cmp	r3, #7
 8007e1e:	9320      	str	r3, [sp, #128]	; 0x80
 8007e20:	dc01      	bgt.n	8007e26 <_vfprintf_r+0xd1e>
 8007e22:	3408      	adds	r4, #8
 8007e24:	e006      	b.n	8007e34 <_vfprintf_r+0xd2c>
 8007e26:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e28:	4659      	mov	r1, fp
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	f7fe fcd6 	bl	80067dc <__sprint_r>
 8007e30:	bb30      	cbnz	r0, 8007e80 <_vfprintf_r+0xd78>
 8007e32:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e34:	3d10      	subs	r5, #16
 8007e36:	e7e7      	b.n	8007e08 <_vfprintf_r+0xd00>
 8007e38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e3a:	6065      	str	r5, [r4, #4]
 8007e3c:	441d      	add	r5, r3
 8007e3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e40:	9521      	str	r5, [sp, #132]	; 0x84
 8007e42:	3301      	adds	r3, #1
 8007e44:	2b07      	cmp	r3, #7
 8007e46:	9320      	str	r3, [sp, #128]	; 0x80
 8007e48:	ddcc      	ble.n	8007de4 <_vfprintf_r+0xcdc>
 8007e4a:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e4c:	4659      	mov	r1, fp
 8007e4e:	4650      	mov	r0, sl
 8007e50:	f7fe fcc4 	bl	80067dc <__sprint_r>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d0c5      	beq.n	8007de4 <_vfprintf_r+0xcdc>
 8007e58:	e012      	b.n	8007e80 <_vfprintf_r+0xd78>
 8007e5a:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e5c:	4659      	mov	r1, fp
 8007e5e:	4650      	mov	r0, sl
 8007e60:	f7fe fcbc 	bl	80067dc <__sprint_r>
 8007e64:	b960      	cbnz	r0, 8007e80 <_vfprintf_r+0xd78>
 8007e66:	2300      	movs	r3, #0
 8007e68:	9320      	str	r3, [sp, #128]	; 0x80
 8007e6a:	9f03      	ldr	r7, [sp, #12]
 8007e6c:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e6e:	f7ff b9b4 	b.w	80071da <_vfprintf_r+0xd2>
 8007e72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e74:	b123      	cbz	r3, 8007e80 <_vfprintf_r+0xd78>
 8007e76:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e78:	4659      	mov	r1, fp
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	f7fe fcae 	bl	80067dc <__sprint_r>
 8007e80:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8007e84:	065b      	lsls	r3, r3, #25
 8007e86:	f53f a98b 	bmi.w	80071a0 <_vfprintf_r+0x98>
 8007e8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e8c:	e12f      	b.n	80080ee <_vfprintf_r+0xfe6>
 8007e8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e92:	4610      	mov	r0, r2
 8007e94:	4619      	mov	r1, r3
 8007e96:	f7f8 fe45 	bl	8000b24 <__aeabi_dcmpun>
 8007e9a:	b160      	cbz	r0, 8007eb6 <_vfprintf_r+0xdae>
 8007e9c:	4b5f      	ldr	r3, [pc, #380]	; (800801c <_vfprintf_r+0xf14>)
 8007e9e:	4a60      	ldr	r2, [pc, #384]	; (8008020 <_vfprintf_r+0xf18>)
 8007ea0:	9902      	ldr	r1, [sp, #8]
 8007ea2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8007ea6:	2947      	cmp	r1, #71	; 0x47
 8007ea8:	bfcc      	ite	gt
 8007eaa:	4690      	movgt	r8, r2
 8007eac:	4698      	movle	r8, r3
 8007eae:	f04f 0903 	mov.w	r9, #3
 8007eb2:	2600      	movs	r6, #0
 8007eb4:	e451      	b.n	800775a <_vfprintf_r+0x652>
 8007eb6:	f1b9 3fff 	cmp.w	r9, #4294967295
 8007eba:	d00a      	beq.n	8007ed2 <_vfprintf_r+0xdca>
 8007ebc:	9b02      	ldr	r3, [sp, #8]
 8007ebe:	f023 0320 	bic.w	r3, r3, #32
 8007ec2:	2b47      	cmp	r3, #71	; 0x47
 8007ec4:	d107      	bne.n	8007ed6 <_vfprintf_r+0xdce>
 8007ec6:	f1b9 0f00 	cmp.w	r9, #0
 8007eca:	bf08      	it	eq
 8007ecc:	f04f 0901 	moveq.w	r9, #1
 8007ed0:	e001      	b.n	8007ed6 <_vfprintf_r+0xdce>
 8007ed2:	f04f 0906 	mov.w	r9, #6
 8007ed6:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8007eda:	930c      	str	r3, [sp, #48]	; 0x30
 8007edc:	9b07      	ldr	r3, [sp, #28]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	da07      	bge.n	8007ef2 <_vfprintf_r+0xdea>
 8007ee2:	9b06      	ldr	r3, [sp, #24]
 8007ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ee6:	9b07      	ldr	r3, [sp, #28]
 8007ee8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eee:	232d      	movs	r3, #45	; 0x2d
 8007ef0:	e004      	b.n	8007efc <_vfprintf_r+0xdf4>
 8007ef2:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007ef6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8007efa:	2300      	movs	r3, #0
 8007efc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007efe:	9b02      	ldr	r3, [sp, #8]
 8007f00:	f023 0720 	bic.w	r7, r3, #32
 8007f04:	2f46      	cmp	r7, #70	; 0x46
 8007f06:	d004      	beq.n	8007f12 <_vfprintf_r+0xe0a>
 8007f08:	2f45      	cmp	r7, #69	; 0x45
 8007f0a:	d105      	bne.n	8007f18 <_vfprintf_r+0xe10>
 8007f0c:	f109 0601 	add.w	r6, r9, #1
 8007f10:	e003      	b.n	8007f1a <_vfprintf_r+0xe12>
 8007f12:	464e      	mov	r6, r9
 8007f14:	2103      	movs	r1, #3
 8007f16:	e001      	b.n	8007f1c <_vfprintf_r+0xe14>
 8007f18:	464e      	mov	r6, r9
 8007f1a:	2102      	movs	r1, #2
 8007f1c:	ab1d      	add	r3, sp, #116	; 0x74
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	ab1a      	add	r3, sp, #104	; 0x68
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	4632      	mov	r2, r6
 8007f26:	ab19      	add	r3, sp, #100	; 0x64
 8007f28:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8007f2c:	4650      	mov	r0, sl
 8007f2e:	f000 fa5b 	bl	80083e8 <_dtoa_r>
 8007f32:	2f47      	cmp	r7, #71	; 0x47
 8007f34:	4680      	mov	r8, r0
 8007f36:	d102      	bne.n	8007f3e <_vfprintf_r+0xe36>
 8007f38:	07eb      	lsls	r3, r5, #31
 8007f3a:	f140 80ce 	bpl.w	80080da <_vfprintf_r+0xfd2>
 8007f3e:	eb08 0306 	add.w	r3, r8, r6
 8007f42:	2f46      	cmp	r7, #70	; 0x46
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	d111      	bne.n	8007f6c <_vfprintf_r+0xe64>
 8007f48:	f898 3000 	ldrb.w	r3, [r8]
 8007f4c:	2b30      	cmp	r3, #48	; 0x30
 8007f4e:	d109      	bne.n	8007f64 <_vfprintf_r+0xe5c>
 8007f50:	2200      	movs	r2, #0
 8007f52:	2300      	movs	r3, #0
 8007f54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007f58:	f7f8 fdb2 	bl	8000ac0 <__aeabi_dcmpeq>
 8007f5c:	b910      	cbnz	r0, 8007f64 <_vfprintf_r+0xe5c>
 8007f5e:	f1c6 0601 	rsb	r6, r6, #1
 8007f62:	9619      	str	r6, [sp, #100]	; 0x64
 8007f64:	9a04      	ldr	r2, [sp, #16]
 8007f66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f68:	441a      	add	r2, r3
 8007f6a:	9204      	str	r2, [sp, #16]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007f74:	f7f8 fda4 	bl	8000ac0 <__aeabi_dcmpeq>
 8007f78:	b908      	cbnz	r0, 8007f7e <_vfprintf_r+0xe76>
 8007f7a:	2230      	movs	r2, #48	; 0x30
 8007f7c:	e002      	b.n	8007f84 <_vfprintf_r+0xe7c>
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	931d      	str	r3, [sp, #116]	; 0x74
 8007f82:	e007      	b.n	8007f94 <_vfprintf_r+0xe8c>
 8007f84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f86:	9904      	ldr	r1, [sp, #16]
 8007f88:	4299      	cmp	r1, r3
 8007f8a:	d903      	bls.n	8007f94 <_vfprintf_r+0xe8c>
 8007f8c:	1c59      	adds	r1, r3, #1
 8007f8e:	911d      	str	r1, [sp, #116]	; 0x74
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	e7f7      	b.n	8007f84 <_vfprintf_r+0xe7c>
 8007f94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f96:	2f47      	cmp	r7, #71	; 0x47
 8007f98:	ebc8 0303 	rsb	r3, r8, r3
 8007f9c:	9304      	str	r3, [sp, #16]
 8007f9e:	d108      	bne.n	8007fb2 <_vfprintf_r+0xeaa>
 8007fa0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fa2:	1cdf      	adds	r7, r3, #3
 8007fa4:	db01      	blt.n	8007faa <_vfprintf_r+0xea2>
 8007fa6:	4599      	cmp	r9, r3
 8007fa8:	da69      	bge.n	800807e <_vfprintf_r+0xf76>
 8007faa:	9b02      	ldr	r3, [sp, #8]
 8007fac:	3b02      	subs	r3, #2
 8007fae:	9302      	str	r3, [sp, #8]
 8007fb0:	e002      	b.n	8007fb8 <_vfprintf_r+0xeb0>
 8007fb2:	9b02      	ldr	r3, [sp, #8]
 8007fb4:	2b65      	cmp	r3, #101	; 0x65
 8007fb6:	dc4b      	bgt.n	8008050 <_vfprintf_r+0xf48>
 8007fb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fba:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8007fbe:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	9319      	str	r3, [sp, #100]	; 0x64
 8007fc8:	bfba      	itte	lt
 8007fca:	425b      	neglt	r3, r3
 8007fcc:	222d      	movlt	r2, #45	; 0x2d
 8007fce:	222b      	movge	r2, #43	; 0x2b
 8007fd0:	2b09      	cmp	r3, #9
 8007fd2:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8007fd6:	dd25      	ble.n	8008024 <_vfprintf_r+0xf1c>
 8007fd8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8007fdc:	200a      	movs	r0, #10
 8007fde:	fb93 f1f0 	sdiv	r1, r3, r0
 8007fe2:	fb00 3311 	mls	r3, r0, r1, r3
 8007fe6:	3330      	adds	r3, #48	; 0x30
 8007fe8:	2909      	cmp	r1, #9
 8007fea:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8007fee:	460b      	mov	r3, r1
 8007ff0:	dcf5      	bgt.n	8007fde <_vfprintf_r+0xed6>
 8007ff2:	3330      	adds	r3, #48	; 0x30
 8007ff4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ff8:	1e51      	subs	r1, r2, #1
 8007ffa:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8007ffe:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8008002:	4281      	cmp	r1, r0
 8008004:	461a      	mov	r2, r3
 8008006:	d214      	bcs.n	8008032 <_vfprintf_r+0xf2a>
 8008008:	f811 2b01 	ldrb.w	r2, [r1], #1
 800800c:	f803 2b01 	strb.w	r2, [r3], #1
 8008010:	e7f7      	b.n	8008002 <_vfprintf_r+0xefa>
 8008012:	bf00      	nop
 8008014:	0800cd64 	.word	0x0800cd64
 8008018:	0800cd54 	.word	0x0800cd54
 800801c:	0800ccf8 	.word	0x0800ccf8
 8008020:	0800ccfc 	.word	0x0800ccfc
 8008024:	2230      	movs	r2, #48	; 0x30
 8008026:	4413      	add	r3, r2
 8008028:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800802c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008030:	aa1c      	add	r2, sp, #112	; 0x70
 8008032:	ab1b      	add	r3, sp, #108	; 0x6c
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	9a04      	ldr	r2, [sp, #16]
 8008038:	9310      	str	r3, [sp, #64]	; 0x40
 800803a:	2a01      	cmp	r2, #1
 800803c:	eb03 0902 	add.w	r9, r3, r2
 8008040:	dc02      	bgt.n	8008048 <_vfprintf_r+0xf40>
 8008042:	f015 0701 	ands.w	r7, r5, #1
 8008046:	d032      	beq.n	80080ae <_vfprintf_r+0xfa6>
 8008048:	9b08      	ldr	r3, [sp, #32]
 800804a:	2700      	movs	r7, #0
 800804c:	4499      	add	r9, r3
 800804e:	e02e      	b.n	80080ae <_vfprintf_r+0xfa6>
 8008050:	9b02      	ldr	r3, [sp, #8]
 8008052:	2b66      	cmp	r3, #102	; 0x66
 8008054:	d113      	bne.n	800807e <_vfprintf_r+0xf76>
 8008056:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008058:	2b00      	cmp	r3, #0
 800805a:	dd07      	ble.n	800806c <_vfprintf_r+0xf64>
 800805c:	f1b9 0f00 	cmp.w	r9, #0
 8008060:	d101      	bne.n	8008066 <_vfprintf_r+0xf5e>
 8008062:	07ee      	lsls	r6, r5, #31
 8008064:	d521      	bpl.n	80080aa <_vfprintf_r+0xfa2>
 8008066:	9a08      	ldr	r2, [sp, #32]
 8008068:	4413      	add	r3, r2
 800806a:	e006      	b.n	800807a <_vfprintf_r+0xf72>
 800806c:	f1b9 0f00 	cmp.w	r9, #0
 8008070:	d101      	bne.n	8008076 <_vfprintf_r+0xf6e>
 8008072:	07ed      	lsls	r5, r5, #31
 8008074:	d514      	bpl.n	80080a0 <_vfprintf_r+0xf98>
 8008076:	9b08      	ldr	r3, [sp, #32]
 8008078:	3301      	adds	r3, #1
 800807a:	444b      	add	r3, r9
 800807c:	e015      	b.n	80080aa <_vfprintf_r+0xfa2>
 800807e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008080:	9a04      	ldr	r2, [sp, #16]
 8008082:	4293      	cmp	r3, r2
 8008084:	db03      	blt.n	800808e <_vfprintf_r+0xf86>
 8008086:	07e8      	lsls	r0, r5, #31
 8008088:	d50d      	bpl.n	80080a6 <_vfprintf_r+0xf9e>
 800808a:	9a08      	ldr	r2, [sp, #32]
 800808c:	e006      	b.n	800809c <_vfprintf_r+0xf94>
 800808e:	9a04      	ldr	r2, [sp, #16]
 8008090:	9908      	ldr	r1, [sp, #32]
 8008092:	2b00      	cmp	r3, #0
 8008094:	440a      	add	r2, r1
 8008096:	dc05      	bgt.n	80080a4 <_vfprintf_r+0xf9c>
 8008098:	f1c3 0301 	rsb	r3, r3, #1
 800809c:	4413      	add	r3, r2
 800809e:	e002      	b.n	80080a6 <_vfprintf_r+0xf9e>
 80080a0:	2301      	movs	r3, #1
 80080a2:	e002      	b.n	80080aa <_vfprintf_r+0xfa2>
 80080a4:	4613      	mov	r3, r2
 80080a6:	2267      	movs	r2, #103	; 0x67
 80080a8:	9202      	str	r2, [sp, #8]
 80080aa:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80080ac:	4699      	mov	r9, r3
 80080ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080b0:	b113      	cbz	r3, 80080b8 <_vfprintf_r+0xfb0>
 80080b2:	232d      	movs	r3, #45	; 0x2d
 80080b4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80080b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080ba:	2600      	movs	r6, #0
 80080bc:	f7ff bb4e 	b.w	800775c <_vfprintf_r+0x654>
 80080c0:	2200      	movs	r2, #0
 80080c2:	2300      	movs	r3, #0
 80080c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080c8:	f7f8 fd04 	bl	8000ad4 <__aeabi_dcmplt>
 80080cc:	b110      	cbz	r0, 80080d4 <_vfprintf_r+0xfcc>
 80080ce:	232d      	movs	r3, #45	; 0x2d
 80080d0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80080d4:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <_vfprintf_r+0xfec>)
 80080d6:	4a08      	ldr	r2, [pc, #32]	; (80080f8 <_vfprintf_r+0xff0>)
 80080d8:	e6e2      	b.n	8007ea0 <_vfprintf_r+0xd98>
 80080da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080dc:	1a1b      	subs	r3, r3, r0
 80080de:	9304      	str	r3, [sp, #16]
 80080e0:	e75e      	b.n	8007fa0 <_vfprintf_r+0xe98>
 80080e2:	ea56 0207 	orrs.w	r2, r6, r7
 80080e6:	f47f aaac 	bne.w	8007642 <_vfprintf_r+0x53a>
 80080ea:	f7ff bab1 	b.w	8007650 <_vfprintf_r+0x548>
 80080ee:	b03d      	add	sp, #244	; 0xf4
 80080f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f4:	0800ccf0 	.word	0x0800ccf0
 80080f8:	0800ccf4 	.word	0x0800ccf4

080080fc <__sbprintf>:
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	460c      	mov	r4, r1
 8008100:	8989      	ldrh	r1, [r1, #12]
 8008102:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8008106:	f021 0102 	bic.w	r1, r1, #2
 800810a:	f8ad 100c 	strh.w	r1, [sp, #12]
 800810e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008110:	9119      	str	r1, [sp, #100]	; 0x64
 8008112:	89e1      	ldrh	r1, [r4, #14]
 8008114:	f8ad 100e 	strh.w	r1, [sp, #14]
 8008118:	6a21      	ldr	r1, [r4, #32]
 800811a:	9108      	str	r1, [sp, #32]
 800811c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800811e:	910a      	str	r1, [sp, #40]	; 0x28
 8008120:	a91a      	add	r1, sp, #104	; 0x68
 8008122:	9100      	str	r1, [sp, #0]
 8008124:	9104      	str	r1, [sp, #16]
 8008126:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800812a:	9102      	str	r1, [sp, #8]
 800812c:	9105      	str	r1, [sp, #20]
 800812e:	2100      	movs	r1, #0
 8008130:	9106      	str	r1, [sp, #24]
 8008132:	4669      	mov	r1, sp
 8008134:	4606      	mov	r6, r0
 8008136:	f7fe ffe7 	bl	8007108 <_vfprintf_r>
 800813a:	1e05      	subs	r5, r0, #0
 800813c:	db07      	blt.n	800814e <__sbprintf+0x52>
 800813e:	4669      	mov	r1, sp
 8008140:	4630      	mov	r0, r6
 8008142:	f000 ff81 	bl	8009048 <_fflush_r>
 8008146:	2800      	cmp	r0, #0
 8008148:	bf18      	it	ne
 800814a:	f04f 35ff 	movne.w	r5, #4294967295
 800814e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008152:	065b      	lsls	r3, r3, #25
 8008154:	bf48      	it	mi
 8008156:	89a3      	ldrhmi	r3, [r4, #12]
 8008158:	4628      	mov	r0, r5
 800815a:	bf44      	itt	mi
 800815c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8008160:	81a3      	strhmi	r3, [r4, #12]
 8008162:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8008166:	bd70      	pop	{r4, r5, r6, pc}

08008168 <_vsnprintf_r>:
 8008168:	b530      	push	{r4, r5, lr}
 800816a:	1e14      	subs	r4, r2, #0
 800816c:	4605      	mov	r5, r0
 800816e:	b09b      	sub	sp, #108	; 0x6c
 8008170:	4618      	mov	r0, r3
 8008172:	da04      	bge.n	800817e <_vsnprintf_r+0x16>
 8008174:	238b      	movs	r3, #139	; 0x8b
 8008176:	602b      	str	r3, [r5, #0]
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	e01d      	b.n	80081ba <_vsnprintf_r+0x52>
 800817e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008182:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008186:	bf14      	ite	ne
 8008188:	f104 33ff 	addne.w	r3, r4, #4294967295
 800818c:	4623      	moveq	r3, r4
 800818e:	9302      	str	r3, [sp, #8]
 8008190:	9305      	str	r3, [sp, #20]
 8008192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008196:	9100      	str	r1, [sp, #0]
 8008198:	9104      	str	r1, [sp, #16]
 800819a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800819e:	4602      	mov	r2, r0
 80081a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80081a2:	4669      	mov	r1, sp
 80081a4:	4628      	mov	r0, r5
 80081a6:	f7fd fb43 	bl	8005830 <_svfprintf_r>
 80081aa:	1c43      	adds	r3, r0, #1
 80081ac:	bfbc      	itt	lt
 80081ae:	238b      	movlt	r3, #139	; 0x8b
 80081b0:	602b      	strlt	r3, [r5, #0]
 80081b2:	b114      	cbz	r4, 80081ba <_vsnprintf_r+0x52>
 80081b4:	9b00      	ldr	r3, [sp, #0]
 80081b6:	2200      	movs	r2, #0
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	b01b      	add	sp, #108	; 0x6c
 80081bc:	bd30      	pop	{r4, r5, pc}
	...

080081c0 <vsnprintf>:
 80081c0:	b507      	push	{r0, r1, r2, lr}
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	4613      	mov	r3, r2
 80081c6:	460a      	mov	r2, r1
 80081c8:	4601      	mov	r1, r0
 80081ca:	4803      	ldr	r0, [pc, #12]	; (80081d8 <vsnprintf+0x18>)
 80081cc:	6800      	ldr	r0, [r0, #0]
 80081ce:	f7ff ffcb 	bl	8008168 <_vsnprintf_r>
 80081d2:	b003      	add	sp, #12
 80081d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80081d8:	20000120 	.word	0x20000120

080081dc <__swsetup_r>:
 80081dc:	4b32      	ldr	r3, [pc, #200]	; (80082a8 <__swsetup_r+0xcc>)
 80081de:	b570      	push	{r4, r5, r6, lr}
 80081e0:	681d      	ldr	r5, [r3, #0]
 80081e2:	4606      	mov	r6, r0
 80081e4:	460c      	mov	r4, r1
 80081e6:	b125      	cbz	r5, 80081f2 <__swsetup_r+0x16>
 80081e8:	69ab      	ldr	r3, [r5, #24]
 80081ea:	b913      	cbnz	r3, 80081f2 <__swsetup_r+0x16>
 80081ec:	4628      	mov	r0, r5
 80081ee:	f000 ff95 	bl	800911c <__sinit>
 80081f2:	4b2e      	ldr	r3, [pc, #184]	; (80082ac <__swsetup_r+0xd0>)
 80081f4:	429c      	cmp	r4, r3
 80081f6:	d101      	bne.n	80081fc <__swsetup_r+0x20>
 80081f8:	686c      	ldr	r4, [r5, #4]
 80081fa:	e008      	b.n	800820e <__swsetup_r+0x32>
 80081fc:	4b2c      	ldr	r3, [pc, #176]	; (80082b0 <__swsetup_r+0xd4>)
 80081fe:	429c      	cmp	r4, r3
 8008200:	d101      	bne.n	8008206 <__swsetup_r+0x2a>
 8008202:	68ac      	ldr	r4, [r5, #8]
 8008204:	e003      	b.n	800820e <__swsetup_r+0x32>
 8008206:	4b2b      	ldr	r3, [pc, #172]	; (80082b4 <__swsetup_r+0xd8>)
 8008208:	429c      	cmp	r4, r3
 800820a:	bf08      	it	eq
 800820c:	68ec      	ldreq	r4, [r5, #12]
 800820e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008212:	b29a      	uxth	r2, r3
 8008214:	0715      	lsls	r5, r2, #28
 8008216:	d41d      	bmi.n	8008254 <__swsetup_r+0x78>
 8008218:	06d0      	lsls	r0, r2, #27
 800821a:	d402      	bmi.n	8008222 <__swsetup_r+0x46>
 800821c:	2209      	movs	r2, #9
 800821e:	6032      	str	r2, [r6, #0]
 8008220:	e03a      	b.n	8008298 <__swsetup_r+0xbc>
 8008222:	0751      	lsls	r1, r2, #29
 8008224:	d512      	bpl.n	800824c <__swsetup_r+0x70>
 8008226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008228:	b141      	cbz	r1, 800823c <__swsetup_r+0x60>
 800822a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800822e:	4299      	cmp	r1, r3
 8008230:	d002      	beq.n	8008238 <__swsetup_r+0x5c>
 8008232:	4630      	mov	r0, r6
 8008234:	f001 f88a 	bl	800934c <_free_r>
 8008238:	2300      	movs	r3, #0
 800823a:	6363      	str	r3, [r4, #52]	; 0x34
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	2300      	movs	r3, #0
 8008246:	6063      	str	r3, [r4, #4]
 8008248:	6923      	ldr	r3, [r4, #16]
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f043 0308 	orr.w	r3, r3, #8
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	b94b      	cbnz	r3, 800826c <__swsetup_r+0x90>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800825e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008262:	d003      	beq.n	800826c <__swsetup_r+0x90>
 8008264:	4621      	mov	r1, r4
 8008266:	4630      	mov	r0, r6
 8008268:	f001 fe00 	bl	8009e6c <__smakebuf_r>
 800826c:	89a2      	ldrh	r2, [r4, #12]
 800826e:	f012 0301 	ands.w	r3, r2, #1
 8008272:	d005      	beq.n	8008280 <__swsetup_r+0xa4>
 8008274:	2300      	movs	r3, #0
 8008276:	60a3      	str	r3, [r4, #8]
 8008278:	6963      	ldr	r3, [r4, #20]
 800827a:	425b      	negs	r3, r3
 800827c:	61a3      	str	r3, [r4, #24]
 800827e:	e003      	b.n	8008288 <__swsetup_r+0xac>
 8008280:	0792      	lsls	r2, r2, #30
 8008282:	bf58      	it	pl
 8008284:	6963      	ldrpl	r3, [r4, #20]
 8008286:	60a3      	str	r3, [r4, #8]
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	b95b      	cbnz	r3, 80082a4 <__swsetup_r+0xc8>
 800828c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008290:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8008294:	b280      	uxth	r0, r0
 8008296:	b130      	cbz	r0, 80082a6 <__swsetup_r+0xca>
 8008298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800829c:	81a3      	strh	r3, [r4, #12]
 800829e:	f04f 30ff 	mov.w	r0, #4294967295
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	2000      	movs	r0, #0
 80082a6:	bd70      	pop	{r4, r5, r6, pc}
 80082a8:	20000120 	.word	0x20000120
 80082ac:	0800cd84 	.word	0x0800cd84
 80082b0:	0800cda4 	.word	0x0800cda4
 80082b4:	0800cdc4 	.word	0x0800cdc4

080082b8 <abort>:
 80082b8:	b508      	push	{r3, lr}
 80082ba:	2006      	movs	r0, #6
 80082bc:	f002 fbf0 	bl	800aaa0 <raise>
 80082c0:	2001      	movs	r0, #1
 80082c2:	f004 f9c3 	bl	800c64c <_exit>

080082c6 <quorem>:
 80082c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ca:	6903      	ldr	r3, [r0, #16]
 80082cc:	690c      	ldr	r4, [r1, #16]
 80082ce:	429c      	cmp	r4, r3
 80082d0:	4680      	mov	r8, r0
 80082d2:	f300 8083 	bgt.w	80083dc <quorem+0x116>
 80082d6:	3c01      	subs	r4, #1
 80082d8:	f101 0714 	add.w	r7, r1, #20
 80082dc:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80082e0:	f100 0614 	add.w	r6, r0, #20
 80082e4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80082e8:	eb06 030e 	add.w	r3, r6, lr
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	3501      	adds	r5, #1
 80082f0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80082f4:	fbb3 f5f5 	udiv	r5, r3, r5
 80082f8:	eb07 090e 	add.w	r9, r7, lr
 80082fc:	2d00      	cmp	r5, #0
 80082fe:	d039      	beq.n	8008374 <quorem+0xae>
 8008300:	f04f 0a00 	mov.w	sl, #0
 8008304:	4638      	mov	r0, r7
 8008306:	46b4      	mov	ip, r6
 8008308:	46d3      	mov	fp, sl
 800830a:	f850 2b04 	ldr.w	r2, [r0], #4
 800830e:	b293      	uxth	r3, r2
 8008310:	fb05 a303 	mla	r3, r5, r3, sl
 8008314:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008318:	b29b      	uxth	r3, r3
 800831a:	ebc3 030b 	rsb	r3, r3, fp
 800831e:	0c12      	lsrs	r2, r2, #16
 8008320:	f8bc b000 	ldrh.w	fp, [ip]
 8008324:	fb05 a202 	mla	r2, r5, r2, sl
 8008328:	fa13 f38b 	uxtah	r3, r3, fp
 800832c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008330:	fa1f fb82 	uxth.w	fp, r2
 8008334:	f8dc 2000 	ldr.w	r2, [ip]
 8008338:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800833c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008340:	b29b      	uxth	r3, r3
 8008342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008346:	4581      	cmp	r9, r0
 8008348:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800834c:	f84c 3b04 	str.w	r3, [ip], #4
 8008350:	d2db      	bcs.n	800830a <quorem+0x44>
 8008352:	f856 300e 	ldr.w	r3, [r6, lr]
 8008356:	b96b      	cbnz	r3, 8008374 <quorem+0xae>
 8008358:	9b01      	ldr	r3, [sp, #4]
 800835a:	3b04      	subs	r3, #4
 800835c:	429e      	cmp	r6, r3
 800835e:	461a      	mov	r2, r3
 8008360:	d302      	bcc.n	8008368 <quorem+0xa2>
 8008362:	f8c8 4010 	str.w	r4, [r8, #16]
 8008366:	e005      	b.n	8008374 <quorem+0xae>
 8008368:	6812      	ldr	r2, [r2, #0]
 800836a:	3b04      	subs	r3, #4
 800836c:	2a00      	cmp	r2, #0
 800836e:	d1f8      	bne.n	8008362 <quorem+0x9c>
 8008370:	3c01      	subs	r4, #1
 8008372:	e7f3      	b.n	800835c <quorem+0x96>
 8008374:	4640      	mov	r0, r8
 8008376:	f002 f81c 	bl	800a3b2 <__mcmp>
 800837a:	2800      	cmp	r0, #0
 800837c:	db2c      	blt.n	80083d8 <quorem+0x112>
 800837e:	3501      	adds	r5, #1
 8008380:	4630      	mov	r0, r6
 8008382:	f04f 0e00 	mov.w	lr, #0
 8008386:	f857 1b04 	ldr.w	r1, [r7], #4
 800838a:	f8d0 c000 	ldr.w	ip, [r0]
 800838e:	b28a      	uxth	r2, r1
 8008390:	ebc2 030e 	rsb	r3, r2, lr
 8008394:	0c09      	lsrs	r1, r1, #16
 8008396:	fa13 f38c 	uxtah	r3, r3, ip
 800839a:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800839e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083a8:	45b9      	cmp	r9, r7
 80083aa:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80083ae:	f840 3b04 	str.w	r3, [r0], #4
 80083b2:	d2e8      	bcs.n	8008386 <quorem+0xc0>
 80083b4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80083b8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80083bc:	b962      	cbnz	r2, 80083d8 <quorem+0x112>
 80083be:	3b04      	subs	r3, #4
 80083c0:	429e      	cmp	r6, r3
 80083c2:	461a      	mov	r2, r3
 80083c4:	d302      	bcc.n	80083cc <quorem+0x106>
 80083c6:	f8c8 4010 	str.w	r4, [r8, #16]
 80083ca:	e005      	b.n	80083d8 <quorem+0x112>
 80083cc:	6812      	ldr	r2, [r2, #0]
 80083ce:	3b04      	subs	r3, #4
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	d1f8      	bne.n	80083c6 <quorem+0x100>
 80083d4:	3c01      	subs	r4, #1
 80083d6:	e7f3      	b.n	80083c0 <quorem+0xfa>
 80083d8:	4628      	mov	r0, r5
 80083da:	e000      	b.n	80083de <quorem+0x118>
 80083dc:	2000      	movs	r0, #0
 80083de:	b003      	add	sp, #12
 80083e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e4:	0000      	movs	r0, r0
	...

080083e8 <_dtoa_r>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	ec59 8b10 	vmov	r8, r9, d0
 80083f0:	b097      	sub	sp, #92	; 0x5c
 80083f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083f4:	9106      	str	r1, [sp, #24]
 80083f6:	4682      	mov	sl, r0
 80083f8:	9209      	str	r2, [sp, #36]	; 0x24
 80083fa:	9310      	str	r3, [sp, #64]	; 0x40
 80083fc:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80083fe:	e9cd 8900 	strd	r8, r9, [sp]
 8008402:	b945      	cbnz	r5, 8008416 <_dtoa_r+0x2e>
 8008404:	2010      	movs	r0, #16
 8008406:	f7fc f8e3 	bl	80045d0 <malloc>
 800840a:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800840e:	6045      	str	r5, [r0, #4]
 8008410:	6085      	str	r5, [r0, #8]
 8008412:	6005      	str	r5, [r0, #0]
 8008414:	60c5      	str	r5, [r0, #12]
 8008416:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800841a:	6819      	ldr	r1, [r3, #0]
 800841c:	b159      	cbz	r1, 8008436 <_dtoa_r+0x4e>
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	604a      	str	r2, [r1, #4]
 8008422:	2301      	movs	r3, #1
 8008424:	4093      	lsls	r3, r2
 8008426:	608b      	str	r3, [r1, #8]
 8008428:	4650      	mov	r0, sl
 800842a:	f001 fdab 	bl	8009f84 <_Bfree>
 800842e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	9b01      	ldr	r3, [sp, #4]
 8008438:	4a9f      	ldr	r2, [pc, #636]	; (80086b8 <_dtoa_r+0x2d0>)
 800843a:	2b00      	cmp	r3, #0
 800843c:	bfbf      	itttt	lt
 800843e:	2301      	movlt	r3, #1
 8008440:	6023      	strlt	r3, [r4, #0]
 8008442:	9b01      	ldrlt	r3, [sp, #4]
 8008444:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008448:	bfb8      	it	lt
 800844a:	9301      	strlt	r3, [sp, #4]
 800844c:	9f01      	ldr	r7, [sp, #4]
 800844e:	bfa4      	itt	ge
 8008450:	2300      	movge	r3, #0
 8008452:	6023      	strge	r3, [r4, #0]
 8008454:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8008458:	0d1b      	lsrs	r3, r3, #20
 800845a:	051b      	lsls	r3, r3, #20
 800845c:	4293      	cmp	r3, r2
 800845e:	d11d      	bne.n	800849c <_dtoa_r+0xb4>
 8008460:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008462:	f242 730f 	movw	r3, #9999	; 0x270f
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	9b00      	ldr	r3, [sp, #0]
 800846a:	b943      	cbnz	r3, 800847e <_dtoa_r+0x96>
 800846c:	4a93      	ldr	r2, [pc, #588]	; (80086bc <_dtoa_r+0x2d4>)
 800846e:	4b94      	ldr	r3, [pc, #592]	; (80086c0 <_dtoa_r+0x2d8>)
 8008470:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8008474:	2800      	cmp	r0, #0
 8008476:	bf14      	ite	ne
 8008478:	4618      	movne	r0, r3
 800847a:	4610      	moveq	r0, r2
 800847c:	e000      	b.n	8008480 <_dtoa_r+0x98>
 800847e:	4890      	ldr	r0, [pc, #576]	; (80086c0 <_dtoa_r+0x2d8>)
 8008480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 854a 	beq.w	8008f1c <_dtoa_r+0xb34>
 8008488:	78c3      	ldrb	r3, [r0, #3]
 800848a:	b113      	cbz	r3, 8008492 <_dtoa_r+0xaa>
 800848c:	f100 0308 	add.w	r3, r0, #8
 8008490:	e000      	b.n	8008494 <_dtoa_r+0xac>
 8008492:	1cc3      	adds	r3, r0, #3
 8008494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	f000 bd40 	b.w	8008f1c <_dtoa_r+0xb34>
 800849c:	e9dd 4500 	ldrd	r4, r5, [sp]
 80084a0:	2200      	movs	r2, #0
 80084a2:	2300      	movs	r3, #0
 80084a4:	4620      	mov	r0, r4
 80084a6:	4629      	mov	r1, r5
 80084a8:	f7f8 fb0a 	bl	8000ac0 <__aeabi_dcmpeq>
 80084ac:	4680      	mov	r8, r0
 80084ae:	b158      	cbz	r0, 80084c8 <_dtoa_r+0xe0>
 80084b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084b2:	2301      	movs	r3, #1
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 8522 	beq.w	8008f02 <_dtoa_r+0xb1a>
 80084be:	4881      	ldr	r0, [pc, #516]	; (80086c4 <_dtoa_r+0x2dc>)
 80084c0:	6018      	str	r0, [r3, #0]
 80084c2:	3801      	subs	r0, #1
 80084c4:	f000 bd2a 	b.w	8008f1c <_dtoa_r+0xb34>
 80084c8:	aa14      	add	r2, sp, #80	; 0x50
 80084ca:	a915      	add	r1, sp, #84	; 0x54
 80084cc:	ec45 4b10 	vmov	d0, r4, r5
 80084d0:	4650      	mov	r0, sl
 80084d2:	f002 f85e 	bl	800a592 <__d2b>
 80084d6:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80084da:	9002      	str	r0, [sp, #8]
 80084dc:	b15e      	cbz	r6, 80084f6 <_dtoa_r+0x10e>
 80084de:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80084e2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80084e6:	4620      	mov	r0, r4
 80084e8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80084ec:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80084f0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80084f4:	e01d      	b.n	8008532 <_dtoa_r+0x14a>
 80084f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084f8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80084fa:	441e      	add	r6, r3
 80084fc:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8008500:	2b20      	cmp	r3, #32
 8008502:	dd0a      	ble.n	800851a <_dtoa_r+0x132>
 8008504:	9a00      	ldr	r2, [sp, #0]
 8008506:	f206 4012 	addw	r0, r6, #1042	; 0x412
 800850a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800850e:	fa22 f000 	lsr.w	r0, r2, r0
 8008512:	fa07 f303 	lsl.w	r3, r7, r3
 8008516:	4318      	orrs	r0, r3
 8008518:	e004      	b.n	8008524 <_dtoa_r+0x13c>
 800851a:	f1c3 0020 	rsb	r0, r3, #32
 800851e:	9b00      	ldr	r3, [sp, #0]
 8008520:	fa03 f000 	lsl.w	r0, r3, r0
 8008524:	f7f7 ffee 	bl	8000504 <__aeabi_ui2d>
 8008528:	2301      	movs	r3, #1
 800852a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800852e:	3e01      	subs	r6, #1
 8008530:	9311      	str	r3, [sp, #68]	; 0x44
 8008532:	2200      	movs	r2, #0
 8008534:	4b64      	ldr	r3, [pc, #400]	; (80086c8 <_dtoa_r+0x2e0>)
 8008536:	f7f7 fea7 	bl	8000288 <__aeabi_dsub>
 800853a:	a359      	add	r3, pc, #356	; (adr r3, 80086a0 <_dtoa_r+0x2b8>)
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f7f8 f856 	bl	80005f0 <__aeabi_dmul>
 8008544:	a358      	add	r3, pc, #352	; (adr r3, 80086a8 <_dtoa_r+0x2c0>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	f7f7 fe9f 	bl	800028c <__adddf3>
 800854e:	4604      	mov	r4, r0
 8008550:	4630      	mov	r0, r6
 8008552:	460d      	mov	r5, r1
 8008554:	f7f7 ffe6 	bl	8000524 <__aeabi_i2d>
 8008558:	a355      	add	r3, pc, #340	; (adr r3, 80086b0 <_dtoa_r+0x2c8>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	f7f8 f847 	bl	80005f0 <__aeabi_dmul>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4620      	mov	r0, r4
 8008568:	4629      	mov	r1, r5
 800856a:	f7f7 fe8f 	bl	800028c <__adddf3>
 800856e:	4604      	mov	r4, r0
 8008570:	460d      	mov	r5, r1
 8008572:	f7f8 faed 	bl	8000b50 <__aeabi_d2iz>
 8008576:	2200      	movs	r2, #0
 8008578:	4683      	mov	fp, r0
 800857a:	2300      	movs	r3, #0
 800857c:	4620      	mov	r0, r4
 800857e:	4629      	mov	r1, r5
 8008580:	f7f8 faa8 	bl	8000ad4 <__aeabi_dcmplt>
 8008584:	b158      	cbz	r0, 800859e <_dtoa_r+0x1b6>
 8008586:	4658      	mov	r0, fp
 8008588:	f7f7 ffcc 	bl	8000524 <__aeabi_i2d>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4620      	mov	r0, r4
 8008592:	4629      	mov	r1, r5
 8008594:	f7f8 fa94 	bl	8000ac0 <__aeabi_dcmpeq>
 8008598:	b908      	cbnz	r0, 800859e <_dtoa_r+0x1b6>
 800859a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800859e:	f1bb 0f16 	cmp.w	fp, #22
 80085a2:	d80d      	bhi.n	80085c0 <_dtoa_r+0x1d8>
 80085a4:	4949      	ldr	r1, [pc, #292]	; (80086cc <_dtoa_r+0x2e4>)
 80085a6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80085aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085b2:	f7f8 faad 	bl	8000b10 <__aeabi_dcmpgt>
 80085b6:	b130      	cbz	r0, 80085c6 <_dtoa_r+0x1de>
 80085b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085bc:	2300      	movs	r3, #0
 80085be:	e000      	b.n	80085c2 <_dtoa_r+0x1da>
 80085c0:	2301      	movs	r3, #1
 80085c2:	930d      	str	r3, [sp, #52]	; 0x34
 80085c4:	e000      	b.n	80085c8 <_dtoa_r+0x1e0>
 80085c6:	900d      	str	r0, [sp, #52]	; 0x34
 80085c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085ca:	1b9e      	subs	r6, r3, r6
 80085cc:	1e73      	subs	r3, r6, #1
 80085ce:	9305      	str	r3, [sp, #20]
 80085d0:	bf43      	ittte	mi
 80085d2:	f1c3 0900 	rsbmi	r9, r3, #0
 80085d6:	2300      	movmi	r3, #0
 80085d8:	9305      	strmi	r3, [sp, #20]
 80085da:	f04f 0900 	movpl.w	r9, #0
 80085de:	f1bb 0f00 	cmp.w	fp, #0
 80085e2:	db07      	blt.n	80085f4 <_dtoa_r+0x20c>
 80085e4:	9b05      	ldr	r3, [sp, #20]
 80085e6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80085ea:	445b      	add	r3, fp
 80085ec:	9305      	str	r3, [sp, #20]
 80085ee:	2300      	movs	r3, #0
 80085f0:	9307      	str	r3, [sp, #28]
 80085f2:	e006      	b.n	8008602 <_dtoa_r+0x21a>
 80085f4:	f1cb 0300 	rsb	r3, fp, #0
 80085f8:	9307      	str	r3, [sp, #28]
 80085fa:	2300      	movs	r3, #0
 80085fc:	ebcb 0909 	rsb	r9, fp, r9
 8008600:	930c      	str	r3, [sp, #48]	; 0x30
 8008602:	9b06      	ldr	r3, [sp, #24]
 8008604:	2b09      	cmp	r3, #9
 8008606:	d827      	bhi.n	8008658 <_dtoa_r+0x270>
 8008608:	2b05      	cmp	r3, #5
 800860a:	bfc4      	itt	gt
 800860c:	3b04      	subgt	r3, #4
 800860e:	9306      	strgt	r3, [sp, #24]
 8008610:	9b06      	ldr	r3, [sp, #24]
 8008612:	f1a3 0302 	sub.w	r3, r3, #2
 8008616:	bfcc      	ite	gt
 8008618:	2500      	movgt	r5, #0
 800861a:	2501      	movle	r5, #1
 800861c:	2b03      	cmp	r3, #3
 800861e:	d820      	bhi.n	8008662 <_dtoa_r+0x27a>
 8008620:	e8df f003 	tbb	[pc, r3]
 8008624:	04020e06 	.word	0x04020e06
 8008628:	2301      	movs	r3, #1
 800862a:	e002      	b.n	8008632 <_dtoa_r+0x24a>
 800862c:	2301      	movs	r3, #1
 800862e:	e008      	b.n	8008642 <_dtoa_r+0x25a>
 8008630:	2300      	movs	r3, #0
 8008632:	9308      	str	r3, [sp, #32]
 8008634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008636:	2b00      	cmp	r3, #0
 8008638:	dd1c      	ble.n	8008674 <_dtoa_r+0x28c>
 800863a:	9303      	str	r3, [sp, #12]
 800863c:	4698      	mov	r8, r3
 800863e:	e01e      	b.n	800867e <_dtoa_r+0x296>
 8008640:	2300      	movs	r3, #0
 8008642:	9308      	str	r3, [sp, #32]
 8008644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008646:	445b      	add	r3, fp
 8008648:	f103 0801 	add.w	r8, r3, #1
 800864c:	9303      	str	r3, [sp, #12]
 800864e:	4643      	mov	r3, r8
 8008650:	2b01      	cmp	r3, #1
 8008652:	bfb8      	it	lt
 8008654:	2301      	movlt	r3, #1
 8008656:	e012      	b.n	800867e <_dtoa_r+0x296>
 8008658:	2501      	movs	r5, #1
 800865a:	2300      	movs	r3, #0
 800865c:	9306      	str	r3, [sp, #24]
 800865e:	9508      	str	r5, [sp, #32]
 8008660:	e001      	b.n	8008666 <_dtoa_r+0x27e>
 8008662:	2301      	movs	r3, #1
 8008664:	9308      	str	r3, [sp, #32]
 8008666:	f04f 33ff 	mov.w	r3, #4294967295
 800866a:	9303      	str	r3, [sp, #12]
 800866c:	4698      	mov	r8, r3
 800866e:	2200      	movs	r2, #0
 8008670:	2312      	movs	r3, #18
 8008672:	e003      	b.n	800867c <_dtoa_r+0x294>
 8008674:	2301      	movs	r3, #1
 8008676:	9303      	str	r3, [sp, #12]
 8008678:	4698      	mov	r8, r3
 800867a:	461a      	mov	r2, r3
 800867c:	9209      	str	r2, [sp, #36]	; 0x24
 800867e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8008682:	2200      	movs	r2, #0
 8008684:	6062      	str	r2, [r4, #4]
 8008686:	2104      	movs	r1, #4
 8008688:	f101 0214 	add.w	r2, r1, #20
 800868c:	429a      	cmp	r2, r3
 800868e:	d81f      	bhi.n	80086d0 <_dtoa_r+0x2e8>
 8008690:	6862      	ldr	r2, [r4, #4]
 8008692:	3201      	adds	r2, #1
 8008694:	6062      	str	r2, [r4, #4]
 8008696:	0049      	lsls	r1, r1, #1
 8008698:	e7f6      	b.n	8008688 <_dtoa_r+0x2a0>
 800869a:	bf00      	nop
 800869c:	f3af 8000 	nop.w
 80086a0:	636f4361 	.word	0x636f4361
 80086a4:	3fd287a7 	.word	0x3fd287a7
 80086a8:	8b60c8b3 	.word	0x8b60c8b3
 80086ac:	3fc68a28 	.word	0x3fc68a28
 80086b0:	509f79fb 	.word	0x509f79fb
 80086b4:	3fd34413 	.word	0x3fd34413
 80086b8:	7ff00000 	.word	0x7ff00000
 80086bc:	0800cd74 	.word	0x0800cd74
 80086c0:	0800cd7d 	.word	0x0800cd7d
 80086c4:	0800cd23 	.word	0x0800cd23
 80086c8:	3ff80000 	.word	0x3ff80000
 80086cc:	0800cdf0 	.word	0x0800cdf0
 80086d0:	6861      	ldr	r1, [r4, #4]
 80086d2:	4650      	mov	r0, sl
 80086d4:	f001 fc21 	bl	8009f1a <_Balloc>
 80086d8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80086dc:	6020      	str	r0, [r4, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	f1b8 0f0e 	cmp.w	r8, #14
 80086e6:	f200 815d 	bhi.w	80089a4 <_dtoa_r+0x5bc>
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	f000 815a 	beq.w	80089a4 <_dtoa_r+0x5bc>
 80086f0:	ed9d 7b00 	vldr	d7, [sp]
 80086f4:	f1bb 0f00 	cmp.w	fp, #0
 80086f8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80086fc:	dd31      	ble.n	8008762 <_dtoa_r+0x37a>
 80086fe:	4aa0      	ldr	r2, [pc, #640]	; (8008980 <_dtoa_r+0x598>)
 8008700:	f00b 030f 	and.w	r3, fp, #15
 8008704:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008708:	ed93 7b00 	vldr	d7, [r3]
 800870c:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008710:	06e2      	lsls	r2, r4, #27
 8008712:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008716:	d50c      	bpl.n	8008732 <_dtoa_r+0x34a>
 8008718:	4b9a      	ldr	r3, [pc, #616]	; (8008984 <_dtoa_r+0x59c>)
 800871a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800871e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008722:	f7f8 f88f 	bl	8000844 <__aeabi_ddiv>
 8008726:	f004 040f 	and.w	r4, r4, #15
 800872a:	e9cd 0100 	strd	r0, r1, [sp]
 800872e:	2603      	movs	r6, #3
 8008730:	e000      	b.n	8008734 <_dtoa_r+0x34c>
 8008732:	2602      	movs	r6, #2
 8008734:	4d93      	ldr	r5, [pc, #588]	; (8008984 <_dtoa_r+0x59c>)
 8008736:	b16c      	cbz	r4, 8008754 <_dtoa_r+0x36c>
 8008738:	07e3      	lsls	r3, r4, #31
 800873a:	d508      	bpl.n	800874e <_dtoa_r+0x366>
 800873c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008740:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008744:	f7f7 ff54 	bl	80005f0 <__aeabi_dmul>
 8008748:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800874c:	3601      	adds	r6, #1
 800874e:	1064      	asrs	r4, r4, #1
 8008750:	3508      	adds	r5, #8
 8008752:	e7f0      	b.n	8008736 <_dtoa_r+0x34e>
 8008754:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800875c:	f7f8 f872 	bl	8000844 <__aeabi_ddiv>
 8008760:	e020      	b.n	80087a4 <_dtoa_r+0x3bc>
 8008762:	f1cb 0400 	rsb	r4, fp, #0
 8008766:	b304      	cbz	r4, 80087aa <_dtoa_r+0x3c2>
 8008768:	4b85      	ldr	r3, [pc, #532]	; (8008980 <_dtoa_r+0x598>)
 800876a:	4d86      	ldr	r5, [pc, #536]	; (8008984 <_dtoa_r+0x59c>)
 800876c:	f004 020f 	and.w	r2, r4, #15
 8008770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008778:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800877c:	f7f7 ff38 	bl	80005f0 <__aeabi_dmul>
 8008780:	e9cd 0100 	strd	r0, r1, [sp]
 8008784:	1124      	asrs	r4, r4, #4
 8008786:	2300      	movs	r3, #0
 8008788:	2602      	movs	r6, #2
 800878a:	b154      	cbz	r4, 80087a2 <_dtoa_r+0x3ba>
 800878c:	07e7      	lsls	r7, r4, #31
 800878e:	d505      	bpl.n	800879c <_dtoa_r+0x3b4>
 8008790:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008794:	f7f7 ff2c 	bl	80005f0 <__aeabi_dmul>
 8008798:	3601      	adds	r6, #1
 800879a:	2301      	movs	r3, #1
 800879c:	1064      	asrs	r4, r4, #1
 800879e:	3508      	adds	r5, #8
 80087a0:	e7f3      	b.n	800878a <_dtoa_r+0x3a2>
 80087a2:	b11b      	cbz	r3, 80087ac <_dtoa_r+0x3c4>
 80087a4:	e9cd 0100 	strd	r0, r1, [sp]
 80087a8:	e000      	b.n	80087ac <_dtoa_r+0x3c4>
 80087aa:	2602      	movs	r6, #2
 80087ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ae:	b1eb      	cbz	r3, 80087ec <_dtoa_r+0x404>
 80087b0:	e9dd 4500 	ldrd	r4, r5, [sp]
 80087b4:	2200      	movs	r2, #0
 80087b6:	4b74      	ldr	r3, [pc, #464]	; (8008988 <_dtoa_r+0x5a0>)
 80087b8:	4620      	mov	r0, r4
 80087ba:	4629      	mov	r1, r5
 80087bc:	f7f8 f98a 	bl	8000ad4 <__aeabi_dcmplt>
 80087c0:	b1a0      	cbz	r0, 80087ec <_dtoa_r+0x404>
 80087c2:	f1b8 0f00 	cmp.w	r8, #0
 80087c6:	d011      	beq.n	80087ec <_dtoa_r+0x404>
 80087c8:	9b03      	ldr	r3, [sp, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f340 80e6 	ble.w	800899c <_dtoa_r+0x5b4>
 80087d0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80087d4:	930a      	str	r3, [sp, #40]	; 0x28
 80087d6:	2200      	movs	r2, #0
 80087d8:	4b6c      	ldr	r3, [pc, #432]	; (800898c <_dtoa_r+0x5a4>)
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7f7 ff07 	bl	80005f0 <__aeabi_dmul>
 80087e2:	3601      	adds	r6, #1
 80087e4:	e9cd 0100 	strd	r0, r1, [sp]
 80087e8:	9f03      	ldr	r7, [sp, #12]
 80087ea:	e002      	b.n	80087f2 <_dtoa_r+0x40a>
 80087ec:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80087f0:	4647      	mov	r7, r8
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7f7 fe96 	bl	8000524 <__aeabi_i2d>
 80087f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087fc:	f7f7 fef8 	bl	80005f0 <__aeabi_dmul>
 8008800:	2200      	movs	r2, #0
 8008802:	4b63      	ldr	r3, [pc, #396]	; (8008990 <_dtoa_r+0x5a8>)
 8008804:	f7f7 fd42 	bl	800028c <__adddf3>
 8008808:	4604      	mov	r4, r0
 800880a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800880e:	b9cf      	cbnz	r7, 8008844 <_dtoa_r+0x45c>
 8008810:	2200      	movs	r2, #0
 8008812:	4b60      	ldr	r3, [pc, #384]	; (8008994 <_dtoa_r+0x5ac>)
 8008814:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008818:	f7f7 fd36 	bl	8000288 <__aeabi_dsub>
 800881c:	4622      	mov	r2, r4
 800881e:	462b      	mov	r3, r5
 8008820:	e9cd 0100 	strd	r0, r1, [sp]
 8008824:	f7f8 f974 	bl	8000b10 <__aeabi_dcmpgt>
 8008828:	2800      	cmp	r0, #0
 800882a:	f040 8241 	bne.w	8008cb0 <_dtoa_r+0x8c8>
 800882e:	4622      	mov	r2, r4
 8008830:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008834:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008838:	f7f8 f94c 	bl	8000ad4 <__aeabi_dcmplt>
 800883c:	2800      	cmp	r0, #0
 800883e:	f040 822e 	bne.w	8008c9e <_dtoa_r+0x8b6>
 8008842:	e0ab      	b.n	800899c <_dtoa_r+0x5b4>
 8008844:	9a08      	ldr	r2, [sp, #32]
 8008846:	4b4e      	ldr	r3, [pc, #312]	; (8008980 <_dtoa_r+0x598>)
 8008848:	1e79      	subs	r1, r7, #1
 800884a:	2a00      	cmp	r2, #0
 800884c:	d04a      	beq.n	80088e4 <_dtoa_r+0x4fc>
 800884e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	2000      	movs	r0, #0
 8008858:	494f      	ldr	r1, [pc, #316]	; (8008998 <_dtoa_r+0x5b0>)
 800885a:	f7f7 fff3 	bl	8000844 <__aeabi_ddiv>
 800885e:	4622      	mov	r2, r4
 8008860:	462b      	mov	r3, r5
 8008862:	f7f7 fd11 	bl	8000288 <__aeabi_dsub>
 8008866:	9c04      	ldr	r4, [sp, #16]
 8008868:	4605      	mov	r5, r0
 800886a:	460e      	mov	r6, r1
 800886c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008870:	f7f8 f96e 	bl	8000b50 <__aeabi_d2iz>
 8008874:	9012      	str	r0, [sp, #72]	; 0x48
 8008876:	f7f7 fe55 	bl	8000524 <__aeabi_i2d>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008882:	f7f7 fd01 	bl	8000288 <__aeabi_dsub>
 8008886:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008888:	3330      	adds	r3, #48	; 0x30
 800888a:	f804 3b01 	strb.w	r3, [r4], #1
 800888e:	462a      	mov	r2, r5
 8008890:	4633      	mov	r3, r6
 8008892:	e9cd 0100 	strd	r0, r1, [sp]
 8008896:	f7f8 f91d 	bl	8000ad4 <__aeabi_dcmplt>
 800889a:	2800      	cmp	r0, #0
 800889c:	f040 8321 	bne.w	8008ee2 <_dtoa_r+0xafa>
 80088a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088a4:	2000      	movs	r0, #0
 80088a6:	4938      	ldr	r1, [pc, #224]	; (8008988 <_dtoa_r+0x5a0>)
 80088a8:	f7f7 fcee 	bl	8000288 <__aeabi_dsub>
 80088ac:	462a      	mov	r2, r5
 80088ae:	4633      	mov	r3, r6
 80088b0:	f7f8 f910 	bl	8000ad4 <__aeabi_dcmplt>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	f040 80d2 	bne.w	8008a5e <_dtoa_r+0x676>
 80088ba:	9b04      	ldr	r3, [sp, #16]
 80088bc:	1ae3      	subs	r3, r4, r3
 80088be:	42bb      	cmp	r3, r7
 80088c0:	da6c      	bge.n	800899c <_dtoa_r+0x5b4>
 80088c2:	2200      	movs	r2, #0
 80088c4:	4b31      	ldr	r3, [pc, #196]	; (800898c <_dtoa_r+0x5a4>)
 80088c6:	4628      	mov	r0, r5
 80088c8:	4631      	mov	r1, r6
 80088ca:	f7f7 fe91 	bl	80005f0 <__aeabi_dmul>
 80088ce:	2200      	movs	r2, #0
 80088d0:	4605      	mov	r5, r0
 80088d2:	460e      	mov	r6, r1
 80088d4:	4b2d      	ldr	r3, [pc, #180]	; (800898c <_dtoa_r+0x5a4>)
 80088d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088da:	f7f7 fe89 	bl	80005f0 <__aeabi_dmul>
 80088de:	e9cd 0100 	strd	r0, r1, [sp]
 80088e2:	e7c3      	b.n	800886c <_dtoa_r+0x484>
 80088e4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80088e8:	4622      	mov	r2, r4
 80088ea:	462b      	mov	r3, r5
 80088ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f0:	f7f7 fe7e 	bl	80005f0 <__aeabi_dmul>
 80088f4:	9b04      	ldr	r3, [sp, #16]
 80088f6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80088fa:	19dc      	adds	r4, r3, r7
 80088fc:	461d      	mov	r5, r3
 80088fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008902:	f7f8 f925 	bl	8000b50 <__aeabi_d2iz>
 8008906:	4606      	mov	r6, r0
 8008908:	f7f7 fe0c 	bl	8000524 <__aeabi_i2d>
 800890c:	3630      	adds	r6, #48	; 0x30
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008916:	f7f7 fcb7 	bl	8000288 <__aeabi_dsub>
 800891a:	f805 6b01 	strb.w	r6, [r5], #1
 800891e:	42ac      	cmp	r4, r5
 8008920:	e9cd 0100 	strd	r0, r1, [sp]
 8008924:	f04f 0200 	mov.w	r2, #0
 8008928:	d123      	bne.n	8008972 <_dtoa_r+0x58a>
 800892a:	4b1b      	ldr	r3, [pc, #108]	; (8008998 <_dtoa_r+0x5b0>)
 800892c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008930:	f7f7 fcac 	bl	800028c <__adddf3>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800893c:	f7f8 f8e8 	bl	8000b10 <__aeabi_dcmpgt>
 8008940:	2800      	cmp	r0, #0
 8008942:	f040 808c 	bne.w	8008a5e <_dtoa_r+0x676>
 8008946:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800894a:	2000      	movs	r0, #0
 800894c:	4912      	ldr	r1, [pc, #72]	; (8008998 <_dtoa_r+0x5b0>)
 800894e:	f7f7 fc9b 	bl	8000288 <__aeabi_dsub>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	e9dd 0100 	ldrd	r0, r1, [sp]
 800895a:	f7f8 f8bb 	bl	8000ad4 <__aeabi_dcmplt>
 800895e:	b1e8      	cbz	r0, 800899c <_dtoa_r+0x5b4>
 8008960:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008964:	2b30      	cmp	r3, #48	; 0x30
 8008966:	f104 32ff 	add.w	r2, r4, #4294967295
 800896a:	f040 82ba 	bne.w	8008ee2 <_dtoa_r+0xafa>
 800896e:	4614      	mov	r4, r2
 8008970:	e7f6      	b.n	8008960 <_dtoa_r+0x578>
 8008972:	4b06      	ldr	r3, [pc, #24]	; (800898c <_dtoa_r+0x5a4>)
 8008974:	f7f7 fe3c 	bl	80005f0 <__aeabi_dmul>
 8008978:	e9cd 0100 	strd	r0, r1, [sp]
 800897c:	e7bf      	b.n	80088fe <_dtoa_r+0x516>
 800897e:	bf00      	nop
 8008980:	0800cdf0 	.word	0x0800cdf0
 8008984:	0800ceb8 	.word	0x0800ceb8
 8008988:	3ff00000 	.word	0x3ff00000
 800898c:	40240000 	.word	0x40240000
 8008990:	401c0000 	.word	0x401c0000
 8008994:	40140000 	.word	0x40140000
 8008998:	3fe00000 	.word	0x3fe00000
 800899c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 80089a0:	e88d 0018 	stmia.w	sp, {r3, r4}
 80089a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	db7c      	blt.n	8008aa4 <_dtoa_r+0x6bc>
 80089aa:	f1bb 0f0e 	cmp.w	fp, #14
 80089ae:	dc79      	bgt.n	8008aa4 <_dtoa_r+0x6bc>
 80089b0:	4b8f      	ldr	r3, [pc, #572]	; (8008bf0 <_dtoa_r+0x808>)
 80089b2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80089b6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80089ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089bc:	2b00      	cmp	r3, #0
 80089be:	da14      	bge.n	80089ea <_dtoa_r+0x602>
 80089c0:	f1b8 0f00 	cmp.w	r8, #0
 80089c4:	dc11      	bgt.n	80089ea <_dtoa_r+0x602>
 80089c6:	f040 816c 	bne.w	8008ca2 <_dtoa_r+0x8ba>
 80089ca:	2200      	movs	r2, #0
 80089cc:	4b89      	ldr	r3, [pc, #548]	; (8008bf4 <_dtoa_r+0x80c>)
 80089ce:	4630      	mov	r0, r6
 80089d0:	4639      	mov	r1, r7
 80089d2:	f7f7 fe0d 	bl	80005f0 <__aeabi_dmul>
 80089d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089da:	f7f8 f88f 	bl	8000afc <__aeabi_dcmpge>
 80089de:	4645      	mov	r5, r8
 80089e0:	4646      	mov	r6, r8
 80089e2:	2800      	cmp	r0, #0
 80089e4:	f040 815f 	bne.w	8008ca6 <_dtoa_r+0x8be>
 80089e8:	e166      	b.n	8008cb8 <_dtoa_r+0x8d0>
 80089ea:	9c04      	ldr	r4, [sp, #16]
 80089ec:	4632      	mov	r2, r6
 80089ee:	463b      	mov	r3, r7
 80089f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089f4:	f7f7 ff26 	bl	8000844 <__aeabi_ddiv>
 80089f8:	f7f8 f8aa 	bl	8000b50 <__aeabi_d2iz>
 80089fc:	4605      	mov	r5, r0
 80089fe:	f7f7 fd91 	bl	8000524 <__aeabi_i2d>
 8008a02:	4632      	mov	r2, r6
 8008a04:	463b      	mov	r3, r7
 8008a06:	f7f7 fdf3 	bl	80005f0 <__aeabi_dmul>
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a12:	f7f7 fc39 	bl	8000288 <__aeabi_dsub>
 8008a16:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8008a1a:	f804 eb01 	strb.w	lr, [r4], #1
 8008a1e:	9b04      	ldr	r3, [sp, #16]
 8008a20:	ebc3 0e04 	rsb	lr, r3, r4
 8008a24:	45f0      	cmp	r8, lr
 8008a26:	e9cd 0100 	strd	r0, r1, [sp]
 8008a2a:	d12e      	bne.n	8008a8a <_dtoa_r+0x6a2>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	f7f7 fc2c 	bl	800028c <__adddf3>
 8008a34:	4680      	mov	r8, r0
 8008a36:	4689      	mov	r9, r1
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	4639      	mov	r1, r7
 8008a40:	f7f8 f848 	bl	8000ad4 <__aeabi_dcmplt>
 8008a44:	b978      	cbnz	r0, 8008a66 <_dtoa_r+0x67e>
 8008a46:	4642      	mov	r2, r8
 8008a48:	464b      	mov	r3, r9
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	f7f8 f837 	bl	8000ac0 <__aeabi_dcmpeq>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	f000 8247 	beq.w	8008ee6 <_dtoa_r+0xafe>
 8008a58:	07e9      	lsls	r1, r5, #31
 8008a5a:	d404      	bmi.n	8008a66 <_dtoa_r+0x67e>
 8008a5c:	e243      	b.n	8008ee6 <_dtoa_r+0xafe>
 8008a5e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008a62:	e000      	b.n	8008a66 <_dtoa_r+0x67e>
 8008a64:	461c      	mov	r4, r3
 8008a66:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8008a6a:	2a39      	cmp	r2, #57	; 0x39
 8008a6c:	f104 33ff 	add.w	r3, r4, #4294967295
 8008a70:	d107      	bne.n	8008a82 <_dtoa_r+0x69a>
 8008a72:	9a04      	ldr	r2, [sp, #16]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d1f5      	bne.n	8008a64 <_dtoa_r+0x67c>
 8008a78:	9904      	ldr	r1, [sp, #16]
 8008a7a:	2230      	movs	r2, #48	; 0x30
 8008a7c:	f10b 0b01 	add.w	fp, fp, #1
 8008a80:	700a      	strb	r2, [r1, #0]
 8008a82:	781a      	ldrb	r2, [r3, #0]
 8008a84:	3201      	adds	r2, #1
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	e22d      	b.n	8008ee6 <_dtoa_r+0xafe>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	4b5a      	ldr	r3, [pc, #360]	; (8008bf8 <_dtoa_r+0x810>)
 8008a8e:	f7f7 fdaf 	bl	80005f0 <__aeabi_dmul>
 8008a92:	2200      	movs	r2, #0
 8008a94:	2300      	movs	r3, #0
 8008a96:	e9cd 0100 	strd	r0, r1, [sp]
 8008a9a:	f7f8 f811 	bl	8000ac0 <__aeabi_dcmpeq>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d0a4      	beq.n	80089ec <_dtoa_r+0x604>
 8008aa2:	e220      	b.n	8008ee6 <_dtoa_r+0xafe>
 8008aa4:	9a08      	ldr	r2, [sp, #32]
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	d02d      	beq.n	8008b06 <_dtoa_r+0x71e>
 8008aaa:	9a06      	ldr	r2, [sp, #24]
 8008aac:	2a01      	cmp	r2, #1
 8008aae:	dc0a      	bgt.n	8008ac6 <_dtoa_r+0x6de>
 8008ab0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ab2:	b112      	cbz	r2, 8008aba <_dtoa_r+0x6d2>
 8008ab4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ab8:	e002      	b.n	8008ac0 <_dtoa_r+0x6d8>
 8008aba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008abc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ac0:	9d07      	ldr	r5, [sp, #28]
 8008ac2:	464c      	mov	r4, r9
 8008ac4:	e015      	b.n	8008af2 <_dtoa_r+0x70a>
 8008ac6:	9b07      	ldr	r3, [sp, #28]
 8008ac8:	f108 35ff 	add.w	r5, r8, #4294967295
 8008acc:	42ab      	cmp	r3, r5
 8008ace:	bfbf      	itttt	lt
 8008ad0:	9b07      	ldrlt	r3, [sp, #28]
 8008ad2:	9507      	strlt	r5, [sp, #28]
 8008ad4:	1aea      	sublt	r2, r5, r3
 8008ad6:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008ad8:	bfb7      	itett	lt
 8008ada:	189b      	addlt	r3, r3, r2
 8008adc:	1b5d      	subge	r5, r3, r5
 8008ade:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008ae0:	2500      	movlt	r5, #0
 8008ae2:	f1b8 0f00 	cmp.w	r8, #0
 8008ae6:	bfb9      	ittee	lt
 8008ae8:	ebc8 0409 	rsblt	r4, r8, r9
 8008aec:	2300      	movlt	r3, #0
 8008aee:	464c      	movge	r4, r9
 8008af0:	4643      	movge	r3, r8
 8008af2:	9a05      	ldr	r2, [sp, #20]
 8008af4:	2101      	movs	r1, #1
 8008af6:	441a      	add	r2, r3
 8008af8:	4650      	mov	r0, sl
 8008afa:	4499      	add	r9, r3
 8008afc:	9205      	str	r2, [sp, #20]
 8008afe:	f001 fb1e 	bl	800a13e <__i2b>
 8008b02:	4606      	mov	r6, r0
 8008b04:	e002      	b.n	8008b0c <_dtoa_r+0x724>
 8008b06:	9d07      	ldr	r5, [sp, #28]
 8008b08:	9e08      	ldr	r6, [sp, #32]
 8008b0a:	464c      	mov	r4, r9
 8008b0c:	b15c      	cbz	r4, 8008b26 <_dtoa_r+0x73e>
 8008b0e:	9b05      	ldr	r3, [sp, #20]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dd08      	ble.n	8008b26 <_dtoa_r+0x73e>
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	9a05      	ldr	r2, [sp, #20]
 8008b18:	bfa8      	it	ge
 8008b1a:	4623      	movge	r3, r4
 8008b1c:	ebc3 0909 	rsb	r9, r3, r9
 8008b20:	1ae4      	subs	r4, r4, r3
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	9305      	str	r3, [sp, #20]
 8008b26:	9b07      	ldr	r3, [sp, #28]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dd1d      	ble.n	8008b68 <_dtoa_r+0x780>
 8008b2c:	9b08      	ldr	r3, [sp, #32]
 8008b2e:	b1ab      	cbz	r3, 8008b5c <_dtoa_r+0x774>
 8008b30:	b185      	cbz	r5, 8008b54 <_dtoa_r+0x76c>
 8008b32:	4631      	mov	r1, r6
 8008b34:	462a      	mov	r2, r5
 8008b36:	4650      	mov	r0, sl
 8008b38:	f001 fb9c 	bl	800a274 <__pow5mult>
 8008b3c:	9a02      	ldr	r2, [sp, #8]
 8008b3e:	4601      	mov	r1, r0
 8008b40:	4606      	mov	r6, r0
 8008b42:	4650      	mov	r0, sl
 8008b44:	f001 fb04 	bl	800a150 <__multiply>
 8008b48:	9902      	ldr	r1, [sp, #8]
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	4650      	mov	r0, sl
 8008b4e:	f001 fa19 	bl	8009f84 <_Bfree>
 8008b52:	9702      	str	r7, [sp, #8]
 8008b54:	9b07      	ldr	r3, [sp, #28]
 8008b56:	1b5a      	subs	r2, r3, r5
 8008b58:	d006      	beq.n	8008b68 <_dtoa_r+0x780>
 8008b5a:	e000      	b.n	8008b5e <_dtoa_r+0x776>
 8008b5c:	9a07      	ldr	r2, [sp, #28]
 8008b5e:	9902      	ldr	r1, [sp, #8]
 8008b60:	4650      	mov	r0, sl
 8008b62:	f001 fb87 	bl	800a274 <__pow5mult>
 8008b66:	9002      	str	r0, [sp, #8]
 8008b68:	2101      	movs	r1, #1
 8008b6a:	4650      	mov	r0, sl
 8008b6c:	f001 fae7 	bl	800a13e <__i2b>
 8008b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b72:	4605      	mov	r5, r0
 8008b74:	b35b      	cbz	r3, 8008bce <_dtoa_r+0x7e6>
 8008b76:	461a      	mov	r2, r3
 8008b78:	4601      	mov	r1, r0
 8008b7a:	4650      	mov	r0, sl
 8008b7c:	f001 fb7a 	bl	800a274 <__pow5mult>
 8008b80:	9b06      	ldr	r3, [sp, #24]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	4605      	mov	r5, r0
 8008b86:	dc18      	bgt.n	8008bba <_dtoa_r+0x7d2>
 8008b88:	9b00      	ldr	r3, [sp, #0]
 8008b8a:	b983      	cbnz	r3, 8008bae <_dtoa_r+0x7c6>
 8008b8c:	9b01      	ldr	r3, [sp, #4]
 8008b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b92:	b973      	cbnz	r3, 8008bb2 <_dtoa_r+0x7ca>
 8008b94:	9b01      	ldr	r3, [sp, #4]
 8008b96:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8008b9a:	0d3f      	lsrs	r7, r7, #20
 8008b9c:	053f      	lsls	r7, r7, #20
 8008b9e:	b14f      	cbz	r7, 8008bb4 <_dtoa_r+0x7cc>
 8008ba0:	9b05      	ldr	r3, [sp, #20]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	f109 0901 	add.w	r9, r9, #1
 8008ba8:	9305      	str	r3, [sp, #20]
 8008baa:	2701      	movs	r7, #1
 8008bac:	e002      	b.n	8008bb4 <_dtoa_r+0x7cc>
 8008bae:	2700      	movs	r7, #0
 8008bb0:	e000      	b.n	8008bb4 <_dtoa_r+0x7cc>
 8008bb2:	9f00      	ldr	r7, [sp, #0]
 8008bb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bb6:	b173      	cbz	r3, 8008bd6 <_dtoa_r+0x7ee>
 8008bb8:	e000      	b.n	8008bbc <_dtoa_r+0x7d4>
 8008bba:	2700      	movs	r7, #0
 8008bbc:	692b      	ldr	r3, [r5, #16]
 8008bbe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008bc2:	6918      	ldr	r0, [r3, #16]
 8008bc4:	f001 fa6e 	bl	800a0a4 <__hi0bits>
 8008bc8:	f1c0 0020 	rsb	r0, r0, #32
 8008bcc:	e004      	b.n	8008bd8 <_dtoa_r+0x7f0>
 8008bce:	9b06      	ldr	r3, [sp, #24]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	ddd9      	ble.n	8008b88 <_dtoa_r+0x7a0>
 8008bd4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	9b05      	ldr	r3, [sp, #20]
 8008bda:	4418      	add	r0, r3
 8008bdc:	f010 001f 	ands.w	r0, r0, #31
 8008be0:	d00e      	beq.n	8008c00 <_dtoa_r+0x818>
 8008be2:	f1c0 0320 	rsb	r3, r0, #32
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	dd08      	ble.n	8008bfc <_dtoa_r+0x814>
 8008bea:	f1c0 001c 	rsb	r0, r0, #28
 8008bee:	e008      	b.n	8008c02 <_dtoa_r+0x81a>
 8008bf0:	0800cdf0 	.word	0x0800cdf0
 8008bf4:	40140000 	.word	0x40140000
 8008bf8:	40240000 	.word	0x40240000
 8008bfc:	d006      	beq.n	8008c0c <_dtoa_r+0x824>
 8008bfe:	4618      	mov	r0, r3
 8008c00:	301c      	adds	r0, #28
 8008c02:	9b05      	ldr	r3, [sp, #20]
 8008c04:	4403      	add	r3, r0
 8008c06:	4481      	add	r9, r0
 8008c08:	4404      	add	r4, r0
 8008c0a:	9305      	str	r3, [sp, #20]
 8008c0c:	f1b9 0f00 	cmp.w	r9, #0
 8008c10:	dd05      	ble.n	8008c1e <_dtoa_r+0x836>
 8008c12:	464a      	mov	r2, r9
 8008c14:	9902      	ldr	r1, [sp, #8]
 8008c16:	4650      	mov	r0, sl
 8008c18:	f001 fb7a 	bl	800a310 <__lshift>
 8008c1c:	9002      	str	r0, [sp, #8]
 8008c1e:	9b05      	ldr	r3, [sp, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	dd05      	ble.n	8008c30 <_dtoa_r+0x848>
 8008c24:	4629      	mov	r1, r5
 8008c26:	461a      	mov	r2, r3
 8008c28:	4650      	mov	r0, sl
 8008c2a:	f001 fb71 	bl	800a310 <__lshift>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c32:	b1eb      	cbz	r3, 8008c70 <_dtoa_r+0x888>
 8008c34:	4629      	mov	r1, r5
 8008c36:	9802      	ldr	r0, [sp, #8]
 8008c38:	f001 fbbb 	bl	800a3b2 <__mcmp>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	da17      	bge.n	8008c70 <_dtoa_r+0x888>
 8008c40:	2300      	movs	r3, #0
 8008c42:	220a      	movs	r2, #10
 8008c44:	9902      	ldr	r1, [sp, #8]
 8008c46:	4650      	mov	r0, sl
 8008c48:	f001 f9b3 	bl	8009fb2 <__multadd>
 8008c4c:	9b08      	ldr	r3, [sp, #32]
 8008c4e:	9002      	str	r0, [sp, #8]
 8008c50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 8158 	beq.w	8008f0a <_dtoa_r+0xb22>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	220a      	movs	r2, #10
 8008c60:	4650      	mov	r0, sl
 8008c62:	f001 f9a6 	bl	8009fb2 <__multadd>
 8008c66:	9b03      	ldr	r3, [sp, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	dc37      	bgt.n	8008cde <_dtoa_r+0x8f6>
 8008c6e:	e033      	b.n	8008cd8 <_dtoa_r+0x8f0>
 8008c70:	f1b8 0f00 	cmp.w	r8, #0
 8008c74:	dc2a      	bgt.n	8008ccc <_dtoa_r+0x8e4>
 8008c76:	9b06      	ldr	r3, [sp, #24]
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	dd27      	ble.n	8008ccc <_dtoa_r+0x8e4>
 8008c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	b983      	cbnz	r3, 8008ca6 <_dtoa_r+0x8be>
 8008c84:	4629      	mov	r1, r5
 8008c86:	2205      	movs	r2, #5
 8008c88:	4650      	mov	r0, sl
 8008c8a:	f001 f992 	bl	8009fb2 <__multadd>
 8008c8e:	4601      	mov	r1, r0
 8008c90:	4605      	mov	r5, r0
 8008c92:	9802      	ldr	r0, [sp, #8]
 8008c94:	f001 fb8d 	bl	800a3b2 <__mcmp>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	dc0d      	bgt.n	8008cb8 <_dtoa_r+0x8d0>
 8008c9c:	e003      	b.n	8008ca6 <_dtoa_r+0x8be>
 8008c9e:	463d      	mov	r5, r7
 8008ca0:	e000      	b.n	8008ca4 <_dtoa_r+0x8bc>
 8008ca2:	2500      	movs	r5, #0
 8008ca4:	462e      	mov	r6, r5
 8008ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca8:	9c04      	ldr	r4, [sp, #16]
 8008caa:	ea6f 0b03 	mvn.w	fp, r3
 8008cae:	e00a      	b.n	8008cc6 <_dtoa_r+0x8de>
 8008cb0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008cb4:	463d      	mov	r5, r7
 8008cb6:	463e      	mov	r6, r7
 8008cb8:	9b04      	ldr	r3, [sp, #16]
 8008cba:	9a04      	ldr	r2, [sp, #16]
 8008cbc:	1c5c      	adds	r4, r3, #1
 8008cbe:	2331      	movs	r3, #49	; 0x31
 8008cc0:	7013      	strb	r3, [r2, #0]
 8008cc2:	f10b 0b01 	add.w	fp, fp, #1
 8008cc6:	46b0      	mov	r8, r6
 8008cc8:	2600      	movs	r6, #0
 8008cca:	e0f7      	b.n	8008ebc <_dtoa_r+0xad4>
 8008ccc:	9b08      	ldr	r3, [sp, #32]
 8008cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd2:	b923      	cbnz	r3, 8008cde <_dtoa_r+0x8f6>
 8008cd4:	9c04      	ldr	r4, [sp, #16]
 8008cd6:	e0b1      	b.n	8008e3c <_dtoa_r+0xa54>
 8008cd8:	9b06      	ldr	r3, [sp, #24]
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	dcd0      	bgt.n	8008c80 <_dtoa_r+0x898>
 8008cde:	2c00      	cmp	r4, #0
 8008ce0:	dd05      	ble.n	8008cee <_dtoa_r+0x906>
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	4650      	mov	r0, sl
 8008ce8:	f001 fb12 	bl	800a310 <__lshift>
 8008cec:	4606      	mov	r6, r0
 8008cee:	b19f      	cbz	r7, 8008d18 <_dtoa_r+0x930>
 8008cf0:	6871      	ldr	r1, [r6, #4]
 8008cf2:	4650      	mov	r0, sl
 8008cf4:	f001 f911 	bl	8009f1a <_Balloc>
 8008cf8:	6932      	ldr	r2, [r6, #16]
 8008cfa:	3202      	adds	r2, #2
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	0092      	lsls	r2, r2, #2
 8008d00:	f106 010c 	add.w	r1, r6, #12
 8008d04:	300c      	adds	r0, #12
 8008d06:	f7fb fea2 	bl	8004a4e <memcpy>
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4650      	mov	r0, sl
 8008d10:	f001 fafe 	bl	800a310 <__lshift>
 8008d14:	4680      	mov	r8, r0
 8008d16:	e000      	b.n	8008d1a <_dtoa_r+0x932>
 8008d18:	46b0      	mov	r8, r6
 8008d1a:	9b00      	ldr	r3, [sp, #0]
 8008d1c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	4629      	mov	r1, r5
 8008d28:	9802      	ldr	r0, [sp, #8]
 8008d2a:	f7ff facc 	bl	80082c6 <quorem>
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4604      	mov	r4, r0
 8008d32:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8008d36:	9802      	ldr	r0, [sp, #8]
 8008d38:	f001 fb3b 	bl	800a3b2 <__mcmp>
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	9000      	str	r0, [sp, #0]
 8008d40:	4629      	mov	r1, r5
 8008d42:	4650      	mov	r0, sl
 8008d44:	f001 fb51 	bl	800a3ea <__mdiff>
 8008d48:	68c3      	ldr	r3, [r0, #12]
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	b93b      	cbnz	r3, 8008d5e <_dtoa_r+0x976>
 8008d4e:	4601      	mov	r1, r0
 8008d50:	9007      	str	r0, [sp, #28]
 8008d52:	9802      	ldr	r0, [sp, #8]
 8008d54:	f001 fb2d 	bl	800a3b2 <__mcmp>
 8008d58:	9a07      	ldr	r2, [sp, #28]
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	e000      	b.n	8008d60 <_dtoa_r+0x978>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	4611      	mov	r1, r2
 8008d62:	4650      	mov	r0, sl
 8008d64:	9307      	str	r3, [sp, #28]
 8008d66:	f001 f90d 	bl	8009f84 <_Bfree>
 8008d6a:	9b07      	ldr	r3, [sp, #28]
 8008d6c:	b94b      	cbnz	r3, 8008d82 <_dtoa_r+0x99a>
 8008d6e:	9a06      	ldr	r2, [sp, #24]
 8008d70:	b93a      	cbnz	r2, 8008d82 <_dtoa_r+0x99a>
 8008d72:	9a05      	ldr	r2, [sp, #20]
 8008d74:	b92a      	cbnz	r2, 8008d82 <_dtoa_r+0x99a>
 8008d76:	2f39      	cmp	r7, #57	; 0x39
 8008d78:	d028      	beq.n	8008dcc <_dtoa_r+0x9e4>
 8008d7a:	9b00      	ldr	r3, [sp, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dc1a      	bgt.n	8008db6 <_dtoa_r+0x9ce>
 8008d80:	e01b      	b.n	8008dba <_dtoa_r+0x9d2>
 8008d82:	9a00      	ldr	r2, [sp, #0]
 8008d84:	2a00      	cmp	r2, #0
 8008d86:	db04      	blt.n	8008d92 <_dtoa_r+0x9aa>
 8008d88:	d11a      	bne.n	8008dc0 <_dtoa_r+0x9d8>
 8008d8a:	9a06      	ldr	r2, [sp, #24]
 8008d8c:	b9c2      	cbnz	r2, 8008dc0 <_dtoa_r+0x9d8>
 8008d8e:	9a05      	ldr	r2, [sp, #20]
 8008d90:	b9b2      	cbnz	r2, 8008dc0 <_dtoa_r+0x9d8>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	dd11      	ble.n	8008dba <_dtoa_r+0x9d2>
 8008d96:	2201      	movs	r2, #1
 8008d98:	9902      	ldr	r1, [sp, #8]
 8008d9a:	4650      	mov	r0, sl
 8008d9c:	f001 fab8 	bl	800a310 <__lshift>
 8008da0:	4629      	mov	r1, r5
 8008da2:	9002      	str	r0, [sp, #8]
 8008da4:	f001 fb05 	bl	800a3b2 <__mcmp>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	dc02      	bgt.n	8008db2 <_dtoa_r+0x9ca>
 8008dac:	d105      	bne.n	8008dba <_dtoa_r+0x9d2>
 8008dae:	07fa      	lsls	r2, r7, #31
 8008db0:	d503      	bpl.n	8008dba <_dtoa_r+0x9d2>
 8008db2:	2f39      	cmp	r7, #57	; 0x39
 8008db4:	d00a      	beq.n	8008dcc <_dtoa_r+0x9e4>
 8008db6:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8008dba:	f109 0401 	add.w	r4, r9, #1
 8008dbe:	e00c      	b.n	8008dda <_dtoa_r+0x9f2>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f109 0401 	add.w	r4, r9, #1
 8008dc6:	dd0b      	ble.n	8008de0 <_dtoa_r+0x9f8>
 8008dc8:	2f39      	cmp	r7, #57	; 0x39
 8008dca:	d105      	bne.n	8008dd8 <_dtoa_r+0x9f0>
 8008dcc:	2339      	movs	r3, #57	; 0x39
 8008dce:	f889 3000 	strb.w	r3, [r9]
 8008dd2:	f109 0901 	add.w	r9, r9, #1
 8008dd6:	e054      	b.n	8008e82 <_dtoa_r+0xa9a>
 8008dd8:	3701      	adds	r7, #1
 8008dda:	f889 7000 	strb.w	r7, [r9]
 8008dde:	e06d      	b.n	8008ebc <_dtoa_r+0xad4>
 8008de0:	9b04      	ldr	r3, [sp, #16]
 8008de2:	9a03      	ldr	r2, [sp, #12]
 8008de4:	f804 7c01 	strb.w	r7, [r4, #-1]
 8008de8:	1ae3      	subs	r3, r4, r3
 8008dea:	4293      	cmp	r3, r2
 8008dec:	46a1      	mov	r9, r4
 8008dee:	d03a      	beq.n	8008e66 <_dtoa_r+0xa7e>
 8008df0:	2300      	movs	r3, #0
 8008df2:	220a      	movs	r2, #10
 8008df4:	9902      	ldr	r1, [sp, #8]
 8008df6:	4650      	mov	r0, sl
 8008df8:	f001 f8db 	bl	8009fb2 <__multadd>
 8008dfc:	4546      	cmp	r6, r8
 8008dfe:	9002      	str	r0, [sp, #8]
 8008e00:	f04f 0300 	mov.w	r3, #0
 8008e04:	f04f 020a 	mov.w	r2, #10
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4650      	mov	r0, sl
 8008e0c:	d104      	bne.n	8008e18 <_dtoa_r+0xa30>
 8008e0e:	f001 f8d0 	bl	8009fb2 <__multadd>
 8008e12:	4606      	mov	r6, r0
 8008e14:	4680      	mov	r8, r0
 8008e16:	e786      	b.n	8008d26 <_dtoa_r+0x93e>
 8008e18:	f001 f8cb 	bl	8009fb2 <__multadd>
 8008e1c:	4641      	mov	r1, r8
 8008e1e:	4606      	mov	r6, r0
 8008e20:	2300      	movs	r3, #0
 8008e22:	220a      	movs	r2, #10
 8008e24:	4650      	mov	r0, sl
 8008e26:	f001 f8c4 	bl	8009fb2 <__multadd>
 8008e2a:	4680      	mov	r8, r0
 8008e2c:	e77b      	b.n	8008d26 <_dtoa_r+0x93e>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	220a      	movs	r2, #10
 8008e32:	9902      	ldr	r1, [sp, #8]
 8008e34:	4650      	mov	r0, sl
 8008e36:	f001 f8bc 	bl	8009fb2 <__multadd>
 8008e3a:	9002      	str	r0, [sp, #8]
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	9802      	ldr	r0, [sp, #8]
 8008e40:	f7ff fa41 	bl	80082c6 <quorem>
 8008e44:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8008e48:	f804 7b01 	strb.w	r7, [r4], #1
 8008e4c:	9b04      	ldr	r3, [sp, #16]
 8008e4e:	9a03      	ldr	r2, [sp, #12]
 8008e50:	1ae3      	subs	r3, r4, r3
 8008e52:	4293      	cmp	r3, r2
 8008e54:	dbeb      	blt.n	8008e2e <_dtoa_r+0xa46>
 8008e56:	9b04      	ldr	r3, [sp, #16]
 8008e58:	2a01      	cmp	r2, #1
 8008e5a:	bfac      	ite	ge
 8008e5c:	189b      	addge	r3, r3, r2
 8008e5e:	3301      	addlt	r3, #1
 8008e60:	46b0      	mov	r8, r6
 8008e62:	4699      	mov	r9, r3
 8008e64:	2600      	movs	r6, #0
 8008e66:	2201      	movs	r2, #1
 8008e68:	9902      	ldr	r1, [sp, #8]
 8008e6a:	4650      	mov	r0, sl
 8008e6c:	f001 fa50 	bl	800a310 <__lshift>
 8008e70:	4629      	mov	r1, r5
 8008e72:	9002      	str	r0, [sp, #8]
 8008e74:	f001 fa9d 	bl	800a3b2 <__mcmp>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	dc02      	bgt.n	8008e82 <_dtoa_r+0xa9a>
 8008e7c:	d115      	bne.n	8008eaa <_dtoa_r+0xac2>
 8008e7e:	07fb      	lsls	r3, r7, #31
 8008e80:	d513      	bpl.n	8008eaa <_dtoa_r+0xac2>
 8008e82:	464c      	mov	r4, r9
 8008e84:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008e88:	2b39      	cmp	r3, #57	; 0x39
 8008e8a:	f104 32ff 	add.w	r2, r4, #4294967295
 8008e8e:	d109      	bne.n	8008ea4 <_dtoa_r+0xabc>
 8008e90:	9b04      	ldr	r3, [sp, #16]
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d104      	bne.n	8008ea0 <_dtoa_r+0xab8>
 8008e96:	f10b 0b01 	add.w	fp, fp, #1
 8008e9a:	2331      	movs	r3, #49	; 0x31
 8008e9c:	9a04      	ldr	r2, [sp, #16]
 8008e9e:	e002      	b.n	8008ea6 <_dtoa_r+0xabe>
 8008ea0:	4614      	mov	r4, r2
 8008ea2:	e7ef      	b.n	8008e84 <_dtoa_r+0xa9c>
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	7013      	strb	r3, [r2, #0]
 8008ea8:	e008      	b.n	8008ebc <_dtoa_r+0xad4>
 8008eaa:	464c      	mov	r4, r9
 8008eac:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008eb0:	2b30      	cmp	r3, #48	; 0x30
 8008eb2:	f104 32ff 	add.w	r2, r4, #4294967295
 8008eb6:	d101      	bne.n	8008ebc <_dtoa_r+0xad4>
 8008eb8:	4614      	mov	r4, r2
 8008eba:	e7f7      	b.n	8008eac <_dtoa_r+0xac4>
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	4650      	mov	r0, sl
 8008ec0:	f001 f860 	bl	8009f84 <_Bfree>
 8008ec4:	f1b8 0f00 	cmp.w	r8, #0
 8008ec8:	d00d      	beq.n	8008ee6 <_dtoa_r+0xafe>
 8008eca:	b12e      	cbz	r6, 8008ed8 <_dtoa_r+0xaf0>
 8008ecc:	4546      	cmp	r6, r8
 8008ece:	d003      	beq.n	8008ed8 <_dtoa_r+0xaf0>
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	f001 f856 	bl	8009f84 <_Bfree>
 8008ed8:	4641      	mov	r1, r8
 8008eda:	4650      	mov	r0, sl
 8008edc:	f001 f852 	bl	8009f84 <_Bfree>
 8008ee0:	e001      	b.n	8008ee6 <_dtoa_r+0xafe>
 8008ee2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008ee6:	9902      	ldr	r1, [sp, #8]
 8008ee8:	4650      	mov	r0, sl
 8008eea:	f001 f84b 	bl	8009f84 <_Bfree>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ef2:	7023      	strb	r3, [r4, #0]
 8008ef4:	f10b 0301 	add.w	r3, fp, #1
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008efc:	b11b      	cbz	r3, 8008f06 <_dtoa_r+0xb1e>
 8008efe:	601c      	str	r4, [r3, #0]
 8008f00:	e001      	b.n	8008f06 <_dtoa_r+0xb1e>
 8008f02:	4808      	ldr	r0, [pc, #32]	; (8008f24 <_dtoa_r+0xb3c>)
 8008f04:	e00a      	b.n	8008f1c <_dtoa_r+0xb34>
 8008f06:	9804      	ldr	r0, [sp, #16]
 8008f08:	e008      	b.n	8008f1c <_dtoa_r+0xb34>
 8008f0a:	9b03      	ldr	r3, [sp, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f73f aee1 	bgt.w	8008cd4 <_dtoa_r+0x8ec>
 8008f12:	9b06      	ldr	r3, [sp, #24]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	f77f aedd 	ble.w	8008cd4 <_dtoa_r+0x8ec>
 8008f1a:	e6b1      	b.n	8008c80 <_dtoa_r+0x898>
 8008f1c:	b017      	add	sp, #92	; 0x5c
 8008f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f22:	bf00      	nop
 8008f24:	0800cd22 	.word	0x0800cd22

08008f28 <__sflush_r>:
 8008f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f2c:	b293      	uxth	r3, r2
 8008f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f32:	4605      	mov	r5, r0
 8008f34:	0718      	lsls	r0, r3, #28
 8008f36:	460c      	mov	r4, r1
 8008f38:	d460      	bmi.n	8008ffc <__sflush_r+0xd4>
 8008f3a:	684b      	ldr	r3, [r1, #4]
 8008f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	818a      	strh	r2, [r1, #12]
 8008f44:	dc02      	bgt.n	8008f4c <__sflush_r+0x24>
 8008f46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dd17      	ble.n	8008f7c <__sflush_r+0x54>
 8008f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f4e:	b1ae      	cbz	r6, 8008f7c <__sflush_r+0x54>
 8008f50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008f54:	2300      	movs	r3, #0
 8008f56:	b292      	uxth	r2, r2
 8008f58:	682f      	ldr	r7, [r5, #0]
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	b10a      	cbz	r2, 8008f62 <__sflush_r+0x3a>
 8008f5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f60:	e015      	b.n	8008f8e <__sflush_r+0x66>
 8008f62:	6a21      	ldr	r1, [r4, #32]
 8008f64:	2301      	movs	r3, #1
 8008f66:	4628      	mov	r0, r5
 8008f68:	47b0      	blx	r6
 8008f6a:	1c41      	adds	r1, r0, #1
 8008f6c:	d10f      	bne.n	8008f8e <__sflush_r+0x66>
 8008f6e:	682b      	ldr	r3, [r5, #0]
 8008f70:	b16b      	cbz	r3, 8008f8e <__sflush_r+0x66>
 8008f72:	2b1d      	cmp	r3, #29
 8008f74:	d001      	beq.n	8008f7a <__sflush_r+0x52>
 8008f76:	2b16      	cmp	r3, #22
 8008f78:	d103      	bne.n	8008f82 <__sflush_r+0x5a>
 8008f7a:	602f      	str	r7, [r5, #0]
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f88:	81a3      	strh	r3, [r4, #12]
 8008f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	075a      	lsls	r2, r3, #29
 8008f92:	d505      	bpl.n	8008fa0 <__sflush_r+0x78>
 8008f94:	6863      	ldr	r3, [r4, #4]
 8008f96:	1ac0      	subs	r0, r0, r3
 8008f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f9a:	b10b      	cbz	r3, 8008fa0 <__sflush_r+0x78>
 8008f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f9e:	1ac0      	subs	r0, r0, r3
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fa6:	6a21      	ldr	r1, [r4, #32]
 8008fa8:	4628      	mov	r0, r5
 8008faa:	47b0      	blx	r6
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	d106      	bne.n	8008fc0 <__sflush_r+0x98>
 8008fb2:	6829      	ldr	r1, [r5, #0]
 8008fb4:	291d      	cmp	r1, #29
 8008fb6:	d83e      	bhi.n	8009036 <__sflush_r+0x10e>
 8008fb8:	4a22      	ldr	r2, [pc, #136]	; (8009044 <__sflush_r+0x11c>)
 8008fba:	40ca      	lsrs	r2, r1
 8008fbc:	07d6      	lsls	r6, r2, #31
 8008fbe:	d53a      	bpl.n	8009036 <__sflush_r+0x10e>
 8008fc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fc4:	b21b      	sxth	r3, r3
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	6062      	str	r2, [r4, #4]
 8008fca:	04d9      	lsls	r1, r3, #19
 8008fcc:	6922      	ldr	r2, [r4, #16]
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	6022      	str	r2, [r4, #0]
 8008fd2:	d504      	bpl.n	8008fde <__sflush_r+0xb6>
 8008fd4:	1c42      	adds	r2, r0, #1
 8008fd6:	d101      	bne.n	8008fdc <__sflush_r+0xb4>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b903      	cbnz	r3, 8008fde <__sflush_r+0xb6>
 8008fdc:	6560      	str	r0, [r4, #84]	; 0x54
 8008fde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fe0:	602f      	str	r7, [r5, #0]
 8008fe2:	2900      	cmp	r1, #0
 8008fe4:	d0ca      	beq.n	8008f7c <__sflush_r+0x54>
 8008fe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fea:	4299      	cmp	r1, r3
 8008fec:	d002      	beq.n	8008ff4 <__sflush_r+0xcc>
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f000 f9ac 	bl	800934c <_free_r>
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	6360      	str	r0, [r4, #52]	; 0x34
 8008ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ffc:	690f      	ldr	r7, [r1, #16]
 8008ffe:	2f00      	cmp	r7, #0
 8009000:	d0bc      	beq.n	8008f7c <__sflush_r+0x54>
 8009002:	079b      	lsls	r3, r3, #30
 8009004:	680e      	ldr	r6, [r1, #0]
 8009006:	bf08      	it	eq
 8009008:	694b      	ldreq	r3, [r1, #20]
 800900a:	600f      	str	r7, [r1, #0]
 800900c:	bf18      	it	ne
 800900e:	2300      	movne	r3, #0
 8009010:	ebc7 0806 	rsb	r8, r7, r6
 8009014:	608b      	str	r3, [r1, #8]
 8009016:	e002      	b.n	800901e <__sflush_r+0xf6>
 8009018:	4407      	add	r7, r0
 800901a:	ebc0 0808 	rsb	r8, r0, r8
 800901e:	f1b8 0f00 	cmp.w	r8, #0
 8009022:	ddab      	ble.n	8008f7c <__sflush_r+0x54>
 8009024:	4643      	mov	r3, r8
 8009026:	463a      	mov	r2, r7
 8009028:	6a21      	ldr	r1, [r4, #32]
 800902a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800902c:	4628      	mov	r0, r5
 800902e:	47b0      	blx	r6
 8009030:	2800      	cmp	r0, #0
 8009032:	dcf1      	bgt.n	8009018 <__sflush_r+0xf0>
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009044:	20400001 	.word	0x20400001

08009048 <_fflush_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	690b      	ldr	r3, [r1, #16]
 800904c:	4605      	mov	r5, r0
 800904e:	460c      	mov	r4, r1
 8009050:	b1db      	cbz	r3, 800908a <_fflush_r+0x42>
 8009052:	b118      	cbz	r0, 800905c <_fflush_r+0x14>
 8009054:	6983      	ldr	r3, [r0, #24]
 8009056:	b90b      	cbnz	r3, 800905c <_fflush_r+0x14>
 8009058:	f000 f860 	bl	800911c <__sinit>
 800905c:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <_fflush_r+0x48>)
 800905e:	429c      	cmp	r4, r3
 8009060:	d101      	bne.n	8009066 <_fflush_r+0x1e>
 8009062:	686c      	ldr	r4, [r5, #4]
 8009064:	e008      	b.n	8009078 <_fflush_r+0x30>
 8009066:	4b0b      	ldr	r3, [pc, #44]	; (8009094 <_fflush_r+0x4c>)
 8009068:	429c      	cmp	r4, r3
 800906a:	d101      	bne.n	8009070 <_fflush_r+0x28>
 800906c:	68ac      	ldr	r4, [r5, #8]
 800906e:	e003      	b.n	8009078 <_fflush_r+0x30>
 8009070:	4b09      	ldr	r3, [pc, #36]	; (8009098 <_fflush_r+0x50>)
 8009072:	429c      	cmp	r4, r3
 8009074:	bf08      	it	eq
 8009076:	68ec      	ldreq	r4, [r5, #12]
 8009078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800907c:	b12b      	cbz	r3, 800908a <_fflush_r+0x42>
 800907e:	4621      	mov	r1, r4
 8009080:	4628      	mov	r0, r5
 8009082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009086:	f7ff bf4f 	b.w	8008f28 <__sflush_r>
 800908a:	2000      	movs	r0, #0
 800908c:	bd38      	pop	{r3, r4, r5, pc}
 800908e:	bf00      	nop
 8009090:	0800cd84 	.word	0x0800cd84
 8009094:	0800cda4 	.word	0x0800cda4
 8009098:	0800cdc4 	.word	0x0800cdc4

0800909c <_cleanup_r>:
 800909c:	4901      	ldr	r1, [pc, #4]	; (80090a4 <_cleanup_r+0x8>)
 800909e:	f000 bb5d 	b.w	800975c <_fwalk_reent>
 80090a2:	bf00      	nop
 80090a4:	0800ae49 	.word	0x0800ae49

080090a8 <std.isra.0>:
 80090a8:	2300      	movs	r3, #0
 80090aa:	b510      	push	{r4, lr}
 80090ac:	4604      	mov	r4, r0
 80090ae:	6003      	str	r3, [r0, #0]
 80090b0:	6043      	str	r3, [r0, #4]
 80090b2:	6083      	str	r3, [r0, #8]
 80090b4:	8181      	strh	r1, [r0, #12]
 80090b6:	6643      	str	r3, [r0, #100]	; 0x64
 80090b8:	81c2      	strh	r2, [r0, #14]
 80090ba:	6103      	str	r3, [r0, #16]
 80090bc:	6143      	str	r3, [r0, #20]
 80090be:	6183      	str	r3, [r0, #24]
 80090c0:	4619      	mov	r1, r3
 80090c2:	2208      	movs	r2, #8
 80090c4:	305c      	adds	r0, #92	; 0x5c
 80090c6:	f7fb fccd 	bl	8004a64 <memset>
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <std.isra.0+0x38>)
 80090cc:	6263      	str	r3, [r4, #36]	; 0x24
 80090ce:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <std.isra.0+0x3c>)
 80090d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090d2:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <std.isra.0+0x40>)
 80090d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090d6:	4b05      	ldr	r3, [pc, #20]	; (80090ec <std.isra.0+0x44>)
 80090d8:	6224      	str	r4, [r4, #32]
 80090da:	6323      	str	r3, [r4, #48]	; 0x30
 80090dc:	bd10      	pop	{r4, pc}
 80090de:	bf00      	nop
 80090e0:	0800aad9 	.word	0x0800aad9
 80090e4:	0800aafb 	.word	0x0800aafb
 80090e8:	0800ab33 	.word	0x0800ab33
 80090ec:	0800ab57 	.word	0x0800ab57

080090f0 <__sfmoreglue>:
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	2368      	movs	r3, #104	; 0x68
 80090f4:	1e4d      	subs	r5, r1, #1
 80090f6:	435d      	muls	r5, r3
 80090f8:	460e      	mov	r6, r1
 80090fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090fe:	f7fb fa77 	bl	80045f0 <_malloc_r>
 8009102:	4604      	mov	r4, r0
 8009104:	b140      	cbz	r0, 8009118 <__sfmoreglue+0x28>
 8009106:	2100      	movs	r1, #0
 8009108:	e880 0042 	stmia.w	r0, {r1, r6}
 800910c:	300c      	adds	r0, #12
 800910e:	60a0      	str	r0, [r4, #8]
 8009110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009114:	f7fb fca6 	bl	8004a64 <memset>
 8009118:	4620      	mov	r0, r4
 800911a:	bd70      	pop	{r4, r5, r6, pc}

0800911c <__sinit>:
 800911c:	6983      	ldr	r3, [r0, #24]
 800911e:	b510      	push	{r4, lr}
 8009120:	4604      	mov	r4, r0
 8009122:	bb4b      	cbnz	r3, 8009178 <__sinit+0x5c>
 8009124:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8009128:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 800912c:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8009130:	4b12      	ldr	r3, [pc, #72]	; (800917c <__sinit+0x60>)
 8009132:	4a13      	ldr	r2, [pc, #76]	; (8009180 <__sinit+0x64>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6282      	str	r2, [r0, #40]	; 0x28
 8009138:	4298      	cmp	r0, r3
 800913a:	bf04      	itt	eq
 800913c:	2301      	moveq	r3, #1
 800913e:	6183      	streq	r3, [r0, #24]
 8009140:	f000 f820 	bl	8009184 <__sfp>
 8009144:	6060      	str	r0, [r4, #4]
 8009146:	4620      	mov	r0, r4
 8009148:	f000 f81c 	bl	8009184 <__sfp>
 800914c:	60a0      	str	r0, [r4, #8]
 800914e:	4620      	mov	r0, r4
 8009150:	f000 f818 	bl	8009184 <__sfp>
 8009154:	2200      	movs	r2, #0
 8009156:	60e0      	str	r0, [r4, #12]
 8009158:	2104      	movs	r1, #4
 800915a:	6860      	ldr	r0, [r4, #4]
 800915c:	f7ff ffa4 	bl	80090a8 <std.isra.0>
 8009160:	2201      	movs	r2, #1
 8009162:	2109      	movs	r1, #9
 8009164:	68a0      	ldr	r0, [r4, #8]
 8009166:	f7ff ff9f 	bl	80090a8 <std.isra.0>
 800916a:	2202      	movs	r2, #2
 800916c:	2112      	movs	r1, #18
 800916e:	68e0      	ldr	r0, [r4, #12]
 8009170:	f7ff ff9a 	bl	80090a8 <std.isra.0>
 8009174:	2301      	movs	r3, #1
 8009176:	61a3      	str	r3, [r4, #24]
 8009178:	bd10      	pop	{r4, pc}
 800917a:	bf00      	nop
 800917c:	0800cc8c 	.word	0x0800cc8c
 8009180:	0800909d 	.word	0x0800909d

08009184 <__sfp>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	4b1c      	ldr	r3, [pc, #112]	; (80091f8 <__sfp+0x74>)
 8009188:	681e      	ldr	r6, [r3, #0]
 800918a:	69b3      	ldr	r3, [r6, #24]
 800918c:	4607      	mov	r7, r0
 800918e:	b913      	cbnz	r3, 8009196 <__sfp+0x12>
 8009190:	4630      	mov	r0, r6
 8009192:	f7ff ffc3 	bl	800911c <__sinit>
 8009196:	36d8      	adds	r6, #216	; 0xd8
 8009198:	68b4      	ldr	r4, [r6, #8]
 800919a:	6873      	ldr	r3, [r6, #4]
 800919c:	3b01      	subs	r3, #1
 800919e:	d404      	bmi.n	80091aa <__sfp+0x26>
 80091a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091a4:	b17d      	cbz	r5, 80091c6 <__sfp+0x42>
 80091a6:	3468      	adds	r4, #104	; 0x68
 80091a8:	e7f8      	b.n	800919c <__sfp+0x18>
 80091aa:	6833      	ldr	r3, [r6, #0]
 80091ac:	b10b      	cbz	r3, 80091b2 <__sfp+0x2e>
 80091ae:	6836      	ldr	r6, [r6, #0]
 80091b0:	e7f2      	b.n	8009198 <__sfp+0x14>
 80091b2:	2104      	movs	r1, #4
 80091b4:	4638      	mov	r0, r7
 80091b6:	f7ff ff9b 	bl	80090f0 <__sfmoreglue>
 80091ba:	6030      	str	r0, [r6, #0]
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1f6      	bne.n	80091ae <__sfp+0x2a>
 80091c0:	230c      	movs	r3, #12
 80091c2:	603b      	str	r3, [r7, #0]
 80091c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091ca:	81e3      	strh	r3, [r4, #14]
 80091cc:	2301      	movs	r3, #1
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	6665      	str	r5, [r4, #100]	; 0x64
 80091d2:	6025      	str	r5, [r4, #0]
 80091d4:	60a5      	str	r5, [r4, #8]
 80091d6:	6065      	str	r5, [r4, #4]
 80091d8:	6125      	str	r5, [r4, #16]
 80091da:	6165      	str	r5, [r4, #20]
 80091dc:	61a5      	str	r5, [r4, #24]
 80091de:	2208      	movs	r2, #8
 80091e0:	4629      	mov	r1, r5
 80091e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091e6:	f7fb fc3d 	bl	8004a64 <memset>
 80091ea:	6365      	str	r5, [r4, #52]	; 0x34
 80091ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80091ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80091f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80091f2:	4620      	mov	r0, r4
 80091f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f6:	bf00      	nop
 80091f8:	0800cc8c 	.word	0x0800cc8c

080091fc <__sfp_lock_acquire>:
 80091fc:	4770      	bx	lr

080091fe <__sfp_lock_release>:
 80091fe:	4770      	bx	lr

08009200 <__fputwc>:
 8009200:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009204:	4680      	mov	r8, r0
 8009206:	460e      	mov	r6, r1
 8009208:	4614      	mov	r4, r2
 800920a:	f000 fdf9 	bl	8009e00 <__locale_mb_cur_max>
 800920e:	2801      	cmp	r0, #1
 8009210:	d106      	bne.n	8009220 <__fputwc+0x20>
 8009212:	1e73      	subs	r3, r6, #1
 8009214:	2bfe      	cmp	r3, #254	; 0xfe
 8009216:	d803      	bhi.n	8009220 <__fputwc+0x20>
 8009218:	f88d 6004 	strb.w	r6, [sp, #4]
 800921c:	4605      	mov	r5, r0
 800921e:	e00e      	b.n	800923e <__fputwc+0x3e>
 8009220:	4632      	mov	r2, r6
 8009222:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8009226:	a901      	add	r1, sp, #4
 8009228:	4640      	mov	r0, r8
 800922a:	f001 fd8b 	bl	800ad44 <_wcrtomb_r>
 800922e:	1c42      	adds	r2, r0, #1
 8009230:	4605      	mov	r5, r0
 8009232:	d104      	bne.n	800923e <__fputwc+0x3e>
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	e01c      	b.n	8009278 <__fputwc+0x78>
 800923e:	2700      	movs	r7, #0
 8009240:	42af      	cmp	r7, r5
 8009242:	d018      	beq.n	8009276 <__fputwc+0x76>
 8009244:	ab01      	add	r3, sp, #4
 8009246:	5cf9      	ldrb	r1, [r7, r3]
 8009248:	68a3      	ldr	r3, [r4, #8]
 800924a:	3b01      	subs	r3, #1
 800924c:	2b00      	cmp	r3, #0
 800924e:	60a3      	str	r3, [r4, #8]
 8009250:	da04      	bge.n	800925c <__fputwc+0x5c>
 8009252:	69a2      	ldr	r2, [r4, #24]
 8009254:	4293      	cmp	r3, r2
 8009256:	db06      	blt.n	8009266 <__fputwc+0x66>
 8009258:	290a      	cmp	r1, #10
 800925a:	d004      	beq.n	8009266 <__fputwc+0x66>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	6022      	str	r2, [r4, #0]
 8009262:	7019      	strb	r1, [r3, #0]
 8009264:	e005      	b.n	8009272 <__fputwc+0x72>
 8009266:	4622      	mov	r2, r4
 8009268:	4640      	mov	r0, r8
 800926a:	f001 fd0d 	bl	800ac88 <__swbuf_r>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d002      	beq.n	8009278 <__fputwc+0x78>
 8009272:	3701      	adds	r7, #1
 8009274:	e7e4      	b.n	8009240 <__fputwc+0x40>
 8009276:	4630      	mov	r0, r6
 8009278:	b002      	add	sp, #8
 800927a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800927e <_fputwc_r>:
 800927e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8009282:	b410      	push	{r4}
 8009284:	049c      	lsls	r4, r3, #18
 8009286:	d406      	bmi.n	8009296 <_fputwc_r+0x18>
 8009288:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800928a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800928e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8009292:	8193      	strh	r3, [r2, #12]
 8009294:	6654      	str	r4, [r2, #100]	; 0x64
 8009296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800929a:	f7ff bfb1 	b.w	8009200 <__fputwc>
	...

080092a0 <_malloc_trim_r>:
 80092a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a4:	4f25      	ldr	r7, [pc, #148]	; (800933c <_malloc_trim_r+0x9c>)
 80092a6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8009348 <_malloc_trim_r+0xa8>
 80092aa:	4689      	mov	r9, r1
 80092ac:	4606      	mov	r6, r0
 80092ae:	f7fb fbe1 	bl	8004a74 <__malloc_lock>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	685d      	ldr	r5, [r3, #4]
 80092b6:	f1a8 0411 	sub.w	r4, r8, #17
 80092ba:	f025 0503 	bic.w	r5, r5, #3
 80092be:	442c      	add	r4, r5
 80092c0:	ebc9 0404 	rsb	r4, r9, r4
 80092c4:	fbb4 f4f8 	udiv	r4, r4, r8
 80092c8:	3c01      	subs	r4, #1
 80092ca:	fb08 f404 	mul.w	r4, r8, r4
 80092ce:	4544      	cmp	r4, r8
 80092d0:	da05      	bge.n	80092de <_malloc_trim_r+0x3e>
 80092d2:	4630      	mov	r0, r6
 80092d4:	f7fb fbcf 	bl	8004a76 <__malloc_unlock>
 80092d8:	2000      	movs	r0, #0
 80092da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092de:	2100      	movs	r1, #0
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7fb fbe1 	bl	8004aa8 <_sbrk_r>
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	442b      	add	r3, r5
 80092ea:	4298      	cmp	r0, r3
 80092ec:	d1f1      	bne.n	80092d2 <_malloc_trim_r+0x32>
 80092ee:	4261      	negs	r1, r4
 80092f0:	4630      	mov	r0, r6
 80092f2:	f7fb fbd9 	bl	8004aa8 <_sbrk_r>
 80092f6:	3001      	adds	r0, #1
 80092f8:	d110      	bne.n	800931c <_malloc_trim_r+0x7c>
 80092fa:	2100      	movs	r1, #0
 80092fc:	4630      	mov	r0, r6
 80092fe:	f7fb fbd3 	bl	8004aa8 <_sbrk_r>
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	1a83      	subs	r3, r0, r2
 8009306:	2b0f      	cmp	r3, #15
 8009308:	dde3      	ble.n	80092d2 <_malloc_trim_r+0x32>
 800930a:	490d      	ldr	r1, [pc, #52]	; (8009340 <_malloc_trim_r+0xa0>)
 800930c:	6809      	ldr	r1, [r1, #0]
 800930e:	1a40      	subs	r0, r0, r1
 8009310:	490c      	ldr	r1, [pc, #48]	; (8009344 <_malloc_trim_r+0xa4>)
 8009312:	f043 0301 	orr.w	r3, r3, #1
 8009316:	6008      	str	r0, [r1, #0]
 8009318:	6053      	str	r3, [r2, #4]
 800931a:	e7da      	b.n	80092d2 <_malloc_trim_r+0x32>
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4a09      	ldr	r2, [pc, #36]	; (8009344 <_malloc_trim_r+0xa4>)
 8009320:	1b2d      	subs	r5, r5, r4
 8009322:	f045 0501 	orr.w	r5, r5, #1
 8009326:	605d      	str	r5, [r3, #4]
 8009328:	6813      	ldr	r3, [r2, #0]
 800932a:	4630      	mov	r0, r6
 800932c:	1b1c      	subs	r4, r3, r4
 800932e:	6014      	str	r4, [r2, #0]
 8009330:	f7fb fba1 	bl	8004a76 <__malloc_unlock>
 8009334:	2001      	movs	r0, #1
 8009336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800933a:	bf00      	nop
 800933c:	20000124 	.word	0x20000124
 8009340:	20000530 	.word	0x20000530
 8009344:	200005d0 	.word	0x200005d0
 8009348:	00000080 	.word	0x00000080

0800934c <_free_r>:
 800934c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009350:	4604      	mov	r4, r0
 8009352:	4688      	mov	r8, r1
 8009354:	2900      	cmp	r1, #0
 8009356:	f000 80ad 	beq.w	80094b4 <_free_r+0x168>
 800935a:	f7fb fb8b 	bl	8004a74 <__malloc_lock>
 800935e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8009362:	4d55      	ldr	r5, [pc, #340]	; (80094b8 <_free_r+0x16c>)
 8009364:	f022 0001 	bic.w	r0, r2, #1
 8009368:	f1a8 0308 	sub.w	r3, r8, #8
 800936c:	181f      	adds	r7, r3, r0
 800936e:	68a9      	ldr	r1, [r5, #8]
 8009370:	687e      	ldr	r6, [r7, #4]
 8009372:	428f      	cmp	r7, r1
 8009374:	f026 0603 	bic.w	r6, r6, #3
 8009378:	f002 0201 	and.w	r2, r2, #1
 800937c:	d11b      	bne.n	80093b6 <_free_r+0x6a>
 800937e:	4430      	add	r0, r6
 8009380:	b93a      	cbnz	r2, 8009392 <_free_r+0x46>
 8009382:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8009386:	1a9b      	subs	r3, r3, r2
 8009388:	4410      	add	r0, r2
 800938a:	6899      	ldr	r1, [r3, #8]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	60ca      	str	r2, [r1, #12]
 8009390:	6091      	str	r1, [r2, #8]
 8009392:	f040 0201 	orr.w	r2, r0, #1
 8009396:	605a      	str	r2, [r3, #4]
 8009398:	60ab      	str	r3, [r5, #8]
 800939a:	4b48      	ldr	r3, [pc, #288]	; (80094bc <_free_r+0x170>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4298      	cmp	r0, r3
 80093a0:	d304      	bcc.n	80093ac <_free_r+0x60>
 80093a2:	4b47      	ldr	r3, [pc, #284]	; (80094c0 <_free_r+0x174>)
 80093a4:	4620      	mov	r0, r4
 80093a6:	6819      	ldr	r1, [r3, #0]
 80093a8:	f7ff ff7a 	bl	80092a0 <_malloc_trim_r>
 80093ac:	4620      	mov	r0, r4
 80093ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093b2:	f7fb bb60 	b.w	8004a76 <__malloc_unlock>
 80093b6:	607e      	str	r6, [r7, #4]
 80093b8:	b97a      	cbnz	r2, 80093da <_free_r+0x8e>
 80093ba:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80093be:	1a5b      	subs	r3, r3, r1
 80093c0:	4408      	add	r0, r1
 80093c2:	6899      	ldr	r1, [r3, #8]
 80093c4:	f105 0e08 	add.w	lr, r5, #8
 80093c8:	4571      	cmp	r1, lr
 80093ca:	d008      	beq.n	80093de <_free_r+0x92>
 80093cc:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80093d0:	f8c1 e00c 	str.w	lr, [r1, #12]
 80093d4:	f8ce 1008 	str.w	r1, [lr, #8]
 80093d8:	e002      	b.n	80093e0 <_free_r+0x94>
 80093da:	2200      	movs	r2, #0
 80093dc:	e000      	b.n	80093e0 <_free_r+0x94>
 80093de:	2201      	movs	r2, #1
 80093e0:	19b9      	adds	r1, r7, r6
 80093e2:	6849      	ldr	r1, [r1, #4]
 80093e4:	07c9      	lsls	r1, r1, #31
 80093e6:	d40e      	bmi.n	8009406 <_free_r+0xba>
 80093e8:	4430      	add	r0, r6
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	b942      	cbnz	r2, 8009400 <_free_r+0xb4>
 80093ee:	4e35      	ldr	r6, [pc, #212]	; (80094c4 <_free_r+0x178>)
 80093f0:	42b1      	cmp	r1, r6
 80093f2:	d105      	bne.n	8009400 <_free_r+0xb4>
 80093f4:	616b      	str	r3, [r5, #20]
 80093f6:	612b      	str	r3, [r5, #16]
 80093f8:	2201      	movs	r2, #1
 80093fa:	60d9      	str	r1, [r3, #12]
 80093fc:	6099      	str	r1, [r3, #8]
 80093fe:	e002      	b.n	8009406 <_free_r+0xba>
 8009400:	68fe      	ldr	r6, [r7, #12]
 8009402:	60ce      	str	r6, [r1, #12]
 8009404:	60b1      	str	r1, [r6, #8]
 8009406:	f040 0101 	orr.w	r1, r0, #1
 800940a:	6059      	str	r1, [r3, #4]
 800940c:	5018      	str	r0, [r3, r0]
 800940e:	2a00      	cmp	r2, #0
 8009410:	d1cc      	bne.n	80093ac <_free_r+0x60>
 8009412:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009416:	d212      	bcs.n	800943e <_free_r+0xf2>
 8009418:	08c0      	lsrs	r0, r0, #3
 800941a:	1081      	asrs	r1, r0, #2
 800941c:	2201      	movs	r2, #1
 800941e:	fa02 f101 	lsl.w	r1, r2, r1
 8009422:	686a      	ldr	r2, [r5, #4]
 8009424:	3001      	adds	r0, #1
 8009426:	430a      	orrs	r2, r1
 8009428:	606a      	str	r2, [r5, #4]
 800942a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800942e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8009432:	6099      	str	r1, [r3, #8]
 8009434:	3a08      	subs	r2, #8
 8009436:	60da      	str	r2, [r3, #12]
 8009438:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800943c:	e038      	b.n	80094b0 <_free_r+0x164>
 800943e:	0a42      	lsrs	r2, r0, #9
 8009440:	2a04      	cmp	r2, #4
 8009442:	d802      	bhi.n	800944a <_free_r+0xfe>
 8009444:	0982      	lsrs	r2, r0, #6
 8009446:	3238      	adds	r2, #56	; 0x38
 8009448:	e015      	b.n	8009476 <_free_r+0x12a>
 800944a:	2a14      	cmp	r2, #20
 800944c:	d801      	bhi.n	8009452 <_free_r+0x106>
 800944e:	325b      	adds	r2, #91	; 0x5b
 8009450:	e011      	b.n	8009476 <_free_r+0x12a>
 8009452:	2a54      	cmp	r2, #84	; 0x54
 8009454:	d802      	bhi.n	800945c <_free_r+0x110>
 8009456:	0b02      	lsrs	r2, r0, #12
 8009458:	326e      	adds	r2, #110	; 0x6e
 800945a:	e00c      	b.n	8009476 <_free_r+0x12a>
 800945c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009460:	d802      	bhi.n	8009468 <_free_r+0x11c>
 8009462:	0bc2      	lsrs	r2, r0, #15
 8009464:	3277      	adds	r2, #119	; 0x77
 8009466:	e006      	b.n	8009476 <_free_r+0x12a>
 8009468:	f240 5154 	movw	r1, #1364	; 0x554
 800946c:	428a      	cmp	r2, r1
 800946e:	bf9a      	itte	ls
 8009470:	0c82      	lsrls	r2, r0, #18
 8009472:	327c      	addls	r2, #124	; 0x7c
 8009474:	227e      	movhi	r2, #126	; 0x7e
 8009476:	1c51      	adds	r1, r2, #1
 8009478:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800947c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8009480:	4f0d      	ldr	r7, [pc, #52]	; (80094b8 <_free_r+0x16c>)
 8009482:	428e      	cmp	r6, r1
 8009484:	d10b      	bne.n	800949e <_free_r+0x152>
 8009486:	2101      	movs	r1, #1
 8009488:	1092      	asrs	r2, r2, #2
 800948a:	fa01 f202 	lsl.w	r2, r1, r2
 800948e:	6879      	ldr	r1, [r7, #4]
 8009490:	4311      	orrs	r1, r2
 8009492:	6079      	str	r1, [r7, #4]
 8009494:	4631      	mov	r1, r6
 8009496:	e008      	b.n	80094aa <_free_r+0x15e>
 8009498:	6889      	ldr	r1, [r1, #8]
 800949a:	428e      	cmp	r6, r1
 800949c:	d004      	beq.n	80094a8 <_free_r+0x15c>
 800949e:	684a      	ldr	r2, [r1, #4]
 80094a0:	f022 0203 	bic.w	r2, r2, #3
 80094a4:	4290      	cmp	r0, r2
 80094a6:	d3f7      	bcc.n	8009498 <_free_r+0x14c>
 80094a8:	68ce      	ldr	r6, [r1, #12]
 80094aa:	60de      	str	r6, [r3, #12]
 80094ac:	6099      	str	r1, [r3, #8]
 80094ae:	60b3      	str	r3, [r6, #8]
 80094b0:	60cb      	str	r3, [r1, #12]
 80094b2:	e77b      	b.n	80093ac <_free_r+0x60>
 80094b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b8:	20000124 	.word	0x20000124
 80094bc:	2000052c 	.word	0x2000052c
 80094c0:	200005cc 	.word	0x200005cc
 80094c4:	2000012c 	.word	0x2000012c

080094c8 <__sfvwrite_r>:
 80094c8:	6893      	ldr	r3, [r2, #8]
 80094ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ce:	4606      	mov	r6, r0
 80094d0:	460c      	mov	r4, r1
 80094d2:	4690      	mov	r8, r2
 80094d4:	b90b      	cbnz	r3, 80094da <__sfvwrite_r+0x12>
 80094d6:	2000      	movs	r0, #0
 80094d8:	e13b      	b.n	8009752 <__sfvwrite_r+0x28a>
 80094da:	898b      	ldrh	r3, [r1, #12]
 80094dc:	0718      	lsls	r0, r3, #28
 80094de:	d50f      	bpl.n	8009500 <__sfvwrite_r+0x38>
 80094e0:	690b      	ldr	r3, [r1, #16]
 80094e2:	b16b      	cbz	r3, 8009500 <__sfvwrite_r+0x38>
 80094e4:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 80094e8:	f8d8 b000 	ldr.w	fp, [r8]
 80094ec:	f009 0502 	and.w	r5, r9, #2
 80094f0:	b2ad      	uxth	r5, r5
 80094f2:	b355      	cbz	r5, 800954a <__sfvwrite_r+0x82>
 80094f4:	f04f 0900 	mov.w	r9, #0
 80094f8:	464f      	mov	r7, r9
 80094fa:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8009758 <__sfvwrite_r+0x290>
 80094fe:	e01b      	b.n	8009538 <__sfvwrite_r+0x70>
 8009500:	4621      	mov	r1, r4
 8009502:	4630      	mov	r0, r6
 8009504:	f7fe fe6a 	bl	80081dc <__swsetup_r>
 8009508:	2800      	cmp	r0, #0
 800950a:	d0eb      	beq.n	80094e4 <__sfvwrite_r+0x1c>
 800950c:	e11f      	b.n	800974e <__sfvwrite_r+0x286>
 800950e:	4557      	cmp	r7, sl
 8009510:	463b      	mov	r3, r7
 8009512:	464a      	mov	r2, r9
 8009514:	bf28      	it	cs
 8009516:	4653      	movcs	r3, sl
 8009518:	6a21      	ldr	r1, [r4, #32]
 800951a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800951c:	4630      	mov	r0, r6
 800951e:	47a8      	blx	r5
 8009520:	2800      	cmp	r0, #0
 8009522:	f340 8110 	ble.w	8009746 <__sfvwrite_r+0x27e>
 8009526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800952a:	4481      	add	r9, r0
 800952c:	1a3f      	subs	r7, r7, r0
 800952e:	1a18      	subs	r0, r3, r0
 8009530:	f8c8 0008 	str.w	r0, [r8, #8]
 8009534:	2800      	cmp	r0, #0
 8009536:	d0ce      	beq.n	80094d6 <__sfvwrite_r+0xe>
 8009538:	2f00      	cmp	r7, #0
 800953a:	d1e8      	bne.n	800950e <__sfvwrite_r+0x46>
 800953c:	f8db 9000 	ldr.w	r9, [fp]
 8009540:	f8db 7004 	ldr.w	r7, [fp, #4]
 8009544:	f10b 0b08 	add.w	fp, fp, #8
 8009548:	e7f6      	b.n	8009538 <__sfvwrite_r+0x70>
 800954a:	f019 0901 	ands.w	r9, r9, #1
 800954e:	d003      	beq.n	8009558 <__sfvwrite_r+0x90>
 8009550:	9500      	str	r5, [sp, #0]
 8009552:	46a9      	mov	r9, r5
 8009554:	46aa      	mov	sl, r5
 8009556:	e0bd      	b.n	80096d4 <__sfvwrite_r+0x20c>
 8009558:	464f      	mov	r7, r9
 800955a:	b937      	cbnz	r7, 800956a <__sfvwrite_r+0xa2>
 800955c:	f8db 9000 	ldr.w	r9, [fp]
 8009560:	f8db 7004 	ldr.w	r7, [fp, #4]
 8009564:	f10b 0b08 	add.w	fp, fp, #8
 8009568:	e7f7      	b.n	800955a <__sfvwrite_r+0x92>
 800956a:	89a2      	ldrh	r2, [r4, #12]
 800956c:	68a5      	ldr	r5, [r4, #8]
 800956e:	0591      	lsls	r1, r2, #22
 8009570:	d552      	bpl.n	8009618 <__sfvwrite_r+0x150>
 8009572:	42af      	cmp	r7, r5
 8009574:	d342      	bcc.n	80095fc <__sfvwrite_r+0x134>
 8009576:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800957a:	d03d      	beq.n	80095f8 <__sfvwrite_r+0x130>
 800957c:	6921      	ldr	r1, [r4, #16]
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	1a5b      	subs	r3, r3, r1
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	6963      	ldr	r3, [r4, #20]
 8009586:	2002      	movs	r0, #2
 8009588:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800958c:	fb93 faf0 	sdiv	sl, r3, r0
 8009590:	9b00      	ldr	r3, [sp, #0]
 8009592:	3301      	adds	r3, #1
 8009594:	443b      	add	r3, r7
 8009596:	459a      	cmp	sl, r3
 8009598:	bf38      	it	cc
 800959a:	469a      	movcc	sl, r3
 800959c:	0553      	lsls	r3, r2, #21
 800959e:	d510      	bpl.n	80095c2 <__sfvwrite_r+0xfa>
 80095a0:	4651      	mov	r1, sl
 80095a2:	4630      	mov	r0, r6
 80095a4:	f7fb f824 	bl	80045f0 <_malloc_r>
 80095a8:	4605      	mov	r5, r0
 80095aa:	b1c0      	cbz	r0, 80095de <__sfvwrite_r+0x116>
 80095ac:	9a00      	ldr	r2, [sp, #0]
 80095ae:	6921      	ldr	r1, [r4, #16]
 80095b0:	f7fb fa4d 	bl	8004a4e <memcpy>
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	e010      	b.n	80095e4 <__sfvwrite_r+0x11c>
 80095c2:	4652      	mov	r2, sl
 80095c4:	4630      	mov	r0, r6
 80095c6:	f001 f899 	bl	800a6fc <_realloc_r>
 80095ca:	4605      	mov	r5, r0
 80095cc:	b950      	cbnz	r0, 80095e4 <__sfvwrite_r+0x11c>
 80095ce:	6921      	ldr	r1, [r4, #16]
 80095d0:	4630      	mov	r0, r6
 80095d2:	f7ff febb 	bl	800934c <_free_r>
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	230c      	movs	r3, #12
 80095e0:	6033      	str	r3, [r6, #0]
 80095e2:	e0b0      	b.n	8009746 <__sfvwrite_r+0x27e>
 80095e4:	9b00      	ldr	r3, [sp, #0]
 80095e6:	6125      	str	r5, [r4, #16]
 80095e8:	441d      	add	r5, r3
 80095ea:	ebc3 030a 	rsb	r3, r3, sl
 80095ee:	6025      	str	r5, [r4, #0]
 80095f0:	f8c4 a014 	str.w	sl, [r4, #20]
 80095f4:	463d      	mov	r5, r7
 80095f6:	60a3      	str	r3, [r4, #8]
 80095f8:	42af      	cmp	r7, r5
 80095fa:	d200      	bcs.n	80095fe <__sfvwrite_r+0x136>
 80095fc:	463d      	mov	r5, r7
 80095fe:	462a      	mov	r2, r5
 8009600:	4649      	mov	r1, r9
 8009602:	6820      	ldr	r0, [r4, #0]
 8009604:	f000 fc6e 	bl	8009ee4 <memmove>
 8009608:	68a3      	ldr	r3, [r4, #8]
 800960a:	1b5b      	subs	r3, r3, r5
 800960c:	60a3      	str	r3, [r4, #8]
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	441d      	add	r5, r3
 8009612:	6025      	str	r5, [r4, #0]
 8009614:	463d      	mov	r5, r7
 8009616:	e029      	b.n	800966c <__sfvwrite_r+0x1a4>
 8009618:	6820      	ldr	r0, [r4, #0]
 800961a:	6923      	ldr	r3, [r4, #16]
 800961c:	4298      	cmp	r0, r3
 800961e:	d802      	bhi.n	8009626 <__sfvwrite_r+0x15e>
 8009620:	6962      	ldr	r2, [r4, #20]
 8009622:	4297      	cmp	r7, r2
 8009624:	d213      	bcs.n	800964e <__sfvwrite_r+0x186>
 8009626:	42bd      	cmp	r5, r7
 8009628:	bf28      	it	cs
 800962a:	463d      	movcs	r5, r7
 800962c:	462a      	mov	r2, r5
 800962e:	4649      	mov	r1, r9
 8009630:	f000 fc58 	bl	8009ee4 <memmove>
 8009634:	68a3      	ldr	r3, [r4, #8]
 8009636:	6822      	ldr	r2, [r4, #0]
 8009638:	1b5b      	subs	r3, r3, r5
 800963a:	442a      	add	r2, r5
 800963c:	60a3      	str	r3, [r4, #8]
 800963e:	6022      	str	r2, [r4, #0]
 8009640:	b9a3      	cbnz	r3, 800966c <__sfvwrite_r+0x1a4>
 8009642:	4621      	mov	r1, r4
 8009644:	4630      	mov	r0, r6
 8009646:	f7ff fcff 	bl	8009048 <_fflush_r>
 800964a:	b178      	cbz	r0, 800966c <__sfvwrite_r+0x1a4>
 800964c:	e07b      	b.n	8009746 <__sfvwrite_r+0x27e>
 800964e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009652:	42bb      	cmp	r3, r7
 8009654:	bf28      	it	cs
 8009656:	463b      	movcs	r3, r7
 8009658:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800965a:	fb93 f3f2 	sdiv	r3, r3, r2
 800965e:	6a21      	ldr	r1, [r4, #32]
 8009660:	4353      	muls	r3, r2
 8009662:	4630      	mov	r0, r6
 8009664:	464a      	mov	r2, r9
 8009666:	47a8      	blx	r5
 8009668:	1e05      	subs	r5, r0, #0
 800966a:	dd6c      	ble.n	8009746 <__sfvwrite_r+0x27e>
 800966c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009670:	44a9      	add	r9, r5
 8009672:	1b7f      	subs	r7, r7, r5
 8009674:	1b5d      	subs	r5, r3, r5
 8009676:	f8c8 5008 	str.w	r5, [r8, #8]
 800967a:	2d00      	cmp	r5, #0
 800967c:	f47f af6d 	bne.w	800955a <__sfvwrite_r+0x92>
 8009680:	e729      	b.n	80094d6 <__sfvwrite_r+0xe>
 8009682:	9b00      	ldr	r3, [sp, #0]
 8009684:	b383      	cbz	r3, 80096e8 <__sfvwrite_r+0x220>
 8009686:	6820      	ldr	r0, [r4, #0]
 8009688:	6921      	ldr	r1, [r4, #16]
 800968a:	6962      	ldr	r2, [r4, #20]
 800968c:	4555      	cmp	r5, sl
 800968e:	462b      	mov	r3, r5
 8009690:	bf28      	it	cs
 8009692:	4653      	movcs	r3, sl
 8009694:	4288      	cmp	r0, r1
 8009696:	d936      	bls.n	8009706 <__sfvwrite_r+0x23e>
 8009698:	68a7      	ldr	r7, [r4, #8]
 800969a:	4417      	add	r7, r2
 800969c:	42bb      	cmp	r3, r7
 800969e:	dd32      	ble.n	8009706 <__sfvwrite_r+0x23e>
 80096a0:	4649      	mov	r1, r9
 80096a2:	463a      	mov	r2, r7
 80096a4:	f000 fc1e 	bl	8009ee4 <memmove>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	443b      	add	r3, r7
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	4621      	mov	r1, r4
 80096b0:	4630      	mov	r0, r6
 80096b2:	f7ff fcc9 	bl	8009048 <_fflush_r>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d145      	bne.n	8009746 <__sfvwrite_r+0x27e>
 80096ba:	1bed      	subs	r5, r5, r7
 80096bc:	d03c      	beq.n	8009738 <__sfvwrite_r+0x270>
 80096be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096c2:	44b9      	add	r9, r7
 80096c4:	ebc7 0a0a 	rsb	sl, r7, sl
 80096c8:	1bdf      	subs	r7, r3, r7
 80096ca:	f8c8 7008 	str.w	r7, [r8, #8]
 80096ce:	2f00      	cmp	r7, #0
 80096d0:	f43f af01 	beq.w	80094d6 <__sfvwrite_r+0xe>
 80096d4:	f1ba 0f00 	cmp.w	sl, #0
 80096d8:	d1d3      	bne.n	8009682 <__sfvwrite_r+0x1ba>
 80096da:	2300      	movs	r3, #0
 80096dc:	e89b 0600 	ldmia.w	fp, {r9, sl}
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	f10b 0b08 	add.w	fp, fp, #8
 80096e6:	e7f5      	b.n	80096d4 <__sfvwrite_r+0x20c>
 80096e8:	4652      	mov	r2, sl
 80096ea:	210a      	movs	r1, #10
 80096ec:	4648      	mov	r0, r9
 80096ee:	f7f6 fd6f 	bl	80001d0 <memchr>
 80096f2:	b118      	cbz	r0, 80096fc <__sfvwrite_r+0x234>
 80096f4:	3001      	adds	r0, #1
 80096f6:	ebc9 0500 	rsb	r5, r9, r0
 80096fa:	e001      	b.n	8009700 <__sfvwrite_r+0x238>
 80096fc:	f10a 0501 	add.w	r5, sl, #1
 8009700:	2301      	movs	r3, #1
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	e7bf      	b.n	8009686 <__sfvwrite_r+0x1be>
 8009706:	4293      	cmp	r3, r2
 8009708:	db08      	blt.n	800971c <__sfvwrite_r+0x254>
 800970a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800970c:	6a21      	ldr	r1, [r4, #32]
 800970e:	4613      	mov	r3, r2
 8009710:	4630      	mov	r0, r6
 8009712:	464a      	mov	r2, r9
 8009714:	47b8      	blx	r7
 8009716:	1e07      	subs	r7, r0, #0
 8009718:	dccf      	bgt.n	80096ba <__sfvwrite_r+0x1f2>
 800971a:	e014      	b.n	8009746 <__sfvwrite_r+0x27e>
 800971c:	461a      	mov	r2, r3
 800971e:	4649      	mov	r1, r9
 8009720:	9301      	str	r3, [sp, #4]
 8009722:	f000 fbdf 	bl	8009ee4 <memmove>
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	68a2      	ldr	r2, [r4, #8]
 800972a:	1ad2      	subs	r2, r2, r3
 800972c:	60a2      	str	r2, [r4, #8]
 800972e:	6822      	ldr	r2, [r4, #0]
 8009730:	441a      	add	r2, r3
 8009732:	6022      	str	r2, [r4, #0]
 8009734:	461f      	mov	r7, r3
 8009736:	e7c0      	b.n	80096ba <__sfvwrite_r+0x1f2>
 8009738:	4621      	mov	r1, r4
 800973a:	4630      	mov	r0, r6
 800973c:	f7ff fc84 	bl	8009048 <_fflush_r>
 8009740:	b908      	cbnz	r0, 8009746 <__sfvwrite_r+0x27e>
 8009742:	9500      	str	r5, [sp, #0]
 8009744:	e7bb      	b.n	80096be <__sfvwrite_r+0x1f6>
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800974c:	81a3      	strh	r3, [r4, #12]
 800974e:	f04f 30ff 	mov.w	r0, #4294967295
 8009752:	b003      	add	sp, #12
 8009754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009758:	7ffffc00 	.word	0x7ffffc00

0800975c <_fwalk_reent>:
 800975c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009760:	4680      	mov	r8, r0
 8009762:	4689      	mov	r9, r1
 8009764:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8009768:	2600      	movs	r6, #0
 800976a:	b194      	cbz	r4, 8009792 <_fwalk_reent+0x36>
 800976c:	68a5      	ldr	r5, [r4, #8]
 800976e:	6867      	ldr	r7, [r4, #4]
 8009770:	3f01      	subs	r7, #1
 8009772:	d40c      	bmi.n	800978e <_fwalk_reent+0x32>
 8009774:	89ab      	ldrh	r3, [r5, #12]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d907      	bls.n	800978a <_fwalk_reent+0x2e>
 800977a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800977e:	3301      	adds	r3, #1
 8009780:	d003      	beq.n	800978a <_fwalk_reent+0x2e>
 8009782:	4629      	mov	r1, r5
 8009784:	4640      	mov	r0, r8
 8009786:	47c8      	blx	r9
 8009788:	4306      	orrs	r6, r0
 800978a:	3568      	adds	r5, #104	; 0x68
 800978c:	e7f0      	b.n	8009770 <_fwalk_reent+0x14>
 800978e:	6824      	ldr	r4, [r4, #0]
 8009790:	e7eb      	b.n	800976a <_fwalk_reent+0xe>
 8009792:	4630      	mov	r0, r6
 8009794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009798 <rshift>:
 8009798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800979a:	6906      	ldr	r6, [r0, #16]
 800979c:	114b      	asrs	r3, r1, #5
 800979e:	42b3      	cmp	r3, r6
 80097a0:	f100 0514 	add.w	r5, r0, #20
 80097a4:	da27      	bge.n	80097f6 <rshift+0x5e>
 80097a6:	f011 011f 	ands.w	r1, r1, #31
 80097aa:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80097ae:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80097b2:	d101      	bne.n	80097b8 <rshift+0x20>
 80097b4:	4629      	mov	r1, r5
 80097b6:	e016      	b.n	80097e6 <rshift+0x4e>
 80097b8:	1d14      	adds	r4, r2, #4
 80097ba:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80097be:	f1c1 0e20 	rsb	lr, r1, #32
 80097c2:	40ca      	lsrs	r2, r1
 80097c4:	462b      	mov	r3, r5
 80097c6:	42b4      	cmp	r4, r6
 80097c8:	d209      	bcs.n	80097de <rshift+0x46>
 80097ca:	6827      	ldr	r7, [r4, #0]
 80097cc:	fa07 f70e 	lsl.w	r7, r7, lr
 80097d0:	433a      	orrs	r2, r7
 80097d2:	f843 2b04 	str.w	r2, [r3], #4
 80097d6:	f854 2b04 	ldr.w	r2, [r4], #4
 80097da:	40ca      	lsrs	r2, r1
 80097dc:	e7f3      	b.n	80097c6 <rshift+0x2e>
 80097de:	601a      	str	r2, [r3, #0]
 80097e0:	b152      	cbz	r2, 80097f8 <rshift+0x60>
 80097e2:	3304      	adds	r3, #4
 80097e4:	e008      	b.n	80097f8 <rshift+0x60>
 80097e6:	42b2      	cmp	r2, r6
 80097e8:	460b      	mov	r3, r1
 80097ea:	d205      	bcs.n	80097f8 <rshift+0x60>
 80097ec:	f852 3b04 	ldr.w	r3, [r2], #4
 80097f0:	f841 3b04 	str.w	r3, [r1], #4
 80097f4:	e7f7      	b.n	80097e6 <rshift+0x4e>
 80097f6:	462b      	mov	r3, r5
 80097f8:	1b5b      	subs	r3, r3, r5
 80097fa:	109b      	asrs	r3, r3, #2
 80097fc:	6103      	str	r3, [r0, #16]
 80097fe:	b903      	cbnz	r3, 8009802 <rshift+0x6a>
 8009800:	6143      	str	r3, [r0, #20]
 8009802:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009804 <__hexdig_fun>:
 8009804:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009808:	2b09      	cmp	r3, #9
 800980a:	d801      	bhi.n	8009810 <__hexdig_fun+0xc>
 800980c:	3820      	subs	r0, #32
 800980e:	e00a      	b.n	8009826 <__hexdig_fun+0x22>
 8009810:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009814:	2b05      	cmp	r3, #5
 8009816:	d801      	bhi.n	800981c <__hexdig_fun+0x18>
 8009818:	3847      	subs	r0, #71	; 0x47
 800981a:	e004      	b.n	8009826 <__hexdig_fun+0x22>
 800981c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009820:	2b05      	cmp	r3, #5
 8009822:	d802      	bhi.n	800982a <__hexdig_fun+0x26>
 8009824:	3827      	subs	r0, #39	; 0x27
 8009826:	b2c0      	uxtb	r0, r0
 8009828:	4770      	bx	lr
 800982a:	2000      	movs	r0, #0
 800982c:	4770      	bx	lr

0800982e <__gethex>:
 800982e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009832:	b08b      	sub	sp, #44	; 0x2c
 8009834:	468a      	mov	sl, r1
 8009836:	4690      	mov	r8, r2
 8009838:	9306      	str	r3, [sp, #24]
 800983a:	9002      	str	r0, [sp, #8]
 800983c:	f000 fae6 	bl	8009e0c <_localeconv_r>
 8009840:	6803      	ldr	r3, [r0, #0]
 8009842:	9303      	str	r3, [sp, #12]
 8009844:	4618      	mov	r0, r3
 8009846:	f7f6 fd13 	bl	8000270 <strlen>
 800984a:	9b03      	ldr	r3, [sp, #12]
 800984c:	9001      	str	r0, [sp, #4]
 800984e:	4403      	add	r3, r0
 8009850:	f04f 0b00 	mov.w	fp, #0
 8009854:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009858:	9307      	str	r3, [sp, #28]
 800985a:	f8da 3000 	ldr.w	r3, [sl]
 800985e:	3302      	adds	r3, #2
 8009860:	461f      	mov	r7, r3
 8009862:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009866:	2830      	cmp	r0, #48	; 0x30
 8009868:	d102      	bne.n	8009870 <__gethex+0x42>
 800986a:	f10b 0b01 	add.w	fp, fp, #1
 800986e:	e7f7      	b.n	8009860 <__gethex+0x32>
 8009870:	f7ff ffc8 	bl	8009804 <__hexdig_fun>
 8009874:	4604      	mov	r4, r0
 8009876:	b9e0      	cbnz	r0, 80098b2 <__gethex+0x84>
 8009878:	9a01      	ldr	r2, [sp, #4]
 800987a:	9903      	ldr	r1, [sp, #12]
 800987c:	4638      	mov	r0, r7
 800987e:	f001 f96e 	bl	800ab5e <strncmp>
 8009882:	2800      	cmp	r0, #0
 8009884:	d134      	bne.n	80098f0 <__gethex+0xc2>
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	5cf8      	ldrb	r0, [r7, r3]
 800988a:	18fe      	adds	r6, r7, r3
 800988c:	f7ff ffba 	bl	8009804 <__hexdig_fun>
 8009890:	b380      	cbz	r0, 80098f4 <__gethex+0xc6>
 8009892:	4633      	mov	r3, r6
 8009894:	7818      	ldrb	r0, [r3, #0]
 8009896:	2830      	cmp	r0, #48	; 0x30
 8009898:	461f      	mov	r7, r3
 800989a:	f103 0301 	add.w	r3, r3, #1
 800989e:	d0f9      	beq.n	8009894 <__gethex+0x66>
 80098a0:	f7ff ffb0 	bl	8009804 <__hexdig_fun>
 80098a4:	fab0 f580 	clz	r5, r0
 80098a8:	096d      	lsrs	r5, r5, #5
 80098aa:	4634      	mov	r4, r6
 80098ac:	f04f 0b01 	mov.w	fp, #1
 80098b0:	e001      	b.n	80098b6 <__gethex+0x88>
 80098b2:	2500      	movs	r5, #0
 80098b4:	462c      	mov	r4, r5
 80098b6:	463a      	mov	r2, r7
 80098b8:	4616      	mov	r6, r2
 80098ba:	3201      	adds	r2, #1
 80098bc:	7830      	ldrb	r0, [r6, #0]
 80098be:	f7ff ffa1 	bl	8009804 <__hexdig_fun>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d1f8      	bne.n	80098b8 <__gethex+0x8a>
 80098c6:	9a01      	ldr	r2, [sp, #4]
 80098c8:	9903      	ldr	r1, [sp, #12]
 80098ca:	4630      	mov	r0, r6
 80098cc:	f001 f947 	bl	800ab5e <strncmp>
 80098d0:	b950      	cbnz	r0, 80098e8 <__gethex+0xba>
 80098d2:	b954      	cbnz	r4, 80098ea <__gethex+0xbc>
 80098d4:	9b01      	ldr	r3, [sp, #4]
 80098d6:	18f4      	adds	r4, r6, r3
 80098d8:	4622      	mov	r2, r4
 80098da:	4616      	mov	r6, r2
 80098dc:	3201      	adds	r2, #1
 80098de:	7830      	ldrb	r0, [r6, #0]
 80098e0:	f7ff ff90 	bl	8009804 <__hexdig_fun>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d1f8      	bne.n	80098da <__gethex+0xac>
 80098e8:	b134      	cbz	r4, 80098f8 <__gethex+0xca>
 80098ea:	1ba4      	subs	r4, r4, r6
 80098ec:	00a4      	lsls	r4, r4, #2
 80098ee:	e003      	b.n	80098f8 <__gethex+0xca>
 80098f0:	463e      	mov	r6, r7
 80098f2:	e000      	b.n	80098f6 <__gethex+0xc8>
 80098f4:	4604      	mov	r4, r0
 80098f6:	2501      	movs	r5, #1
 80098f8:	7833      	ldrb	r3, [r6, #0]
 80098fa:	2b50      	cmp	r3, #80	; 0x50
 80098fc:	d001      	beq.n	8009902 <__gethex+0xd4>
 80098fe:	2b70      	cmp	r3, #112	; 0x70
 8009900:	d12a      	bne.n	8009958 <__gethex+0x12a>
 8009902:	7873      	ldrb	r3, [r6, #1]
 8009904:	2b2b      	cmp	r3, #43	; 0x2b
 8009906:	d008      	beq.n	800991a <__gethex+0xec>
 8009908:	2b2d      	cmp	r3, #45	; 0x2d
 800990a:	d003      	beq.n	8009914 <__gethex+0xe6>
 800990c:	1c71      	adds	r1, r6, #1
 800990e:	f04f 0900 	mov.w	r9, #0
 8009912:	e005      	b.n	8009920 <__gethex+0xf2>
 8009914:	f04f 0901 	mov.w	r9, #1
 8009918:	e001      	b.n	800991e <__gethex+0xf0>
 800991a:	f04f 0900 	mov.w	r9, #0
 800991e:	1cb1      	adds	r1, r6, #2
 8009920:	7808      	ldrb	r0, [r1, #0]
 8009922:	f7ff ff6f 	bl	8009804 <__hexdig_fun>
 8009926:	1e43      	subs	r3, r0, #1
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b18      	cmp	r3, #24
 800992c:	d814      	bhi.n	8009958 <__gethex+0x12a>
 800992e:	f1a0 0210 	sub.w	r2, r0, #16
 8009932:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009936:	f7ff ff65 	bl	8009804 <__hexdig_fun>
 800993a:	1e43      	subs	r3, r0, #1
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b18      	cmp	r3, #24
 8009940:	d804      	bhi.n	800994c <__gethex+0x11e>
 8009942:	230a      	movs	r3, #10
 8009944:	fb03 0202 	mla	r2, r3, r2, r0
 8009948:	3a10      	subs	r2, #16
 800994a:	e7f2      	b.n	8009932 <__gethex+0x104>
 800994c:	f1b9 0f00 	cmp.w	r9, #0
 8009950:	d000      	beq.n	8009954 <__gethex+0x126>
 8009952:	4252      	negs	r2, r2
 8009954:	4414      	add	r4, r2
 8009956:	e000      	b.n	800995a <__gethex+0x12c>
 8009958:	4631      	mov	r1, r6
 800995a:	f8ca 1000 	str.w	r1, [sl]
 800995e:	b12d      	cbz	r5, 800996c <__gethex+0x13e>
 8009960:	f1bb 0f00 	cmp.w	fp, #0
 8009964:	bf14      	ite	ne
 8009966:	2000      	movne	r0, #0
 8009968:	2006      	moveq	r0, #6
 800996a:	e17c      	b.n	8009c66 <__gethex+0x438>
 800996c:	1bf3      	subs	r3, r6, r7
 800996e:	3b01      	subs	r3, #1
 8009970:	4629      	mov	r1, r5
 8009972:	2b07      	cmp	r3, #7
 8009974:	dd02      	ble.n	800997c <__gethex+0x14e>
 8009976:	3101      	adds	r1, #1
 8009978:	105b      	asrs	r3, r3, #1
 800997a:	e7fa      	b.n	8009972 <__gethex+0x144>
 800997c:	9802      	ldr	r0, [sp, #8]
 800997e:	f000 facc 	bl	8009f1a <_Balloc>
 8009982:	9b01      	ldr	r3, [sp, #4]
 8009984:	f100 0a14 	add.w	sl, r0, #20
 8009988:	f04f 0900 	mov.w	r9, #0
 800998c:	f1c3 0301 	rsb	r3, r3, #1
 8009990:	4605      	mov	r5, r0
 8009992:	f8cd a010 	str.w	sl, [sp, #16]
 8009996:	46cb      	mov	fp, r9
 8009998:	9308      	str	r3, [sp, #32]
 800999a:	42b7      	cmp	r7, r6
 800999c:	d22f      	bcs.n	80099fe <__gethex+0x1d0>
 800999e:	1e73      	subs	r3, r6, #1
 80099a0:	9305      	str	r3, [sp, #20]
 80099a2:	9a07      	ldr	r2, [sp, #28]
 80099a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00b      	beq.n	80099c4 <__gethex+0x196>
 80099ac:	f1bb 0f20 	cmp.w	fp, #32
 80099b0:	d116      	bne.n	80099e0 <__gethex+0x1b2>
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	f8c3 9000 	str.w	r9, [r3]
 80099b8:	3304      	adds	r3, #4
 80099ba:	f04f 0900 	mov.w	r9, #0
 80099be:	9304      	str	r3, [sp, #16]
 80099c0:	46cb      	mov	fp, r9
 80099c2:	e00d      	b.n	80099e0 <__gethex+0x1b2>
 80099c4:	9b05      	ldr	r3, [sp, #20]
 80099c6:	9a08      	ldr	r2, [sp, #32]
 80099c8:	4413      	add	r3, r2
 80099ca:	429f      	cmp	r7, r3
 80099cc:	d8ee      	bhi.n	80099ac <__gethex+0x17e>
 80099ce:	4618      	mov	r0, r3
 80099d0:	9a01      	ldr	r2, [sp, #4]
 80099d2:	9903      	ldr	r1, [sp, #12]
 80099d4:	9309      	str	r3, [sp, #36]	; 0x24
 80099d6:	f001 f8c2 	bl	800ab5e <strncmp>
 80099da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099dc:	b168      	cbz	r0, 80099fa <__gethex+0x1cc>
 80099de:	e7e5      	b.n	80099ac <__gethex+0x17e>
 80099e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80099e4:	f7ff ff0e 	bl	8009804 <__hexdig_fun>
 80099e8:	f000 000f 	and.w	r0, r0, #15
 80099ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80099f0:	9b05      	ldr	r3, [sp, #20]
 80099f2:	ea49 0900 	orr.w	r9, r9, r0
 80099f6:	f10b 0b04 	add.w	fp, fp, #4
 80099fa:	461e      	mov	r6, r3
 80099fc:	e7cd      	b.n	800999a <__gethex+0x16c>
 80099fe:	9804      	ldr	r0, [sp, #16]
 8009a00:	f840 9b04 	str.w	r9, [r0], #4
 8009a04:	ebca 0000 	rsb	r0, sl, r0
 8009a08:	1080      	asrs	r0, r0, #2
 8009a0a:	6128      	str	r0, [r5, #16]
 8009a0c:	0147      	lsls	r7, r0, #5
 8009a0e:	4648      	mov	r0, r9
 8009a10:	f000 fb48 	bl	800a0a4 <__hi0bits>
 8009a14:	f8d8 6000 	ldr.w	r6, [r8]
 8009a18:	1a38      	subs	r0, r7, r0
 8009a1a:	42b0      	cmp	r0, r6
 8009a1c:	dd26      	ble.n	8009a6c <__gethex+0x23e>
 8009a1e:	1b87      	subs	r7, r0, r6
 8009a20:	4639      	mov	r1, r7
 8009a22:	4628      	mov	r0, r5
 8009a24:	f000 fe47 	bl	800a6b6 <__any_on>
 8009a28:	b1c8      	cbz	r0, 8009a5e <__gethex+0x230>
 8009a2a:	1e7b      	subs	r3, r7, #1
 8009a2c:	1159      	asrs	r1, r3, #5
 8009a2e:	f003 021f 	and.w	r2, r3, #31
 8009a32:	f04f 0901 	mov.w	r9, #1
 8009a36:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a3a:	fa09 f202 	lsl.w	r2, r9, r2
 8009a3e:	420a      	tst	r2, r1
 8009a40:	d00e      	beq.n	8009a60 <__gethex+0x232>
 8009a42:	454b      	cmp	r3, r9
 8009a44:	dc02      	bgt.n	8009a4c <__gethex+0x21e>
 8009a46:	f04f 0902 	mov.w	r9, #2
 8009a4a:	e009      	b.n	8009a60 <__gethex+0x232>
 8009a4c:	1eb9      	subs	r1, r7, #2
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f000 fe31 	bl	800a6b6 <__any_on>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d0f6      	beq.n	8009a46 <__gethex+0x218>
 8009a58:	f04f 0903 	mov.w	r9, #3
 8009a5c:	e000      	b.n	8009a60 <__gethex+0x232>
 8009a5e:	4681      	mov	r9, r0
 8009a60:	4639      	mov	r1, r7
 8009a62:	4628      	mov	r0, r5
 8009a64:	f7ff fe98 	bl	8009798 <rshift>
 8009a68:	443c      	add	r4, r7
 8009a6a:	e00c      	b.n	8009a86 <__gethex+0x258>
 8009a6c:	da09      	bge.n	8009a82 <__gethex+0x254>
 8009a6e:	1a37      	subs	r7, r6, r0
 8009a70:	4629      	mov	r1, r5
 8009a72:	463a      	mov	r2, r7
 8009a74:	9802      	ldr	r0, [sp, #8]
 8009a76:	f000 fc4b 	bl	800a310 <__lshift>
 8009a7a:	1be4      	subs	r4, r4, r7
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	f100 0a14 	add.w	sl, r0, #20
 8009a82:	f04f 0900 	mov.w	r9, #0
 8009a86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a8a:	429c      	cmp	r4, r3
 8009a8c:	dd08      	ble.n	8009aa0 <__gethex+0x272>
 8009a8e:	9802      	ldr	r0, [sp, #8]
 8009a90:	4629      	mov	r1, r5
 8009a92:	f000 fa77 	bl	8009f84 <_Bfree>
 8009a96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a98:	2300      	movs	r3, #0
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	20a3      	movs	r0, #163	; 0xa3
 8009a9e:	e0e2      	b.n	8009c66 <__gethex+0x438>
 8009aa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009aa4:	4284      	cmp	r4, r0
 8009aa6:	da53      	bge.n	8009b50 <__gethex+0x322>
 8009aa8:	1b04      	subs	r4, r0, r4
 8009aaa:	42a6      	cmp	r6, r4
 8009aac:	dc2e      	bgt.n	8009b0c <__gethex+0x2de>
 8009aae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d01a      	beq.n	8009aec <__gethex+0x2be>
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d01c      	beq.n	8009af4 <__gethex+0x2c6>
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d11d      	bne.n	8009afa <__gethex+0x2cc>
 8009abe:	42a6      	cmp	r6, r4
 8009ac0:	d11b      	bne.n	8009afa <__gethex+0x2cc>
 8009ac2:	2e01      	cmp	r6, #1
 8009ac4:	dc0b      	bgt.n	8009ade <__gethex+0x2b0>
 8009ac6:	9a06      	ldr	r2, [sp, #24]
 8009ac8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	2301      	movs	r3, #1
 8009ad0:	612b      	str	r3, [r5, #16]
 8009ad2:	f8ca 3000 	str.w	r3, [sl]
 8009ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ad8:	2062      	movs	r0, #98	; 0x62
 8009ada:	601d      	str	r5, [r3, #0]
 8009adc:	e0c3      	b.n	8009c66 <__gethex+0x438>
 8009ade:	1e71      	subs	r1, r6, #1
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f000 fde8 	bl	800a6b6 <__any_on>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d1ed      	bne.n	8009ac6 <__gethex+0x298>
 8009aea:	e006      	b.n	8009afa <__gethex+0x2cc>
 8009aec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0e9      	beq.n	8009ac6 <__gethex+0x298>
 8009af2:	e002      	b.n	8009afa <__gethex+0x2cc>
 8009af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e5      	bne.n	8009ac6 <__gethex+0x298>
 8009afa:	9802      	ldr	r0, [sp, #8]
 8009afc:	4629      	mov	r1, r5
 8009afe:	f000 fa41 	bl	8009f84 <_Bfree>
 8009b02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b04:	2300      	movs	r3, #0
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	2050      	movs	r0, #80	; 0x50
 8009b0a:	e0ac      	b.n	8009c66 <__gethex+0x438>
 8009b0c:	1e67      	subs	r7, r4, #1
 8009b0e:	f1b9 0f00 	cmp.w	r9, #0
 8009b12:	d106      	bne.n	8009b22 <__gethex+0x2f4>
 8009b14:	b13f      	cbz	r7, 8009b26 <__gethex+0x2f8>
 8009b16:	4639      	mov	r1, r7
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f000 fdcc 	bl	800a6b6 <__any_on>
 8009b1e:	4681      	mov	r9, r0
 8009b20:	e001      	b.n	8009b26 <__gethex+0x2f8>
 8009b22:	f04f 0901 	mov.w	r9, #1
 8009b26:	117a      	asrs	r2, r7, #5
 8009b28:	2301      	movs	r3, #1
 8009b2a:	f007 071f 	and.w	r7, r7, #31
 8009b2e:	fa03 f707 	lsl.w	r7, r3, r7
 8009b32:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 8009b36:	4621      	mov	r1, r4
 8009b38:	421f      	tst	r7, r3
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	bf18      	it	ne
 8009b3e:	f049 0902 	orrne.w	r9, r9, #2
 8009b42:	1b36      	subs	r6, r6, r4
 8009b44:	f7ff fe28 	bl	8009798 <rshift>
 8009b48:	2702      	movs	r7, #2
 8009b4a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009b4e:	e000      	b.n	8009b52 <__gethex+0x324>
 8009b50:	2701      	movs	r7, #1
 8009b52:	f1b9 0f00 	cmp.w	r9, #0
 8009b56:	f000 8081 	beq.w	8009c5c <__gethex+0x42e>
 8009b5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d00e      	beq.n	8009b80 <__gethex+0x352>
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d010      	beq.n	8009b88 <__gethex+0x35a>
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d176      	bne.n	8009c58 <__gethex+0x42a>
 8009b6a:	f019 0f02 	tst.w	r9, #2
 8009b6e:	d073      	beq.n	8009c58 <__gethex+0x42a>
 8009b70:	f8da 0000 	ldr.w	r0, [sl]
 8009b74:	ea49 0900 	orr.w	r9, r9, r0
 8009b78:	f019 0f01 	tst.w	r9, #1
 8009b7c:	d107      	bne.n	8009b8e <__gethex+0x360>
 8009b7e:	e06b      	b.n	8009c58 <__gethex+0x42a>
 8009b80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b82:	f1c3 0301 	rsb	r3, r3, #1
 8009b86:	9315      	str	r3, [sp, #84]	; 0x54
 8009b88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d064      	beq.n	8009c58 <__gethex+0x42a>
 8009b8e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009b92:	f105 0314 	add.w	r3, r5, #20
 8009b96:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8009b9a:	eb03 0109 	add.w	r1, r3, r9
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ba6:	d002      	beq.n	8009bae <__gethex+0x380>
 8009ba8:	3201      	adds	r2, #1
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	e020      	b.n	8009bf0 <__gethex+0x3c2>
 8009bae:	f843 0b04 	str.w	r0, [r3], #4
 8009bb2:	4299      	cmp	r1, r3
 8009bb4:	d8f4      	bhi.n	8009ba0 <__gethex+0x372>
 8009bb6:	68ab      	ldr	r3, [r5, #8]
 8009bb8:	459a      	cmp	sl, r3
 8009bba:	db12      	blt.n	8009be2 <__gethex+0x3b4>
 8009bbc:	6869      	ldr	r1, [r5, #4]
 8009bbe:	9802      	ldr	r0, [sp, #8]
 8009bc0:	3101      	adds	r1, #1
 8009bc2:	f000 f9aa 	bl	8009f1a <_Balloc>
 8009bc6:	692a      	ldr	r2, [r5, #16]
 8009bc8:	3202      	adds	r2, #2
 8009bca:	f105 010c 	add.w	r1, r5, #12
 8009bce:	4683      	mov	fp, r0
 8009bd0:	0092      	lsls	r2, r2, #2
 8009bd2:	300c      	adds	r0, #12
 8009bd4:	f7fa ff3b 	bl	8004a4e <memcpy>
 8009bd8:	4629      	mov	r1, r5
 8009bda:	9802      	ldr	r0, [sp, #8]
 8009bdc:	f000 f9d2 	bl	8009f84 <_Bfree>
 8009be0:	465d      	mov	r5, fp
 8009be2:	692b      	ldr	r3, [r5, #16]
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009bea:	612a      	str	r2, [r5, #16]
 8009bec:	2201      	movs	r2, #1
 8009bee:	615a      	str	r2, [r3, #20]
 8009bf0:	2f02      	cmp	r7, #2
 8009bf2:	f105 0214 	add.w	r2, r5, #20
 8009bf6:	d111      	bne.n	8009c1c <__gethex+0x3ee>
 8009bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	429e      	cmp	r6, r3
 8009c00:	d127      	bne.n	8009c52 <__gethex+0x424>
 8009c02:	1171      	asrs	r1, r6, #5
 8009c04:	2301      	movs	r3, #1
 8009c06:	f006 061f 	and.w	r6, r6, #31
 8009c0a:	fa03 f606 	lsl.w	r6, r3, r6
 8009c0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c12:	421e      	tst	r6, r3
 8009c14:	bf0c      	ite	eq
 8009c16:	2702      	moveq	r7, #2
 8009c18:	2701      	movne	r7, #1
 8009c1a:	e01a      	b.n	8009c52 <__gethex+0x424>
 8009c1c:	692b      	ldr	r3, [r5, #16]
 8009c1e:	459a      	cmp	sl, r3
 8009c20:	da0a      	bge.n	8009c38 <__gethex+0x40a>
 8009c22:	2101      	movs	r1, #1
 8009c24:	4628      	mov	r0, r5
 8009c26:	f7ff fdb7 	bl	8009798 <rshift>
 8009c2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c2e:	3401      	adds	r4, #1
 8009c30:	429c      	cmp	r4, r3
 8009c32:	f73f af2c 	bgt.w	8009a8e <__gethex+0x260>
 8009c36:	e00b      	b.n	8009c50 <__gethex+0x422>
 8009c38:	f016 061f 	ands.w	r6, r6, #31
 8009c3c:	d008      	beq.n	8009c50 <__gethex+0x422>
 8009c3e:	4491      	add	r9, r2
 8009c40:	f1c6 0620 	rsb	r6, r6, #32
 8009c44:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8009c48:	f000 fa2c 	bl	800a0a4 <__hi0bits>
 8009c4c:	42b0      	cmp	r0, r6
 8009c4e:	dbe8      	blt.n	8009c22 <__gethex+0x3f4>
 8009c50:	2701      	movs	r7, #1
 8009c52:	f047 0720 	orr.w	r7, r7, #32
 8009c56:	e001      	b.n	8009c5c <__gethex+0x42e>
 8009c58:	f047 0710 	orr.w	r7, r7, #16
 8009c5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c5e:	601d      	str	r5, [r3, #0]
 8009c60:	9b06      	ldr	r3, [sp, #24]
 8009c62:	4638      	mov	r0, r7
 8009c64:	601c      	str	r4, [r3, #0]
 8009c66:	b00b      	add	sp, #44	; 0x2c
 8009c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c6c <L_shift>:
 8009c6c:	f1c2 0208 	rsb	r2, r2, #8
 8009c70:	0092      	lsls	r2, r2, #2
 8009c72:	b570      	push	{r4, r5, r6, lr}
 8009c74:	f1c2 0620 	rsb	r6, r2, #32
 8009c78:	6843      	ldr	r3, [r0, #4]
 8009c7a:	6805      	ldr	r5, [r0, #0]
 8009c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8009c80:	432c      	orrs	r4, r5
 8009c82:	40d3      	lsrs	r3, r2
 8009c84:	6004      	str	r4, [r0, #0]
 8009c86:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c8a:	4288      	cmp	r0, r1
 8009c8c:	d3f4      	bcc.n	8009c78 <L_shift+0xc>
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}

08009c90 <__match>:
 8009c90:	b530      	push	{r4, r5, lr}
 8009c92:	6803      	ldr	r3, [r0, #0]
 8009c94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c98:	3301      	adds	r3, #1
 8009c9a:	b14c      	cbz	r4, 8009cb0 <__match+0x20>
 8009c9c:	781a      	ldrb	r2, [r3, #0]
 8009c9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009ca2:	2d19      	cmp	r5, #25
 8009ca4:	bf98      	it	ls
 8009ca6:	3220      	addls	r2, #32
 8009ca8:	42a2      	cmp	r2, r4
 8009caa:	d0f3      	beq.n	8009c94 <__match+0x4>
 8009cac:	2000      	movs	r0, #0
 8009cae:	bd30      	pop	{r4, r5, pc}
 8009cb0:	6003      	str	r3, [r0, #0]
 8009cb2:	2001      	movs	r0, #1
 8009cb4:	bd30      	pop	{r4, r5, pc}

08009cb6 <__hexnan>:
 8009cb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cba:	680b      	ldr	r3, [r1, #0]
 8009cbc:	f8d0 b000 	ldr.w	fp, [r0]
 8009cc0:	115e      	asrs	r6, r3, #5
 8009cc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009cc6:	f013 031f 	ands.w	r3, r3, #31
 8009cca:	b085      	sub	sp, #20
 8009ccc:	bf18      	it	ne
 8009cce:	3604      	addne	r6, #4
 8009cd0:	1f35      	subs	r5, r6, #4
 8009cd2:	4617      	mov	r7, r2
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	4682      	mov	sl, r0
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	f846 2c04 	str.w	r2, [r6, #-4]
 8009cde:	46a8      	mov	r8, r5
 8009ce0:	462c      	mov	r4, r5
 8009ce2:	9200      	str	r2, [sp, #0]
 8009ce4:	4691      	mov	r9, r2
 8009ce6:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8009cea:	2900      	cmp	r1, #0
 8009cec:	d03c      	beq.n	8009d68 <__hexnan+0xb2>
 8009cee:	4608      	mov	r0, r1
 8009cf0:	9203      	str	r2, [sp, #12]
 8009cf2:	9102      	str	r1, [sp, #8]
 8009cf4:	f7ff fd86 	bl	8009804 <__hexdig_fun>
 8009cf8:	9a03      	ldr	r2, [sp, #12]
 8009cfa:	bb00      	cbnz	r0, 8009d3e <__hexnan+0x88>
 8009cfc:	9902      	ldr	r1, [sp, #8]
 8009cfe:	2920      	cmp	r1, #32
 8009d00:	d816      	bhi.n	8009d30 <__hexnan+0x7a>
 8009d02:	9b00      	ldr	r3, [sp, #0]
 8009d04:	4599      	cmp	r9, r3
 8009d06:	ddee      	ble.n	8009ce6 <__hexnan+0x30>
 8009d08:	4544      	cmp	r4, r8
 8009d0a:	d205      	bcs.n	8009d18 <__hexnan+0x62>
 8009d0c:	2a07      	cmp	r2, #7
 8009d0e:	dc03      	bgt.n	8009d18 <__hexnan+0x62>
 8009d10:	4641      	mov	r1, r8
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff ffaa 	bl	8009c6c <L_shift>
 8009d18:	42bc      	cmp	r4, r7
 8009d1a:	d923      	bls.n	8009d64 <__hexnan+0xae>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f1a4 0804 	sub.w	r8, r4, #4
 8009d22:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d26:	f8cd 9000 	str.w	r9, [sp]
 8009d2a:	4644      	mov	r4, r8
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	e7da      	b.n	8009ce6 <__hexnan+0x30>
 8009d30:	2929      	cmp	r1, #41	; 0x29
 8009d32:	d148      	bne.n	8009dc6 <__hexnan+0x110>
 8009d34:	f10b 0301 	add.w	r3, fp, #1
 8009d38:	f8ca 3000 	str.w	r3, [sl]
 8009d3c:	e014      	b.n	8009d68 <__hexnan+0xb2>
 8009d3e:	3201      	adds	r2, #1
 8009d40:	2a08      	cmp	r2, #8
 8009d42:	f109 0901 	add.w	r9, r9, #1
 8009d46:	dd06      	ble.n	8009d56 <__hexnan+0xa0>
 8009d48:	42bc      	cmp	r4, r7
 8009d4a:	d9cc      	bls.n	8009ce6 <__hexnan+0x30>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	3c04      	subs	r4, #4
 8009d56:	6821      	ldr	r1, [r4, #0]
 8009d58:	f000 000f 	and.w	r0, r0, #15
 8009d5c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8009d60:	6020      	str	r0, [r4, #0]
 8009d62:	e7c0      	b.n	8009ce6 <__hexnan+0x30>
 8009d64:	2208      	movs	r2, #8
 8009d66:	e7be      	b.n	8009ce6 <__hexnan+0x30>
 8009d68:	f1b9 0f00 	cmp.w	r9, #0
 8009d6c:	d02b      	beq.n	8009dc6 <__hexnan+0x110>
 8009d6e:	4544      	cmp	r4, r8
 8009d70:	d205      	bcs.n	8009d7e <__hexnan+0xc8>
 8009d72:	2a07      	cmp	r2, #7
 8009d74:	dc03      	bgt.n	8009d7e <__hexnan+0xc8>
 8009d76:	4641      	mov	r1, r8
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f7ff ff77 	bl	8009c6c <L_shift>
 8009d7e:	42bc      	cmp	r4, r7
 8009d80:	d90c      	bls.n	8009d9c <__hexnan+0xe6>
 8009d82:	463b      	mov	r3, r7
 8009d84:	f854 2b04 	ldr.w	r2, [r4], #4
 8009d88:	f843 2b04 	str.w	r2, [r3], #4
 8009d8c:	42a5      	cmp	r5, r4
 8009d8e:	d2f9      	bcs.n	8009d84 <__hexnan+0xce>
 8009d90:	2200      	movs	r2, #0
 8009d92:	f843 2b04 	str.w	r2, [r3], #4
 8009d96:	429d      	cmp	r5, r3
 8009d98:	d2fb      	bcs.n	8009d92 <__hexnan+0xdc>
 8009d9a:	e00b      	b.n	8009db4 <__hexnan+0xfe>
 8009d9c:	9b01      	ldr	r3, [sp, #4]
 8009d9e:	b14b      	cbz	r3, 8009db4 <__hexnan+0xfe>
 8009da0:	f1c3 0220 	rsb	r2, r3, #32
 8009da4:	f04f 33ff 	mov.w	r3, #4294967295
 8009da8:	40d3      	lsrs	r3, r2
 8009daa:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009dae:	4013      	ands	r3, r2
 8009db0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	b943      	cbnz	r3, 8009dca <__hexnan+0x114>
 8009db8:	42bd      	cmp	r5, r7
 8009dba:	d102      	bne.n	8009dc2 <__hexnan+0x10c>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	602b      	str	r3, [r5, #0]
 8009dc0:	e003      	b.n	8009dca <__hexnan+0x114>
 8009dc2:	3d04      	subs	r5, #4
 8009dc4:	e7f6      	b.n	8009db4 <__hexnan+0xfe>
 8009dc6:	2004      	movs	r0, #4
 8009dc8:	e000      	b.n	8009dcc <__hexnan+0x116>
 8009dca:	2005      	movs	r0, #5
 8009dcc:	b005      	add	sp, #20
 8009dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009dd4 <_gettimeofday_r>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4c07      	ldr	r4, [pc, #28]	; (8009df4 <_gettimeofday_r+0x20>)
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4605      	mov	r5, r0
 8009ddc:	4608      	mov	r0, r1
 8009dde:	4611      	mov	r1, r2
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	f002 fbfd 	bl	800c5e0 <_gettimeofday>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	d102      	bne.n	8009df0 <_gettimeofday_r+0x1c>
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	b103      	cbz	r3, 8009df0 <_gettimeofday_r+0x1c>
 8009dee:	602b      	str	r3, [r5, #0]
 8009df0:	bd38      	pop	{r3, r4, r5, pc}
 8009df2:	bf00      	nop
 8009df4:	2000076c 	.word	0x2000076c

08009df8 <__locale_charset>:
 8009df8:	4800      	ldr	r0, [pc, #0]	; (8009dfc <__locale_charset+0x4>)
 8009dfa:	4770      	bx	lr
 8009dfc:	2000056c 	.word	0x2000056c

08009e00 <__locale_mb_cur_max>:
 8009e00:	4b01      	ldr	r3, [pc, #4]	; (8009e08 <__locale_mb_cur_max+0x8>)
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	2000058c 	.word	0x2000058c

08009e0c <_localeconv_r>:
 8009e0c:	4800      	ldr	r0, [pc, #0]	; (8009e10 <_localeconv_r+0x4>)
 8009e0e:	4770      	bx	lr
 8009e10:	20000534 	.word	0x20000534

08009e14 <__swhatbuf_r>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	460e      	mov	r6, r1
 8009e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1c:	2900      	cmp	r1, #0
 8009e1e:	b090      	sub	sp, #64	; 0x40
 8009e20:	4614      	mov	r4, r2
 8009e22:	461d      	mov	r5, r3
 8009e24:	da0a      	bge.n	8009e3c <__swhatbuf_r+0x28>
 8009e26:	89b3      	ldrh	r3, [r6, #12]
 8009e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	b298      	uxth	r0, r3
 8009e30:	602a      	str	r2, [r5, #0]
 8009e32:	b1b0      	cbz	r0, 8009e62 <__swhatbuf_r+0x4e>
 8009e34:	2340      	movs	r3, #64	; 0x40
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	4610      	mov	r0, r2
 8009e3a:	e015      	b.n	8009e68 <__swhatbuf_r+0x54>
 8009e3c:	aa01      	add	r2, sp, #4
 8009e3e:	f001 f855 	bl	800aeec <_fstat_r>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	dbef      	blt.n	8009e26 <__swhatbuf_r+0x12>
 8009e46:	9a02      	ldr	r2, [sp, #8]
 8009e48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e50:	425a      	negs	r2, r3
 8009e52:	415a      	adcs	r2, r3
 8009e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e58:	602a      	str	r2, [r5, #0]
 8009e5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009e5e:	6023      	str	r3, [r4, #0]
 8009e60:	e002      	b.n	8009e68 <__swhatbuf_r+0x54>
 8009e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	b010      	add	sp, #64	; 0x40
 8009e6a:	bd70      	pop	{r4, r5, r6, pc}

08009e6c <__smakebuf_r>:
 8009e6c:	898b      	ldrh	r3, [r1, #12]
 8009e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e70:	079e      	lsls	r6, r3, #30
 8009e72:	4605      	mov	r5, r0
 8009e74:	460c      	mov	r4, r1
 8009e76:	d410      	bmi.n	8009e9a <__smakebuf_r+0x2e>
 8009e78:	ab01      	add	r3, sp, #4
 8009e7a:	466a      	mov	r2, sp
 8009e7c:	f7ff ffca 	bl	8009e14 <__swhatbuf_r>
 8009e80:	9900      	ldr	r1, [sp, #0]
 8009e82:	4606      	mov	r6, r0
 8009e84:	4628      	mov	r0, r5
 8009e86:	f7fa fbb3 	bl	80045f0 <_malloc_r>
 8009e8a:	b968      	cbnz	r0, 8009ea8 <__smakebuf_r+0x3c>
 8009e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e90:	059a      	lsls	r2, r3, #22
 8009e92:	d422      	bmi.n	8009eda <__smakebuf_r+0x6e>
 8009e94:	f043 0302 	orr.w	r3, r3, #2
 8009e98:	81a3      	strh	r3, [r4, #12]
 8009e9a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e9e:	6023      	str	r3, [r4, #0]
 8009ea0:	6123      	str	r3, [r4, #16]
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	6163      	str	r3, [r4, #20]
 8009ea6:	e018      	b.n	8009eda <__smakebuf_r+0x6e>
 8009ea8:	4b0d      	ldr	r3, [pc, #52]	; (8009ee0 <__smakebuf_r+0x74>)
 8009eaa:	62ab      	str	r3, [r5, #40]	; 0x28
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	6020      	str	r0, [r4, #0]
 8009eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb4:	81a3      	strh	r3, [r4, #12]
 8009eb6:	9b00      	ldr	r3, [sp, #0]
 8009eb8:	6163      	str	r3, [r4, #20]
 8009eba:	9b01      	ldr	r3, [sp, #4]
 8009ebc:	6120      	str	r0, [r4, #16]
 8009ebe:	b14b      	cbz	r3, 8009ed4 <__smakebuf_r+0x68>
 8009ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	f001 f823 	bl	800af10 <_isatty_r>
 8009eca:	b118      	cbz	r0, 8009ed4 <__smakebuf_r+0x68>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f043 0301 	orr.w	r3, r3, #1
 8009ed2:	81a3      	strh	r3, [r4, #12]
 8009ed4:	89a0      	ldrh	r0, [r4, #12]
 8009ed6:	4330      	orrs	r0, r6
 8009ed8:	81a0      	strh	r0, [r4, #12]
 8009eda:	b002      	add	sp, #8
 8009edc:	bd70      	pop	{r4, r5, r6, pc}
 8009ede:	bf00      	nop
 8009ee0:	0800909d 	.word	0x0800909d

08009ee4 <memmove>:
 8009ee4:	4288      	cmp	r0, r1
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	eb01 0302 	add.w	r3, r1, r2
 8009eec:	d801      	bhi.n	8009ef2 <memmove+0xe>
 8009eee:	1e42      	subs	r2, r0, #1
 8009ef0:	e00b      	b.n	8009f0a <memmove+0x26>
 8009ef2:	4298      	cmp	r0, r3
 8009ef4:	d2fb      	bcs.n	8009eee <memmove+0xa>
 8009ef6:	1881      	adds	r1, r0, r2
 8009ef8:	1ad2      	subs	r2, r2, r3
 8009efa:	42d3      	cmn	r3, r2
 8009efc:	d004      	beq.n	8009f08 <memmove+0x24>
 8009efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009f06:	e7f8      	b.n	8009efa <memmove+0x16>
 8009f08:	bd10      	pop	{r4, pc}
 8009f0a:	4299      	cmp	r1, r3
 8009f0c:	d004      	beq.n	8009f18 <memmove+0x34>
 8009f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f12:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009f16:	e7f8      	b.n	8009f0a <memmove+0x26>
 8009f18:	bd10      	pop	{r4, pc}

08009f1a <_Balloc>:
 8009f1a:	b570      	push	{r4, r5, r6, lr}
 8009f1c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f1e:	4604      	mov	r4, r0
 8009f20:	460e      	mov	r6, r1
 8009f22:	b93d      	cbnz	r5, 8009f34 <_Balloc+0x1a>
 8009f24:	2010      	movs	r0, #16
 8009f26:	f7fa fb53 	bl	80045d0 <malloc>
 8009f2a:	6260      	str	r0, [r4, #36]	; 0x24
 8009f2c:	6045      	str	r5, [r0, #4]
 8009f2e:	6085      	str	r5, [r0, #8]
 8009f30:	6005      	str	r5, [r0, #0]
 8009f32:	60c5      	str	r5, [r0, #12]
 8009f34:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009f36:	68eb      	ldr	r3, [r5, #12]
 8009f38:	b143      	cbz	r3, 8009f4c <_Balloc+0x32>
 8009f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009f42:	b178      	cbz	r0, 8009f64 <_Balloc+0x4a>
 8009f44:	6802      	ldr	r2, [r0, #0]
 8009f46:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009f4a:	e017      	b.n	8009f7c <_Balloc+0x62>
 8009f4c:	2221      	movs	r2, #33	; 0x21
 8009f4e:	2104      	movs	r1, #4
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 ff3b 	bl	800adcc <_calloc_r>
 8009f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f58:	60e8      	str	r0, [r5, #12]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1ec      	bne.n	8009f3a <_Balloc+0x20>
 8009f60:	2000      	movs	r0, #0
 8009f62:	bd70      	pop	{r4, r5, r6, pc}
 8009f64:	2101      	movs	r1, #1
 8009f66:	fa01 f506 	lsl.w	r5, r1, r6
 8009f6a:	1d6a      	adds	r2, r5, #5
 8009f6c:	0092      	lsls	r2, r2, #2
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 ff2c 	bl	800adcc <_calloc_r>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d0f3      	beq.n	8009f60 <_Balloc+0x46>
 8009f78:	6046      	str	r6, [r0, #4]
 8009f7a:	6085      	str	r5, [r0, #8]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	6103      	str	r3, [r0, #16]
 8009f80:	60c3      	str	r3, [r0, #12]
 8009f82:	bd70      	pop	{r4, r5, r6, pc}

08009f84 <_Bfree>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f88:	4606      	mov	r6, r0
 8009f8a:	460d      	mov	r5, r1
 8009f8c:	b93c      	cbnz	r4, 8009f9e <_Bfree+0x1a>
 8009f8e:	2010      	movs	r0, #16
 8009f90:	f7fa fb1e 	bl	80045d0 <malloc>
 8009f94:	6270      	str	r0, [r6, #36]	; 0x24
 8009f96:	6044      	str	r4, [r0, #4]
 8009f98:	6084      	str	r4, [r0, #8]
 8009f9a:	6004      	str	r4, [r0, #0]
 8009f9c:	60c4      	str	r4, [r0, #12]
 8009f9e:	b13d      	cbz	r5, 8009fb0 <_Bfree+0x2c>
 8009fa0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009fa2:	686a      	ldr	r2, [r5, #4]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009faa:	6029      	str	r1, [r5, #0]
 8009fac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009fb0:	bd70      	pop	{r4, r5, r6, pc}

08009fb2 <__multadd>:
 8009fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb6:	690d      	ldr	r5, [r1, #16]
 8009fb8:	461f      	mov	r7, r3
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	f101 0e14 	add.w	lr, r1, #20
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f8de 0000 	ldr.w	r0, [lr]
 8009fc8:	b281      	uxth	r1, r0
 8009fca:	fb02 7101 	mla	r1, r2, r1, r7
 8009fce:	0c0f      	lsrs	r7, r1, #16
 8009fd0:	0c00      	lsrs	r0, r0, #16
 8009fd2:	fb02 7000 	mla	r0, r2, r0, r7
 8009fd6:	b289      	uxth	r1, r1
 8009fd8:	3301      	adds	r3, #1
 8009fda:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009fde:	429d      	cmp	r5, r3
 8009fe0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009fe4:	f84e 1b04 	str.w	r1, [lr], #4
 8009fe8:	dcec      	bgt.n	8009fc4 <__multadd+0x12>
 8009fea:	b1d7      	cbz	r7, 800a022 <__multadd+0x70>
 8009fec:	68a3      	ldr	r3, [r4, #8]
 8009fee:	429d      	cmp	r5, r3
 8009ff0:	db12      	blt.n	800a018 <__multadd+0x66>
 8009ff2:	6861      	ldr	r1, [r4, #4]
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	3101      	adds	r1, #1
 8009ff8:	f7ff ff8f 	bl	8009f1a <_Balloc>
 8009ffc:	6922      	ldr	r2, [r4, #16]
 8009ffe:	3202      	adds	r2, #2
 800a000:	f104 010c 	add.w	r1, r4, #12
 800a004:	4680      	mov	r8, r0
 800a006:	0092      	lsls	r2, r2, #2
 800a008:	300c      	adds	r0, #12
 800a00a:	f7fa fd20 	bl	8004a4e <memcpy>
 800a00e:	4621      	mov	r1, r4
 800a010:	4630      	mov	r0, r6
 800a012:	f7ff ffb7 	bl	8009f84 <_Bfree>
 800a016:	4644      	mov	r4, r8
 800a018:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a01c:	3501      	adds	r5, #1
 800a01e:	615f      	str	r7, [r3, #20]
 800a020:	6125      	str	r5, [r4, #16]
 800a022:	4620      	mov	r0, r4
 800a024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a028 <__s2b>:
 800a028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a02c:	460c      	mov	r4, r1
 800a02e:	4615      	mov	r5, r2
 800a030:	461f      	mov	r7, r3
 800a032:	2209      	movs	r2, #9
 800a034:	3308      	adds	r3, #8
 800a036:	4606      	mov	r6, r0
 800a038:	fb93 f3f2 	sdiv	r3, r3, r2
 800a03c:	2100      	movs	r1, #0
 800a03e:	2201      	movs	r2, #1
 800a040:	429a      	cmp	r2, r3
 800a042:	da02      	bge.n	800a04a <__s2b+0x22>
 800a044:	0052      	lsls	r2, r2, #1
 800a046:	3101      	adds	r1, #1
 800a048:	e7fa      	b.n	800a040 <__s2b+0x18>
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7ff ff65 	bl	8009f1a <_Balloc>
 800a050:	9b08      	ldr	r3, [sp, #32]
 800a052:	6143      	str	r3, [r0, #20]
 800a054:	2d09      	cmp	r5, #9
 800a056:	f04f 0301 	mov.w	r3, #1
 800a05a:	6103      	str	r3, [r0, #16]
 800a05c:	dd11      	ble.n	800a082 <__s2b+0x5a>
 800a05e:	f104 0809 	add.w	r8, r4, #9
 800a062:	46c1      	mov	r9, r8
 800a064:	442c      	add	r4, r5
 800a066:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a06a:	4601      	mov	r1, r0
 800a06c:	3b30      	subs	r3, #48	; 0x30
 800a06e:	220a      	movs	r2, #10
 800a070:	4630      	mov	r0, r6
 800a072:	f7ff ff9e 	bl	8009fb2 <__multadd>
 800a076:	45a1      	cmp	r9, r4
 800a078:	d1f5      	bne.n	800a066 <__s2b+0x3e>
 800a07a:	eb08 0405 	add.w	r4, r8, r5
 800a07e:	3c08      	subs	r4, #8
 800a080:	e001      	b.n	800a086 <__s2b+0x5e>
 800a082:	340a      	adds	r4, #10
 800a084:	2509      	movs	r5, #9
 800a086:	1b2d      	subs	r5, r5, r4
 800a088:	1963      	adds	r3, r4, r5
 800a08a:	429f      	cmp	r7, r3
 800a08c:	dd08      	ble.n	800a0a0 <__s2b+0x78>
 800a08e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a092:	4601      	mov	r1, r0
 800a094:	3b30      	subs	r3, #48	; 0x30
 800a096:	220a      	movs	r2, #10
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff ff8a 	bl	8009fb2 <__multadd>
 800a09e:	e7f3      	b.n	800a088 <__s2b+0x60>
 800a0a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a0a4 <__hi0bits>:
 800a0a4:	0c03      	lsrs	r3, r0, #16
 800a0a6:	041b      	lsls	r3, r3, #16
 800a0a8:	b913      	cbnz	r3, 800a0b0 <__hi0bits+0xc>
 800a0aa:	0400      	lsls	r0, r0, #16
 800a0ac:	2310      	movs	r3, #16
 800a0ae:	e000      	b.n	800a0b2 <__hi0bits+0xe>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a0b6:	bf04      	itt	eq
 800a0b8:	0200      	lsleq	r0, r0, #8
 800a0ba:	3308      	addeq	r3, #8
 800a0bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a0c0:	bf04      	itt	eq
 800a0c2:	0100      	lsleq	r0, r0, #4
 800a0c4:	3304      	addeq	r3, #4
 800a0c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a0ca:	bf04      	itt	eq
 800a0cc:	0080      	lsleq	r0, r0, #2
 800a0ce:	3302      	addeq	r3, #2
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	db03      	blt.n	800a0dc <__hi0bits+0x38>
 800a0d4:	0042      	lsls	r2, r0, #1
 800a0d6:	d503      	bpl.n	800a0e0 <__hi0bits+0x3c>
 800a0d8:	1c58      	adds	r0, r3, #1
 800a0da:	4770      	bx	lr
 800a0dc:	4618      	mov	r0, r3
 800a0de:	4770      	bx	lr
 800a0e0:	2020      	movs	r0, #32
 800a0e2:	4770      	bx	lr

0800a0e4 <__lo0bits>:
 800a0e4:	6803      	ldr	r3, [r0, #0]
 800a0e6:	f013 0207 	ands.w	r2, r3, #7
 800a0ea:	d00b      	beq.n	800a104 <__lo0bits+0x20>
 800a0ec:	07d9      	lsls	r1, r3, #31
 800a0ee:	d422      	bmi.n	800a136 <__lo0bits+0x52>
 800a0f0:	079a      	lsls	r2, r3, #30
 800a0f2:	bf4b      	itete	mi
 800a0f4:	085b      	lsrmi	r3, r3, #1
 800a0f6:	089b      	lsrpl	r3, r3, #2
 800a0f8:	6003      	strmi	r3, [r0, #0]
 800a0fa:	6003      	strpl	r3, [r0, #0]
 800a0fc:	bf4c      	ite	mi
 800a0fe:	2001      	movmi	r0, #1
 800a100:	2002      	movpl	r0, #2
 800a102:	4770      	bx	lr
 800a104:	b299      	uxth	r1, r3
 800a106:	b909      	cbnz	r1, 800a10c <__lo0bits+0x28>
 800a108:	0c1b      	lsrs	r3, r3, #16
 800a10a:	2210      	movs	r2, #16
 800a10c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a110:	bf04      	itt	eq
 800a112:	0a1b      	lsreq	r3, r3, #8
 800a114:	3208      	addeq	r2, #8
 800a116:	0719      	lsls	r1, r3, #28
 800a118:	bf04      	itt	eq
 800a11a:	091b      	lsreq	r3, r3, #4
 800a11c:	3204      	addeq	r2, #4
 800a11e:	0799      	lsls	r1, r3, #30
 800a120:	bf04      	itt	eq
 800a122:	089b      	lsreq	r3, r3, #2
 800a124:	3202      	addeq	r2, #2
 800a126:	07d9      	lsls	r1, r3, #31
 800a128:	d402      	bmi.n	800a130 <__lo0bits+0x4c>
 800a12a:	085b      	lsrs	r3, r3, #1
 800a12c:	d005      	beq.n	800a13a <__lo0bits+0x56>
 800a12e:	3201      	adds	r2, #1
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	4610      	mov	r0, r2
 800a134:	4770      	bx	lr
 800a136:	2000      	movs	r0, #0
 800a138:	4770      	bx	lr
 800a13a:	2020      	movs	r0, #32
 800a13c:	4770      	bx	lr

0800a13e <__i2b>:
 800a13e:	b510      	push	{r4, lr}
 800a140:	460c      	mov	r4, r1
 800a142:	2101      	movs	r1, #1
 800a144:	f7ff fee9 	bl	8009f1a <_Balloc>
 800a148:	2201      	movs	r2, #1
 800a14a:	6144      	str	r4, [r0, #20]
 800a14c:	6102      	str	r2, [r0, #16]
 800a14e:	bd10      	pop	{r4, pc}

0800a150 <__multiply>:
 800a150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	4614      	mov	r4, r2
 800a156:	690a      	ldr	r2, [r1, #16]
 800a158:	6923      	ldr	r3, [r4, #16]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	bfb8      	it	lt
 800a15e:	460b      	movlt	r3, r1
 800a160:	4688      	mov	r8, r1
 800a162:	bfbc      	itt	lt
 800a164:	46a0      	movlt	r8, r4
 800a166:	461c      	movlt	r4, r3
 800a168:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a16c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a170:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a174:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a178:	eb07 0609 	add.w	r6, r7, r9
 800a17c:	429e      	cmp	r6, r3
 800a17e:	bfc8      	it	gt
 800a180:	3101      	addgt	r1, #1
 800a182:	f7ff feca 	bl	8009f1a <_Balloc>
 800a186:	f100 0514 	add.w	r5, r0, #20
 800a18a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800a18e:	462b      	mov	r3, r5
 800a190:	2200      	movs	r2, #0
 800a192:	4563      	cmp	r3, ip
 800a194:	d202      	bcs.n	800a19c <__multiply+0x4c>
 800a196:	f843 2b04 	str.w	r2, [r3], #4
 800a19a:	e7fa      	b.n	800a192 <__multiply+0x42>
 800a19c:	f104 0214 	add.w	r2, r4, #20
 800a1a0:	f108 0114 	add.w	r1, r8, #20
 800a1a4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a1a8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	9b00      	ldr	r3, [sp, #0]
 800a1b0:	9201      	str	r2, [sp, #4]
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d957      	bls.n	800a266 <__multiply+0x116>
 800a1b6:	f8b2 b000 	ldrh.w	fp, [r2]
 800a1ba:	f1bb 0f00 	cmp.w	fp, #0
 800a1be:	d023      	beq.n	800a208 <__multiply+0xb8>
 800a1c0:	4689      	mov	r9, r1
 800a1c2:	46ae      	mov	lr, r5
 800a1c4:	f04f 0800 	mov.w	r8, #0
 800a1c8:	f859 4b04 	ldr.w	r4, [r9], #4
 800a1cc:	f8be a000 	ldrh.w	sl, [lr]
 800a1d0:	b2a3      	uxth	r3, r4
 800a1d2:	fb0b a303 	mla	r3, fp, r3, sl
 800a1d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a1da:	f8de 4000 	ldr.w	r4, [lr]
 800a1de:	4443      	add	r3, r8
 800a1e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a1e4:	fb0b 840a 	mla	r4, fp, sl, r8
 800a1e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a1ec:	46f2      	mov	sl, lr
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a1f4:	454f      	cmp	r7, r9
 800a1f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a1fa:	f84a 3b04 	str.w	r3, [sl], #4
 800a1fe:	d901      	bls.n	800a204 <__multiply+0xb4>
 800a200:	46d6      	mov	lr, sl
 800a202:	e7e1      	b.n	800a1c8 <__multiply+0x78>
 800a204:	f8ce 8004 	str.w	r8, [lr, #4]
 800a208:	9b01      	ldr	r3, [sp, #4]
 800a20a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a20e:	3204      	adds	r2, #4
 800a210:	f1ba 0f00 	cmp.w	sl, #0
 800a214:	d021      	beq.n	800a25a <__multiply+0x10a>
 800a216:	682b      	ldr	r3, [r5, #0]
 800a218:	462c      	mov	r4, r5
 800a21a:	4689      	mov	r9, r1
 800a21c:	f04f 0800 	mov.w	r8, #0
 800a220:	f8b9 e000 	ldrh.w	lr, [r9]
 800a224:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800a228:	fb0a be0e 	mla	lr, sl, lr, fp
 800a22c:	44f0      	add	r8, lr
 800a22e:	46a3      	mov	fp, r4
 800a230:	b29b      	uxth	r3, r3
 800a232:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a236:	f84b 3b04 	str.w	r3, [fp], #4
 800a23a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a23e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800a242:	0c1b      	lsrs	r3, r3, #16
 800a244:	fb0a e303 	mla	r3, sl, r3, lr
 800a248:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800a24c:	454f      	cmp	r7, r9
 800a24e:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800a252:	d901      	bls.n	800a258 <__multiply+0x108>
 800a254:	465c      	mov	r4, fp
 800a256:	e7e3      	b.n	800a220 <__multiply+0xd0>
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	3504      	adds	r5, #4
 800a25c:	e7a7      	b.n	800a1ae <__multiply+0x5e>
 800a25e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800a262:	b913      	cbnz	r3, 800a26a <__multiply+0x11a>
 800a264:	3e01      	subs	r6, #1
 800a266:	2e00      	cmp	r6, #0
 800a268:	dcf9      	bgt.n	800a25e <__multiply+0x10e>
 800a26a:	6106      	str	r6, [r0, #16]
 800a26c:	b003      	add	sp, #12
 800a26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a274 <__pow5mult>:
 800a274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a278:	4615      	mov	r5, r2
 800a27a:	f012 0203 	ands.w	r2, r2, #3
 800a27e:	4606      	mov	r6, r0
 800a280:	460f      	mov	r7, r1
 800a282:	d007      	beq.n	800a294 <__pow5mult+0x20>
 800a284:	3a01      	subs	r2, #1
 800a286:	4c21      	ldr	r4, [pc, #132]	; (800a30c <__pow5mult+0x98>)
 800a288:	2300      	movs	r3, #0
 800a28a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a28e:	f7ff fe90 	bl	8009fb2 <__multadd>
 800a292:	4607      	mov	r7, r0
 800a294:	10ad      	asrs	r5, r5, #2
 800a296:	d036      	beq.n	800a306 <__pow5mult+0x92>
 800a298:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a29a:	b93c      	cbnz	r4, 800a2ac <__pow5mult+0x38>
 800a29c:	2010      	movs	r0, #16
 800a29e:	f7fa f997 	bl	80045d0 <malloc>
 800a2a2:	6270      	str	r0, [r6, #36]	; 0x24
 800a2a4:	6044      	str	r4, [r0, #4]
 800a2a6:	6084      	str	r4, [r0, #8]
 800a2a8:	6004      	str	r4, [r0, #0]
 800a2aa:	60c4      	str	r4, [r0, #12]
 800a2ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2b4:	b94c      	cbnz	r4, 800a2ca <__pow5mult+0x56>
 800a2b6:	f240 2171 	movw	r1, #625	; 0x271
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ff3f 	bl	800a13e <__i2b>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	6003      	str	r3, [r0, #0]
 800a2ca:	f04f 0800 	mov.w	r8, #0
 800a2ce:	07eb      	lsls	r3, r5, #31
 800a2d0:	d50a      	bpl.n	800a2e8 <__pow5mult+0x74>
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff ff3a 	bl	800a150 <__multiply>
 800a2dc:	4639      	mov	r1, r7
 800a2de:	4681      	mov	r9, r0
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	f7ff fe4f 	bl	8009f84 <_Bfree>
 800a2e6:	464f      	mov	r7, r9
 800a2e8:	106d      	asrs	r5, r5, #1
 800a2ea:	d00c      	beq.n	800a306 <__pow5mult+0x92>
 800a2ec:	6820      	ldr	r0, [r4, #0]
 800a2ee:	b108      	cbz	r0, 800a2f4 <__pow5mult+0x80>
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	e7ec      	b.n	800a2ce <__pow5mult+0x5a>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7ff ff29 	bl	800a150 <__multiply>
 800a2fe:	6020      	str	r0, [r4, #0]
 800a300:	f8c0 8000 	str.w	r8, [r0]
 800a304:	e7f4      	b.n	800a2f0 <__pow5mult+0x7c>
 800a306:	4638      	mov	r0, r7
 800a308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a30c:	0800cee0 	.word	0x0800cee0

0800a310 <__lshift>:
 800a310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a314:	460c      	mov	r4, r1
 800a316:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a31a:	6926      	ldr	r6, [r4, #16]
 800a31c:	6849      	ldr	r1, [r1, #4]
 800a31e:	68a3      	ldr	r3, [r4, #8]
 800a320:	4456      	add	r6, sl
 800a322:	4607      	mov	r7, r0
 800a324:	4691      	mov	r9, r2
 800a326:	1c75      	adds	r5, r6, #1
 800a328:	42ab      	cmp	r3, r5
 800a32a:	da02      	bge.n	800a332 <__lshift+0x22>
 800a32c:	3101      	adds	r1, #1
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	e7fa      	b.n	800a328 <__lshift+0x18>
 800a332:	4638      	mov	r0, r7
 800a334:	f7ff fdf1 	bl	8009f1a <_Balloc>
 800a338:	2300      	movs	r3, #0
 800a33a:	4680      	mov	r8, r0
 800a33c:	f100 0114 	add.w	r1, r0, #20
 800a340:	461a      	mov	r2, r3
 800a342:	4553      	cmp	r3, sl
 800a344:	da03      	bge.n	800a34e <__lshift+0x3e>
 800a346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a34a:	3301      	adds	r3, #1
 800a34c:	e7f9      	b.n	800a342 <__lshift+0x32>
 800a34e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800a352:	6920      	ldr	r0, [r4, #16]
 800a354:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a358:	f019 091f 	ands.w	r9, r9, #31
 800a35c:	f104 0114 	add.w	r1, r4, #20
 800a360:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800a364:	d014      	beq.n	800a390 <__lshift+0x80>
 800a366:	f1c9 0c20 	rsb	ip, r9, #32
 800a36a:	2200      	movs	r2, #0
 800a36c:	6808      	ldr	r0, [r1, #0]
 800a36e:	fa00 f009 	lsl.w	r0, r0, r9
 800a372:	4302      	orrs	r2, r0
 800a374:	469a      	mov	sl, r3
 800a376:	f843 2b04 	str.w	r2, [r3], #4
 800a37a:	f851 2b04 	ldr.w	r2, [r1], #4
 800a37e:	458e      	cmp	lr, r1
 800a380:	fa22 f20c 	lsr.w	r2, r2, ip
 800a384:	d8f2      	bhi.n	800a36c <__lshift+0x5c>
 800a386:	f8ca 2004 	str.w	r2, [sl, #4]
 800a38a:	b142      	cbz	r2, 800a39e <__lshift+0x8e>
 800a38c:	1cb5      	adds	r5, r6, #2
 800a38e:	e006      	b.n	800a39e <__lshift+0x8e>
 800a390:	3b04      	subs	r3, #4
 800a392:	f851 2b04 	ldr.w	r2, [r1], #4
 800a396:	f843 2f04 	str.w	r2, [r3, #4]!
 800a39a:	458e      	cmp	lr, r1
 800a39c:	d8f9      	bhi.n	800a392 <__lshift+0x82>
 800a39e:	3d01      	subs	r5, #1
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	f8c8 5010 	str.w	r5, [r8, #16]
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	f7ff fdec 	bl	8009f84 <_Bfree>
 800a3ac:	4640      	mov	r0, r8
 800a3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a3b2 <__mcmp>:
 800a3b2:	6903      	ldr	r3, [r0, #16]
 800a3b4:	690a      	ldr	r2, [r1, #16]
 800a3b6:	1a9b      	subs	r3, r3, r2
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	d111      	bne.n	800a3e0 <__mcmp+0x2e>
 800a3bc:	0092      	lsls	r2, r2, #2
 800a3be:	3014      	adds	r0, #20
 800a3c0:	3114      	adds	r1, #20
 800a3c2:	1883      	adds	r3, r0, r2
 800a3c4:	440a      	add	r2, r1
 800a3c6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800a3ca:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a3ce:	428c      	cmp	r4, r1
 800a3d0:	d002      	beq.n	800a3d8 <__mcmp+0x26>
 800a3d2:	d307      	bcc.n	800a3e4 <__mcmp+0x32>
 800a3d4:	2001      	movs	r0, #1
 800a3d6:	bd10      	pop	{r4, pc}
 800a3d8:	4298      	cmp	r0, r3
 800a3da:	d3f4      	bcc.n	800a3c6 <__mcmp+0x14>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	bd10      	pop	{r4, pc}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	bd10      	pop	{r4, pc}
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	bd10      	pop	{r4, pc}

0800a3ea <__mdiff>:
 800a3ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	4607      	mov	r7, r0
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	4615      	mov	r5, r2
 800a3f8:	f7ff ffdb 	bl	800a3b2 <__mcmp>
 800a3fc:	1e06      	subs	r6, r0, #0
 800a3fe:	d108      	bne.n	800a412 <__mdiff+0x28>
 800a400:	4631      	mov	r1, r6
 800a402:	4638      	mov	r0, r7
 800a404:	f7ff fd89 	bl	8009f1a <_Balloc>
 800a408:	2301      	movs	r3, #1
 800a40a:	6103      	str	r3, [r0, #16]
 800a40c:	6146      	str	r6, [r0, #20]
 800a40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a412:	bfbc      	itt	lt
 800a414:	4623      	movlt	r3, r4
 800a416:	462c      	movlt	r4, r5
 800a418:	4638      	mov	r0, r7
 800a41a:	6861      	ldr	r1, [r4, #4]
 800a41c:	bfba      	itte	lt
 800a41e:	461d      	movlt	r5, r3
 800a420:	2601      	movlt	r6, #1
 800a422:	2600      	movge	r6, #0
 800a424:	f7ff fd79 	bl	8009f1a <_Balloc>
 800a428:	692b      	ldr	r3, [r5, #16]
 800a42a:	60c6      	str	r6, [r0, #12]
 800a42c:	6926      	ldr	r6, [r4, #16]
 800a42e:	f105 0914 	add.w	r9, r5, #20
 800a432:	3414      	adds	r4, #20
 800a434:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800a438:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a43c:	f100 0514 	add.w	r5, r0, #20
 800a440:	f04f 0c00 	mov.w	ip, #0
 800a444:	f854 3b04 	ldr.w	r3, [r4], #4
 800a448:	f859 2b04 	ldr.w	r2, [r9], #4
 800a44c:	fa1c f183 	uxtah	r1, ip, r3
 800a450:	fa1f fe82 	uxth.w	lr, r2
 800a454:	0c12      	lsrs	r2, r2, #16
 800a456:	ebce 0101 	rsb	r1, lr, r1
 800a45a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800a45e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a462:	b289      	uxth	r1, r1
 800a464:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a468:	45c8      	cmp	r8, r9
 800a46a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a46e:	46a6      	mov	lr, r4
 800a470:	f845 3b04 	str.w	r3, [r5], #4
 800a474:	d8e6      	bhi.n	800a444 <__mdiff+0x5a>
 800a476:	45be      	cmp	lr, r7
 800a478:	d20e      	bcs.n	800a498 <__mdiff+0xae>
 800a47a:	f85e 1b04 	ldr.w	r1, [lr], #4
 800a47e:	fa1c f281 	uxtah	r2, ip, r1
 800a482:	1413      	asrs	r3, r2, #16
 800a484:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800a488:	b292      	uxth	r2, r2
 800a48a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a48e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a492:	f845 2b04 	str.w	r2, [r5], #4
 800a496:	e7ee      	b.n	800a476 <__mdiff+0x8c>
 800a498:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a49c:	b90b      	cbnz	r3, 800a4a2 <__mdiff+0xb8>
 800a49e:	3e01      	subs	r6, #1
 800a4a0:	e7fa      	b.n	800a498 <__mdiff+0xae>
 800a4a2:	6106      	str	r6, [r0, #16]
 800a4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a4a8 <__ulp>:
 800a4a8:	4b12      	ldr	r3, [pc, #72]	; (800a4f4 <__ulp+0x4c>)
 800a4aa:	ee10 2a90 	vmov	r2, s1
 800a4ae:	401a      	ands	r2, r3
 800a4b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dd02      	ble.n	800a4be <__ulp+0x16>
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	e017      	b.n	800a4ee <__ulp+0x46>
 800a4be:	425b      	negs	r3, r3
 800a4c0:	151b      	asrs	r3, r3, #20
 800a4c2:	2b13      	cmp	r3, #19
 800a4c4:	f04f 0000 	mov.w	r0, #0
 800a4c8:	f04f 0100 	mov.w	r1, #0
 800a4cc:	dc04      	bgt.n	800a4d8 <__ulp+0x30>
 800a4ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a4d2:	fa42 f103 	asr.w	r1, r2, r3
 800a4d6:	e00a      	b.n	800a4ee <__ulp+0x46>
 800a4d8:	3b14      	subs	r3, #20
 800a4da:	2b1e      	cmp	r3, #30
 800a4dc:	f04f 0201 	mov.w	r2, #1
 800a4e0:	bfda      	itte	le
 800a4e2:	f1c3 031f 	rsble	r3, r3, #31
 800a4e6:	fa02 f303 	lslle.w	r3, r2, r3
 800a4ea:	4613      	movgt	r3, r2
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	ec41 0b10 	vmov	d0, r0, r1
 800a4f2:	4770      	bx	lr
 800a4f4:	7ff00000 	.word	0x7ff00000

0800a4f8 <__b2d>:
 800a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fa:	6905      	ldr	r5, [r0, #16]
 800a4fc:	f100 0614 	add.w	r6, r0, #20
 800a500:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 800a504:	1f2f      	subs	r7, r5, #4
 800a506:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a50a:	4620      	mov	r0, r4
 800a50c:	f7ff fdca 	bl	800a0a4 <__hi0bits>
 800a510:	f1c0 0320 	rsb	r3, r0, #32
 800a514:	280a      	cmp	r0, #10
 800a516:	600b      	str	r3, [r1, #0]
 800a518:	dc14      	bgt.n	800a544 <__b2d+0x4c>
 800a51a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a51e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a522:	42be      	cmp	r6, r7
 800a524:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 800a528:	bf34      	ite	cc
 800a52a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a52e:	2100      	movcs	r1, #0
 800a530:	3015      	adds	r0, #21
 800a532:	fa04 f000 	lsl.w	r0, r4, r0
 800a536:	fa21 f10e 	lsr.w	r1, r1, lr
 800a53a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a53e:	ea40 0201 	orr.w	r2, r0, r1
 800a542:	e023      	b.n	800a58c <__b2d+0x94>
 800a544:	42be      	cmp	r6, r7
 800a546:	bf3a      	itte	cc
 800a548:	f1a5 0708 	subcc.w	r7, r5, #8
 800a54c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a550:	2100      	movcs	r1, #0
 800a552:	380b      	subs	r0, #11
 800a554:	d015      	beq.n	800a582 <__b2d+0x8a>
 800a556:	4084      	lsls	r4, r0
 800a558:	f1c0 0520 	rsb	r5, r0, #32
 800a55c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a560:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a564:	42b7      	cmp	r7, r6
 800a566:	fa21 fe05 	lsr.w	lr, r1, r5
 800a56a:	ea44 030e 	orr.w	r3, r4, lr
 800a56e:	bf8c      	ite	hi
 800a570:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 800a574:	2400      	movls	r4, #0
 800a576:	fa01 f000 	lsl.w	r0, r1, r0
 800a57a:	40ec      	lsrs	r4, r5
 800a57c:	ea40 0204 	orr.w	r2, r0, r4
 800a580:	e004      	b.n	800a58c <__b2d+0x94>
 800a582:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a586:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a58a:	460a      	mov	r2, r1
 800a58c:	ec43 2b10 	vmov	d0, r2, r3
 800a590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a592 <__d2b>:
 800a592:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a596:	460e      	mov	r6, r1
 800a598:	2101      	movs	r1, #1
 800a59a:	ec59 8b10 	vmov	r8, r9, d0
 800a59e:	4615      	mov	r5, r2
 800a5a0:	f7ff fcbb 	bl	8009f1a <_Balloc>
 800a5a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a5a8:	4607      	mov	r7, r0
 800a5aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5ae:	b10c      	cbz	r4, 800a5b4 <__d2b+0x22>
 800a5b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5b4:	9301      	str	r3, [sp, #4]
 800a5b6:	f1b8 0f00 	cmp.w	r8, #0
 800a5ba:	d019      	beq.n	800a5f0 <__d2b+0x5e>
 800a5bc:	a802      	add	r0, sp, #8
 800a5be:	f840 8d08 	str.w	r8, [r0, #-8]!
 800a5c2:	f7ff fd8f 	bl	800a0e4 <__lo0bits>
 800a5c6:	9b00      	ldr	r3, [sp, #0]
 800a5c8:	b148      	cbz	r0, 800a5de <__d2b+0x4c>
 800a5ca:	9a01      	ldr	r2, [sp, #4]
 800a5cc:	f1c0 0120 	rsb	r1, r0, #32
 800a5d0:	fa02 f101 	lsl.w	r1, r2, r1
 800a5d4:	430b      	orrs	r3, r1
 800a5d6:	40c2      	lsrs	r2, r0
 800a5d8:	617b      	str	r3, [r7, #20]
 800a5da:	9201      	str	r2, [sp, #4]
 800a5dc:	e000      	b.n	800a5e0 <__d2b+0x4e>
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	9b01      	ldr	r3, [sp, #4]
 800a5e2:	61bb      	str	r3, [r7, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	bf14      	ite	ne
 800a5e8:	2102      	movne	r1, #2
 800a5ea:	2101      	moveq	r1, #1
 800a5ec:	6139      	str	r1, [r7, #16]
 800a5ee:	e007      	b.n	800a600 <__d2b+0x6e>
 800a5f0:	a801      	add	r0, sp, #4
 800a5f2:	f7ff fd77 	bl	800a0e4 <__lo0bits>
 800a5f6:	9b01      	ldr	r3, [sp, #4]
 800a5f8:	617b      	str	r3, [r7, #20]
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	6139      	str	r1, [r7, #16]
 800a5fe:	3020      	adds	r0, #32
 800a600:	b134      	cbz	r4, 800a610 <__d2b+0x7e>
 800a602:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a606:	4404      	add	r4, r0
 800a608:	6034      	str	r4, [r6, #0]
 800a60a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a60e:	e009      	b.n	800a624 <__d2b+0x92>
 800a610:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a614:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a618:	6030      	str	r0, [r6, #0]
 800a61a:	6918      	ldr	r0, [r3, #16]
 800a61c:	f7ff fd42 	bl	800a0a4 <__hi0bits>
 800a620:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a624:	6028      	str	r0, [r5, #0]
 800a626:	4638      	mov	r0, r7
 800a628:	b003      	add	sp, #12
 800a62a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a62e <__ratio>:
 800a62e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a632:	4688      	mov	r8, r1
 800a634:	4669      	mov	r1, sp
 800a636:	4681      	mov	r9, r0
 800a638:	f7ff ff5e 	bl	800a4f8 <__b2d>
 800a63c:	a901      	add	r1, sp, #4
 800a63e:	4640      	mov	r0, r8
 800a640:	ec55 4b10 	vmov	r4, r5, d0
 800a644:	f7ff ff58 	bl	800a4f8 <__b2d>
 800a648:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a64c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a650:	1a9a      	subs	r2, r3, r2
 800a652:	e89d 000a 	ldmia.w	sp, {r1, r3}
 800a656:	1ac9      	subs	r1, r1, r3
 800a658:	ec57 6b10 	vmov	r6, r7, d0
 800a65c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 800a660:	2b00      	cmp	r3, #0
 800a662:	bfcc      	ite	gt
 800a664:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 800a668:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 800a66c:	4632      	mov	r2, r6
 800a66e:	463b      	mov	r3, r7
 800a670:	4620      	mov	r0, r4
 800a672:	4629      	mov	r1, r5
 800a674:	f7f6 f8e6 	bl	8000844 <__aeabi_ddiv>
 800a678:	ec41 0b10 	vmov	d0, r0, r1
 800a67c:	b003      	add	sp, #12
 800a67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a682 <__copybits>:
 800a682:	3901      	subs	r1, #1
 800a684:	b510      	push	{r4, lr}
 800a686:	1149      	asrs	r1, r1, #5
 800a688:	6914      	ldr	r4, [r2, #16]
 800a68a:	3101      	adds	r1, #1
 800a68c:	f102 0314 	add.w	r3, r2, #20
 800a690:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a694:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a698:	42a3      	cmp	r3, r4
 800a69a:	4602      	mov	r2, r0
 800a69c:	d204      	bcs.n	800a6a8 <__copybits+0x26>
 800a69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a2:	f840 2b04 	str.w	r2, [r0], #4
 800a6a6:	e7f7      	b.n	800a698 <__copybits+0x16>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	428a      	cmp	r2, r1
 800a6ac:	d202      	bcs.n	800a6b4 <__copybits+0x32>
 800a6ae:	f842 3b04 	str.w	r3, [r2], #4
 800a6b2:	e7fa      	b.n	800a6aa <__copybits+0x28>
 800a6b4:	bd10      	pop	{r4, pc}

0800a6b6 <__any_on>:
 800a6b6:	f100 0214 	add.w	r2, r0, #20
 800a6ba:	6900      	ldr	r0, [r0, #16]
 800a6bc:	114b      	asrs	r3, r1, #5
 800a6be:	4298      	cmp	r0, r3
 800a6c0:	b510      	push	{r4, lr}
 800a6c2:	db0c      	blt.n	800a6de <__any_on+0x28>
 800a6c4:	dd0c      	ble.n	800a6e0 <__any_on+0x2a>
 800a6c6:	f011 011f 	ands.w	r1, r1, #31
 800a6ca:	d009      	beq.n	800a6e0 <__any_on+0x2a>
 800a6cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a6d0:	fa24 f001 	lsr.w	r0, r4, r1
 800a6d4:	fa00 f101 	lsl.w	r1, r0, r1
 800a6d8:	428c      	cmp	r4, r1
 800a6da:	d10c      	bne.n	800a6f6 <__any_on+0x40>
 800a6dc:	e000      	b.n	800a6e0 <__any_on+0x2a>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d904      	bls.n	800a6f2 <__any_on+0x3c>
 800a6e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6ec:	2900      	cmp	r1, #0
 800a6ee:	d0f9      	beq.n	800a6e4 <__any_on+0x2e>
 800a6f0:	e001      	b.n	800a6f6 <__any_on+0x40>
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	bd10      	pop	{r4, pc}
 800a6f6:	2001      	movs	r0, #1
 800a6f8:	bd10      	pop	{r4, pc}
	...

0800a6fc <_realloc_r>:
 800a6fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a700:	4681      	mov	r9, r0
 800a702:	460c      	mov	r4, r1
 800a704:	b929      	cbnz	r1, 800a712 <_realloc_r+0x16>
 800a706:	4611      	mov	r1, r2
 800a708:	b003      	add	sp, #12
 800a70a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70e:	f7f9 bf6f 	b.w	80045f0 <_malloc_r>
 800a712:	9201      	str	r2, [sp, #4]
 800a714:	f7fa f9ae 	bl	8004a74 <__malloc_lock>
 800a718:	9a01      	ldr	r2, [sp, #4]
 800a71a:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800a71e:	f102 080b 	add.w	r8, r2, #11
 800a722:	f1b8 0f16 	cmp.w	r8, #22
 800a726:	f1a4 0b08 	sub.w	fp, r4, #8
 800a72a:	f02e 0503 	bic.w	r5, lr, #3
 800a72e:	d903      	bls.n	800a738 <_realloc_r+0x3c>
 800a730:	f038 0807 	bics.w	r8, r8, #7
 800a734:	d502      	bpl.n	800a73c <_realloc_r+0x40>
 800a736:	e003      	b.n	800a740 <_realloc_r+0x44>
 800a738:	f04f 0810 	mov.w	r8, #16
 800a73c:	4590      	cmp	r8, r2
 800a73e:	d204      	bcs.n	800a74a <_realloc_r+0x4e>
 800a740:	230c      	movs	r3, #12
 800a742:	f8c9 3000 	str.w	r3, [r9]
 800a746:	2000      	movs	r0, #0
 800a748:	e17d      	b.n	800aa46 <_realloc_r+0x34a>
 800a74a:	45a8      	cmp	r8, r5
 800a74c:	f340 8150 	ble.w	800a9f0 <_realloc_r+0x2f4>
 800a750:	4ba6      	ldr	r3, [pc, #664]	; (800a9ec <_realloc_r+0x2f0>)
 800a752:	6898      	ldr	r0, [r3, #8]
 800a754:	eb0b 0105 	add.w	r1, fp, r5
 800a758:	4281      	cmp	r1, r0
 800a75a:	684f      	ldr	r7, [r1, #4]
 800a75c:	d005      	beq.n	800a76a <_realloc_r+0x6e>
 800a75e:	f027 0601 	bic.w	r6, r7, #1
 800a762:	440e      	add	r6, r1
 800a764:	6876      	ldr	r6, [r6, #4]
 800a766:	07f6      	lsls	r6, r6, #31
 800a768:	d426      	bmi.n	800a7b8 <_realloc_r+0xbc>
 800a76a:	f027 0a03 	bic.w	sl, r7, #3
 800a76e:	4281      	cmp	r1, r0
 800a770:	eb05 070a 	add.w	r7, r5, sl
 800a774:	d118      	bne.n	800a7a8 <_realloc_r+0xac>
 800a776:	f108 0610 	add.w	r6, r8, #16
 800a77a:	42b7      	cmp	r7, r6
 800a77c:	db1f      	blt.n	800a7be <_realloc_r+0xc2>
 800a77e:	eb0b 0008 	add.w	r0, fp, r8
 800a782:	ebc8 0707 	rsb	r7, r8, r7
 800a786:	f047 0701 	orr.w	r7, r7, #1
 800a78a:	6098      	str	r0, [r3, #8]
 800a78c:	6047      	str	r7, [r0, #4]
 800a78e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	ea43 0308 	orr.w	r3, r3, r8
 800a79a:	4648      	mov	r0, r9
 800a79c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7a0:	f7fa f969 	bl	8004a76 <__malloc_unlock>
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	e14e      	b.n	800aa46 <_realloc_r+0x34a>
 800a7a8:	45b8      	cmp	r8, r7
 800a7aa:	dc08      	bgt.n	800a7be <_realloc_r+0xc2>
 800a7ac:	68cb      	ldr	r3, [r1, #12]
 800a7ae:	688a      	ldr	r2, [r1, #8]
 800a7b0:	463d      	mov	r5, r7
 800a7b2:	60d3      	str	r3, [r2, #12]
 800a7b4:	609a      	str	r2, [r3, #8]
 800a7b6:	e11b      	b.n	800a9f0 <_realloc_r+0x2f4>
 800a7b8:	f04f 0a00 	mov.w	sl, #0
 800a7bc:	4651      	mov	r1, sl
 800a7be:	f01e 0f01 	tst.w	lr, #1
 800a7c2:	f040 80c3 	bne.w	800a94c <_realloc_r+0x250>
 800a7c6:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800a7ca:	ebc7 070b 	rsb	r7, r7, fp
 800a7ce:	687e      	ldr	r6, [r7, #4]
 800a7d0:	f026 0603 	bic.w	r6, r6, #3
 800a7d4:	442e      	add	r6, r5
 800a7d6:	2900      	cmp	r1, #0
 800a7d8:	f000 8083 	beq.w	800a8e2 <_realloc_r+0x1e6>
 800a7dc:	4281      	cmp	r1, r0
 800a7de:	44b2      	add	sl, r6
 800a7e0:	d147      	bne.n	800a872 <_realloc_r+0x176>
 800a7e2:	f108 0110 	add.w	r1, r8, #16
 800a7e6:	458a      	cmp	sl, r1
 800a7e8:	db7b      	blt.n	800a8e2 <_realloc_r+0x1e6>
 800a7ea:	463e      	mov	r6, r7
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800a7f2:	60ca      	str	r2, [r1, #12]
 800a7f4:	6091      	str	r1, [r2, #8]
 800a7f6:	1f2a      	subs	r2, r5, #4
 800a7f8:	2a24      	cmp	r2, #36	; 0x24
 800a7fa:	d825      	bhi.n	800a848 <_realloc_r+0x14c>
 800a7fc:	2a13      	cmp	r2, #19
 800a7fe:	d91b      	bls.n	800a838 <_realloc_r+0x13c>
 800a800:	6821      	ldr	r1, [r4, #0]
 800a802:	60b9      	str	r1, [r7, #8]
 800a804:	6861      	ldr	r1, [r4, #4]
 800a806:	60f9      	str	r1, [r7, #12]
 800a808:	2a1b      	cmp	r2, #27
 800a80a:	d803      	bhi.n	800a814 <_realloc_r+0x118>
 800a80c:	f107 0210 	add.w	r2, r7, #16
 800a810:	3408      	adds	r4, #8
 800a812:	e012      	b.n	800a83a <_realloc_r+0x13e>
 800a814:	68a1      	ldr	r1, [r4, #8]
 800a816:	6139      	str	r1, [r7, #16]
 800a818:	68e1      	ldr	r1, [r4, #12]
 800a81a:	6179      	str	r1, [r7, #20]
 800a81c:	2a24      	cmp	r2, #36	; 0x24
 800a81e:	bf01      	itttt	eq
 800a820:	6922      	ldreq	r2, [r4, #16]
 800a822:	61ba      	streq	r2, [r7, #24]
 800a824:	6961      	ldreq	r1, [r4, #20]
 800a826:	61f9      	streq	r1, [r7, #28]
 800a828:	bf19      	ittee	ne
 800a82a:	f107 0218 	addne.w	r2, r7, #24
 800a82e:	3410      	addne	r4, #16
 800a830:	f107 0220 	addeq.w	r2, r7, #32
 800a834:	3418      	addeq	r4, #24
 800a836:	e000      	b.n	800a83a <_realloc_r+0x13e>
 800a838:	4632      	mov	r2, r6
 800a83a:	6821      	ldr	r1, [r4, #0]
 800a83c:	6011      	str	r1, [r2, #0]
 800a83e:	6861      	ldr	r1, [r4, #4]
 800a840:	6051      	str	r1, [r2, #4]
 800a842:	68a1      	ldr	r1, [r4, #8]
 800a844:	6091      	str	r1, [r2, #8]
 800a846:	e005      	b.n	800a854 <_realloc_r+0x158>
 800a848:	4621      	mov	r1, r4
 800a84a:	4630      	mov	r0, r6
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	f7ff fb49 	bl	8009ee4 <memmove>
 800a852:	9b01      	ldr	r3, [sp, #4]
 800a854:	eb07 0208 	add.w	r2, r7, r8
 800a858:	ebc8 0a0a 	rsb	sl, r8, sl
 800a85c:	609a      	str	r2, [r3, #8]
 800a85e:	f04a 0301 	orr.w	r3, sl, #1
 800a862:	6053      	str	r3, [r2, #4]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	ea43 0308 	orr.w	r3, r3, r8
 800a86e:	607b      	str	r3, [r7, #4]
 800a870:	e0b6      	b.n	800a9e0 <_realloc_r+0x2e4>
 800a872:	45d0      	cmp	r8, sl
 800a874:	dc35      	bgt.n	800a8e2 <_realloc_r+0x1e6>
 800a876:	68cb      	ldr	r3, [r1, #12]
 800a878:	688a      	ldr	r2, [r1, #8]
 800a87a:	4638      	mov	r0, r7
 800a87c:	60d3      	str	r3, [r2, #12]
 800a87e:	609a      	str	r2, [r3, #8]
 800a880:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	60d3      	str	r3, [r2, #12]
 800a888:	609a      	str	r2, [r3, #8]
 800a88a:	1f2a      	subs	r2, r5, #4
 800a88c:	2a24      	cmp	r2, #36	; 0x24
 800a88e:	d823      	bhi.n	800a8d8 <_realloc_r+0x1dc>
 800a890:	2a13      	cmp	r2, #19
 800a892:	d91a      	bls.n	800a8ca <_realloc_r+0x1ce>
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	60bb      	str	r3, [r7, #8]
 800a898:	6863      	ldr	r3, [r4, #4]
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	2a1b      	cmp	r2, #27
 800a89e:	d803      	bhi.n	800a8a8 <_realloc_r+0x1ac>
 800a8a0:	f107 0010 	add.w	r0, r7, #16
 800a8a4:	3408      	adds	r4, #8
 800a8a6:	e010      	b.n	800a8ca <_realloc_r+0x1ce>
 800a8a8:	68a3      	ldr	r3, [r4, #8]
 800a8aa:	613b      	str	r3, [r7, #16]
 800a8ac:	68e3      	ldr	r3, [r4, #12]
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	2a24      	cmp	r2, #36	; 0x24
 800a8b2:	bf01      	itttt	eq
 800a8b4:	6923      	ldreq	r3, [r4, #16]
 800a8b6:	61bb      	streq	r3, [r7, #24]
 800a8b8:	6963      	ldreq	r3, [r4, #20]
 800a8ba:	61fb      	streq	r3, [r7, #28]
 800a8bc:	bf19      	ittee	ne
 800a8be:	f107 0018 	addne.w	r0, r7, #24
 800a8c2:	3410      	addne	r4, #16
 800a8c4:	f107 0020 	addeq.w	r0, r7, #32
 800a8c8:	3418      	addeq	r4, #24
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	6003      	str	r3, [r0, #0]
 800a8ce:	6863      	ldr	r3, [r4, #4]
 800a8d0:	6043      	str	r3, [r0, #4]
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	6083      	str	r3, [r0, #8]
 800a8d6:	e002      	b.n	800a8de <_realloc_r+0x1e2>
 800a8d8:	4621      	mov	r1, r4
 800a8da:	f7ff fb03 	bl	8009ee4 <memmove>
 800a8de:	4655      	mov	r5, sl
 800a8e0:	e02e      	b.n	800a940 <_realloc_r+0x244>
 800a8e2:	45b0      	cmp	r8, r6
 800a8e4:	dc32      	bgt.n	800a94c <_realloc_r+0x250>
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a8ee:	60d3      	str	r3, [r2, #12]
 800a8f0:	609a      	str	r2, [r3, #8]
 800a8f2:	1f2a      	subs	r2, r5, #4
 800a8f4:	2a24      	cmp	r2, #36	; 0x24
 800a8f6:	d825      	bhi.n	800a944 <_realloc_r+0x248>
 800a8f8:	2a13      	cmp	r2, #19
 800a8fa:	d91a      	bls.n	800a932 <_realloc_r+0x236>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	60bb      	str	r3, [r7, #8]
 800a900:	6863      	ldr	r3, [r4, #4]
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	2a1b      	cmp	r2, #27
 800a906:	d803      	bhi.n	800a910 <_realloc_r+0x214>
 800a908:	f107 0010 	add.w	r0, r7, #16
 800a90c:	3408      	adds	r4, #8
 800a90e:	e010      	b.n	800a932 <_realloc_r+0x236>
 800a910:	68a3      	ldr	r3, [r4, #8]
 800a912:	613b      	str	r3, [r7, #16]
 800a914:	68e3      	ldr	r3, [r4, #12]
 800a916:	617b      	str	r3, [r7, #20]
 800a918:	2a24      	cmp	r2, #36	; 0x24
 800a91a:	bf01      	itttt	eq
 800a91c:	6923      	ldreq	r3, [r4, #16]
 800a91e:	61bb      	streq	r3, [r7, #24]
 800a920:	6963      	ldreq	r3, [r4, #20]
 800a922:	61fb      	streq	r3, [r7, #28]
 800a924:	bf19      	ittee	ne
 800a926:	f107 0018 	addne.w	r0, r7, #24
 800a92a:	3410      	addne	r4, #16
 800a92c:	f107 0020 	addeq.w	r0, r7, #32
 800a930:	3418      	addeq	r4, #24
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	6003      	str	r3, [r0, #0]
 800a936:	6863      	ldr	r3, [r4, #4]
 800a938:	6043      	str	r3, [r0, #4]
 800a93a:	68a3      	ldr	r3, [r4, #8]
 800a93c:	6083      	str	r3, [r0, #8]
 800a93e:	4635      	mov	r5, r6
 800a940:	46bb      	mov	fp, r7
 800a942:	e055      	b.n	800a9f0 <_realloc_r+0x2f4>
 800a944:	4621      	mov	r1, r4
 800a946:	f7ff facd 	bl	8009ee4 <memmove>
 800a94a:	e7f8      	b.n	800a93e <_realloc_r+0x242>
 800a94c:	4611      	mov	r1, r2
 800a94e:	4648      	mov	r0, r9
 800a950:	f7f9 fe4e 	bl	80045f0 <_malloc_r>
 800a954:	4606      	mov	r6, r0
 800a956:	2800      	cmp	r0, #0
 800a958:	d042      	beq.n	800a9e0 <_realloc_r+0x2e4>
 800a95a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a95e:	f023 0301 	bic.w	r3, r3, #1
 800a962:	f1a0 0208 	sub.w	r2, r0, #8
 800a966:	445b      	add	r3, fp
 800a968:	429a      	cmp	r2, r3
 800a96a:	d105      	bne.n	800a978 <_realloc_r+0x27c>
 800a96c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a970:	f023 0303 	bic.w	r3, r3, #3
 800a974:	441d      	add	r5, r3
 800a976:	e03b      	b.n	800a9f0 <_realloc_r+0x2f4>
 800a978:	1f2a      	subs	r2, r5, #4
 800a97a:	2a24      	cmp	r2, #36	; 0x24
 800a97c:	d829      	bhi.n	800a9d2 <_realloc_r+0x2d6>
 800a97e:	2a13      	cmp	r2, #19
 800a980:	d91e      	bls.n	800a9c0 <_realloc_r+0x2c4>
 800a982:	6823      	ldr	r3, [r4, #0]
 800a984:	6003      	str	r3, [r0, #0]
 800a986:	6863      	ldr	r3, [r4, #4]
 800a988:	6043      	str	r3, [r0, #4]
 800a98a:	2a1b      	cmp	r2, #27
 800a98c:	d804      	bhi.n	800a998 <_realloc_r+0x29c>
 800a98e:	f100 0308 	add.w	r3, r0, #8
 800a992:	f104 0208 	add.w	r2, r4, #8
 800a996:	e015      	b.n	800a9c4 <_realloc_r+0x2c8>
 800a998:	68a3      	ldr	r3, [r4, #8]
 800a99a:	6083      	str	r3, [r0, #8]
 800a99c:	68e3      	ldr	r3, [r4, #12]
 800a99e:	60c3      	str	r3, [r0, #12]
 800a9a0:	2a24      	cmp	r2, #36	; 0x24
 800a9a2:	bf01      	itttt	eq
 800a9a4:	6923      	ldreq	r3, [r4, #16]
 800a9a6:	6103      	streq	r3, [r0, #16]
 800a9a8:	6961      	ldreq	r1, [r4, #20]
 800a9aa:	6141      	streq	r1, [r0, #20]
 800a9ac:	bf19      	ittee	ne
 800a9ae:	f100 0310 	addne.w	r3, r0, #16
 800a9b2:	f104 0210 	addne.w	r2, r4, #16
 800a9b6:	f100 0318 	addeq.w	r3, r0, #24
 800a9ba:	f104 0218 	addeq.w	r2, r4, #24
 800a9be:	e001      	b.n	800a9c4 <_realloc_r+0x2c8>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	6811      	ldr	r1, [r2, #0]
 800a9c6:	6019      	str	r1, [r3, #0]
 800a9c8:	6851      	ldr	r1, [r2, #4]
 800a9ca:	6059      	str	r1, [r3, #4]
 800a9cc:	6892      	ldr	r2, [r2, #8]
 800a9ce:	609a      	str	r2, [r3, #8]
 800a9d0:	e002      	b.n	800a9d8 <_realloc_r+0x2dc>
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	f7ff fa86 	bl	8009ee4 <memmove>
 800a9d8:	4621      	mov	r1, r4
 800a9da:	4648      	mov	r0, r9
 800a9dc:	f7fe fcb6 	bl	800934c <_free_r>
 800a9e0:	4648      	mov	r0, r9
 800a9e2:	f7fa f848 	bl	8004a76 <__malloc_unlock>
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	e02d      	b.n	800aa46 <_realloc_r+0x34a>
 800a9ea:	bf00      	nop
 800a9ec:	20000124 	.word	0x20000124
 800a9f0:	ebc8 0205 	rsb	r2, r8, r5
 800a9f4:	2a0f      	cmp	r2, #15
 800a9f6:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a9fa:	d914      	bls.n	800aa26 <_realloc_r+0x32a>
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	eb0b 0108 	add.w	r1, fp, r8
 800aa04:	ea43 0308 	orr.w	r3, r3, r8
 800aa08:	f8cb 3004 	str.w	r3, [fp, #4]
 800aa0c:	f042 0301 	orr.w	r3, r2, #1
 800aa10:	440a      	add	r2, r1
 800aa12:	604b      	str	r3, [r1, #4]
 800aa14:	6853      	ldr	r3, [r2, #4]
 800aa16:	f043 0301 	orr.w	r3, r3, #1
 800aa1a:	6053      	str	r3, [r2, #4]
 800aa1c:	3108      	adds	r1, #8
 800aa1e:	4648      	mov	r0, r9
 800aa20:	f7fe fc94 	bl	800934c <_free_r>
 800aa24:	e00a      	b.n	800aa3c <_realloc_r+0x340>
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	432b      	orrs	r3, r5
 800aa2c:	eb0b 0205 	add.w	r2, fp, r5
 800aa30:	f8cb 3004 	str.w	r3, [fp, #4]
 800aa34:	6853      	ldr	r3, [r2, #4]
 800aa36:	f043 0301 	orr.w	r3, r3, #1
 800aa3a:	6053      	str	r3, [r2, #4]
 800aa3c:	4648      	mov	r0, r9
 800aa3e:	f7fa f81a 	bl	8004a76 <__malloc_unlock>
 800aa42:	f10b 0008 	add.w	r0, fp, #8
 800aa46:	b003      	add	sp, #12
 800aa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa4c <_raise_r>:
 800aa4c:	291f      	cmp	r1, #31
 800aa4e:	b538      	push	{r3, r4, r5, lr}
 800aa50:	4604      	mov	r4, r0
 800aa52:	460d      	mov	r5, r1
 800aa54:	d904      	bls.n	800aa60 <_raise_r+0x14>
 800aa56:	2316      	movs	r3, #22
 800aa58:	6003      	str	r3, [r0, #0]
 800aa5a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}
 800aa60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa62:	b112      	cbz	r2, 800aa6a <_raise_r+0x1e>
 800aa64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa68:	b94b      	cbnz	r3, 800aa7e <_raise_r+0x32>
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f000 f832 	bl	800aad4 <_getpid_r>
 800aa70:	462a      	mov	r2, r5
 800aa72:	4601      	mov	r1, r0
 800aa74:	4620      	mov	r0, r4
 800aa76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa7a:	f000 b819 	b.w	800aab0 <_kill_r>
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d00c      	beq.n	800aa9c <_raise_r+0x50>
 800aa82:	1c59      	adds	r1, r3, #1
 800aa84:	d103      	bne.n	800aa8e <_raise_r+0x42>
 800aa86:	2316      	movs	r3, #22
 800aa88:	6003      	str	r3, [r0, #0]
 800aa8a:	2001      	movs	r0, #1
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
 800aa8e:	2400      	movs	r4, #0
 800aa90:	4628      	mov	r0, r5
 800aa92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa96:	4798      	blx	r3
 800aa98:	4620      	mov	r0, r4
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	bd38      	pop	{r3, r4, r5, pc}

0800aaa0 <raise>:
 800aaa0:	4b02      	ldr	r3, [pc, #8]	; (800aaac <raise+0xc>)
 800aaa2:	4601      	mov	r1, r0
 800aaa4:	6818      	ldr	r0, [r3, #0]
 800aaa6:	f7ff bfd1 	b.w	800aa4c <_raise_r>
 800aaaa:	bf00      	nop
 800aaac:	20000120 	.word	0x20000120

0800aab0 <_kill_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4c07      	ldr	r4, [pc, #28]	; (800aad0 <_kill_r+0x20>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4605      	mov	r5, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	4611      	mov	r1, r2
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	f001 fd9f 	bl	800c600 <_kill>
 800aac2:	1c43      	adds	r3, r0, #1
 800aac4:	d102      	bne.n	800aacc <_kill_r+0x1c>
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	b103      	cbz	r3, 800aacc <_kill_r+0x1c>
 800aaca:	602b      	str	r3, [r5, #0]
 800aacc:	bd38      	pop	{r3, r4, r5, pc}
 800aace:	bf00      	nop
 800aad0:	2000076c 	.word	0x2000076c

0800aad4 <_getpid_r>:
 800aad4:	f001 bd7c 	b.w	800c5d0 <_getpid>

0800aad8 <__sread>:
 800aad8:	b510      	push	{r4, lr}
 800aada:	460c      	mov	r4, r1
 800aadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae0:	f000 fa38 	bl	800af54 <_read_r>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	bfab      	itete	ge
 800aae8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aaea:	89a3      	ldrhlt	r3, [r4, #12]
 800aaec:	181b      	addge	r3, r3, r0
 800aaee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aaf2:	bfac      	ite	ge
 800aaf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aaf6:	81a3      	strhlt	r3, [r4, #12]
 800aaf8:	bd10      	pop	{r4, pc}

0800aafa <__swrite>:
 800aafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aafe:	461f      	mov	r7, r3
 800ab00:	898b      	ldrh	r3, [r1, #12]
 800ab02:	05db      	lsls	r3, r3, #23
 800ab04:	4605      	mov	r5, r0
 800ab06:	460c      	mov	r4, r1
 800ab08:	4616      	mov	r6, r2
 800ab0a:	d505      	bpl.n	800ab18 <__swrite+0x1e>
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab14:	f000 fa0c 	bl	800af30 <_lseek_r>
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab22:	81a3      	strh	r3, [r4, #12]
 800ab24:	4632      	mov	r2, r6
 800ab26:	463b      	mov	r3, r7
 800ab28:	4628      	mov	r0, r5
 800ab2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab2e:	f000 b93b 	b.w	800ada8 <_write_r>

0800ab32 <__sseek>:
 800ab32:	b510      	push	{r4, lr}
 800ab34:	460c      	mov	r4, r1
 800ab36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab3a:	f000 f9f9 	bl	800af30 <_lseek_r>
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	bf15      	itete	ne
 800ab44:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab4e:	81a3      	strheq	r3, [r4, #12]
 800ab50:	bf18      	it	ne
 800ab52:	81a3      	strhne	r3, [r4, #12]
 800ab54:	bd10      	pop	{r4, pc}

0800ab56 <__sclose>:
 800ab56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab5a:	f000 b965 	b.w	800ae28 <_close_r>

0800ab5e <strncmp>:
 800ab5e:	b530      	push	{r4, r5, lr}
 800ab60:	b182      	cbz	r2, 800ab84 <strncmp+0x26>
 800ab62:	1e45      	subs	r5, r0, #1
 800ab64:	3901      	subs	r1, #1
 800ab66:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800ab6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab6e:	42a3      	cmp	r3, r4
 800ab70:	d106      	bne.n	800ab80 <strncmp+0x22>
 800ab72:	43ec      	mvns	r4, r5
 800ab74:	4414      	add	r4, r2
 800ab76:	42e0      	cmn	r0, r4
 800ab78:	d001      	beq.n	800ab7e <strncmp+0x20>
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1f3      	bne.n	800ab66 <strncmp+0x8>
 800ab7e:	461c      	mov	r4, r3
 800ab80:	1b18      	subs	r0, r3, r4
 800ab82:	bd30      	pop	{r4, r5, pc}
 800ab84:	4610      	mov	r0, r2
 800ab86:	bd30      	pop	{r4, r5, pc}

0800ab88 <__ssprint_r>:
 800ab88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	4693      	mov	fp, r2
 800ab8e:	6892      	ldr	r2, [r2, #8]
 800ab90:	4681      	mov	r9, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	b34a      	cbz	r2, 800abea <__ssprint_r+0x62>
 800ab96:	2300      	movs	r3, #0
 800ab98:	f8db a000 	ldr.w	sl, [fp]
 800ab9c:	9301      	str	r3, [sp, #4]
 800ab9e:	461f      	mov	r7, r3
 800aba0:	e006      	b.n	800abb0 <__ssprint_r+0x28>
 800aba2:	f8da 3000 	ldr.w	r3, [sl]
 800aba6:	f8da 7004 	ldr.w	r7, [sl, #4]
 800abaa:	9301      	str	r3, [sp, #4]
 800abac:	f10a 0a08 	add.w	sl, sl, #8
 800abb0:	2f00      	cmp	r7, #0
 800abb2:	d0f6      	beq.n	800aba2 <__ssprint_r+0x1a>
 800abb4:	68a6      	ldr	r6, [r4, #8]
 800abb6:	42b7      	cmp	r7, r6
 800abb8:	d360      	bcc.n	800ac7c <__ssprint_r+0xf4>
 800abba:	89a0      	ldrh	r0, [r4, #12]
 800abbc:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800abc0:	d117      	bne.n	800abf2 <__ssprint_r+0x6a>
 800abc2:	42b7      	cmp	r7, r6
 800abc4:	d35a      	bcc.n	800ac7c <__ssprint_r+0xf4>
 800abc6:	4632      	mov	r2, r6
 800abc8:	9901      	ldr	r1, [sp, #4]
 800abca:	6820      	ldr	r0, [r4, #0]
 800abcc:	f7ff f98a 	bl	8009ee4 <memmove>
 800abd0:	68a2      	ldr	r2, [r4, #8]
 800abd2:	1b92      	subs	r2, r2, r6
 800abd4:	60a2      	str	r2, [r4, #8]
 800abd6:	6822      	ldr	r2, [r4, #0]
 800abd8:	4416      	add	r6, r2
 800abda:	f8db 2008 	ldr.w	r2, [fp, #8]
 800abde:	6026      	str	r6, [r4, #0]
 800abe0:	1bd7      	subs	r7, r2, r7
 800abe2:	f8cb 7008 	str.w	r7, [fp, #8]
 800abe6:	2f00      	cmp	r7, #0
 800abe8:	d1db      	bne.n	800aba2 <__ssprint_r+0x1a>
 800abea:	2000      	movs	r0, #0
 800abec:	f8cb 0004 	str.w	r0, [fp, #4]
 800abf0:	e046      	b.n	800ac80 <__ssprint_r+0xf8>
 800abf2:	6825      	ldr	r5, [r4, #0]
 800abf4:	6921      	ldr	r1, [r4, #16]
 800abf6:	ebc1 0805 	rsb	r8, r1, r5
 800abfa:	f108 0201 	add.w	r2, r8, #1
 800abfe:	6965      	ldr	r5, [r4, #20]
 800ac00:	443a      	add	r2, r7
 800ac02:	2302      	movs	r3, #2
 800ac04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac08:	fb95 f5f3 	sdiv	r5, r5, r3
 800ac0c:	4295      	cmp	r5, r2
 800ac0e:	bf38      	it	cc
 800ac10:	4615      	movcc	r5, r2
 800ac12:	0543      	lsls	r3, r0, #21
 800ac14:	d510      	bpl.n	800ac38 <__ssprint_r+0xb0>
 800ac16:	4629      	mov	r1, r5
 800ac18:	4648      	mov	r0, r9
 800ac1a:	f7f9 fce9 	bl	80045f0 <_malloc_r>
 800ac1e:	4606      	mov	r6, r0
 800ac20:	b1a0      	cbz	r0, 800ac4c <__ssprint_r+0xc4>
 800ac22:	4642      	mov	r2, r8
 800ac24:	6921      	ldr	r1, [r4, #16]
 800ac26:	f7f9 ff12 	bl	8004a4e <memcpy>
 800ac2a:	89a2      	ldrh	r2, [r4, #12]
 800ac2c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ac30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ac34:	81a2      	strh	r2, [r4, #12]
 800ac36:	e018      	b.n	800ac6a <__ssprint_r+0xe2>
 800ac38:	462a      	mov	r2, r5
 800ac3a:	4648      	mov	r0, r9
 800ac3c:	f7ff fd5e 	bl	800a6fc <_realloc_r>
 800ac40:	4606      	mov	r6, r0
 800ac42:	b990      	cbnz	r0, 800ac6a <__ssprint_r+0xe2>
 800ac44:	6921      	ldr	r1, [r4, #16]
 800ac46:	4648      	mov	r0, r9
 800ac48:	f7fe fb80 	bl	800934c <_free_r>
 800ac4c:	220c      	movs	r2, #12
 800ac4e:	f8c9 2000 	str.w	r2, [r9]
 800ac52:	89a2      	ldrh	r2, [r4, #12]
 800ac54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac58:	81a2      	strh	r2, [r4, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f8cb 2008 	str.w	r2, [fp, #8]
 800ac60:	f8cb 2004 	str.w	r2, [fp, #4]
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	e00a      	b.n	800ac80 <__ssprint_r+0xf8>
 800ac6a:	6126      	str	r6, [r4, #16]
 800ac6c:	6165      	str	r5, [r4, #20]
 800ac6e:	4446      	add	r6, r8
 800ac70:	ebc8 0505 	rsb	r5, r8, r5
 800ac74:	6026      	str	r6, [r4, #0]
 800ac76:	60a5      	str	r5, [r4, #8]
 800ac78:	463e      	mov	r6, r7
 800ac7a:	e7a2      	b.n	800abc2 <__ssprint_r+0x3a>
 800ac7c:	463e      	mov	r6, r7
 800ac7e:	e7a2      	b.n	800abc6 <__ssprint_r+0x3e>
 800ac80:	b003      	add	sp, #12
 800ac82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ac88 <__swbuf_r>:
 800ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8a:	460f      	mov	r7, r1
 800ac8c:	4614      	mov	r4, r2
 800ac8e:	4606      	mov	r6, r0
 800ac90:	b118      	cbz	r0, 800ac9a <__swbuf_r+0x12>
 800ac92:	6983      	ldr	r3, [r0, #24]
 800ac94:	b90b      	cbnz	r3, 800ac9a <__swbuf_r+0x12>
 800ac96:	f7fe fa41 	bl	800911c <__sinit>
 800ac9a:	4b27      	ldr	r3, [pc, #156]	; (800ad38 <__swbuf_r+0xb0>)
 800ac9c:	429c      	cmp	r4, r3
 800ac9e:	d101      	bne.n	800aca4 <__swbuf_r+0x1c>
 800aca0:	6874      	ldr	r4, [r6, #4]
 800aca2:	e008      	b.n	800acb6 <__swbuf_r+0x2e>
 800aca4:	4b25      	ldr	r3, [pc, #148]	; (800ad3c <__swbuf_r+0xb4>)
 800aca6:	429c      	cmp	r4, r3
 800aca8:	d101      	bne.n	800acae <__swbuf_r+0x26>
 800acaa:	68b4      	ldr	r4, [r6, #8]
 800acac:	e003      	b.n	800acb6 <__swbuf_r+0x2e>
 800acae:	4b24      	ldr	r3, [pc, #144]	; (800ad40 <__swbuf_r+0xb8>)
 800acb0:	429c      	cmp	r4, r3
 800acb2:	bf08      	it	eq
 800acb4:	68f4      	ldreq	r4, [r6, #12]
 800acb6:	69a3      	ldr	r3, [r4, #24]
 800acb8:	60a3      	str	r3, [r4, #8]
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	0719      	lsls	r1, r3, #28
 800acbe:	d50e      	bpl.n	800acde <__swbuf_r+0x56>
 800acc0:	6923      	ldr	r3, [r4, #16]
 800acc2:	b163      	cbz	r3, 800acde <__swbuf_r+0x56>
 800acc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc8:	049a      	lsls	r2, r3, #18
 800acca:	b2fd      	uxtb	r5, r7
 800accc:	d410      	bmi.n	800acf0 <__swbuf_r+0x68>
 800acce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800acd2:	81a3      	strh	r3, [r4, #12]
 800acd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acda:	6663      	str	r3, [r4, #100]	; 0x64
 800acdc:	e008      	b.n	800acf0 <__swbuf_r+0x68>
 800acde:	4621      	mov	r1, r4
 800ace0:	4630      	mov	r0, r6
 800ace2:	f7fd fa7b 	bl	80081dc <__swsetup_r>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d0ec      	beq.n	800acc4 <__swbuf_r+0x3c>
 800acea:	f04f 30ff 	mov.w	r0, #4294967295
 800acee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	6920      	ldr	r0, [r4, #16]
 800acf4:	1a18      	subs	r0, r3, r0
 800acf6:	6963      	ldr	r3, [r4, #20]
 800acf8:	4298      	cmp	r0, r3
 800acfa:	db05      	blt.n	800ad08 <__swbuf_r+0x80>
 800acfc:	4621      	mov	r1, r4
 800acfe:	4630      	mov	r0, r6
 800ad00:	f7fe f9a2 	bl	8009048 <_fflush_r>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d1f0      	bne.n	800acea <__swbuf_r+0x62>
 800ad08:	68a3      	ldr	r3, [r4, #8]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	60a3      	str	r3, [r4, #8]
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	6022      	str	r2, [r4, #0]
 800ad14:	701f      	strb	r7, [r3, #0]
 800ad16:	6962      	ldr	r2, [r4, #20]
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d004      	beq.n	800ad28 <__swbuf_r+0xa0>
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	07db      	lsls	r3, r3, #31
 800ad22:	d507      	bpl.n	800ad34 <__swbuf_r+0xac>
 800ad24:	2d0a      	cmp	r5, #10
 800ad26:	d105      	bne.n	800ad34 <__swbuf_r+0xac>
 800ad28:	4621      	mov	r1, r4
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f7fe f98c 	bl	8009048 <_fflush_r>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d1da      	bne.n	800acea <__swbuf_r+0x62>
 800ad34:	4628      	mov	r0, r5
 800ad36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad38:	0800cd84 	.word	0x0800cd84
 800ad3c:	0800cda4 	.word	0x0800cda4
 800ad40:	0800cdc4 	.word	0x0800cdc4

0800ad44 <_wcrtomb_r>:
 800ad44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad48:	461d      	mov	r5, r3
 800ad4a:	4b0f      	ldr	r3, [pc, #60]	; (800ad88 <_wcrtomb_r+0x44>)
 800ad4c:	b086      	sub	sp, #24
 800ad4e:	4604      	mov	r4, r0
 800ad50:	4690      	mov	r8, r2
 800ad52:	460e      	mov	r6, r1
 800ad54:	681f      	ldr	r7, [r3, #0]
 800ad56:	b931      	cbnz	r1, 800ad66 <_wcrtomb_r+0x22>
 800ad58:	f7ff f84e 	bl	8009df8 <__locale_charset>
 800ad5c:	9500      	str	r5, [sp, #0]
 800ad5e:	4603      	mov	r3, r0
 800ad60:	4632      	mov	r2, r6
 800ad62:	a903      	add	r1, sp, #12
 800ad64:	e005      	b.n	800ad72 <_wcrtomb_r+0x2e>
 800ad66:	f7ff f847 	bl	8009df8 <__locale_charset>
 800ad6a:	9500      	str	r5, [sp, #0]
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	4642      	mov	r2, r8
 800ad70:	4631      	mov	r1, r6
 800ad72:	4620      	mov	r0, r4
 800ad74:	47b8      	blx	r7
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	bf01      	itttt	eq
 800ad7a:	2300      	moveq	r3, #0
 800ad7c:	602b      	streq	r3, [r5, #0]
 800ad7e:	238a      	moveq	r3, #138	; 0x8a
 800ad80:	6023      	streq	r3, [r4, #0]
 800ad82:	b006      	add	sp, #24
 800ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad88:	20000590 	.word	0x20000590

0800ad8c <__ascii_wctomb>:
 800ad8c:	b149      	cbz	r1, 800ada2 <__ascii_wctomb+0x16>
 800ad8e:	2aff      	cmp	r2, #255	; 0xff
 800ad90:	bf85      	ittet	hi
 800ad92:	238a      	movhi	r3, #138	; 0x8a
 800ad94:	6003      	strhi	r3, [r0, #0]
 800ad96:	700a      	strbls	r2, [r1, #0]
 800ad98:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad9c:	bf98      	it	ls
 800ad9e:	2001      	movls	r0, #1
 800ada0:	4770      	bx	lr
 800ada2:	4608      	mov	r0, r1
 800ada4:	4770      	bx	lr
	...

0800ada8 <_write_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4c07      	ldr	r4, [pc, #28]	; (800adc8 <_write_r+0x20>)
 800adac:	4605      	mov	r5, r0
 800adae:	4608      	mov	r0, r1
 800adb0:	4611      	mov	r1, r2
 800adb2:	2200      	movs	r2, #0
 800adb4:	6022      	str	r2, [r4, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	f7f7 fed8 	bl	8002b6c <_write>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_write_r+0x1e>
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_write_r+0x1e>
 800adc4:	602b      	str	r3, [r5, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	2000076c 	.word	0x2000076c

0800adcc <_calloc_r>:
 800adcc:	b510      	push	{r4, lr}
 800adce:	4351      	muls	r1, r2
 800add0:	f7f9 fc0e 	bl	80045f0 <_malloc_r>
 800add4:	4604      	mov	r4, r0
 800add6:	b320      	cbz	r0, 800ae22 <_calloc_r+0x56>
 800add8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800addc:	f022 0203 	bic.w	r2, r2, #3
 800ade0:	3a04      	subs	r2, #4
 800ade2:	2a24      	cmp	r2, #36	; 0x24
 800ade4:	d81a      	bhi.n	800ae1c <_calloc_r+0x50>
 800ade6:	2a13      	cmp	r2, #19
 800ade8:	d912      	bls.n	800ae10 <_calloc_r+0x44>
 800adea:	2100      	movs	r1, #0
 800adec:	2a1b      	cmp	r2, #27
 800adee:	6001      	str	r1, [r0, #0]
 800adf0:	6041      	str	r1, [r0, #4]
 800adf2:	d802      	bhi.n	800adfa <_calloc_r+0x2e>
 800adf4:	f100 0308 	add.w	r3, r0, #8
 800adf8:	e00b      	b.n	800ae12 <_calloc_r+0x46>
 800adfa:	2a24      	cmp	r2, #36	; 0x24
 800adfc:	6081      	str	r1, [r0, #8]
 800adfe:	60c1      	str	r1, [r0, #12]
 800ae00:	bf11      	iteee	ne
 800ae02:	f100 0310 	addne.w	r3, r0, #16
 800ae06:	6101      	streq	r1, [r0, #16]
 800ae08:	f100 0318 	addeq.w	r3, r0, #24
 800ae0c:	6141      	streq	r1, [r0, #20]
 800ae0e:	e000      	b.n	800ae12 <_calloc_r+0x46>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2200      	movs	r2, #0
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	605a      	str	r2, [r3, #4]
 800ae18:	609a      	str	r2, [r3, #8]
 800ae1a:	e002      	b.n	800ae22 <_calloc_r+0x56>
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	f7f9 fe21 	bl	8004a64 <memset>
 800ae22:	4620      	mov	r0, r4
 800ae24:	bd10      	pop	{r4, pc}
	...

0800ae28 <_close_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4c06      	ldr	r4, [pc, #24]	; (800ae44 <_close_r+0x1c>)
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	4605      	mov	r5, r0
 800ae30:	4608      	mov	r0, r1
 800ae32:	6023      	str	r3, [r4, #0]
 800ae34:	f001 fbbc 	bl	800c5b0 <_close>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	d102      	bne.n	800ae42 <_close_r+0x1a>
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	b103      	cbz	r3, 800ae42 <_close_r+0x1a>
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	2000076c 	.word	0x2000076c

0800ae48 <_fclose_r>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	4605      	mov	r5, r0
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	b909      	cbnz	r1, 800ae54 <_fclose_r+0xc>
 800ae50:	2000      	movs	r0, #0
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	b118      	cbz	r0, 800ae5e <_fclose_r+0x16>
 800ae56:	6983      	ldr	r3, [r0, #24]
 800ae58:	b90b      	cbnz	r3, 800ae5e <_fclose_r+0x16>
 800ae5a:	f7fe f95f 	bl	800911c <__sinit>
 800ae5e:	4b20      	ldr	r3, [pc, #128]	; (800aee0 <_fclose_r+0x98>)
 800ae60:	429c      	cmp	r4, r3
 800ae62:	d101      	bne.n	800ae68 <_fclose_r+0x20>
 800ae64:	686c      	ldr	r4, [r5, #4]
 800ae66:	e008      	b.n	800ae7a <_fclose_r+0x32>
 800ae68:	4b1e      	ldr	r3, [pc, #120]	; (800aee4 <_fclose_r+0x9c>)
 800ae6a:	429c      	cmp	r4, r3
 800ae6c:	d101      	bne.n	800ae72 <_fclose_r+0x2a>
 800ae6e:	68ac      	ldr	r4, [r5, #8]
 800ae70:	e003      	b.n	800ae7a <_fclose_r+0x32>
 800ae72:	4b1d      	ldr	r3, [pc, #116]	; (800aee8 <_fclose_r+0xa0>)
 800ae74:	429c      	cmp	r4, r3
 800ae76:	bf08      	it	eq
 800ae78:	68ec      	ldreq	r4, [r5, #12]
 800ae7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d0e6      	beq.n	800ae50 <_fclose_r+0x8>
 800ae82:	4621      	mov	r1, r4
 800ae84:	4628      	mov	r0, r5
 800ae86:	f7fe f84f 	bl	8008f28 <__sflush_r>
 800ae8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	b133      	cbz	r3, 800ae9e <_fclose_r+0x56>
 800ae90:	6a21      	ldr	r1, [r4, #32]
 800ae92:	4628      	mov	r0, r5
 800ae94:	4798      	blx	r3
 800ae96:	2800      	cmp	r0, #0
 800ae98:	bfb8      	it	lt
 800ae9a:	f04f 36ff 	movlt.w	r6, #4294967295
 800ae9e:	89a3      	ldrh	r3, [r4, #12]
 800aea0:	061b      	lsls	r3, r3, #24
 800aea2:	d503      	bpl.n	800aeac <_fclose_r+0x64>
 800aea4:	6921      	ldr	r1, [r4, #16]
 800aea6:	4628      	mov	r0, r5
 800aea8:	f7fe fa50 	bl	800934c <_free_r>
 800aeac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeae:	b141      	cbz	r1, 800aec2 <_fclose_r+0x7a>
 800aeb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aeb4:	4299      	cmp	r1, r3
 800aeb6:	d002      	beq.n	800aebe <_fclose_r+0x76>
 800aeb8:	4628      	mov	r0, r5
 800aeba:	f7fe fa47 	bl	800934c <_free_r>
 800aebe:	2300      	movs	r3, #0
 800aec0:	6363      	str	r3, [r4, #52]	; 0x34
 800aec2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aec4:	b121      	cbz	r1, 800aed0 <_fclose_r+0x88>
 800aec6:	4628      	mov	r0, r5
 800aec8:	f7fe fa40 	bl	800934c <_free_r>
 800aecc:	2300      	movs	r3, #0
 800aece:	64a3      	str	r3, [r4, #72]	; 0x48
 800aed0:	f7fe f994 	bl	80091fc <__sfp_lock_acquire>
 800aed4:	2300      	movs	r3, #0
 800aed6:	81a3      	strh	r3, [r4, #12]
 800aed8:	f7fe f991 	bl	80091fe <__sfp_lock_release>
 800aedc:	4630      	mov	r0, r6
 800aede:	bd70      	pop	{r4, r5, r6, pc}
 800aee0:	0800cd84 	.word	0x0800cd84
 800aee4:	0800cda4 	.word	0x0800cda4
 800aee8:	0800cdc4 	.word	0x0800cdc4

0800aeec <_fstat_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4c07      	ldr	r4, [pc, #28]	; (800af0c <_fstat_r+0x20>)
 800aef0:	2300      	movs	r3, #0
 800aef2:	4605      	mov	r5, r0
 800aef4:	4608      	mov	r0, r1
 800aef6:	4611      	mov	r1, r2
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	f001 fb61 	bl	800c5c0 <_fstat>
 800aefe:	1c43      	adds	r3, r0, #1
 800af00:	d102      	bne.n	800af08 <_fstat_r+0x1c>
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	b103      	cbz	r3, 800af08 <_fstat_r+0x1c>
 800af06:	602b      	str	r3, [r5, #0]
 800af08:	bd38      	pop	{r3, r4, r5, pc}
 800af0a:	bf00      	nop
 800af0c:	2000076c 	.word	0x2000076c

0800af10 <_isatty_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	4c06      	ldr	r4, [pc, #24]	; (800af2c <_isatty_r+0x1c>)
 800af14:	2300      	movs	r3, #0
 800af16:	4605      	mov	r5, r0
 800af18:	4608      	mov	r0, r1
 800af1a:	6023      	str	r3, [r4, #0]
 800af1c:	f001 fb68 	bl	800c5f0 <_isatty>
 800af20:	1c43      	adds	r3, r0, #1
 800af22:	d102      	bne.n	800af2a <_isatty_r+0x1a>
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	b103      	cbz	r3, 800af2a <_isatty_r+0x1a>
 800af28:	602b      	str	r3, [r5, #0]
 800af2a:	bd38      	pop	{r3, r4, r5, pc}
 800af2c:	2000076c 	.word	0x2000076c

0800af30 <_lseek_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	4c07      	ldr	r4, [pc, #28]	; (800af50 <_lseek_r+0x20>)
 800af34:	4605      	mov	r5, r0
 800af36:	4608      	mov	r0, r1
 800af38:	4611      	mov	r1, r2
 800af3a:	2200      	movs	r2, #0
 800af3c:	6022      	str	r2, [r4, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	f001 fb66 	bl	800c610 <_lseek>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d102      	bne.n	800af4e <_lseek_r+0x1e>
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	b103      	cbz	r3, 800af4e <_lseek_r+0x1e>
 800af4c:	602b      	str	r3, [r5, #0]
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	2000076c 	.word	0x2000076c

0800af54 <_read_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4c07      	ldr	r4, [pc, #28]	; (800af74 <_read_r+0x20>)
 800af58:	4605      	mov	r5, r0
 800af5a:	4608      	mov	r0, r1
 800af5c:	4611      	mov	r1, r2
 800af5e:	2200      	movs	r2, #0
 800af60:	6022      	str	r2, [r4, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	f001 fb5c 	bl	800c620 <_read>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d102      	bne.n	800af72 <_read_r+0x1e>
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	b103      	cbz	r3, 800af72 <_read_r+0x1e>
 800af70:	602b      	str	r3, [r5, #0]
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	2000076c 	.word	0x2000076c

0800af78 <atan>:
 800af78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7c:	ec55 4b10 	vmov	r4, r5, d0
 800af80:	4bc5      	ldr	r3, [pc, #788]	; (800b298 <atan+0x320>)
 800af82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800af86:	429e      	cmp	r6, r3
 800af88:	46ab      	mov	fp, r5
 800af8a:	dd13      	ble.n	800afb4 <atan+0x3c>
 800af8c:	4ac3      	ldr	r2, [pc, #780]	; (800b29c <atan+0x324>)
 800af8e:	4296      	cmp	r6, r2
 800af90:	dc01      	bgt.n	800af96 <atan+0x1e>
 800af92:	d107      	bne.n	800afa4 <atan+0x2c>
 800af94:	b134      	cbz	r4, 800afa4 <atan+0x2c>
 800af96:	4622      	mov	r2, r4
 800af98:	462b      	mov	r3, r5
 800af9a:	4620      	mov	r0, r4
 800af9c:	4629      	mov	r1, r5
 800af9e:	f7f5 f975 	bl	800028c <__adddf3>
 800afa2:	e13c      	b.n	800b21e <atan+0x2a6>
 800afa4:	f1bb 0f00 	cmp.w	fp, #0
 800afa8:	f300 8133 	bgt.w	800b212 <atan+0x29a>
 800afac:	a19e      	add	r1, pc, #632	; (adr r1, 800b228 <atan+0x2b0>)
 800afae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afb2:	e134      	b.n	800b21e <atan+0x2a6>
 800afb4:	4bba      	ldr	r3, [pc, #744]	; (800b2a0 <atan+0x328>)
 800afb6:	429e      	cmp	r6, r3
 800afb8:	dc14      	bgt.n	800afe4 <atan+0x6c>
 800afba:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800afbe:	429e      	cmp	r6, r3
 800afc0:	f300 8082 	bgt.w	800b0c8 <atan+0x150>
 800afc4:	a39a      	add	r3, pc, #616	; (adr r3, 800b230 <atan+0x2b8>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	ee10 0a10 	vmov	r0, s0
 800afce:	4629      	mov	r1, r5
 800afd0:	f7f5 f95c 	bl	800028c <__adddf3>
 800afd4:	2200      	movs	r2, #0
 800afd6:	4bb3      	ldr	r3, [pc, #716]	; (800b2a4 <atan+0x32c>)
 800afd8:	f7f5 fd9a 	bl	8000b10 <__aeabi_dcmpgt>
 800afdc:	2800      	cmp	r0, #0
 800afde:	f040 811c 	bne.w	800b21a <atan+0x2a2>
 800afe2:	e071      	b.n	800b0c8 <atan+0x150>
 800afe4:	f000 f9b0 	bl	800b348 <fabs>
 800afe8:	4baf      	ldr	r3, [pc, #700]	; (800b2a8 <atan+0x330>)
 800afea:	429e      	cmp	r6, r3
 800afec:	ec55 4b10 	vmov	r4, r5, d0
 800aff0:	dc3d      	bgt.n	800b06e <atan+0xf6>
 800aff2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800aff6:	429e      	cmp	r6, r3
 800aff8:	dc1f      	bgt.n	800b03a <atan+0xc2>
 800affa:	ee10 2a10 	vmov	r2, s0
 800affe:	ee10 0a10 	vmov	r0, s0
 800b002:	462b      	mov	r3, r5
 800b004:	4629      	mov	r1, r5
 800b006:	f7f5 f941 	bl	800028c <__adddf3>
 800b00a:	2200      	movs	r2, #0
 800b00c:	4ba5      	ldr	r3, [pc, #660]	; (800b2a4 <atan+0x32c>)
 800b00e:	f7f5 f93b 	bl	8000288 <__aeabi_dsub>
 800b012:	2200      	movs	r2, #0
 800b014:	4606      	mov	r6, r0
 800b016:	460f      	mov	r7, r1
 800b018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b01c:	4620      	mov	r0, r4
 800b01e:	4629      	mov	r1, r5
 800b020:	f7f5 f934 	bl	800028c <__adddf3>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4630      	mov	r0, r6
 800b02a:	4639      	mov	r1, r7
 800b02c:	f7f5 fc0a 	bl	8000844 <__aeabi_ddiv>
 800b030:	f04f 0a00 	mov.w	sl, #0
 800b034:	4604      	mov	r4, r0
 800b036:	460d      	mov	r5, r1
 800b038:	e048      	b.n	800b0cc <atan+0x154>
 800b03a:	ee10 0a10 	vmov	r0, s0
 800b03e:	2200      	movs	r2, #0
 800b040:	4b98      	ldr	r3, [pc, #608]	; (800b2a4 <atan+0x32c>)
 800b042:	4629      	mov	r1, r5
 800b044:	f7f5 f920 	bl	8000288 <__aeabi_dsub>
 800b048:	2200      	movs	r2, #0
 800b04a:	4606      	mov	r6, r0
 800b04c:	460f      	mov	r7, r1
 800b04e:	4b95      	ldr	r3, [pc, #596]	; (800b2a4 <atan+0x32c>)
 800b050:	4620      	mov	r0, r4
 800b052:	4629      	mov	r1, r5
 800b054:	f7f5 f91a 	bl	800028c <__adddf3>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4630      	mov	r0, r6
 800b05e:	4639      	mov	r1, r7
 800b060:	f7f5 fbf0 	bl	8000844 <__aeabi_ddiv>
 800b064:	f04f 0a01 	mov.w	sl, #1
 800b068:	4604      	mov	r4, r0
 800b06a:	460d      	mov	r5, r1
 800b06c:	e02e      	b.n	800b0cc <atan+0x154>
 800b06e:	4b8f      	ldr	r3, [pc, #572]	; (800b2ac <atan+0x334>)
 800b070:	429e      	cmp	r6, r3
 800b072:	dc1d      	bgt.n	800b0b0 <atan+0x138>
 800b074:	ee10 0a10 	vmov	r0, s0
 800b078:	2200      	movs	r2, #0
 800b07a:	4b8d      	ldr	r3, [pc, #564]	; (800b2b0 <atan+0x338>)
 800b07c:	4629      	mov	r1, r5
 800b07e:	f7f5 f903 	bl	8000288 <__aeabi_dsub>
 800b082:	2200      	movs	r2, #0
 800b084:	4606      	mov	r6, r0
 800b086:	460f      	mov	r7, r1
 800b088:	4b89      	ldr	r3, [pc, #548]	; (800b2b0 <atan+0x338>)
 800b08a:	4620      	mov	r0, r4
 800b08c:	4629      	mov	r1, r5
 800b08e:	f7f5 faaf 	bl	80005f0 <__aeabi_dmul>
 800b092:	2200      	movs	r2, #0
 800b094:	4b83      	ldr	r3, [pc, #524]	; (800b2a4 <atan+0x32c>)
 800b096:	f7f5 f8f9 	bl	800028c <__adddf3>
 800b09a:	4602      	mov	r2, r0
 800b09c:	460b      	mov	r3, r1
 800b09e:	4630      	mov	r0, r6
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	f7f5 fbcf 	bl	8000844 <__aeabi_ddiv>
 800b0a6:	f04f 0a02 	mov.w	sl, #2
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	460d      	mov	r5, r1
 800b0ae:	e00d      	b.n	800b0cc <atan+0x154>
 800b0b0:	462b      	mov	r3, r5
 800b0b2:	ee10 2a10 	vmov	r2, s0
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	497e      	ldr	r1, [pc, #504]	; (800b2b4 <atan+0x33c>)
 800b0ba:	f7f5 fbc3 	bl	8000844 <__aeabi_ddiv>
 800b0be:	f04f 0a03 	mov.w	sl, #3
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	e001      	b.n	800b0cc <atan+0x154>
 800b0c8:	f04f 3aff 	mov.w	sl, #4294967295
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	462b      	mov	r3, r5
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	f7f5 fa8c 	bl	80005f0 <__aeabi_dmul>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4680      	mov	r8, r0
 800b0de:	4689      	mov	r9, r1
 800b0e0:	f7f5 fa86 	bl	80005f0 <__aeabi_dmul>
 800b0e4:	a354      	add	r3, pc, #336	; (adr r3, 800b238 <atan+0x2c0>)
 800b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	460f      	mov	r7, r1
 800b0ee:	f7f5 fa7f 	bl	80005f0 <__aeabi_dmul>
 800b0f2:	a353      	add	r3, pc, #332	; (adr r3, 800b240 <atan+0x2c8>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	f7f5 f8c8 	bl	800028c <__adddf3>
 800b0fc:	4632      	mov	r2, r6
 800b0fe:	463b      	mov	r3, r7
 800b100:	f7f5 fa76 	bl	80005f0 <__aeabi_dmul>
 800b104:	a350      	add	r3, pc, #320	; (adr r3, 800b248 <atan+0x2d0>)
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	f7f5 f8bf 	bl	800028c <__adddf3>
 800b10e:	4632      	mov	r2, r6
 800b110:	463b      	mov	r3, r7
 800b112:	f7f5 fa6d 	bl	80005f0 <__aeabi_dmul>
 800b116:	a34e      	add	r3, pc, #312	; (adr r3, 800b250 <atan+0x2d8>)
 800b118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11c:	f7f5 f8b6 	bl	800028c <__adddf3>
 800b120:	4632      	mov	r2, r6
 800b122:	463b      	mov	r3, r7
 800b124:	f7f5 fa64 	bl	80005f0 <__aeabi_dmul>
 800b128:	a34b      	add	r3, pc, #300	; (adr r3, 800b258 <atan+0x2e0>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	f7f5 f8ad 	bl	800028c <__adddf3>
 800b132:	4632      	mov	r2, r6
 800b134:	463b      	mov	r3, r7
 800b136:	f7f5 fa5b 	bl	80005f0 <__aeabi_dmul>
 800b13a:	a349      	add	r3, pc, #292	; (adr r3, 800b260 <atan+0x2e8>)
 800b13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b140:	f7f5 f8a4 	bl	800028c <__adddf3>
 800b144:	4642      	mov	r2, r8
 800b146:	464b      	mov	r3, r9
 800b148:	f7f5 fa52 	bl	80005f0 <__aeabi_dmul>
 800b14c:	a346      	add	r3, pc, #280	; (adr r3, 800b268 <atan+0x2f0>)
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	4680      	mov	r8, r0
 800b154:	4689      	mov	r9, r1
 800b156:	4630      	mov	r0, r6
 800b158:	4639      	mov	r1, r7
 800b15a:	f7f5 fa49 	bl	80005f0 <__aeabi_dmul>
 800b15e:	a344      	add	r3, pc, #272	; (adr r3, 800b270 <atan+0x2f8>)
 800b160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b164:	f7f5 f890 	bl	8000288 <__aeabi_dsub>
 800b168:	4632      	mov	r2, r6
 800b16a:	463b      	mov	r3, r7
 800b16c:	f7f5 fa40 	bl	80005f0 <__aeabi_dmul>
 800b170:	a341      	add	r3, pc, #260	; (adr r3, 800b278 <atan+0x300>)
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	f7f5 f887 	bl	8000288 <__aeabi_dsub>
 800b17a:	4632      	mov	r2, r6
 800b17c:	463b      	mov	r3, r7
 800b17e:	f7f5 fa37 	bl	80005f0 <__aeabi_dmul>
 800b182:	a33f      	add	r3, pc, #252	; (adr r3, 800b280 <atan+0x308>)
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f7f5 f87e 	bl	8000288 <__aeabi_dsub>
 800b18c:	4632      	mov	r2, r6
 800b18e:	463b      	mov	r3, r7
 800b190:	f7f5 fa2e 	bl	80005f0 <__aeabi_dmul>
 800b194:	a33c      	add	r3, pc, #240	; (adr r3, 800b288 <atan+0x310>)
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	f7f5 f875 	bl	8000288 <__aeabi_dsub>
 800b19e:	4632      	mov	r2, r6
 800b1a0:	463b      	mov	r3, r7
 800b1a2:	f7f5 fa25 	bl	80005f0 <__aeabi_dmul>
 800b1a6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	d10e      	bne.n	800b1ce <atan+0x256>
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	f7f5 f86a 	bl	800028c <__adddf3>
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	462b      	mov	r3, r5
 800b1bc:	f7f5 fa18 	bl	80005f0 <__aeabi_dmul>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 f85e 	bl	8000288 <__aeabi_dsub>
 800b1cc:	e027      	b.n	800b21e <atan+0x2a6>
 800b1ce:	4640      	mov	r0, r8
 800b1d0:	4649      	mov	r1, r9
 800b1d2:	f7f5 f85b 	bl	800028c <__adddf3>
 800b1d6:	4622      	mov	r2, r4
 800b1d8:	462b      	mov	r3, r5
 800b1da:	f7f5 fa09 	bl	80005f0 <__aeabi_dmul>
 800b1de:	4e36      	ldr	r6, [pc, #216]	; (800b2b8 <atan+0x340>)
 800b1e0:	4b36      	ldr	r3, [pc, #216]	; (800b2bc <atan+0x344>)
 800b1e2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b1e6:	4456      	add	r6, sl
 800b1e8:	449a      	add	sl, r3
 800b1ea:	e9da 2300 	ldrd	r2, r3, [sl]
 800b1ee:	f7f5 f84b 	bl	8000288 <__aeabi_dsub>
 800b1f2:	4622      	mov	r2, r4
 800b1f4:	462b      	mov	r3, r5
 800b1f6:	f7f5 f847 	bl	8000288 <__aeabi_dsub>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b202:	f7f5 f841 	bl	8000288 <__aeabi_dsub>
 800b206:	f1bb 0f00 	cmp.w	fp, #0
 800b20a:	da08      	bge.n	800b21e <atan+0x2a6>
 800b20c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b210:	e005      	b.n	800b21e <atan+0x2a6>
 800b212:	a11f      	add	r1, pc, #124	; (adr r1, 800b290 <atan+0x318>)
 800b214:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b218:	e001      	b.n	800b21e <atan+0x2a6>
 800b21a:	4620      	mov	r0, r4
 800b21c:	4629      	mov	r1, r5
 800b21e:	ec41 0b10 	vmov	d0, r0, r1
 800b222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b226:	bf00      	nop
 800b228:	54442d18 	.word	0x54442d18
 800b22c:	bff921fb 	.word	0xbff921fb
 800b230:	8800759c 	.word	0x8800759c
 800b234:	7e37e43c 	.word	0x7e37e43c
 800b238:	e322da11 	.word	0xe322da11
 800b23c:	3f90ad3a 	.word	0x3f90ad3a
 800b240:	24760deb 	.word	0x24760deb
 800b244:	3fa97b4b 	.word	0x3fa97b4b
 800b248:	a0d03d51 	.word	0xa0d03d51
 800b24c:	3fb10d66 	.word	0x3fb10d66
 800b250:	c54c206e 	.word	0xc54c206e
 800b254:	3fb745cd 	.word	0x3fb745cd
 800b258:	920083ff 	.word	0x920083ff
 800b25c:	3fc24924 	.word	0x3fc24924
 800b260:	5555550d 	.word	0x5555550d
 800b264:	3fd55555 	.word	0x3fd55555
 800b268:	2c6a6c2f 	.word	0x2c6a6c2f
 800b26c:	bfa2b444 	.word	0xbfa2b444
 800b270:	52defd9a 	.word	0x52defd9a
 800b274:	3fadde2d 	.word	0x3fadde2d
 800b278:	af749a6d 	.word	0xaf749a6d
 800b27c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b280:	fe231671 	.word	0xfe231671
 800b284:	3fbc71c6 	.word	0x3fbc71c6
 800b288:	9998ebc4 	.word	0x9998ebc4
 800b28c:	3fc99999 	.word	0x3fc99999
 800b290:	54442d18 	.word	0x54442d18
 800b294:	3ff921fb 	.word	0x3ff921fb
 800b298:	440fffff 	.word	0x440fffff
 800b29c:	7ff00000 	.word	0x7ff00000
 800b2a0:	3fdbffff 	.word	0x3fdbffff
 800b2a4:	3ff00000 	.word	0x3ff00000
 800b2a8:	3ff2ffff 	.word	0x3ff2ffff
 800b2ac:	40037fff 	.word	0x40037fff
 800b2b0:	3ff80000 	.word	0x3ff80000
 800b2b4:	bff00000 	.word	0xbff00000
 800b2b8:	0800cf10 	.word	0x0800cf10
 800b2bc:	0800cef0 	.word	0x0800cef0

0800b2c0 <cos>:
 800b2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2c2:	ec51 0b10 	vmov	r0, r1, d0
 800b2c6:	4a1e      	ldr	r2, [pc, #120]	; (800b340 <cos+0x80>)
 800b2c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	dc02      	bgt.n	800b2d6 <cos+0x16>
 800b2d0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800b338 <cos+0x78>
 800b2d4:	e016      	b.n	800b304 <cos+0x44>
 800b2d6:	4a1b      	ldr	r2, [pc, #108]	; (800b344 <cos+0x84>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	dd05      	ble.n	800b2e8 <cos+0x28>
 800b2dc:	ee10 2a10 	vmov	r2, s0
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	f7f4 ffd1 	bl	8000288 <__aeabi_dsub>
 800b2e6:	e021      	b.n	800b32c <cos+0x6c>
 800b2e8:	4668      	mov	r0, sp
 800b2ea:	f000 f961 	bl	800b5b0 <__ieee754_rem_pio2>
 800b2ee:	f000 0003 	and.w	r0, r0, #3
 800b2f2:	2801      	cmp	r0, #1
 800b2f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b2f8:	ed9d 0b00 	vldr	d0, [sp]
 800b2fc:	d005      	beq.n	800b30a <cos+0x4a>
 800b2fe:	2802      	cmp	r0, #2
 800b300:	d006      	beq.n	800b310 <cos+0x50>
 800b302:	b970      	cbnz	r0, 800b322 <cos+0x62>
 800b304:	f000 fb54 	bl	800b9b0 <__kernel_cos>
 800b308:	e00e      	b.n	800b328 <cos+0x68>
 800b30a:	f000 ff89 	bl	800c220 <__kernel_sin>
 800b30e:	e001      	b.n	800b314 <cos+0x54>
 800b310:	f000 fb4e 	bl	800b9b0 <__kernel_cos>
 800b314:	ec53 2b10 	vmov	r2, r3, d0
 800b318:	ee10 0a10 	vmov	r0, s0
 800b31c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b320:	e004      	b.n	800b32c <cos+0x6c>
 800b322:	2001      	movs	r0, #1
 800b324:	f000 ff7c 	bl	800c220 <__kernel_sin>
 800b328:	ec51 0b10 	vmov	r0, r1, d0
 800b32c:	ec41 0b10 	vmov	d0, r0, r1
 800b330:	b005      	add	sp, #20
 800b332:	f85d fb04 	ldr.w	pc, [sp], #4
 800b336:	bf00      	nop
	...
 800b340:	3fe921fb 	.word	0x3fe921fb
 800b344:	7fefffff 	.word	0x7fefffff

0800b348 <fabs>:
 800b348:	ec53 2b10 	vmov	r2, r3, d0
 800b34c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b350:	ec43 2b10 	vmov	d0, r2, r3
 800b354:	4770      	bx	lr
	...

0800b358 <sin>:
 800b358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b35a:	ec51 0b10 	vmov	r0, r1, d0
 800b35e:	4a20      	ldr	r2, [pc, #128]	; (800b3e0 <sin+0x88>)
 800b360:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b364:	4293      	cmp	r3, r2
 800b366:	dc03      	bgt.n	800b370 <sin+0x18>
 800b368:	2000      	movs	r0, #0
 800b36a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800b3d8 <sin+0x80>
 800b36e:	e017      	b.n	800b3a0 <sin+0x48>
 800b370:	4a1c      	ldr	r2, [pc, #112]	; (800b3e4 <sin+0x8c>)
 800b372:	4293      	cmp	r3, r2
 800b374:	dd05      	ble.n	800b382 <sin+0x2a>
 800b376:	ee10 2a10 	vmov	r2, s0
 800b37a:	460b      	mov	r3, r1
 800b37c:	f7f4 ff84 	bl	8000288 <__aeabi_dsub>
 800b380:	e022      	b.n	800b3c8 <sin+0x70>
 800b382:	4668      	mov	r0, sp
 800b384:	f000 f914 	bl	800b5b0 <__ieee754_rem_pio2>
 800b388:	f000 0003 	and.w	r0, r0, #3
 800b38c:	2801      	cmp	r0, #1
 800b38e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b392:	ed9d 0b00 	vldr	d0, [sp]
 800b396:	d008      	beq.n	800b3aa <sin+0x52>
 800b398:	2802      	cmp	r0, #2
 800b39a:	d009      	beq.n	800b3b0 <sin+0x58>
 800b39c:	b960      	cbnz	r0, 800b3b8 <sin+0x60>
 800b39e:	2001      	movs	r0, #1
 800b3a0:	f000 ff3e 	bl	800c220 <__kernel_sin>
 800b3a4:	ec51 0b10 	vmov	r0, r1, d0
 800b3a8:	e00e      	b.n	800b3c8 <sin+0x70>
 800b3aa:	f000 fb01 	bl	800b9b0 <__kernel_cos>
 800b3ae:	e7f9      	b.n	800b3a4 <sin+0x4c>
 800b3b0:	2001      	movs	r0, #1
 800b3b2:	f000 ff35 	bl	800c220 <__kernel_sin>
 800b3b6:	e001      	b.n	800b3bc <sin+0x64>
 800b3b8:	f000 fafa 	bl	800b9b0 <__kernel_cos>
 800b3bc:	ec53 2b10 	vmov	r2, r3, d0
 800b3c0:	ee10 0a10 	vmov	r0, s0
 800b3c4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b3c8:	ec41 0b10 	vmov	d0, r0, r1
 800b3cc:	b005      	add	sp, #20
 800b3ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3d2:	bf00      	nop
 800b3d4:	f3af 8000 	nop.w
	...
 800b3e0:	3fe921fb 	.word	0x3fe921fb
 800b3e4:	7fefffff 	.word	0x7fefffff

0800b3e8 <atan2>:
 800b3e8:	f000 b802 	b.w	800b3f0 <__ieee754_atan2>
 800b3ec:	0000      	movs	r0, r0
	...

0800b3f0 <__ieee754_atan2>:
 800b3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f4:	ec57 6b11 	vmov	r6, r7, d1
 800b3f8:	4273      	negs	r3, r6
 800b3fa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b3fe:	4333      	orrs	r3, r6
 800b400:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800b5a8 <__ieee754_atan2+0x1b8>
 800b404:	ec51 0b10 	vmov	r0, r1, d0
 800b408:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b40c:	4563      	cmp	r3, ip
 800b40e:	ee11 8a10 	vmov	r8, s2
 800b412:	ee10 9a10 	vmov	r9, s0
 800b416:	468e      	mov	lr, r1
 800b418:	d807      	bhi.n	800b42a <__ieee754_atan2+0x3a>
 800b41a:	4244      	negs	r4, r0
 800b41c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b420:	4304      	orrs	r4, r0
 800b422:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b426:	4564      	cmp	r4, ip
 800b428:	d906      	bls.n	800b438 <__ieee754_atan2+0x48>
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4630      	mov	r0, r6
 800b430:	4639      	mov	r1, r7
 800b432:	f7f4 ff2b 	bl	800028c <__adddf3>
 800b436:	e08d      	b.n	800b554 <__ieee754_atan2+0x164>
 800b438:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b43c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b440:	4334      	orrs	r4, r6
 800b442:	d103      	bne.n	800b44c <__ieee754_atan2+0x5c>
 800b444:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b448:	f7ff bd96 	b.w	800af78 <atan>
 800b44c:	17bc      	asrs	r4, r7, #30
 800b44e:	f004 0402 	and.w	r4, r4, #2
 800b452:	ea59 0903 	orrs.w	r9, r9, r3
 800b456:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b45a:	d104      	bne.n	800b466 <__ieee754_atan2+0x76>
 800b45c:	2c02      	cmp	r4, #2
 800b45e:	d06c      	beq.n	800b53a <__ieee754_atan2+0x14a>
 800b460:	2c03      	cmp	r4, #3
 800b462:	d177      	bne.n	800b554 <__ieee754_atan2+0x164>
 800b464:	e023      	b.n	800b4ae <__ieee754_atan2+0xbe>
 800b466:	ea58 0802 	orrs.w	r8, r8, r2
 800b46a:	d026      	beq.n	800b4ba <__ieee754_atan2+0xca>
 800b46c:	4562      	cmp	r2, ip
 800b46e:	d122      	bne.n	800b4b6 <__ieee754_atan2+0xc6>
 800b470:	4293      	cmp	r3, r2
 800b472:	d111      	bne.n	800b498 <__ieee754_atan2+0xa8>
 800b474:	2c02      	cmp	r4, #2
 800b476:	d007      	beq.n	800b488 <__ieee754_atan2+0x98>
 800b478:	2c03      	cmp	r4, #3
 800b47a:	d009      	beq.n	800b490 <__ieee754_atan2+0xa0>
 800b47c:	2c01      	cmp	r4, #1
 800b47e:	d160      	bne.n	800b542 <__ieee754_atan2+0x152>
 800b480:	a137      	add	r1, pc, #220	; (adr r1, 800b560 <__ieee754_atan2+0x170>)
 800b482:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b486:	e065      	b.n	800b554 <__ieee754_atan2+0x164>
 800b488:	a137      	add	r1, pc, #220	; (adr r1, 800b568 <__ieee754_atan2+0x178>)
 800b48a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b48e:	e061      	b.n	800b554 <__ieee754_atan2+0x164>
 800b490:	a137      	add	r1, pc, #220	; (adr r1, 800b570 <__ieee754_atan2+0x180>)
 800b492:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b496:	e05d      	b.n	800b554 <__ieee754_atan2+0x164>
 800b498:	2c02      	cmp	r4, #2
 800b49a:	d04e      	beq.n	800b53a <__ieee754_atan2+0x14a>
 800b49c:	2c03      	cmp	r4, #3
 800b49e:	d006      	beq.n	800b4ae <__ieee754_atan2+0xbe>
 800b4a0:	2c01      	cmp	r4, #1
 800b4a2:	f04f 0000 	mov.w	r0, #0
 800b4a6:	d150      	bne.n	800b54a <__ieee754_atan2+0x15a>
 800b4a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b4ac:	e052      	b.n	800b554 <__ieee754_atan2+0x164>
 800b4ae:	a132      	add	r1, pc, #200	; (adr r1, 800b578 <__ieee754_atan2+0x188>)
 800b4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b4:	e04e      	b.n	800b554 <__ieee754_atan2+0x164>
 800b4b6:	4563      	cmp	r3, ip
 800b4b8:	d106      	bne.n	800b4c8 <__ieee754_atan2+0xd8>
 800b4ba:	f1be 0f00 	cmp.w	lr, #0
 800b4be:	da46      	bge.n	800b54e <__ieee754_atan2+0x15e>
 800b4c0:	a12f      	add	r1, pc, #188	; (adr r1, 800b580 <__ieee754_atan2+0x190>)
 800b4c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c6:	e045      	b.n	800b554 <__ieee754_atan2+0x164>
 800b4c8:	1a9b      	subs	r3, r3, r2
 800b4ca:	151b      	asrs	r3, r3, #20
 800b4cc:	2b3c      	cmp	r3, #60	; 0x3c
 800b4ce:	dc10      	bgt.n	800b4f2 <__ieee754_atan2+0x102>
 800b4d0:	2f00      	cmp	r7, #0
 800b4d2:	da01      	bge.n	800b4d8 <__ieee754_atan2+0xe8>
 800b4d4:	333c      	adds	r3, #60	; 0x3c
 800b4d6:	db10      	blt.n	800b4fa <__ieee754_atan2+0x10a>
 800b4d8:	4632      	mov	r2, r6
 800b4da:	463b      	mov	r3, r7
 800b4dc:	f7f5 f9b2 	bl	8000844 <__aeabi_ddiv>
 800b4e0:	ec41 0b10 	vmov	d0, r0, r1
 800b4e4:	f7ff ff30 	bl	800b348 <fabs>
 800b4e8:	f7ff fd46 	bl	800af78 <atan>
 800b4ec:	ec51 0b10 	vmov	r0, r1, d0
 800b4f0:	e005      	b.n	800b4fe <__ieee754_atan2+0x10e>
 800b4f2:	a125      	add	r1, pc, #148	; (adr r1, 800b588 <__ieee754_atan2+0x198>)
 800b4f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4f8:	e001      	b.n	800b4fe <__ieee754_atan2+0x10e>
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	2c01      	cmp	r4, #1
 800b500:	d00b      	beq.n	800b51a <__ieee754_atan2+0x12a>
 800b502:	2c02      	cmp	r4, #2
 800b504:	d00c      	beq.n	800b520 <__ieee754_atan2+0x130>
 800b506:	b32c      	cbz	r4, 800b554 <__ieee754_atan2+0x164>
 800b508:	a321      	add	r3, pc, #132	; (adr r3, 800b590 <__ieee754_atan2+0x1a0>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	f7f4 febb 	bl	8000288 <__aeabi_dsub>
 800b512:	a321      	add	r3, pc, #132	; (adr r3, 800b598 <__ieee754_atan2+0x1a8>)
 800b514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b518:	e00c      	b.n	800b534 <__ieee754_atan2+0x144>
 800b51a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b51e:	e019      	b.n	800b554 <__ieee754_atan2+0x164>
 800b520:	a31b      	add	r3, pc, #108	; (adr r3, 800b590 <__ieee754_atan2+0x1a0>)
 800b522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b526:	f7f4 feaf 	bl	8000288 <__aeabi_dsub>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	a11a      	add	r1, pc, #104	; (adr r1, 800b598 <__ieee754_atan2+0x1a8>)
 800b530:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b534:	f7f4 fea8 	bl	8000288 <__aeabi_dsub>
 800b538:	e00c      	b.n	800b554 <__ieee754_atan2+0x164>
 800b53a:	a117      	add	r1, pc, #92	; (adr r1, 800b598 <__ieee754_atan2+0x1a8>)
 800b53c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b540:	e008      	b.n	800b554 <__ieee754_atan2+0x164>
 800b542:	a117      	add	r1, pc, #92	; (adr r1, 800b5a0 <__ieee754_atan2+0x1b0>)
 800b544:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b548:	e004      	b.n	800b554 <__ieee754_atan2+0x164>
 800b54a:	2100      	movs	r1, #0
 800b54c:	e002      	b.n	800b554 <__ieee754_atan2+0x164>
 800b54e:	a10e      	add	r1, pc, #56	; (adr r1, 800b588 <__ieee754_atan2+0x198>)
 800b550:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b554:	ec41 0b10 	vmov	d0, r0, r1
 800b558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b55c:	f3af 8000 	nop.w
 800b560:	54442d18 	.word	0x54442d18
 800b564:	bfe921fb 	.word	0xbfe921fb
 800b568:	7f3321d2 	.word	0x7f3321d2
 800b56c:	4002d97c 	.word	0x4002d97c
 800b570:	7f3321d2 	.word	0x7f3321d2
 800b574:	c002d97c 	.word	0xc002d97c
 800b578:	54442d18 	.word	0x54442d18
 800b57c:	c00921fb 	.word	0xc00921fb
 800b580:	54442d18 	.word	0x54442d18
 800b584:	bff921fb 	.word	0xbff921fb
 800b588:	54442d18 	.word	0x54442d18
 800b58c:	3ff921fb 	.word	0x3ff921fb
 800b590:	33145c07 	.word	0x33145c07
 800b594:	3ca1a626 	.word	0x3ca1a626
 800b598:	54442d18 	.word	0x54442d18
 800b59c:	400921fb 	.word	0x400921fb
 800b5a0:	54442d18 	.word	0x54442d18
 800b5a4:	3fe921fb 	.word	0x3fe921fb
 800b5a8:	7ff00000 	.word	0x7ff00000
 800b5ac:	00000000 	.word	0x00000000

0800b5b0 <__ieee754_rem_pio2>:
 800b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	ec55 4b10 	vmov	r4, r5, d0
 800b5b8:	4bc7      	ldr	r3, [pc, #796]	; (800b8d8 <__ieee754_rem_pio2+0x328>)
 800b5ba:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b5be:	4598      	cmp	r8, r3
 800b5c0:	b08d      	sub	sp, #52	; 0x34
 800b5c2:	4682      	mov	sl, r0
 800b5c4:	46ab      	mov	fp, r5
 800b5c6:	dc06      	bgt.n	800b5d6 <__ieee754_rem_pio2+0x26>
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	ed8a 0b00 	vstr	d0, [sl]
 800b5d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b5d4:	e160      	b.n	800b898 <__ieee754_rem_pio2+0x2e8>
 800b5d6:	4bc1      	ldr	r3, [pc, #772]	; (800b8dc <__ieee754_rem_pio2+0x32c>)
 800b5d8:	4598      	cmp	r8, r3
 800b5da:	dc71      	bgt.n	800b6c0 <__ieee754_rem_pio2+0x110>
 800b5dc:	2d00      	cmp	r5, #0
 800b5de:	a3b0      	add	r3, pc, #704	; (adr r3, 800b8a0 <__ieee754_rem_pio2+0x2f0>)
 800b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e4:	ee10 0a10 	vmov	r0, s0
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	4ebd      	ldr	r6, [pc, #756]	; (800b8e0 <__ieee754_rem_pio2+0x330>)
 800b5ec:	dd33      	ble.n	800b656 <__ieee754_rem_pio2+0xa6>
 800b5ee:	f7f4 fe4b 	bl	8000288 <__aeabi_dsub>
 800b5f2:	45b0      	cmp	r8, r6
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	460d      	mov	r5, r1
 800b5f8:	d010      	beq.n	800b61c <__ieee754_rem_pio2+0x6c>
 800b5fa:	a3ab      	add	r3, pc, #684	; (adr r3, 800b8a8 <__ieee754_rem_pio2+0x2f8>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f7f4 fe42 	bl	8000288 <__aeabi_dsub>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	e9ca 2300 	strd	r2, r3, [sl]
 800b60c:	4620      	mov	r0, r4
 800b60e:	4629      	mov	r1, r5
 800b610:	f7f4 fe3a 	bl	8000288 <__aeabi_dsub>
 800b614:	a3a4      	add	r3, pc, #656	; (adr r3, 800b8a8 <__ieee754_rem_pio2+0x2f8>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	e016      	b.n	800b64a <__ieee754_rem_pio2+0x9a>
 800b61c:	a3a4      	add	r3, pc, #656	; (adr r3, 800b8b0 <__ieee754_rem_pio2+0x300>)
 800b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b622:	f7f4 fe31 	bl	8000288 <__aeabi_dsub>
 800b626:	a3a4      	add	r3, pc, #656	; (adr r3, 800b8b8 <__ieee754_rem_pio2+0x308>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	4604      	mov	r4, r0
 800b62e:	460d      	mov	r5, r1
 800b630:	f7f4 fe2a 	bl	8000288 <__aeabi_dsub>
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	e9ca 2300 	strd	r2, r3, [sl]
 800b63c:	4620      	mov	r0, r4
 800b63e:	4629      	mov	r1, r5
 800b640:	f7f4 fe22 	bl	8000288 <__aeabi_dsub>
 800b644:	a39c      	add	r3, pc, #624	; (adr r3, 800b8b8 <__ieee754_rem_pio2+0x308>)
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	f7f4 fe1d 	bl	8000288 <__aeabi_dsub>
 800b64e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b652:	2001      	movs	r0, #1
 800b654:	e1a2      	b.n	800b99c <__ieee754_rem_pio2+0x3ec>
 800b656:	f7f4 fe19 	bl	800028c <__adddf3>
 800b65a:	45b0      	cmp	r8, r6
 800b65c:	4604      	mov	r4, r0
 800b65e:	460d      	mov	r5, r1
 800b660:	d010      	beq.n	800b684 <__ieee754_rem_pio2+0xd4>
 800b662:	a391      	add	r3, pc, #580	; (adr r3, 800b8a8 <__ieee754_rem_pio2+0x2f8>)
 800b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b668:	f7f4 fe10 	bl	800028c <__adddf3>
 800b66c:	4602      	mov	r2, r0
 800b66e:	460b      	mov	r3, r1
 800b670:	e9ca 2300 	strd	r2, r3, [sl]
 800b674:	4620      	mov	r0, r4
 800b676:	4629      	mov	r1, r5
 800b678:	f7f4 fe06 	bl	8000288 <__aeabi_dsub>
 800b67c:	a38a      	add	r3, pc, #552	; (adr r3, 800b8a8 <__ieee754_rem_pio2+0x2f8>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	e016      	b.n	800b6b2 <__ieee754_rem_pio2+0x102>
 800b684:	a38a      	add	r3, pc, #552	; (adr r3, 800b8b0 <__ieee754_rem_pio2+0x300>)
 800b686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68a:	f7f4 fdff 	bl	800028c <__adddf3>
 800b68e:	a38a      	add	r3, pc, #552	; (adr r3, 800b8b8 <__ieee754_rem_pio2+0x308>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	4604      	mov	r4, r0
 800b696:	460d      	mov	r5, r1
 800b698:	f7f4 fdf8 	bl	800028c <__adddf3>
 800b69c:	4602      	mov	r2, r0
 800b69e:	460b      	mov	r3, r1
 800b6a0:	e9ca 2300 	strd	r2, r3, [sl]
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	f7f4 fdee 	bl	8000288 <__aeabi_dsub>
 800b6ac:	a382      	add	r3, pc, #520	; (adr r3, 800b8b8 <__ieee754_rem_pio2+0x308>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f7f4 fdeb 	bl	800028c <__adddf3>
 800b6b6:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b6be:	e16d      	b.n	800b99c <__ieee754_rem_pio2+0x3ec>
 800b6c0:	4b88      	ldr	r3, [pc, #544]	; (800b8e4 <__ieee754_rem_pio2+0x334>)
 800b6c2:	4598      	cmp	r8, r3
 800b6c4:	f300 80da 	bgt.w	800b87c <__ieee754_rem_pio2+0x2cc>
 800b6c8:	f7ff fe3e 	bl	800b348 <fabs>
 800b6cc:	ec55 4b10 	vmov	r4, r5, d0
 800b6d0:	ee10 0a10 	vmov	r0, s0
 800b6d4:	a37a      	add	r3, pc, #488	; (adr r3, 800b8c0 <__ieee754_rem_pio2+0x310>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	4629      	mov	r1, r5
 800b6dc:	f7f4 ff88 	bl	80005f0 <__aeabi_dmul>
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	4b81      	ldr	r3, [pc, #516]	; (800b8e8 <__ieee754_rem_pio2+0x338>)
 800b6e4:	f7f4 fdd2 	bl	800028c <__adddf3>
 800b6e8:	f7f5 fa32 	bl	8000b50 <__aeabi_d2iz>
 800b6ec:	4681      	mov	r9, r0
 800b6ee:	f7f4 ff19 	bl	8000524 <__aeabi_i2d>
 800b6f2:	a36b      	add	r3, pc, #428	; (adr r3, 800b8a0 <__ieee754_rem_pio2+0x2f0>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6fc:	f7f4 ff78 	bl	80005f0 <__aeabi_dmul>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f7f4 fdbe 	bl	8000288 <__aeabi_dsub>
 800b70c:	a366      	add	r3, pc, #408	; (adr r3, 800b8a8 <__ieee754_rem_pio2+0x2f8>)
 800b70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b712:	4604      	mov	r4, r0
 800b714:	460d      	mov	r5, r1
 800b716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b71a:	f7f4 ff69 	bl	80005f0 <__aeabi_dmul>
 800b71e:	f1b9 0f1f 	cmp.w	r9, #31
 800b722:	4606      	mov	r6, r0
 800b724:	460f      	mov	r7, r1
 800b726:	dc06      	bgt.n	800b736 <__ieee754_rem_pio2+0x186>
 800b728:	f109 32ff 	add.w	r2, r9, #4294967295
 800b72c:	4b6f      	ldr	r3, [pc, #444]	; (800b8ec <__ieee754_rem_pio2+0x33c>)
 800b72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b732:	4598      	cmp	r8, r3
 800b734:	d172      	bne.n	800b81c <__ieee754_rem_pio2+0x26c>
 800b736:	463b      	mov	r3, r7
 800b738:	4632      	mov	r2, r6
 800b73a:	4620      	mov	r0, r4
 800b73c:	4629      	mov	r1, r5
 800b73e:	f7f4 fda3 	bl	8000288 <__aeabi_dsub>
 800b742:	ea4f 5828 	mov.w	r8, r8, asr #20
 800b746:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b74a:	ebc3 0308 	rsb	r3, r3, r8
 800b74e:	2b10      	cmp	r3, #16
 800b750:	e9ca 0100 	strd	r0, r1, [sl]
 800b754:	dd6d      	ble.n	800b832 <__ieee754_rem_pio2+0x282>
 800b756:	a356      	add	r3, pc, #344	; (adr r3, 800b8b0 <__ieee754_rem_pio2+0x300>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b760:	f7f4 ff46 	bl	80005f0 <__aeabi_dmul>
 800b764:	4606      	mov	r6, r0
 800b766:	460f      	mov	r7, r1
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	4620      	mov	r0, r4
 800b76e:	4629      	mov	r1, r5
 800b770:	f7f4 fd8a 	bl	8000288 <__aeabi_dsub>
 800b774:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	4620      	mov	r0, r4
 800b77e:	4629      	mov	r1, r5
 800b780:	f7f4 fd82 	bl	8000288 <__aeabi_dsub>
 800b784:	4632      	mov	r2, r6
 800b786:	463b      	mov	r3, r7
 800b788:	f7f4 fd7e 	bl	8000288 <__aeabi_dsub>
 800b78c:	a34a      	add	r3, pc, #296	; (adr r3, 800b8b8 <__ieee754_rem_pio2+0x308>)
 800b78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b792:	4604      	mov	r4, r0
 800b794:	460d      	mov	r5, r1
 800b796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b79a:	f7f4 ff29 	bl	80005f0 <__aeabi_dmul>
 800b79e:	4622      	mov	r2, r4
 800b7a0:	462b      	mov	r3, r5
 800b7a2:	f7f4 fd71 	bl	8000288 <__aeabi_dsub>
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7b2:	f7f4 fd69 	bl	8000288 <__aeabi_dsub>
 800b7b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b7ba:	ebc3 0808 	rsb	r8, r3, r8
 800b7be:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 800b7c2:	e9ca 0100 	strd	r0, r1, [sl]
 800b7c6:	dd32      	ble.n	800b82e <__ieee754_rem_pio2+0x27e>
 800b7c8:	a33f      	add	r3, pc, #252	; (adr r3, 800b8c8 <__ieee754_rem_pio2+0x318>)
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7d2:	f7f4 ff0d 	bl	80005f0 <__aeabi_dmul>
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	460f      	mov	r7, r1
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7e2:	f7f4 fd51 	bl	8000288 <__aeabi_dsub>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	460d      	mov	r5, r1
 800b7ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7f2:	f7f4 fd49 	bl	8000288 <__aeabi_dsub>
 800b7f6:	4632      	mov	r2, r6
 800b7f8:	463b      	mov	r3, r7
 800b7fa:	f7f4 fd45 	bl	8000288 <__aeabi_dsub>
 800b7fe:	a334      	add	r3, pc, #208	; (adr r3, 800b8d0 <__ieee754_rem_pio2+0x320>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	4606      	mov	r6, r0
 800b806:	460f      	mov	r7, r1
 800b808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b80c:	f7f4 fef0 	bl	80005f0 <__aeabi_dmul>
 800b810:	4632      	mov	r2, r6
 800b812:	463b      	mov	r3, r7
 800b814:	f7f4 fd38 	bl	8000288 <__aeabi_dsub>
 800b818:	4606      	mov	r6, r0
 800b81a:	460f      	mov	r7, r1
 800b81c:	4632      	mov	r2, r6
 800b81e:	463b      	mov	r3, r7
 800b820:	4620      	mov	r0, r4
 800b822:	4629      	mov	r1, r5
 800b824:	f7f4 fd30 	bl	8000288 <__aeabi_dsub>
 800b828:	e9ca 0100 	strd	r0, r1, [sl]
 800b82c:	e001      	b.n	800b832 <__ieee754_rem_pio2+0x282>
 800b82e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b832:	ed9a 7b00 	vldr	d7, [sl]
 800b836:	4620      	mov	r0, r4
 800b838:	ec53 2b17 	vmov	r2, r3, d7
 800b83c:	4629      	mov	r1, r5
 800b83e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b842:	f7f4 fd21 	bl	8000288 <__aeabi_dsub>
 800b846:	4632      	mov	r2, r6
 800b848:	463b      	mov	r3, r7
 800b84a:	f7f4 fd1d 	bl	8000288 <__aeabi_dsub>
 800b84e:	f1bb 0f00 	cmp.w	fp, #0
 800b852:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b856:	f280 80a0 	bge.w	800b99a <__ieee754_rem_pio2+0x3ea>
 800b85a:	9b02      	ldr	r3, [sp, #8]
 800b85c:	f8ca 3000 	str.w	r3, [sl]
 800b860:	9b03      	ldr	r3, [sp, #12]
 800b862:	f8ca 0008 	str.w	r0, [sl, #8]
 800b866:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b86a:	f8ca 3004 	str.w	r3, [sl, #4]
 800b86e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b872:	f8ca 300c 	str.w	r3, [sl, #12]
 800b876:	f1c9 0000 	rsb	r0, r9, #0
 800b87a:	e08f      	b.n	800b99c <__ieee754_rem_pio2+0x3ec>
 800b87c:	4b1c      	ldr	r3, [pc, #112]	; (800b8f0 <__ieee754_rem_pio2+0x340>)
 800b87e:	4598      	cmp	r8, r3
 800b880:	dd38      	ble.n	800b8f4 <__ieee754_rem_pio2+0x344>
 800b882:	ee10 2a10 	vmov	r2, s0
 800b886:	462b      	mov	r3, r5
 800b888:	4620      	mov	r0, r4
 800b88a:	4629      	mov	r1, r5
 800b88c:	f7f4 fcfc 	bl	8000288 <__aeabi_dsub>
 800b890:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b894:	e9ca 0100 	strd	r0, r1, [sl]
 800b898:	2000      	movs	r0, #0
 800b89a:	e07f      	b.n	800b99c <__ieee754_rem_pio2+0x3ec>
 800b89c:	f3af 8000 	nop.w
 800b8a0:	54400000 	.word	0x54400000
 800b8a4:	3ff921fb 	.word	0x3ff921fb
 800b8a8:	1a626331 	.word	0x1a626331
 800b8ac:	3dd0b461 	.word	0x3dd0b461
 800b8b0:	1a600000 	.word	0x1a600000
 800b8b4:	3dd0b461 	.word	0x3dd0b461
 800b8b8:	2e037073 	.word	0x2e037073
 800b8bc:	3ba3198a 	.word	0x3ba3198a
 800b8c0:	6dc9c883 	.word	0x6dc9c883
 800b8c4:	3fe45f30 	.word	0x3fe45f30
 800b8c8:	2e000000 	.word	0x2e000000
 800b8cc:	3ba3198a 	.word	0x3ba3198a
 800b8d0:	252049c1 	.word	0x252049c1
 800b8d4:	397b839a 	.word	0x397b839a
 800b8d8:	3fe921fb 	.word	0x3fe921fb
 800b8dc:	4002d97b 	.word	0x4002d97b
 800b8e0:	3ff921fb 	.word	0x3ff921fb
 800b8e4:	413921fb 	.word	0x413921fb
 800b8e8:	3fe00000 	.word	0x3fe00000
 800b8ec:	0800cf30 	.word	0x0800cf30
 800b8f0:	7fefffff 	.word	0x7fefffff
 800b8f4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800b8f8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800b8fc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800b900:	4620      	mov	r0, r4
 800b902:	460d      	mov	r5, r1
 800b904:	f7f5 f924 	bl	8000b50 <__aeabi_d2iz>
 800b908:	f7f4 fe0c 	bl	8000524 <__aeabi_i2d>
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	4620      	mov	r0, r4
 800b912:	4629      	mov	r1, r5
 800b914:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b918:	f7f4 fcb6 	bl	8000288 <__aeabi_dsub>
 800b91c:	2200      	movs	r2, #0
 800b91e:	4b21      	ldr	r3, [pc, #132]	; (800b9a4 <__ieee754_rem_pio2+0x3f4>)
 800b920:	f7f4 fe66 	bl	80005f0 <__aeabi_dmul>
 800b924:	460d      	mov	r5, r1
 800b926:	4604      	mov	r4, r0
 800b928:	f7f5 f912 	bl	8000b50 <__aeabi_d2iz>
 800b92c:	f7f4 fdfa 	bl	8000524 <__aeabi_i2d>
 800b930:	4602      	mov	r2, r0
 800b932:	460b      	mov	r3, r1
 800b934:	4620      	mov	r0, r4
 800b936:	4629      	mov	r1, r5
 800b938:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b93c:	f7f4 fca4 	bl	8000288 <__aeabi_dsub>
 800b940:	2200      	movs	r2, #0
 800b942:	4b18      	ldr	r3, [pc, #96]	; (800b9a4 <__ieee754_rem_pio2+0x3f4>)
 800b944:	f7f4 fe54 	bl	80005f0 <__aeabi_dmul>
 800b948:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b94c:	ad0c      	add	r5, sp, #48	; 0x30
 800b94e:	2403      	movs	r4, #3
 800b950:	2200      	movs	r2, #0
 800b952:	2300      	movs	r3, #0
 800b954:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 800b958:	1e67      	subs	r7, r4, #1
 800b95a:	f7f5 f8b1 	bl	8000ac0 <__aeabi_dcmpeq>
 800b95e:	b108      	cbz	r0, 800b964 <__ieee754_rem_pio2+0x3b4>
 800b960:	463c      	mov	r4, r7
 800b962:	e7f5      	b.n	800b950 <__ieee754_rem_pio2+0x3a0>
 800b964:	4b10      	ldr	r3, [pc, #64]	; (800b9a8 <__ieee754_rem_pio2+0x3f8>)
 800b966:	9301      	str	r3, [sp, #4]
 800b968:	2302      	movs	r3, #2
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	4632      	mov	r2, r6
 800b96e:	4623      	mov	r3, r4
 800b970:	4651      	mov	r1, sl
 800b972:	a806      	add	r0, sp, #24
 800b974:	f000 f904 	bl	800bb80 <__kernel_rem_pio2>
 800b978:	f1bb 0f00 	cmp.w	fp, #0
 800b97c:	da0e      	bge.n	800b99c <__ieee754_rem_pio2+0x3ec>
 800b97e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b982:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b986:	f8ca 3004 	str.w	r3, [sl, #4]
 800b98a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b98e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b992:	f8ca 300c 	str.w	r3, [sl, #12]
 800b996:	4240      	negs	r0, r0
 800b998:	e000      	b.n	800b99c <__ieee754_rem_pio2+0x3ec>
 800b99a:	4648      	mov	r0, r9
 800b99c:	b00d      	add	sp, #52	; 0x34
 800b99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a2:	bf00      	nop
 800b9a4:	41700000 	.word	0x41700000
 800b9a8:	0800cfb0 	.word	0x0800cfb0
 800b9ac:	00000000 	.word	0x00000000

0800b9b0 <__kernel_cos>:
 800b9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b4:	ec59 8b10 	vmov	r8, r9, d0
 800b9b8:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800b9bc:	b085      	sub	sp, #20
 800b9be:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800b9c2:	ed8d 1b00 	vstr	d1, [sp]
 800b9c6:	da07      	bge.n	800b9d8 <__kernel_cos+0x28>
 800b9c8:	ee10 0a10 	vmov	r0, s0
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	f7f5 f8bf 	bl	8000b50 <__aeabi_d2iz>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	f000 80a6 	beq.w	800bb24 <__kernel_cos+0x174>
 800b9d8:	4642      	mov	r2, r8
 800b9da:	464b      	mov	r3, r9
 800b9dc:	4640      	mov	r0, r8
 800b9de:	4649      	mov	r1, r9
 800b9e0:	f7f4 fe06 	bl	80005f0 <__aeabi_dmul>
 800b9e4:	a359      	add	r3, pc, #356	; (adr r3, 800bb4c <__kernel_cos+0x19c>)
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	460d      	mov	r5, r1
 800b9ee:	f7f4 fdff 	bl	80005f0 <__aeabi_dmul>
 800b9f2:	a358      	add	r3, pc, #352	; (adr r3, 800bb54 <__kernel_cos+0x1a4>)
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	f7f4 fc48 	bl	800028c <__adddf3>
 800b9fc:	4622      	mov	r2, r4
 800b9fe:	462b      	mov	r3, r5
 800ba00:	f7f4 fdf6 	bl	80005f0 <__aeabi_dmul>
 800ba04:	a355      	add	r3, pc, #340	; (adr r3, 800bb5c <__kernel_cos+0x1ac>)
 800ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0a:	f7f4 fc3d 	bl	8000288 <__aeabi_dsub>
 800ba0e:	4622      	mov	r2, r4
 800ba10:	462b      	mov	r3, r5
 800ba12:	f7f4 fded 	bl	80005f0 <__aeabi_dmul>
 800ba16:	a353      	add	r3, pc, #332	; (adr r3, 800bb64 <__kernel_cos+0x1b4>)
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	f7f4 fc36 	bl	800028c <__adddf3>
 800ba20:	4622      	mov	r2, r4
 800ba22:	462b      	mov	r3, r5
 800ba24:	f7f4 fde4 	bl	80005f0 <__aeabi_dmul>
 800ba28:	a350      	add	r3, pc, #320	; (adr r3, 800bb6c <__kernel_cos+0x1bc>)
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	f7f4 fc2b 	bl	8000288 <__aeabi_dsub>
 800ba32:	4622      	mov	r2, r4
 800ba34:	462b      	mov	r3, r5
 800ba36:	f7f4 fddb 	bl	80005f0 <__aeabi_dmul>
 800ba3a:	a34e      	add	r3, pc, #312	; (adr r3, 800bb74 <__kernel_cos+0x1c4>)
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	f7f4 fc24 	bl	800028c <__adddf3>
 800ba44:	462b      	mov	r3, r5
 800ba46:	4622      	mov	r2, r4
 800ba48:	f7f4 fdd2 	bl	80005f0 <__aeabi_dmul>
 800ba4c:	4b3a      	ldr	r3, [pc, #232]	; (800bb38 <__kernel_cos+0x188>)
 800ba4e:	429f      	cmp	r7, r3
 800ba50:	4682      	mov	sl, r0
 800ba52:	468b      	mov	fp, r1
 800ba54:	dc26      	bgt.n	800baa4 <__kernel_cos+0xf4>
 800ba56:	2200      	movs	r2, #0
 800ba58:	4b38      	ldr	r3, [pc, #224]	; (800bb3c <__kernel_cos+0x18c>)
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	f7f4 fdc7 	bl	80005f0 <__aeabi_dmul>
 800ba62:	4652      	mov	r2, sl
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	465b      	mov	r3, fp
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	f7f4 fdbf 	bl	80005f0 <__aeabi_dmul>
 800ba72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba76:	4604      	mov	r4, r0
 800ba78:	460d      	mov	r5, r1
 800ba7a:	4640      	mov	r0, r8
 800ba7c:	4649      	mov	r1, r9
 800ba7e:	f7f4 fdb7 	bl	80005f0 <__aeabi_dmul>
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	4620      	mov	r0, r4
 800ba88:	4629      	mov	r1, r5
 800ba8a:	f7f4 fbfd 	bl	8000288 <__aeabi_dsub>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	4630      	mov	r0, r6
 800ba94:	4639      	mov	r1, r7
 800ba96:	f7f4 fbf7 	bl	8000288 <__aeabi_dsub>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	2000      	movs	r0, #0
 800baa0:	4927      	ldr	r1, [pc, #156]	; (800bb40 <__kernel_cos+0x190>)
 800baa2:	e03c      	b.n	800bb1e <__kernel_cos+0x16e>
 800baa4:	4b27      	ldr	r3, [pc, #156]	; (800bb44 <__kernel_cos+0x194>)
 800baa6:	4926      	ldr	r1, [pc, #152]	; (800bb40 <__kernel_cos+0x190>)
 800baa8:	429f      	cmp	r7, r3
 800baaa:	bfd7      	itett	le
 800baac:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800bab0:	4f25      	ldrgt	r7, [pc, #148]	; (800bb48 <__kernel_cos+0x198>)
 800bab2:	2200      	movle	r2, #0
 800bab4:	4616      	movle	r6, r2
 800bab6:	bfd4      	ite	le
 800bab8:	461f      	movle	r7, r3
 800baba:	2600      	movgt	r6, #0
 800babc:	4632      	mov	r2, r6
 800babe:	463b      	mov	r3, r7
 800bac0:	2000      	movs	r0, #0
 800bac2:	f7f4 fbe1 	bl	8000288 <__aeabi_dsub>
 800bac6:	2200      	movs	r2, #0
 800bac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bacc:	4b1b      	ldr	r3, [pc, #108]	; (800bb3c <__kernel_cos+0x18c>)
 800bace:	4620      	mov	r0, r4
 800bad0:	4629      	mov	r1, r5
 800bad2:	f7f4 fd8d 	bl	80005f0 <__aeabi_dmul>
 800bad6:	4632      	mov	r2, r6
 800bad8:	463b      	mov	r3, r7
 800bada:	f7f4 fbd5 	bl	8000288 <__aeabi_dsub>
 800bade:	4652      	mov	r2, sl
 800bae0:	4606      	mov	r6, r0
 800bae2:	460f      	mov	r7, r1
 800bae4:	465b      	mov	r3, fp
 800bae6:	4620      	mov	r0, r4
 800bae8:	4629      	mov	r1, r5
 800baea:	f7f4 fd81 	bl	80005f0 <__aeabi_dmul>
 800baee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baf2:	4604      	mov	r4, r0
 800baf4:	460d      	mov	r5, r1
 800baf6:	4640      	mov	r0, r8
 800baf8:	4649      	mov	r1, r9
 800bafa:	f7f4 fd79 	bl	80005f0 <__aeabi_dmul>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	4620      	mov	r0, r4
 800bb04:	4629      	mov	r1, r5
 800bb06:	f7f4 fbbf 	bl	8000288 <__aeabi_dsub>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	4630      	mov	r0, r6
 800bb10:	4639      	mov	r1, r7
 800bb12:	f7f4 fbb9 	bl	8000288 <__aeabi_dsub>
 800bb16:	4602      	mov	r2, r0
 800bb18:	460b      	mov	r3, r1
 800bb1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb1e:	f7f4 fbb3 	bl	8000288 <__aeabi_dsub>
 800bb22:	e001      	b.n	800bb28 <__kernel_cos+0x178>
 800bb24:	4906      	ldr	r1, [pc, #24]	; (800bb40 <__kernel_cos+0x190>)
 800bb26:	2000      	movs	r0, #0
 800bb28:	ec41 0b10 	vmov	d0, r0, r1
 800bb2c:	b005      	add	sp, #20
 800bb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb32:	bf00      	nop
 800bb34:	f3af 8000 	nop.w
 800bb38:	3fd33332 	.word	0x3fd33332
 800bb3c:	3fe00000 	.word	0x3fe00000
 800bb40:	3ff00000 	.word	0x3ff00000
 800bb44:	3fe90000 	.word	0x3fe90000
 800bb48:	3fd20000 	.word	0x3fd20000
 800bb4c:	be8838d4 	.word	0xbe8838d4
 800bb50:	bda8fae9 	.word	0xbda8fae9
 800bb54:	bdb4b1c4 	.word	0xbdb4b1c4
 800bb58:	3e21ee9e 	.word	0x3e21ee9e
 800bb5c:	809c52ad 	.word	0x809c52ad
 800bb60:	3e927e4f 	.word	0x3e927e4f
 800bb64:	19cb1590 	.word	0x19cb1590
 800bb68:	3efa01a0 	.word	0x3efa01a0
 800bb6c:	16c15177 	.word	0x16c15177
 800bb70:	3f56c16c 	.word	0x3f56c16c
 800bb74:	5555554c 	.word	0x5555554c
 800bb78:	3fa55555 	.word	0x3fa55555
 800bb7c:	00000000 	.word	0x00000000

0800bb80 <__kernel_rem_pio2>:
 800bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bb88:	2418      	movs	r4, #24
 800bb8a:	9306      	str	r3, [sp, #24]
 800bb8c:	9101      	str	r1, [sp, #4]
 800bb8e:	4bba      	ldr	r3, [pc, #744]	; (800be78 <__kernel_rem_pio2+0x2f8>)
 800bb90:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800bb92:	9009      	str	r0, [sp, #36]	; 0x24
 800bb94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb98:	9302      	str	r3, [sp, #8]
 800bb9a:	9b06      	ldr	r3, [sp, #24]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	9305      	str	r3, [sp, #20]
 800bba0:	1ed3      	subs	r3, r2, #3
 800bba2:	fb93 f4f4 	sdiv	r4, r3, r4
 800bba6:	f06f 0317 	mvn.w	r3, #23
 800bbaa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800bbae:	fb04 3303 	mla	r3, r4, r3, r3
 800bbb2:	eb03 0802 	add.w	r8, r3, r2
 800bbb6:	9b02      	ldr	r3, [sp, #8]
 800bbb8:	9a05      	ldr	r2, [sp, #20]
 800bbba:	eb03 0a02 	add.w	sl, r3, r2
 800bbbe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bbc0:	1aa7      	subs	r7, r4, r2
 800bbc2:	ae20      	add	r6, sp, #128	; 0x80
 800bbc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bbc8:	2500      	movs	r5, #0
 800bbca:	4555      	cmp	r5, sl
 800bbcc:	dc0c      	bgt.n	800bbe8 <__kernel_rem_pio2+0x68>
 800bbce:	42ef      	cmn	r7, r5
 800bbd0:	d404      	bmi.n	800bbdc <__kernel_rem_pio2+0x5c>
 800bbd2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bbd6:	f7f4 fca5 	bl	8000524 <__aeabi_i2d>
 800bbda:	e001      	b.n	800bbe0 <__kernel_rem_pio2+0x60>
 800bbdc:	2000      	movs	r0, #0
 800bbde:	2100      	movs	r1, #0
 800bbe0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bbe4:	3501      	adds	r5, #1
 800bbe6:	e7f0      	b.n	800bbca <__kernel_rem_pio2+0x4a>
 800bbe8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800bbec:	2600      	movs	r6, #0
 800bbee:	9b02      	ldr	r3, [sp, #8]
 800bbf0:	429e      	cmp	r6, r3
 800bbf2:	dc27      	bgt.n	800bc44 <__kernel_rem_pio2+0xc4>
 800bbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf6:	9304      	str	r3, [sp, #16]
 800bbf8:	9b06      	ldr	r3, [sp, #24]
 800bbfa:	199d      	adds	r5, r3, r6
 800bbfc:	ab20      	add	r3, sp, #128	; 0x80
 800bbfe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bc02:	9308      	str	r3, [sp, #32]
 800bc04:	f04f 0900 	mov.w	r9, #0
 800bc08:	f04f 0a00 	mov.w	sl, #0
 800bc0c:	2700      	movs	r7, #0
 800bc0e:	9b05      	ldr	r3, [sp, #20]
 800bc10:	429f      	cmp	r7, r3
 800bc12:	dc13      	bgt.n	800bc3c <__kernel_rem_pio2+0xbc>
 800bc14:	9908      	ldr	r1, [sp, #32]
 800bc16:	9d04      	ldr	r5, [sp, #16]
 800bc18:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800bc1c:	9108      	str	r1, [sp, #32]
 800bc1e:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800bc22:	9504      	str	r5, [sp, #16]
 800bc24:	f7f4 fce4 	bl	80005f0 <__aeabi_dmul>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4648      	mov	r0, r9
 800bc2e:	4651      	mov	r1, sl
 800bc30:	f7f4 fb2c 	bl	800028c <__adddf3>
 800bc34:	3701      	adds	r7, #1
 800bc36:	4681      	mov	r9, r0
 800bc38:	468a      	mov	sl, r1
 800bc3a:	e7e8      	b.n	800bc0e <__kernel_rem_pio2+0x8e>
 800bc3c:	e8ab 0600 	stmia.w	fp!, {r9, sl}
 800bc40:	3601      	adds	r6, #1
 800bc42:	e7d4      	b.n	800bbee <__kernel_rem_pio2+0x6e>
 800bc44:	9b02      	ldr	r3, [sp, #8]
 800bc46:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bc4a:	aa0c      	add	r2, sp, #48	; 0x30
 800bc4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc50:	930a      	str	r3, [sp, #40]	; 0x28
 800bc52:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bc54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bc58:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc5a:	ab98      	add	r3, sp, #608	; 0x260
 800bc5c:	f10b 5a00 	add.w	sl, fp, #536870912	; 0x20000000
 800bc60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc64:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc68:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bc6c:	aa98      	add	r2, sp, #608	; 0x260
 800bc6e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bc72:	eb02 0903 	add.w	r9, r2, r3
 800bc76:	9308      	str	r3, [sp, #32]
 800bc78:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800bc7c:	f04f 0a00 	mov.w	sl, #0
 800bc80:	ebca 030b 	rsb	r3, sl, fp
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	dd25      	ble.n	800bcd4 <__kernel_rem_pio2+0x154>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	4b7c      	ldr	r3, [pc, #496]	; (800be7c <__kernel_rem_pio2+0x2fc>)
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	4639      	mov	r1, r7
 800bc90:	f7f4 fcae 	bl	80005f0 <__aeabi_dmul>
 800bc94:	f7f4 ff5c 	bl	8000b50 <__aeabi_d2iz>
 800bc98:	f7f4 fc44 	bl	8000524 <__aeabi_i2d>
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	4b78      	ldr	r3, [pc, #480]	; (800be80 <__kernel_rem_pio2+0x300>)
 800bca0:	4604      	mov	r4, r0
 800bca2:	460d      	mov	r5, r1
 800bca4:	f7f4 fca4 	bl	80005f0 <__aeabi_dmul>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4630      	mov	r0, r6
 800bcae:	4639      	mov	r1, r7
 800bcb0:	f7f4 faea 	bl	8000288 <__aeabi_dsub>
 800bcb4:	f7f4 ff4c 	bl	8000b50 <__aeabi_d2iz>
 800bcb8:	ab0c      	add	r3, sp, #48	; 0x30
 800bcba:	4629      	mov	r1, r5
 800bcbc:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 800bcc0:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f7f4 fae1 	bl	800028c <__adddf3>
 800bcca:	f10a 0a01 	add.w	sl, sl, #1
 800bcce:	4606      	mov	r6, r0
 800bcd0:	460f      	mov	r7, r1
 800bcd2:	e7d5      	b.n	800bc80 <__kernel_rem_pio2+0x100>
 800bcd4:	ec47 6b10 	vmov	d0, r6, r7
 800bcd8:	4640      	mov	r0, r8
 800bcda:	f000 fbe1 	bl	800c4a0 <scalbn>
 800bcde:	ec55 4b10 	vmov	r4, r5, d0
 800bce2:	2200      	movs	r2, #0
 800bce4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bce8:	ee10 0a10 	vmov	r0, s0
 800bcec:	4629      	mov	r1, r5
 800bcee:	f7f4 fc7f 	bl	80005f0 <__aeabi_dmul>
 800bcf2:	ec41 0b10 	vmov	d0, r0, r1
 800bcf6:	f000 fb4f 	bl	800c398 <floor>
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	ec51 0b10 	vmov	r0, r1, d0
 800bd00:	4b60      	ldr	r3, [pc, #384]	; (800be84 <__kernel_rem_pio2+0x304>)
 800bd02:	f7f4 fc75 	bl	80005f0 <__aeabi_dmul>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	f7f4 fabb 	bl	8000288 <__aeabi_dsub>
 800bd12:	460d      	mov	r5, r1
 800bd14:	4604      	mov	r4, r0
 800bd16:	f7f4 ff1b 	bl	8000b50 <__aeabi_d2iz>
 800bd1a:	9004      	str	r0, [sp, #16]
 800bd1c:	f7f4 fc02 	bl	8000524 <__aeabi_i2d>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	4620      	mov	r0, r4
 800bd26:	4629      	mov	r1, r5
 800bd28:	f7f4 faae 	bl	8000288 <__aeabi_dsub>
 800bd2c:	f1b8 0f00 	cmp.w	r8, #0
 800bd30:	4606      	mov	r6, r0
 800bd32:	460f      	mov	r7, r1
 800bd34:	dd15      	ble.n	800bd62 <__kernel_rem_pio2+0x1e2>
 800bd36:	f10b 31ff 	add.w	r1, fp, #4294967295
 800bd3a:	ab0c      	add	r3, sp, #48	; 0x30
 800bd3c:	f1c8 0018 	rsb	r0, r8, #24
 800bd40:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800bd44:	9c04      	ldr	r4, [sp, #16]
 800bd46:	fa42 f300 	asr.w	r3, r2, r0
 800bd4a:	441c      	add	r4, r3
 800bd4c:	4083      	lsls	r3, r0
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	aa0c      	add	r2, sp, #48	; 0x30
 800bd52:	f1c8 0017 	rsb	r0, r8, #23
 800bd56:	9404      	str	r4, [sp, #16]
 800bd58:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bd5c:	fa43 fa00 	asr.w	sl, r3, r0
 800bd60:	e00f      	b.n	800bd82 <__kernel_rem_pio2+0x202>
 800bd62:	d107      	bne.n	800bd74 <__kernel_rem_pio2+0x1f4>
 800bd64:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bd68:	aa0c      	add	r2, sp, #48	; 0x30
 800bd6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bd6e:	ea4f 5ae0 	mov.w	sl, r0, asr #23
 800bd72:	e006      	b.n	800bd82 <__kernel_rem_pio2+0x202>
 800bd74:	2200      	movs	r2, #0
 800bd76:	4b44      	ldr	r3, [pc, #272]	; (800be88 <__kernel_rem_pio2+0x308>)
 800bd78:	f7f4 fec0 	bl	8000afc <__aeabi_dcmpge>
 800bd7c:	b928      	cbnz	r0, 800bd8a <__kernel_rem_pio2+0x20a>
 800bd7e:	4682      	mov	sl, r0
 800bd80:	e052      	b.n	800be28 <__kernel_rem_pio2+0x2a8>
 800bd82:	f1ba 0f00 	cmp.w	sl, #0
 800bd86:	dc02      	bgt.n	800bd8e <__kernel_rem_pio2+0x20e>
 800bd88:	e04e      	b.n	800be28 <__kernel_rem_pio2+0x2a8>
 800bd8a:	f04f 0a02 	mov.w	sl, #2
 800bd8e:	9b04      	ldr	r3, [sp, #16]
 800bd90:	2200      	movs	r2, #0
 800bd92:	3301      	adds	r3, #1
 800bd94:	9304      	str	r3, [sp, #16]
 800bd96:	4614      	mov	r4, r2
 800bd98:	4593      	cmp	fp, r2
 800bd9a:	dd11      	ble.n	800bdc0 <__kernel_rem_pio2+0x240>
 800bd9c:	ab0c      	add	r3, sp, #48	; 0x30
 800bd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda2:	b91c      	cbnz	r4, 800bdac <__kernel_rem_pio2+0x22c>
 800bda4:	b153      	cbz	r3, 800bdbc <__kernel_rem_pio2+0x23c>
 800bda6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bdaa:	e003      	b.n	800bdb4 <__kernel_rem_pio2+0x234>
 800bdac:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 800bdb0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800bdb4:	a90c      	add	r1, sp, #48	; 0x30
 800bdb6:	2401      	movs	r4, #1
 800bdb8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bdbc:	3201      	adds	r2, #1
 800bdbe:	e7eb      	b.n	800bd98 <__kernel_rem_pio2+0x218>
 800bdc0:	f1b8 0f00 	cmp.w	r8, #0
 800bdc4:	dd17      	ble.n	800bdf6 <__kernel_rem_pio2+0x276>
 800bdc6:	f1b8 0f01 	cmp.w	r8, #1
 800bdca:	d00a      	beq.n	800bde2 <__kernel_rem_pio2+0x262>
 800bdcc:	f1b8 0f02 	cmp.w	r8, #2
 800bdd0:	d111      	bne.n	800bdf6 <__kernel_rem_pio2+0x276>
 800bdd2:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bdd6:	ab0c      	add	r3, sp, #48	; 0x30
 800bdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bddc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bde0:	e006      	b.n	800bdf0 <__kernel_rem_pio2+0x270>
 800bde2:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bde6:	ab0c      	add	r3, sp, #48	; 0x30
 800bde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bdf0:	a90c      	add	r1, sp, #48	; 0x30
 800bdf2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bdf6:	f1ba 0f02 	cmp.w	sl, #2
 800bdfa:	d115      	bne.n	800be28 <__kernel_rem_pio2+0x2a8>
 800bdfc:	4632      	mov	r2, r6
 800bdfe:	463b      	mov	r3, r7
 800be00:	2000      	movs	r0, #0
 800be02:	4922      	ldr	r1, [pc, #136]	; (800be8c <__kernel_rem_pio2+0x30c>)
 800be04:	f7f4 fa40 	bl	8000288 <__aeabi_dsub>
 800be08:	4606      	mov	r6, r0
 800be0a:	460f      	mov	r7, r1
 800be0c:	b164      	cbz	r4, 800be28 <__kernel_rem_pio2+0x2a8>
 800be0e:	4640      	mov	r0, r8
 800be10:	ed9f 0b17 	vldr	d0, [pc, #92]	; 800be70 <__kernel_rem_pio2+0x2f0>
 800be14:	f000 fb44 	bl	800c4a0 <scalbn>
 800be18:	4630      	mov	r0, r6
 800be1a:	4639      	mov	r1, r7
 800be1c:	ec53 2b10 	vmov	r2, r3, d0
 800be20:	f7f4 fa32 	bl	8000288 <__aeabi_dsub>
 800be24:	4606      	mov	r6, r0
 800be26:	460f      	mov	r7, r1
 800be28:	2200      	movs	r2, #0
 800be2a:	2300      	movs	r3, #0
 800be2c:	4630      	mov	r0, r6
 800be2e:	4639      	mov	r1, r7
 800be30:	f7f4 fe46 	bl	8000ac0 <__aeabi_dcmpeq>
 800be34:	2800      	cmp	r0, #0
 800be36:	d074      	beq.n	800bf22 <__kernel_rem_pio2+0x3a2>
 800be38:	f10b 31ff 	add.w	r1, fp, #4294967295
 800be3c:	460b      	mov	r3, r1
 800be3e:	2200      	movs	r2, #0
 800be40:	9802      	ldr	r0, [sp, #8]
 800be42:	4283      	cmp	r3, r0
 800be44:	db05      	blt.n	800be52 <__kernel_rem_pio2+0x2d2>
 800be46:	a80c      	add	r0, sp, #48	; 0x30
 800be48:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	4302      	orrs	r2, r0
 800be50:	e7f6      	b.n	800be40 <__kernel_rem_pio2+0x2c0>
 800be52:	2a00      	cmp	r2, #0
 800be54:	d158      	bne.n	800bf08 <__kernel_rem_pio2+0x388>
 800be56:	2301      	movs	r3, #1
 800be58:	f06f 0103 	mvn.w	r1, #3
 800be5c:	fb01 f203 	mul.w	r2, r1, r3
 800be60:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be62:	5882      	ldr	r2, [r0, r2]
 800be64:	b9a2      	cbnz	r2, 800be90 <__kernel_rem_pio2+0x310>
 800be66:	3301      	adds	r3, #1
 800be68:	e7f8      	b.n	800be5c <__kernel_rem_pio2+0x2dc>
 800be6a:	bf00      	nop
 800be6c:	f3af 8000 	nop.w
 800be70:	00000000 	.word	0x00000000
 800be74:	3ff00000 	.word	0x3ff00000
 800be78:	0800d0b8 	.word	0x0800d0b8
 800be7c:	3e700000 	.word	0x3e700000
 800be80:	41700000 	.word	0x41700000
 800be84:	40200000 	.word	0x40200000
 800be88:	3fe00000 	.word	0x3fe00000
 800be8c:	3ff00000 	.word	0x3ff00000
 800be90:	9a08      	ldr	r2, [sp, #32]
 800be92:	a998      	add	r1, sp, #608	; 0x260
 800be94:	440a      	add	r2, r1
 800be96:	3a98      	subs	r2, #152	; 0x98
 800be98:	9204      	str	r2, [sp, #16]
 800be9a:	9a06      	ldr	r2, [sp, #24]
 800be9c:	445b      	add	r3, fp
 800be9e:	eb02 050b 	add.w	r5, r2, fp
 800bea2:	aa20      	add	r2, sp, #128	; 0x80
 800bea4:	f10b 0601 	add.w	r6, fp, #1
 800bea8:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800beac:	9308      	str	r3, [sp, #32]
 800beae:	9b08      	ldr	r3, [sp, #32]
 800beb0:	429e      	cmp	r6, r3
 800beb2:	dc27      	bgt.n	800bf04 <__kernel_rem_pio2+0x384>
 800beb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beb6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800beba:	f7f4 fb33 	bl	8000524 <__aeabi_i2d>
 800bebe:	e8e5 0102 	strd	r0, r1, [r5], #8
 800bec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec4:	46a9      	mov	r9, r5
 800bec6:	461c      	mov	r4, r3
 800bec8:	2700      	movs	r7, #0
 800beca:	f04f 0a00 	mov.w	sl, #0
 800bece:	f04f 0b00 	mov.w	fp, #0
 800bed2:	9b05      	ldr	r3, [sp, #20]
 800bed4:	429f      	cmp	r7, r3
 800bed6:	dc0f      	bgt.n	800bef8 <__kernel_rem_pio2+0x378>
 800bed8:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800bedc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bee0:	f7f4 fb86 	bl	80005f0 <__aeabi_dmul>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	4650      	mov	r0, sl
 800beea:	4659      	mov	r1, fp
 800beec:	f7f4 f9ce 	bl	800028c <__adddf3>
 800bef0:	3701      	adds	r7, #1
 800bef2:	4682      	mov	sl, r0
 800bef4:	468b      	mov	fp, r1
 800bef6:	e7ec      	b.n	800bed2 <__kernel_rem_pio2+0x352>
 800bef8:	9b04      	ldr	r3, [sp, #16]
 800befa:	e9e3 ab02 	strd	sl, fp, [r3, #8]!
 800befe:	3601      	adds	r6, #1
 800bf00:	9304      	str	r3, [sp, #16]
 800bf02:	e7d4      	b.n	800beae <__kernel_rem_pio2+0x32e>
 800bf04:	469b      	mov	fp, r3
 800bf06:	e6a8      	b.n	800bc5a <__kernel_rem_pio2+0xda>
 800bf08:	f1a8 0818 	sub.w	r8, r8, #24
 800bf0c:	468b      	mov	fp, r1
 800bf0e:	ab0c      	add	r3, sp, #48	; 0x30
 800bf10:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d13c      	bne.n	800bf92 <__kernel_rem_pio2+0x412>
 800bf18:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf1c:	f1a8 0818 	sub.w	r8, r8, #24
 800bf20:	e7f5      	b.n	800bf0e <__kernel_rem_pio2+0x38e>
 800bf22:	f1c8 0000 	rsb	r0, r8, #0
 800bf26:	ec47 6b10 	vmov	d0, r6, r7
 800bf2a:	f000 fab9 	bl	800c4a0 <scalbn>
 800bf2e:	ec55 4b10 	vmov	r4, r5, d0
 800bf32:	2200      	movs	r2, #0
 800bf34:	4bb6      	ldr	r3, [pc, #728]	; (800c210 <__kernel_rem_pio2+0x690>)
 800bf36:	ee10 0a10 	vmov	r0, s0
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f7f4 fdde 	bl	8000afc <__aeabi_dcmpge>
 800bf40:	b300      	cbz	r0, 800bf84 <__kernel_rem_pio2+0x404>
 800bf42:	2200      	movs	r2, #0
 800bf44:	4bb3      	ldr	r3, [pc, #716]	; (800c214 <__kernel_rem_pio2+0x694>)
 800bf46:	4620      	mov	r0, r4
 800bf48:	4629      	mov	r1, r5
 800bf4a:	f7f4 fb51 	bl	80005f0 <__aeabi_dmul>
 800bf4e:	f7f4 fdff 	bl	8000b50 <__aeabi_d2iz>
 800bf52:	4606      	mov	r6, r0
 800bf54:	f7f4 fae6 	bl	8000524 <__aeabi_i2d>
 800bf58:	2200      	movs	r2, #0
 800bf5a:	4bad      	ldr	r3, [pc, #692]	; (800c210 <__kernel_rem_pio2+0x690>)
 800bf5c:	f7f4 fb48 	bl	80005f0 <__aeabi_dmul>
 800bf60:	460b      	mov	r3, r1
 800bf62:	4602      	mov	r2, r0
 800bf64:	4629      	mov	r1, r5
 800bf66:	4620      	mov	r0, r4
 800bf68:	f7f4 f98e 	bl	8000288 <__aeabi_dsub>
 800bf6c:	f7f4 fdf0 	bl	8000b50 <__aeabi_d2iz>
 800bf70:	ab0c      	add	r3, sp, #48	; 0x30
 800bf72:	f108 0818 	add.w	r8, r8, #24
 800bf76:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800bf7a:	f10b 0b01 	add.w	fp, fp, #1
 800bf7e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800bf82:	e006      	b.n	800bf92 <__kernel_rem_pio2+0x412>
 800bf84:	4620      	mov	r0, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	f7f4 fde2 	bl	8000b50 <__aeabi_d2iz>
 800bf8c:	ab0c      	add	r3, sp, #48	; 0x30
 800bf8e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800bf92:	4640      	mov	r0, r8
 800bf94:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 800c200 <__kernel_rem_pio2+0x680>
 800bf98:	f000 fa82 	bl	800c4a0 <scalbn>
 800bf9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bfa0:	9305      	str	r3, [sp, #20]
 800bfa2:	9a05      	ldr	r2, [sp, #20]
 800bfa4:	ab98      	add	r3, sp, #608	; 0x260
 800bfa6:	189f      	adds	r7, r3, r2
 800bfa8:	ec55 4b10 	vmov	r4, r5, d0
 800bfac:	3f98      	subs	r7, #152	; 0x98
 800bfae:	465e      	mov	r6, fp
 800bfb0:	2e00      	cmp	r6, #0
 800bfb2:	db14      	blt.n	800bfde <__kernel_rem_pio2+0x45e>
 800bfb4:	ab0c      	add	r3, sp, #48	; 0x30
 800bfb6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bfba:	f7f4 fab3 	bl	8000524 <__aeabi_i2d>
 800bfbe:	4622      	mov	r2, r4
 800bfc0:	462b      	mov	r3, r5
 800bfc2:	f7f4 fb15 	bl	80005f0 <__aeabi_dmul>
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800bfcc:	4b91      	ldr	r3, [pc, #580]	; (800c214 <__kernel_rem_pio2+0x694>)
 800bfce:	4620      	mov	r0, r4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	f7f4 fb0d 	bl	80005f0 <__aeabi_dmul>
 800bfd6:	3e01      	subs	r6, #1
 800bfd8:	4604      	mov	r4, r0
 800bfda:	460d      	mov	r5, r1
 800bfdc:	e7e8      	b.n	800bfb0 <__kernel_rem_pio2+0x430>
 800bfde:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 800bfe2:	2400      	movs	r4, #0
 800bfe4:	4645      	mov	r5, r8
 800bfe6:	ebbb 0704 	subs.w	r7, fp, r4
 800bfea:	d424      	bmi.n	800c036 <__kernel_rem_pio2+0x4b6>
 800bfec:	ed9f 7b86 	vldr	d7, [pc, #536]	; 800c208 <__kernel_rem_pio2+0x688>
 800bff0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bff4:	ab70      	add	r3, sp, #448	; 0x1c0
 800bff6:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800c218 <__kernel_rem_pio2+0x698>
 800bffa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bffe:	2600      	movs	r6, #0
 800c000:	9b02      	ldr	r3, [sp, #8]
 800c002:	429e      	cmp	r6, r3
 800c004:	dc11      	bgt.n	800c02a <__kernel_rem_pio2+0x4aa>
 800c006:	42a6      	cmp	r6, r4
 800c008:	dc0f      	bgt.n	800c02a <__kernel_rem_pio2+0x4aa>
 800c00a:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 800c00e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c012:	f7f4 faed 	bl	80005f0 <__aeabi_dmul>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c01e:	f7f4 f935 	bl	800028c <__adddf3>
 800c022:	3601      	adds	r6, #1
 800c024:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c028:	e7ea      	b.n	800c000 <__kernel_rem_pio2+0x480>
 800c02a:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c02e:	3401      	adds	r4, #1
 800c030:	eca8 7b02 	vstmia	r8!, {d7}
 800c034:	e7d7      	b.n	800bfe6 <__kernel_rem_pio2+0x466>
 800c036:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c038:	2b03      	cmp	r3, #3
 800c03a:	f200 80d8 	bhi.w	800c1ee <__kernel_rem_pio2+0x66e>
 800c03e:	e8df f003 	tbb	[pc, r3]
 800c042:	0810      	.short	0x0810
 800c044:	0208      	.short	0x0208
 800c046:	9a05      	ldr	r2, [sp, #20]
 800c048:	ab48      	add	r3, sp, #288	; 0x120
 800c04a:	189c      	adds	r4, r3, r2
 800c04c:	46a0      	mov	r8, r4
 800c04e:	46d9      	mov	r9, fp
 800c050:	e056      	b.n	800c100 <__kernel_rem_pio2+0x580>
 800c052:	9c05      	ldr	r4, [sp, #20]
 800c054:	ab48      	add	r3, sp, #288	; 0x120
 800c056:	3408      	adds	r4, #8
 800c058:	441c      	add	r4, r3
 800c05a:	465d      	mov	r5, fp
 800c05c:	2000      	movs	r0, #0
 800c05e:	2100      	movs	r1, #0
 800c060:	e01d      	b.n	800c09e <__kernel_rem_pio2+0x51e>
 800c062:	9b05      	ldr	r3, [sp, #20]
 800c064:	aa98      	add	r2, sp, #608	; 0x260
 800c066:	4413      	add	r3, r2
 800c068:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 800c06c:	2000      	movs	r0, #0
 800c06e:	2100      	movs	r1, #0
 800c070:	f1bb 0f00 	cmp.w	fp, #0
 800c074:	db06      	blt.n	800c084 <__kernel_rem_pio2+0x504>
 800c076:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c07a:	f7f4 f907 	bl	800028c <__adddf3>
 800c07e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c082:	e7f5      	b.n	800c070 <__kernel_rem_pio2+0x4f0>
 800c084:	f1ba 0f00 	cmp.w	sl, #0
 800c088:	d003      	beq.n	800c092 <__kernel_rem_pio2+0x512>
 800c08a:	4602      	mov	r2, r0
 800c08c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c090:	e001      	b.n	800c096 <__kernel_rem_pio2+0x516>
 800c092:	4602      	mov	r2, r0
 800c094:	460b      	mov	r3, r1
 800c096:	9901      	ldr	r1, [sp, #4]
 800c098:	e9c1 2300 	strd	r2, r3, [r1]
 800c09c:	e0a7      	b.n	800c1ee <__kernel_rem_pio2+0x66e>
 800c09e:	2d00      	cmp	r5, #0
 800c0a0:	db05      	blt.n	800c0ae <__kernel_rem_pio2+0x52e>
 800c0a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c0a6:	f7f4 f8f1 	bl	800028c <__adddf3>
 800c0aa:	3d01      	subs	r5, #1
 800c0ac:	e7f7      	b.n	800c09e <__kernel_rem_pio2+0x51e>
 800c0ae:	f1ba 0f00 	cmp.w	sl, #0
 800c0b2:	d003      	beq.n	800c0bc <__kernel_rem_pio2+0x53c>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0ba:	e001      	b.n	800c0c0 <__kernel_rem_pio2+0x540>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	9c01      	ldr	r4, [sp, #4]
 800c0c2:	e9c4 2300 	strd	r2, r3, [r4]
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c0ce:	f7f4 f8db 	bl	8000288 <__aeabi_dsub>
 800c0d2:	ad4a      	add	r5, sp, #296	; 0x128
 800c0d4:	2401      	movs	r4, #1
 800c0d6:	45a3      	cmp	fp, r4
 800c0d8:	db05      	blt.n	800c0e6 <__kernel_rem_pio2+0x566>
 800c0da:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c0de:	f7f4 f8d5 	bl	800028c <__adddf3>
 800c0e2:	3401      	adds	r4, #1
 800c0e4:	e7f7      	b.n	800c0d6 <__kernel_rem_pio2+0x556>
 800c0e6:	f1ba 0f00 	cmp.w	sl, #0
 800c0ea:	d003      	beq.n	800c0f4 <__kernel_rem_pio2+0x574>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0f2:	e001      	b.n	800c0f8 <__kernel_rem_pio2+0x578>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	9901      	ldr	r1, [sp, #4]
 800c0fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c0fe:	e076      	b.n	800c1ee <__kernel_rem_pio2+0x66e>
 800c100:	f1b9 0f00 	cmp.w	r9, #0
 800c104:	dd20      	ble.n	800c148 <__kernel_rem_pio2+0x5c8>
 800c106:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
 800c10a:	ed98 7b02 	vldr	d7, [r8, #8]
 800c10e:	4630      	mov	r0, r6
 800c110:	ec53 2b17 	vmov	r2, r3, d7
 800c114:	4639      	mov	r1, r7
 800c116:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c11a:	f7f4 f8b7 	bl	800028c <__adddf3>
 800c11e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	4630      	mov	r0, r6
 800c128:	4639      	mov	r1, r7
 800c12a:	f7f4 f8ad 	bl	8000288 <__aeabi_dsub>
 800c12e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c132:	f7f4 f8ab 	bl	800028c <__adddf3>
 800c136:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c13a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c13e:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c142:	ed88 7b00 	vstr	d7, [r8]
 800c146:	e7db      	b.n	800c100 <__kernel_rem_pio2+0x580>
 800c148:	465e      	mov	r6, fp
 800c14a:	2e01      	cmp	r6, #1
 800c14c:	dd1f      	ble.n	800c18e <__kernel_rem_pio2+0x60e>
 800c14e:	e974 8902 	ldrd	r8, r9, [r4, #-8]!
 800c152:	ed94 7b02 	vldr	d7, [r4, #8]
 800c156:	4640      	mov	r0, r8
 800c158:	ec53 2b17 	vmov	r2, r3, d7
 800c15c:	4649      	mov	r1, r9
 800c15e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c162:	f7f4 f893 	bl	800028c <__adddf3>
 800c166:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	4640      	mov	r0, r8
 800c170:	4649      	mov	r1, r9
 800c172:	f7f4 f889 	bl	8000288 <__aeabi_dsub>
 800c176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c17a:	f7f4 f887 	bl	800028c <__adddf3>
 800c17e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c182:	3e01      	subs	r6, #1
 800c184:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c188:	ed84 7b00 	vstr	d7, [r4]
 800c18c:	e7dd      	b.n	800c14a <__kernel_rem_pio2+0x5ca>
 800c18e:	9c05      	ldr	r4, [sp, #20]
 800c190:	ab48      	add	r3, sp, #288	; 0x120
 800c192:	3408      	adds	r4, #8
 800c194:	441c      	add	r4, r3
 800c196:	2000      	movs	r0, #0
 800c198:	2100      	movs	r1, #0
 800c19a:	f1bb 0f01 	cmp.w	fp, #1
 800c19e:	dd06      	ble.n	800c1ae <__kernel_rem_pio2+0x62e>
 800c1a0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c1a4:	f7f4 f872 	bl	800028c <__adddf3>
 800c1a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c1ac:	e7f5      	b.n	800c19a <__kernel_rem_pio2+0x61a>
 800c1ae:	f1ba 0f00 	cmp.w	sl, #0
 800c1b2:	d10b      	bne.n	800c1cc <__kernel_rem_pio2+0x64c>
 800c1b4:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 800c1b8:	9c01      	ldr	r4, [sp, #4]
 800c1ba:	e9c4 2300 	strd	r2, r3, [r4]
 800c1be:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800c1c2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800c1c6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c1ca:	e010      	b.n	800c1ee <__kernel_rem_pio2+0x66e>
 800c1cc:	9a01      	ldr	r2, [sp, #4]
 800c1ce:	682b      	ldr	r3, [r5, #0]
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	686b      	ldr	r3, [r5, #4]
 800c1d4:	6110      	str	r0, [r2, #16]
 800c1d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c1da:	6053      	str	r3, [r2, #4]
 800c1dc:	68ab      	ldr	r3, [r5, #8]
 800c1de:	6093      	str	r3, [r2, #8]
 800c1e0:	68eb      	ldr	r3, [r5, #12]
 800c1e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c1e6:	60d3      	str	r3, [r2, #12]
 800c1e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1ec:	6153      	str	r3, [r2, #20]
 800c1ee:	9b04      	ldr	r3, [sp, #16]
 800c1f0:	f003 0007 	and.w	r0, r3, #7
 800c1f4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fc:	f3af 8000 	nop.w
 800c200:	00000000 	.word	0x00000000
 800c204:	3ff00000 	.word	0x3ff00000
	...
 800c210:	41700000 	.word	0x41700000
 800c214:	3e700000 	.word	0x3e700000
 800c218:	0800d0c8 	.word	0x0800d0c8
 800c21c:	00000000 	.word	0x00000000

0800c220 <__kernel_sin>:
 800c220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	ec55 4b10 	vmov	r4, r5, d0
 800c228:	b085      	sub	sp, #20
 800c22a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c22e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c232:	ed8d 1b00 	vstr	d1, [sp]
 800c236:	9002      	str	r0, [sp, #8]
 800c238:	da07      	bge.n	800c24a <__kernel_sin+0x2a>
 800c23a:	ee10 0a10 	vmov	r0, s0
 800c23e:	4629      	mov	r1, r5
 800c240:	f7f4 fc86 	bl	8000b50 <__aeabi_d2iz>
 800c244:	2800      	cmp	r0, #0
 800c246:	f000 8081 	beq.w	800c34c <__kernel_sin+0x12c>
 800c24a:	4622      	mov	r2, r4
 800c24c:	462b      	mov	r3, r5
 800c24e:	4620      	mov	r0, r4
 800c250:	4629      	mov	r1, r5
 800c252:	f7f4 f9cd 	bl	80005f0 <__aeabi_dmul>
 800c256:	4682      	mov	sl, r0
 800c258:	468b      	mov	fp, r1
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	4620      	mov	r0, r4
 800c260:	4629      	mov	r1, r5
 800c262:	f7f4 f9c5 	bl	80005f0 <__aeabi_dmul>
 800c266:	a341      	add	r3, pc, #260	; (adr r3, 800c36c <__kernel_sin+0x14c>)
 800c268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26c:	4680      	mov	r8, r0
 800c26e:	4689      	mov	r9, r1
 800c270:	4650      	mov	r0, sl
 800c272:	4659      	mov	r1, fp
 800c274:	f7f4 f9bc 	bl	80005f0 <__aeabi_dmul>
 800c278:	a33e      	add	r3, pc, #248	; (adr r3, 800c374 <__kernel_sin+0x154>)
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	f7f4 f803 	bl	8000288 <__aeabi_dsub>
 800c282:	4652      	mov	r2, sl
 800c284:	465b      	mov	r3, fp
 800c286:	f7f4 f9b3 	bl	80005f0 <__aeabi_dmul>
 800c28a:	a33c      	add	r3, pc, #240	; (adr r3, 800c37c <__kernel_sin+0x15c>)
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	f7f3 fffc 	bl	800028c <__adddf3>
 800c294:	4652      	mov	r2, sl
 800c296:	465b      	mov	r3, fp
 800c298:	f7f4 f9aa 	bl	80005f0 <__aeabi_dmul>
 800c29c:	a339      	add	r3, pc, #228	; (adr r3, 800c384 <__kernel_sin+0x164>)
 800c29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a2:	f7f3 fff1 	bl	8000288 <__aeabi_dsub>
 800c2a6:	4652      	mov	r2, sl
 800c2a8:	465b      	mov	r3, fp
 800c2aa:	f7f4 f9a1 	bl	80005f0 <__aeabi_dmul>
 800c2ae:	a337      	add	r3, pc, #220	; (adr r3, 800c38c <__kernel_sin+0x16c>)
 800c2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b4:	f7f3 ffea 	bl	800028c <__adddf3>
 800c2b8:	9b02      	ldr	r3, [sp, #8]
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	460f      	mov	r7, r1
 800c2be:	b99b      	cbnz	r3, 800c2e8 <__kernel_sin+0xc8>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	4650      	mov	r0, sl
 800c2c6:	4659      	mov	r1, fp
 800c2c8:	f7f4 f992 	bl	80005f0 <__aeabi_dmul>
 800c2cc:	a324      	add	r3, pc, #144	; (adr r3, 800c360 <__kernel_sin+0x140>)
 800c2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d2:	f7f3 ffd9 	bl	8000288 <__aeabi_dsub>
 800c2d6:	4642      	mov	r2, r8
 800c2d8:	464b      	mov	r3, r9
 800c2da:	f7f4 f989 	bl	80005f0 <__aeabi_dmul>
 800c2de:	4622      	mov	r2, r4
 800c2e0:	462b      	mov	r3, r5
 800c2e2:	f7f3 ffd3 	bl	800028c <__adddf3>
 800c2e6:	e033      	b.n	800c350 <__kernel_sin+0x130>
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	4b1f      	ldr	r3, [pc, #124]	; (800c368 <__kernel_sin+0x148>)
 800c2ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2f0:	f7f4 f97e 	bl	80005f0 <__aeabi_dmul>
 800c2f4:	4632      	mov	r2, r6
 800c2f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2fa:	463b      	mov	r3, r7
 800c2fc:	4640      	mov	r0, r8
 800c2fe:	4649      	mov	r1, r9
 800c300:	f7f4 f976 	bl	80005f0 <__aeabi_dmul>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c30c:	f7f3 ffbc 	bl	8000288 <__aeabi_dsub>
 800c310:	4652      	mov	r2, sl
 800c312:	465b      	mov	r3, fp
 800c314:	f7f4 f96c 	bl	80005f0 <__aeabi_dmul>
 800c318:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c31c:	f7f3 ffb4 	bl	8000288 <__aeabi_dsub>
 800c320:	a30f      	add	r3, pc, #60	; (adr r3, 800c360 <__kernel_sin+0x140>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	4606      	mov	r6, r0
 800c328:	460f      	mov	r7, r1
 800c32a:	4640      	mov	r0, r8
 800c32c:	4649      	mov	r1, r9
 800c32e:	f7f4 f95f 	bl	80005f0 <__aeabi_dmul>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	4630      	mov	r0, r6
 800c338:	4639      	mov	r1, r7
 800c33a:	f7f3 ffa7 	bl	800028c <__adddf3>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4620      	mov	r0, r4
 800c344:	4629      	mov	r1, r5
 800c346:	f7f3 ff9f 	bl	8000288 <__aeabi_dsub>
 800c34a:	e001      	b.n	800c350 <__kernel_sin+0x130>
 800c34c:	4620      	mov	r0, r4
 800c34e:	4629      	mov	r1, r5
 800c350:	ec41 0b10 	vmov	d0, r0, r1
 800c354:	b005      	add	sp, #20
 800c356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35a:	bf00      	nop
 800c35c:	f3af 8000 	nop.w
 800c360:	55555549 	.word	0x55555549
 800c364:	3fc55555 	.word	0x3fc55555
 800c368:	3fe00000 	.word	0x3fe00000
 800c36c:	5acfd57c 	.word	0x5acfd57c
 800c370:	3de5d93a 	.word	0x3de5d93a
 800c374:	8a2b9ceb 	.word	0x8a2b9ceb
 800c378:	3e5ae5e6 	.word	0x3e5ae5e6
 800c37c:	57b1fe7d 	.word	0x57b1fe7d
 800c380:	3ec71de3 	.word	0x3ec71de3
 800c384:	19c161d5 	.word	0x19c161d5
 800c388:	3f2a01a0 	.word	0x3f2a01a0
 800c38c:	1110f8a6 	.word	0x1110f8a6
 800c390:	3f811111 	.word	0x3f811111
 800c394:	00000000 	.word	0x00000000

0800c398 <floor>:
 800c398:	ec51 0b10 	vmov	r0, r1, d0
 800c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c3a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c3a8:	2e13      	cmp	r6, #19
 800c3aa:	ee10 8a10 	vmov	r8, s0
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	ee10 5a10 	vmov	r5, s0
 800c3b4:	dc33      	bgt.n	800c41e <floor+0x86>
 800c3b6:	2e00      	cmp	r6, #0
 800c3b8:	da16      	bge.n	800c3e8 <floor+0x50>
 800c3ba:	a335      	add	r3, pc, #212	; (adr r3, 800c490 <floor+0xf8>)
 800c3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c0:	f7f3 ff64 	bl	800028c <__adddf3>
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	f7f4 fba2 	bl	8000b10 <__aeabi_dcmpgt>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d057      	beq.n	800c480 <floor+0xe8>
 800c3d0:	2c00      	cmp	r4, #0
 800c3d2:	da53      	bge.n	800c47c <floor+0xe4>
 800c3d4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c3d8:	ea53 0308 	orrs.w	r3, r3, r8
 800c3dc:	4b2e      	ldr	r3, [pc, #184]	; (800c498 <floor+0x100>)
 800c3de:	f04f 0500 	mov.w	r5, #0
 800c3e2:	bf18      	it	ne
 800c3e4:	461c      	movne	r4, r3
 800c3e6:	e04b      	b.n	800c480 <floor+0xe8>
 800c3e8:	4f2c      	ldr	r7, [pc, #176]	; (800c49c <floor+0x104>)
 800c3ea:	4137      	asrs	r7, r6
 800c3ec:	ea01 0307 	and.w	r3, r1, r7
 800c3f0:	4303      	orrs	r3, r0
 800c3f2:	d047      	beq.n	800c484 <floor+0xec>
 800c3f4:	a326      	add	r3, pc, #152	; (adr r3, 800c490 <floor+0xf8>)
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	f7f3 ff47 	bl	800028c <__adddf3>
 800c3fe:	2200      	movs	r2, #0
 800c400:	2300      	movs	r3, #0
 800c402:	f7f4 fb85 	bl	8000b10 <__aeabi_dcmpgt>
 800c406:	b3d8      	cbz	r0, 800c480 <floor+0xe8>
 800c408:	2c00      	cmp	r4, #0
 800c40a:	bfbe      	ittt	lt
 800c40c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c410:	fa43 f606 	asrlt.w	r6, r3, r6
 800c414:	19a4      	addlt	r4, r4, r6
 800c416:	ea24 0407 	bic.w	r4, r4, r7
 800c41a:	2500      	movs	r5, #0
 800c41c:	e030      	b.n	800c480 <floor+0xe8>
 800c41e:	2e33      	cmp	r6, #51	; 0x33
 800c420:	dd08      	ble.n	800c434 <floor+0x9c>
 800c422:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c426:	d12d      	bne.n	800c484 <floor+0xec>
 800c428:	ee10 2a10 	vmov	r2, s0
 800c42c:	460b      	mov	r3, r1
 800c42e:	f7f3 ff2d 	bl	800028c <__adddf3>
 800c432:	e027      	b.n	800c484 <floor+0xec>
 800c434:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c438:	f04f 33ff 	mov.w	r3, #4294967295
 800c43c:	fa23 f707 	lsr.w	r7, r3, r7
 800c440:	4238      	tst	r0, r7
 800c442:	d01f      	beq.n	800c484 <floor+0xec>
 800c444:	a312      	add	r3, pc, #72	; (adr r3, 800c490 <floor+0xf8>)
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	f7f3 ff1f 	bl	800028c <__adddf3>
 800c44e:	2200      	movs	r2, #0
 800c450:	2300      	movs	r3, #0
 800c452:	f7f4 fb5d 	bl	8000b10 <__aeabi_dcmpgt>
 800c456:	b198      	cbz	r0, 800c480 <floor+0xe8>
 800c458:	2c00      	cmp	r4, #0
 800c45a:	da0c      	bge.n	800c476 <floor+0xde>
 800c45c:	2e14      	cmp	r6, #20
 800c45e:	d101      	bne.n	800c464 <floor+0xcc>
 800c460:	3401      	adds	r4, #1
 800c462:	e008      	b.n	800c476 <floor+0xde>
 800c464:	2301      	movs	r3, #1
 800c466:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c46a:	fa03 f606 	lsl.w	r6, r3, r6
 800c46e:	4435      	add	r5, r6
 800c470:	45a8      	cmp	r8, r5
 800c472:	bf88      	it	hi
 800c474:	18e4      	addhi	r4, r4, r3
 800c476:	ea25 0507 	bic.w	r5, r5, r7
 800c47a:	e001      	b.n	800c480 <floor+0xe8>
 800c47c:	2500      	movs	r5, #0
 800c47e:	462c      	mov	r4, r5
 800c480:	4621      	mov	r1, r4
 800c482:	4628      	mov	r0, r5
 800c484:	ec41 0b10 	vmov	d0, r0, r1
 800c488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c48c:	f3af 8000 	nop.w
 800c490:	8800759c 	.word	0x8800759c
 800c494:	7e37e43c 	.word	0x7e37e43c
 800c498:	bff00000 	.word	0xbff00000
 800c49c:	000fffff 	.word	0x000fffff

0800c4a0 <scalbn>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	ec55 4b10 	vmov	r4, r5, d0
 800c4a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c4aa:	4606      	mov	r6, r0
 800c4ac:	462b      	mov	r3, r5
 800c4ae:	b9a2      	cbnz	r2, 800c4da <scalbn+0x3a>
 800c4b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c4b4:	4323      	orrs	r3, r4
 800c4b6:	d059      	beq.n	800c56c <scalbn+0xcc>
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	4b33      	ldr	r3, [pc, #204]	; (800c588 <scalbn+0xe8>)
 800c4bc:	4629      	mov	r1, r5
 800c4be:	ee10 0a10 	vmov	r0, s0
 800c4c2:	f7f4 f895 	bl	80005f0 <__aeabi_dmul>
 800c4c6:	4a31      	ldr	r2, [pc, #196]	; (800c58c <scalbn+0xec>)
 800c4c8:	4296      	cmp	r6, r2
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	460d      	mov	r5, r1
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	da0f      	bge.n	800c4f2 <scalbn+0x52>
 800c4d2:	a329      	add	r3, pc, #164	; (adr r3, 800c578 <scalbn+0xd8>)
 800c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d8:	e045      	b.n	800c566 <scalbn+0xc6>
 800c4da:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c4de:	428a      	cmp	r2, r1
 800c4e0:	d10a      	bne.n	800c4f8 <scalbn+0x58>
 800c4e2:	ee10 2a10 	vmov	r2, s0
 800c4e6:	462b      	mov	r3, r5
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	f7f3 fece 	bl	800028c <__adddf3>
 800c4f0:	e03e      	b.n	800c570 <scalbn+0xd0>
 800c4f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4f6:	3a36      	subs	r2, #54	; 0x36
 800c4f8:	4432      	add	r2, r6
 800c4fa:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c4fe:	428a      	cmp	r2, r1
 800c500:	dd02      	ble.n	800c508 <scalbn+0x68>
 800c502:	ec45 4b11 	vmov	d1, r4, r5
 800c506:	e011      	b.n	800c52c <scalbn+0x8c>
 800c508:	2a00      	cmp	r2, #0
 800c50a:	dd06      	ble.n	800c51a <scalbn+0x7a>
 800c50c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c510:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c514:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c518:	e028      	b.n	800c56c <scalbn+0xcc>
 800c51a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c51e:	da17      	bge.n	800c550 <scalbn+0xb0>
 800c520:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c524:	429e      	cmp	r6, r3
 800c526:	ec45 4b11 	vmov	d1, r4, r5
 800c52a:	dd07      	ble.n	800c53c <scalbn+0x9c>
 800c52c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800c580 <scalbn+0xe0>
 800c530:	f000 f830 	bl	800c594 <copysign>
 800c534:	a312      	add	r3, pc, #72	; (adr r3, 800c580 <scalbn+0xe0>)
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	e006      	b.n	800c54a <scalbn+0xaa>
 800c53c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c578 <scalbn+0xd8>
 800c540:	f000 f828 	bl	800c594 <copysign>
 800c544:	a30c      	add	r3, pc, #48	; (adr r3, 800c578 <scalbn+0xd8>)
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	ec51 0b10 	vmov	r0, r1, d0
 800c54e:	e00a      	b.n	800c566 <scalbn+0xc6>
 800c550:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c554:	3236      	adds	r2, #54	; 0x36
 800c556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c55a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c55e:	4b0c      	ldr	r3, [pc, #48]	; (800c590 <scalbn+0xf0>)
 800c560:	4620      	mov	r0, r4
 800c562:	4629      	mov	r1, r5
 800c564:	2200      	movs	r2, #0
 800c566:	f7f4 f843 	bl	80005f0 <__aeabi_dmul>
 800c56a:	e001      	b.n	800c570 <scalbn+0xd0>
 800c56c:	4620      	mov	r0, r4
 800c56e:	4629      	mov	r1, r5
 800c570:	ec41 0b10 	vmov	d0, r0, r1
 800c574:	bd70      	pop	{r4, r5, r6, pc}
 800c576:	bf00      	nop
 800c578:	c2f8f359 	.word	0xc2f8f359
 800c57c:	01a56e1f 	.word	0x01a56e1f
 800c580:	8800759c 	.word	0x8800759c
 800c584:	7e37e43c 	.word	0x7e37e43c
 800c588:	43500000 	.word	0x43500000
 800c58c:	ffff3cb0 	.word	0xffff3cb0
 800c590:	3c900000 	.word	0x3c900000

0800c594 <copysign>:
 800c594:	ec53 2b10 	vmov	r2, r3, d0
 800c598:	ee11 0a90 	vmov	r0, s3
 800c59c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c5a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c5a4:	ea41 0300 	orr.w	r3, r1, r0
 800c5a8:	ec43 2b10 	vmov	d0, r2, r3
 800c5ac:	4770      	bx	lr
	...

0800c5b0 <_close>:
 800c5b0:	4b02      	ldr	r3, [pc, #8]	; (800c5bc <_close+0xc>)
 800c5b2:	2258      	movs	r2, #88	; 0x58
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ba:	4770      	bx	lr
 800c5bc:	2000076c 	.word	0x2000076c

0800c5c0 <_fstat>:
 800c5c0:	4b02      	ldr	r3, [pc, #8]	; (800c5cc <_fstat+0xc>)
 800c5c2:	2258      	movs	r2, #88	; 0x58
 800c5c4:	601a      	str	r2, [r3, #0]
 800c5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ca:	4770      	bx	lr
 800c5cc:	2000076c 	.word	0x2000076c

0800c5d0 <_getpid>:
 800c5d0:	4b02      	ldr	r3, [pc, #8]	; (800c5dc <_getpid+0xc>)
 800c5d2:	2258      	movs	r2, #88	; 0x58
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5da:	4770      	bx	lr
 800c5dc:	2000076c 	.word	0x2000076c

0800c5e0 <_gettimeofday>:
 800c5e0:	4b02      	ldr	r3, [pc, #8]	; (800c5ec <_gettimeofday+0xc>)
 800c5e2:	2258      	movs	r2, #88	; 0x58
 800c5e4:	601a      	str	r2, [r3, #0]
 800c5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ea:	4770      	bx	lr
 800c5ec:	2000076c 	.word	0x2000076c

0800c5f0 <_isatty>:
 800c5f0:	4b02      	ldr	r3, [pc, #8]	; (800c5fc <_isatty+0xc>)
 800c5f2:	2258      	movs	r2, #88	; 0x58
 800c5f4:	601a      	str	r2, [r3, #0]
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	2000076c 	.word	0x2000076c

0800c600 <_kill>:
 800c600:	4b02      	ldr	r3, [pc, #8]	; (800c60c <_kill+0xc>)
 800c602:	2258      	movs	r2, #88	; 0x58
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	f04f 30ff 	mov.w	r0, #4294967295
 800c60a:	4770      	bx	lr
 800c60c:	2000076c 	.word	0x2000076c

0800c610 <_lseek>:
 800c610:	4b02      	ldr	r3, [pc, #8]	; (800c61c <_lseek+0xc>)
 800c612:	2258      	movs	r2, #88	; 0x58
 800c614:	601a      	str	r2, [r3, #0]
 800c616:	f04f 30ff 	mov.w	r0, #4294967295
 800c61a:	4770      	bx	lr
 800c61c:	2000076c 	.word	0x2000076c

0800c620 <_read>:
 800c620:	4b02      	ldr	r3, [pc, #8]	; (800c62c <_read+0xc>)
 800c622:	2258      	movs	r2, #88	; 0x58
 800c624:	601a      	str	r2, [r3, #0]
 800c626:	f04f 30ff 	mov.w	r0, #4294967295
 800c62a:	4770      	bx	lr
 800c62c:	2000076c 	.word	0x2000076c

0800c630 <_sbrk>:
 800c630:	4b04      	ldr	r3, [pc, #16]	; (800c644 <_sbrk+0x14>)
 800c632:	6819      	ldr	r1, [r3, #0]
 800c634:	4602      	mov	r2, r0
 800c636:	b909      	cbnz	r1, 800c63c <_sbrk+0xc>
 800c638:	4903      	ldr	r1, [pc, #12]	; (800c648 <_sbrk+0x18>)
 800c63a:	6019      	str	r1, [r3, #0]
 800c63c:	6818      	ldr	r0, [r3, #0]
 800c63e:	4402      	add	r2, r0
 800c640:	601a      	str	r2, [r3, #0]
 800c642:	4770      	bx	lr
 800c644:	200005f8 	.word	0x200005f8
 800c648:	20000770 	.word	0x20000770

0800c64c <_exit>:
 800c64c:	e7fe      	b.n	800c64c <_exit>
	...

0800c650 <_init>:
 800c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c652:	bf00      	nop
 800c654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c656:	bc08      	pop	{r3}
 800c658:	469e      	mov	lr, r3
 800c65a:	4770      	bx	lr

0800c65c <_fini>:
 800c65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65e:	bf00      	nop
 800c660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c662:	bc08      	pop	{r3}
 800c664:	469e      	mov	lr, r3
 800c666:	4770      	bx	lr
